// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iterm-api.pb

#ifndef GOOGLE_PROTOBUF_INCLUDED_iterm_2dapi_2epb
#define GOOGLE_PROTOBUF_INCLUDED_iterm_2dapi_2epb

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_iterm_2dapi_2epb
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_iterm_2dapi_2epb {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[169]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_iterm_2dapi_2epb;
namespace iterm2 {
class ActivateRequest;
struct ActivateRequestDefaultTypeInternal;
extern ActivateRequestDefaultTypeInternal _ActivateRequest_default_instance_;
class ActivateRequest_App;
struct ActivateRequest_AppDefaultTypeInternal;
extern ActivateRequest_AppDefaultTypeInternal _ActivateRequest_App_default_instance_;
class ActivateResponse;
struct ActivateResponseDefaultTypeInternal;
extern ActivateResponseDefaultTypeInternal _ActivateResponse_default_instance_;
class BroadcastDomain;
struct BroadcastDomainDefaultTypeInternal;
extern BroadcastDomainDefaultTypeInternal _BroadcastDomain_default_instance_;
class BroadcastDomainsChangedNotification;
struct BroadcastDomainsChangedNotificationDefaultTypeInternal;
extern BroadcastDomainsChangedNotificationDefaultTypeInternal _BroadcastDomainsChangedNotification_default_instance_;
class ClientOriginatedMessage;
struct ClientOriginatedMessageDefaultTypeInternal;
extern ClientOriginatedMessageDefaultTypeInternal _ClientOriginatedMessage_default_instance_;
class CloseRequest;
struct CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class CloseRequest_CloseSessions;
struct CloseRequest_CloseSessionsDefaultTypeInternal;
extern CloseRequest_CloseSessionsDefaultTypeInternal _CloseRequest_CloseSessions_default_instance_;
class CloseRequest_CloseTabs;
struct CloseRequest_CloseTabsDefaultTypeInternal;
extern CloseRequest_CloseTabsDefaultTypeInternal _CloseRequest_CloseTabs_default_instance_;
class CloseRequest_CloseWindows;
struct CloseRequest_CloseWindowsDefaultTypeInternal;
extern CloseRequest_CloseWindowsDefaultTypeInternal _CloseRequest_CloseWindows_default_instance_;
class CloseResponse;
struct CloseResponseDefaultTypeInternal;
extern CloseResponseDefaultTypeInternal _CloseResponse_default_instance_;
class CodePointsPerCell;
struct CodePointsPerCellDefaultTypeInternal;
extern CodePointsPerCellDefaultTypeInternal _CodePointsPerCell_default_instance_;
class ColorPresetRequest;
struct ColorPresetRequestDefaultTypeInternal;
extern ColorPresetRequestDefaultTypeInternal _ColorPresetRequest_default_instance_;
class ColorPresetRequest_GetPreset;
struct ColorPresetRequest_GetPresetDefaultTypeInternal;
extern ColorPresetRequest_GetPresetDefaultTypeInternal _ColorPresetRequest_GetPreset_default_instance_;
class ColorPresetRequest_ListPresets;
struct ColorPresetRequest_ListPresetsDefaultTypeInternal;
extern ColorPresetRequest_ListPresetsDefaultTypeInternal _ColorPresetRequest_ListPresets_default_instance_;
class ColorPresetResponse;
struct ColorPresetResponseDefaultTypeInternal;
extern ColorPresetResponseDefaultTypeInternal _ColorPresetResponse_default_instance_;
class ColorPresetResponse_GetPreset;
struct ColorPresetResponse_GetPresetDefaultTypeInternal;
extern ColorPresetResponse_GetPresetDefaultTypeInternal _ColorPresetResponse_GetPreset_default_instance_;
class ColorPresetResponse_GetPreset_ColorSetting;
struct ColorPresetResponse_GetPreset_ColorSettingDefaultTypeInternal;
extern ColorPresetResponse_GetPreset_ColorSettingDefaultTypeInternal _ColorPresetResponse_GetPreset_ColorSetting_default_instance_;
class ColorPresetResponse_ListPresets;
struct ColorPresetResponse_ListPresetsDefaultTypeInternal;
extern ColorPresetResponse_ListPresetsDefaultTypeInternal _ColorPresetResponse_ListPresets_default_instance_;
class Coord;
struct CoordDefaultTypeInternal;
extern CoordDefaultTypeInternal _Coord_default_instance_;
class CoordRange;
struct CoordRangeDefaultTypeInternal;
extern CoordRangeDefaultTypeInternal _CoordRange_default_instance_;
class CreateTabRequest;
struct CreateTabRequestDefaultTypeInternal;
extern CreateTabRequestDefaultTypeInternal _CreateTabRequest_default_instance_;
class CreateTabResponse;
struct CreateTabResponseDefaultTypeInternal;
extern CreateTabResponseDefaultTypeInternal _CreateTabResponse_default_instance_;
class CustomEscapeSequenceNotification;
struct CustomEscapeSequenceNotificationDefaultTypeInternal;
extern CustomEscapeSequenceNotificationDefaultTypeInternal _CustomEscapeSequenceNotification_default_instance_;
class FocusChangedNotification;
struct FocusChangedNotificationDefaultTypeInternal;
extern FocusChangedNotificationDefaultTypeInternal _FocusChangedNotification_default_instance_;
class FocusChangedNotification_Window;
struct FocusChangedNotification_WindowDefaultTypeInternal;
extern FocusChangedNotification_WindowDefaultTypeInternal _FocusChangedNotification_Window_default_instance_;
class FocusRequest;
struct FocusRequestDefaultTypeInternal;
extern FocusRequestDefaultTypeInternal _FocusRequest_default_instance_;
class FocusResponse;
struct FocusResponseDefaultTypeInternal;
extern FocusResponseDefaultTypeInternal _FocusResponse_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GetBroadcastDomainsRequest;
struct GetBroadcastDomainsRequestDefaultTypeInternal;
extern GetBroadcastDomainsRequestDefaultTypeInternal _GetBroadcastDomainsRequest_default_instance_;
class GetBroadcastDomainsResponse;
struct GetBroadcastDomainsResponseDefaultTypeInternal;
extern GetBroadcastDomainsResponseDefaultTypeInternal _GetBroadcastDomainsResponse_default_instance_;
class GetBufferRequest;
struct GetBufferRequestDefaultTypeInternal;
extern GetBufferRequestDefaultTypeInternal _GetBufferRequest_default_instance_;
class GetBufferResponse;
struct GetBufferResponseDefaultTypeInternal;
extern GetBufferResponseDefaultTypeInternal _GetBufferResponse_default_instance_;
class GetProfilePropertyRequest;
struct GetProfilePropertyRequestDefaultTypeInternal;
extern GetProfilePropertyRequestDefaultTypeInternal _GetProfilePropertyRequest_default_instance_;
class GetProfilePropertyResponse;
struct GetProfilePropertyResponseDefaultTypeInternal;
extern GetProfilePropertyResponseDefaultTypeInternal _GetProfilePropertyResponse_default_instance_;
class GetPromptRequest;
struct GetPromptRequestDefaultTypeInternal;
extern GetPromptRequestDefaultTypeInternal _GetPromptRequest_default_instance_;
class GetPromptResponse;
struct GetPromptResponseDefaultTypeInternal;
extern GetPromptResponseDefaultTypeInternal _GetPromptResponse_default_instance_;
class GetPropertyRequest;
struct GetPropertyRequestDefaultTypeInternal;
extern GetPropertyRequestDefaultTypeInternal _GetPropertyRequest_default_instance_;
class GetPropertyResponse;
struct GetPropertyResponseDefaultTypeInternal;
extern GetPropertyResponseDefaultTypeInternal _GetPropertyResponse_default_instance_;
class InjectRequest;
struct InjectRequestDefaultTypeInternal;
extern InjectRequestDefaultTypeInternal _InjectRequest_default_instance_;
class InjectResponse;
struct InjectResponseDefaultTypeInternal;
extern InjectResponseDefaultTypeInternal _InjectResponse_default_instance_;
class InvokeFunctionRequest;
struct InvokeFunctionRequestDefaultTypeInternal;
extern InvokeFunctionRequestDefaultTypeInternal _InvokeFunctionRequest_default_instance_;
class InvokeFunctionRequest_App;
struct InvokeFunctionRequest_AppDefaultTypeInternal;
extern InvokeFunctionRequest_AppDefaultTypeInternal _InvokeFunctionRequest_App_default_instance_;
class InvokeFunctionRequest_Method;
struct InvokeFunctionRequest_MethodDefaultTypeInternal;
extern InvokeFunctionRequest_MethodDefaultTypeInternal _InvokeFunctionRequest_Method_default_instance_;
class InvokeFunctionRequest_Session;
struct InvokeFunctionRequest_SessionDefaultTypeInternal;
extern InvokeFunctionRequest_SessionDefaultTypeInternal _InvokeFunctionRequest_Session_default_instance_;
class InvokeFunctionRequest_Tab;
struct InvokeFunctionRequest_TabDefaultTypeInternal;
extern InvokeFunctionRequest_TabDefaultTypeInternal _InvokeFunctionRequest_Tab_default_instance_;
class InvokeFunctionRequest_Window;
struct InvokeFunctionRequest_WindowDefaultTypeInternal;
extern InvokeFunctionRequest_WindowDefaultTypeInternal _InvokeFunctionRequest_Window_default_instance_;
class InvokeFunctionResponse;
struct InvokeFunctionResponseDefaultTypeInternal;
extern InvokeFunctionResponseDefaultTypeInternal _InvokeFunctionResponse_default_instance_;
class InvokeFunctionResponse_Error;
struct InvokeFunctionResponse_ErrorDefaultTypeInternal;
extern InvokeFunctionResponse_ErrorDefaultTypeInternal _InvokeFunctionResponse_Error_default_instance_;
class InvokeFunctionResponse_Success;
struct InvokeFunctionResponse_SuccessDefaultTypeInternal;
extern InvokeFunctionResponse_SuccessDefaultTypeInternal _InvokeFunctionResponse_Success_default_instance_;
class KeystrokeFilterRequest;
struct KeystrokeFilterRequestDefaultTypeInternal;
extern KeystrokeFilterRequestDefaultTypeInternal _KeystrokeFilterRequest_default_instance_;
class KeystrokeMonitorRequest;
struct KeystrokeMonitorRequestDefaultTypeInternal;
extern KeystrokeMonitorRequestDefaultTypeInternal _KeystrokeMonitorRequest_default_instance_;
class KeystrokeNotification;
struct KeystrokeNotificationDefaultTypeInternal;
extern KeystrokeNotificationDefaultTypeInternal _KeystrokeNotification_default_instance_;
class KeystrokePattern;
struct KeystrokePatternDefaultTypeInternal;
extern KeystrokePatternDefaultTypeInternal _KeystrokePattern_default_instance_;
class LayoutChangedNotification;
struct LayoutChangedNotificationDefaultTypeInternal;
extern LayoutChangedNotificationDefaultTypeInternal _LayoutChangedNotification_default_instance_;
class LineContents;
struct LineContentsDefaultTypeInternal;
extern LineContentsDefaultTypeInternal _LineContents_default_instance_;
class LineRange;
struct LineRangeDefaultTypeInternal;
extern LineRangeDefaultTypeInternal _LineRange_default_instance_;
class ListProfilesRequest;
struct ListProfilesRequestDefaultTypeInternal;
extern ListProfilesRequestDefaultTypeInternal _ListProfilesRequest_default_instance_;
class ListProfilesResponse;
struct ListProfilesResponseDefaultTypeInternal;
extern ListProfilesResponseDefaultTypeInternal _ListProfilesResponse_default_instance_;
class ListProfilesResponse_Profile;
struct ListProfilesResponse_ProfileDefaultTypeInternal;
extern ListProfilesResponse_ProfileDefaultTypeInternal _ListProfilesResponse_Profile_default_instance_;
class ListPromptsRequest;
struct ListPromptsRequestDefaultTypeInternal;
extern ListPromptsRequestDefaultTypeInternal _ListPromptsRequest_default_instance_;
class ListPromptsResponse;
struct ListPromptsResponseDefaultTypeInternal;
extern ListPromptsResponseDefaultTypeInternal _ListPromptsResponse_default_instance_;
class ListSessionsRequest;
struct ListSessionsRequestDefaultTypeInternal;
extern ListSessionsRequestDefaultTypeInternal _ListSessionsRequest_default_instance_;
class ListSessionsResponse;
struct ListSessionsResponseDefaultTypeInternal;
extern ListSessionsResponseDefaultTypeInternal _ListSessionsResponse_default_instance_;
class ListSessionsResponse_Tab;
struct ListSessionsResponse_TabDefaultTypeInternal;
extern ListSessionsResponse_TabDefaultTypeInternal _ListSessionsResponse_Tab_default_instance_;
class ListSessionsResponse_Window;
struct ListSessionsResponse_WindowDefaultTypeInternal;
extern ListSessionsResponse_WindowDefaultTypeInternal _ListSessionsResponse_Window_default_instance_;
class LocationChangeNotification;
struct LocationChangeNotificationDefaultTypeInternal;
extern LocationChangeNotificationDefaultTypeInternal _LocationChangeNotification_default_instance_;
class MenuItemRequest;
struct MenuItemRequestDefaultTypeInternal;
extern MenuItemRequestDefaultTypeInternal _MenuItemRequest_default_instance_;
class MenuItemResponse;
struct MenuItemResponseDefaultTypeInternal;
extern MenuItemResponseDefaultTypeInternal _MenuItemResponse_default_instance_;
class NewSessionNotification;
struct NewSessionNotificationDefaultTypeInternal;
extern NewSessionNotificationDefaultTypeInternal _NewSessionNotification_default_instance_;
class Notification;
struct NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class NotificationRequest;
struct NotificationRequestDefaultTypeInternal;
extern NotificationRequestDefaultTypeInternal _NotificationRequest_default_instance_;
class NotificationResponse;
struct NotificationResponseDefaultTypeInternal;
extern NotificationResponseDefaultTypeInternal _NotificationResponse_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class PreferencesRequest;
struct PreferencesRequestDefaultTypeInternal;
extern PreferencesRequestDefaultTypeInternal _PreferencesRequest_default_instance_;
class PreferencesRequest_Request;
struct PreferencesRequest_RequestDefaultTypeInternal;
extern PreferencesRequest_RequestDefaultTypeInternal _PreferencesRequest_Request_default_instance_;
class PreferencesRequest_Request_GetDefaultProfile;
struct PreferencesRequest_Request_GetDefaultProfileDefaultTypeInternal;
extern PreferencesRequest_Request_GetDefaultProfileDefaultTypeInternal _PreferencesRequest_Request_GetDefaultProfile_default_instance_;
class PreferencesRequest_Request_GetPreference;
struct PreferencesRequest_Request_GetPreferenceDefaultTypeInternal;
extern PreferencesRequest_Request_GetPreferenceDefaultTypeInternal _PreferencesRequest_Request_GetPreference_default_instance_;
class PreferencesRequest_Request_SetDefaultProfile;
struct PreferencesRequest_Request_SetDefaultProfileDefaultTypeInternal;
extern PreferencesRequest_Request_SetDefaultProfileDefaultTypeInternal _PreferencesRequest_Request_SetDefaultProfile_default_instance_;
class PreferencesRequest_Request_SetPreference;
struct PreferencesRequest_Request_SetPreferenceDefaultTypeInternal;
extern PreferencesRequest_Request_SetPreferenceDefaultTypeInternal _PreferencesRequest_Request_SetPreference_default_instance_;
class PreferencesResponse;
struct PreferencesResponseDefaultTypeInternal;
extern PreferencesResponseDefaultTypeInternal _PreferencesResponse_default_instance_;
class PreferencesResponse_Result;
struct PreferencesResponse_ResultDefaultTypeInternal;
extern PreferencesResponse_ResultDefaultTypeInternal _PreferencesResponse_Result_default_instance_;
class PreferencesResponse_Result_GetDefaultProfileResult;
struct PreferencesResponse_Result_GetDefaultProfileResultDefaultTypeInternal;
extern PreferencesResponse_Result_GetDefaultProfileResultDefaultTypeInternal _PreferencesResponse_Result_GetDefaultProfileResult_default_instance_;
class PreferencesResponse_Result_GetPreferenceResult;
struct PreferencesResponse_Result_GetPreferenceResultDefaultTypeInternal;
extern PreferencesResponse_Result_GetPreferenceResultDefaultTypeInternal _PreferencesResponse_Result_GetPreferenceResult_default_instance_;
class PreferencesResponse_Result_SetDefaultProfileResult;
struct PreferencesResponse_Result_SetDefaultProfileResultDefaultTypeInternal;
extern PreferencesResponse_Result_SetDefaultProfileResultDefaultTypeInternal _PreferencesResponse_Result_SetDefaultProfileResult_default_instance_;
class PreferencesResponse_Result_SetPreferenceResult;
struct PreferencesResponse_Result_SetPreferenceResultDefaultTypeInternal;
extern PreferencesResponse_Result_SetPreferenceResultDefaultTypeInternal _PreferencesResponse_Result_SetPreferenceResult_default_instance_;
class PreferencesResponse_Result_UnrecognizedResult;
struct PreferencesResponse_Result_UnrecognizedResultDefaultTypeInternal;
extern PreferencesResponse_Result_UnrecognizedResultDefaultTypeInternal _PreferencesResponse_Result_UnrecognizedResult_default_instance_;
class ProfileChangeRequest;
struct ProfileChangeRequestDefaultTypeInternal;
extern ProfileChangeRequestDefaultTypeInternal _ProfileChangeRequest_default_instance_;
class ProfileChangedNotification;
struct ProfileChangedNotificationDefaultTypeInternal;
extern ProfileChangedNotificationDefaultTypeInternal _ProfileChangedNotification_default_instance_;
class ProfileProperty;
struct ProfilePropertyDefaultTypeInternal;
extern ProfilePropertyDefaultTypeInternal _ProfileProperty_default_instance_;
class PromptMonitorRequest;
struct PromptMonitorRequestDefaultTypeInternal;
extern PromptMonitorRequestDefaultTypeInternal _PromptMonitorRequest_default_instance_;
class PromptNotification;
struct PromptNotificationDefaultTypeInternal;
extern PromptNotificationDefaultTypeInternal _PromptNotification_default_instance_;
class PromptNotificationCommandEnd;
struct PromptNotificationCommandEndDefaultTypeInternal;
extern PromptNotificationCommandEndDefaultTypeInternal _PromptNotificationCommandEnd_default_instance_;
class PromptNotificationCommandStart;
struct PromptNotificationCommandStartDefaultTypeInternal;
extern PromptNotificationCommandStartDefaultTypeInternal _PromptNotificationCommandStart_default_instance_;
class PromptNotificationPrompt;
struct PromptNotificationPromptDefaultTypeInternal;
extern PromptNotificationPromptDefaultTypeInternal _PromptNotificationPrompt_default_instance_;
class RPCRegistrationRequest;
struct RPCRegistrationRequestDefaultTypeInternal;
extern RPCRegistrationRequestDefaultTypeInternal _RPCRegistrationRequest_default_instance_;
class RPCRegistrationRequest_ContextMenuAttributes;
struct RPCRegistrationRequest_ContextMenuAttributesDefaultTypeInternal;
extern RPCRegistrationRequest_ContextMenuAttributesDefaultTypeInternal _RPCRegistrationRequest_ContextMenuAttributes_default_instance_;
class RPCRegistrationRequest_RPCArgument;
struct RPCRegistrationRequest_RPCArgumentDefaultTypeInternal;
extern RPCRegistrationRequest_RPCArgumentDefaultTypeInternal _RPCRegistrationRequest_RPCArgument_default_instance_;
class RPCRegistrationRequest_RPCArgumentSignature;
struct RPCRegistrationRequest_RPCArgumentSignatureDefaultTypeInternal;
extern RPCRegistrationRequest_RPCArgumentSignatureDefaultTypeInternal _RPCRegistrationRequest_RPCArgumentSignature_default_instance_;
class RPCRegistrationRequest_SessionTitleAttributes;
struct RPCRegistrationRequest_SessionTitleAttributesDefaultTypeInternal;
extern RPCRegistrationRequest_SessionTitleAttributesDefaultTypeInternal _RPCRegistrationRequest_SessionTitleAttributes_default_instance_;
class RPCRegistrationRequest_StatusBarComponentAttributes;
struct RPCRegistrationRequest_StatusBarComponentAttributesDefaultTypeInternal;
extern RPCRegistrationRequest_StatusBarComponentAttributesDefaultTypeInternal _RPCRegistrationRequest_StatusBarComponentAttributes_default_instance_;
class RPCRegistrationRequest_StatusBarComponentAttributes_Icon;
struct RPCRegistrationRequest_StatusBarComponentAttributes_IconDefaultTypeInternal;
extern RPCRegistrationRequest_StatusBarComponentAttributes_IconDefaultTypeInternal _RPCRegistrationRequest_StatusBarComponentAttributes_Icon_default_instance_;
class RPCRegistrationRequest_StatusBarComponentAttributes_Knob;
struct RPCRegistrationRequest_StatusBarComponentAttributes_KnobDefaultTypeInternal;
extern RPCRegistrationRequest_StatusBarComponentAttributes_KnobDefaultTypeInternal _RPCRegistrationRequest_StatusBarComponentAttributes_Knob_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RegisterToolRequest;
struct RegisterToolRequestDefaultTypeInternal;
extern RegisterToolRequestDefaultTypeInternal _RegisterToolRequest_default_instance_;
class RegisterToolResponse;
struct RegisterToolResponseDefaultTypeInternal;
extern RegisterToolResponseDefaultTypeInternal _RegisterToolResponse_default_instance_;
class ReorderTabsRequest;
struct ReorderTabsRequestDefaultTypeInternal;
extern ReorderTabsRequestDefaultTypeInternal _ReorderTabsRequest_default_instance_;
class ReorderTabsRequest_Assignment;
struct ReorderTabsRequest_AssignmentDefaultTypeInternal;
extern ReorderTabsRequest_AssignmentDefaultTypeInternal _ReorderTabsRequest_Assignment_default_instance_;
class ReorderTabsResponse;
struct ReorderTabsResponseDefaultTypeInternal;
extern ReorderTabsResponseDefaultTypeInternal _ReorderTabsResponse_default_instance_;
class RestartSessionRequest;
struct RestartSessionRequestDefaultTypeInternal;
extern RestartSessionRequestDefaultTypeInternal _RestartSessionRequest_default_instance_;
class RestartSessionResponse;
struct RestartSessionResponseDefaultTypeInternal;
extern RestartSessionResponseDefaultTypeInternal _RestartSessionResponse_default_instance_;
class SavedArrangementRequest;
struct SavedArrangementRequestDefaultTypeInternal;
extern SavedArrangementRequestDefaultTypeInternal _SavedArrangementRequest_default_instance_;
class SavedArrangementResponse;
struct SavedArrangementResponseDefaultTypeInternal;
extern SavedArrangementResponseDefaultTypeInternal _SavedArrangementResponse_default_instance_;
class ScreenUpdateNotification;
struct ScreenUpdateNotificationDefaultTypeInternal;
extern ScreenUpdateNotificationDefaultTypeInternal _ScreenUpdateNotification_default_instance_;
class Selection;
struct SelectionDefaultTypeInternal;
extern SelectionDefaultTypeInternal _Selection_default_instance_;
class SelectionRequest;
struct SelectionRequestDefaultTypeInternal;
extern SelectionRequestDefaultTypeInternal _SelectionRequest_default_instance_;
class SelectionRequest_GetSelectionRequest;
struct SelectionRequest_GetSelectionRequestDefaultTypeInternal;
extern SelectionRequest_GetSelectionRequestDefaultTypeInternal _SelectionRequest_GetSelectionRequest_default_instance_;
class SelectionRequest_SetSelectionRequest;
struct SelectionRequest_SetSelectionRequestDefaultTypeInternal;
extern SelectionRequest_SetSelectionRequestDefaultTypeInternal _SelectionRequest_SetSelectionRequest_default_instance_;
class SelectionResponse;
struct SelectionResponseDefaultTypeInternal;
extern SelectionResponseDefaultTypeInternal _SelectionResponse_default_instance_;
class SelectionResponse_GetSelectionResponse;
struct SelectionResponse_GetSelectionResponseDefaultTypeInternal;
extern SelectionResponse_GetSelectionResponseDefaultTypeInternal _SelectionResponse_GetSelectionResponse_default_instance_;
class SelectionResponse_SetSelectionResponse;
struct SelectionResponse_SetSelectionResponseDefaultTypeInternal;
extern SelectionResponse_SetSelectionResponseDefaultTypeInternal _SelectionResponse_SetSelectionResponse_default_instance_;
class SendTextRequest;
struct SendTextRequestDefaultTypeInternal;
extern SendTextRequestDefaultTypeInternal _SendTextRequest_default_instance_;
class SendTextResponse;
struct SendTextResponseDefaultTypeInternal;
extern SendTextResponseDefaultTypeInternal _SendTextResponse_default_instance_;
class ServerOriginatedMessage;
struct ServerOriginatedMessageDefaultTypeInternal;
extern ServerOriginatedMessageDefaultTypeInternal _ServerOriginatedMessage_default_instance_;
class ServerOriginatedRPC;
struct ServerOriginatedRPCDefaultTypeInternal;
extern ServerOriginatedRPCDefaultTypeInternal _ServerOriginatedRPC_default_instance_;
class ServerOriginatedRPCNotification;
struct ServerOriginatedRPCNotificationDefaultTypeInternal;
extern ServerOriginatedRPCNotificationDefaultTypeInternal _ServerOriginatedRPCNotification_default_instance_;
class ServerOriginatedRPCResultRequest;
struct ServerOriginatedRPCResultRequestDefaultTypeInternal;
extern ServerOriginatedRPCResultRequestDefaultTypeInternal _ServerOriginatedRPCResultRequest_default_instance_;
class ServerOriginatedRPCResultResponse;
struct ServerOriginatedRPCResultResponseDefaultTypeInternal;
extern ServerOriginatedRPCResultResponseDefaultTypeInternal _ServerOriginatedRPCResultResponse_default_instance_;
class ServerOriginatedRPC_RPCArgument;
struct ServerOriginatedRPC_RPCArgumentDefaultTypeInternal;
extern ServerOriginatedRPC_RPCArgumentDefaultTypeInternal _ServerOriginatedRPC_RPCArgument_default_instance_;
class SessionSummary;
struct SessionSummaryDefaultTypeInternal;
extern SessionSummaryDefaultTypeInternal _SessionSummary_default_instance_;
class SetBroadcastDomainsRequest;
struct SetBroadcastDomainsRequestDefaultTypeInternal;
extern SetBroadcastDomainsRequestDefaultTypeInternal _SetBroadcastDomainsRequest_default_instance_;
class SetBroadcastDomainsResponse;
struct SetBroadcastDomainsResponseDefaultTypeInternal;
extern SetBroadcastDomainsResponseDefaultTypeInternal _SetBroadcastDomainsResponse_default_instance_;
class SetProfilePropertyRequest;
struct SetProfilePropertyRequestDefaultTypeInternal;
extern SetProfilePropertyRequestDefaultTypeInternal _SetProfilePropertyRequest_default_instance_;
class SetProfilePropertyRequest_Assignment;
struct SetProfilePropertyRequest_AssignmentDefaultTypeInternal;
extern SetProfilePropertyRequest_AssignmentDefaultTypeInternal _SetProfilePropertyRequest_Assignment_default_instance_;
class SetProfilePropertyRequest_GuidList;
struct SetProfilePropertyRequest_GuidListDefaultTypeInternal;
extern SetProfilePropertyRequest_GuidListDefaultTypeInternal _SetProfilePropertyRequest_GuidList_default_instance_;
class SetProfilePropertyResponse;
struct SetProfilePropertyResponseDefaultTypeInternal;
extern SetProfilePropertyResponseDefaultTypeInternal _SetProfilePropertyResponse_default_instance_;
class SetPropertyRequest;
struct SetPropertyRequestDefaultTypeInternal;
extern SetPropertyRequestDefaultTypeInternal _SetPropertyRequest_default_instance_;
class SetPropertyResponse;
struct SetPropertyResponseDefaultTypeInternal;
extern SetPropertyResponseDefaultTypeInternal _SetPropertyResponse_default_instance_;
class SetTabLayoutRequest;
struct SetTabLayoutRequestDefaultTypeInternal;
extern SetTabLayoutRequestDefaultTypeInternal _SetTabLayoutRequest_default_instance_;
class SetTabLayoutResponse;
struct SetTabLayoutResponseDefaultTypeInternal;
extern SetTabLayoutResponseDefaultTypeInternal _SetTabLayoutResponse_default_instance_;
class Size;
struct SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class SplitPaneRequest;
struct SplitPaneRequestDefaultTypeInternal;
extern SplitPaneRequestDefaultTypeInternal _SplitPaneRequest_default_instance_;
class SplitPaneResponse;
struct SplitPaneResponseDefaultTypeInternal;
extern SplitPaneResponseDefaultTypeInternal _SplitPaneResponse_default_instance_;
class SplitTreeNode;
struct SplitTreeNodeDefaultTypeInternal;
extern SplitTreeNodeDefaultTypeInternal _SplitTreeNode_default_instance_;
class SplitTreeNode_SplitTreeLink;
struct SplitTreeNode_SplitTreeLinkDefaultTypeInternal;
extern SplitTreeNode_SplitTreeLinkDefaultTypeInternal _SplitTreeNode_SplitTreeLink_default_instance_;
class StatusBarComponentRequest;
struct StatusBarComponentRequestDefaultTypeInternal;
extern StatusBarComponentRequestDefaultTypeInternal _StatusBarComponentRequest_default_instance_;
class StatusBarComponentRequest_OpenPopover;
struct StatusBarComponentRequest_OpenPopoverDefaultTypeInternal;
extern StatusBarComponentRequest_OpenPopoverDefaultTypeInternal _StatusBarComponentRequest_OpenPopover_default_instance_;
class StatusBarComponentResponse;
struct StatusBarComponentResponseDefaultTypeInternal;
extern StatusBarComponentResponseDefaultTypeInternal _StatusBarComponentResponse_default_instance_;
class SubSelection;
struct SubSelectionDefaultTypeInternal;
extern SubSelectionDefaultTypeInternal _SubSelection_default_instance_;
class TerminateSessionNotification;
struct TerminateSessionNotificationDefaultTypeInternal;
extern TerminateSessionNotificationDefaultTypeInternal _TerminateSessionNotification_default_instance_;
class TmuxRequest;
struct TmuxRequestDefaultTypeInternal;
extern TmuxRequestDefaultTypeInternal _TmuxRequest_default_instance_;
class TmuxRequest_CreateWindow;
struct TmuxRequest_CreateWindowDefaultTypeInternal;
extern TmuxRequest_CreateWindowDefaultTypeInternal _TmuxRequest_CreateWindow_default_instance_;
class TmuxRequest_ListConnections;
struct TmuxRequest_ListConnectionsDefaultTypeInternal;
extern TmuxRequest_ListConnectionsDefaultTypeInternal _TmuxRequest_ListConnections_default_instance_;
class TmuxRequest_SendCommand;
struct TmuxRequest_SendCommandDefaultTypeInternal;
extern TmuxRequest_SendCommandDefaultTypeInternal _TmuxRequest_SendCommand_default_instance_;
class TmuxRequest_SetWindowVisible;
struct TmuxRequest_SetWindowVisibleDefaultTypeInternal;
extern TmuxRequest_SetWindowVisibleDefaultTypeInternal _TmuxRequest_SetWindowVisible_default_instance_;
class TmuxResponse;
struct TmuxResponseDefaultTypeInternal;
extern TmuxResponseDefaultTypeInternal _TmuxResponse_default_instance_;
class TmuxResponse_CreateWindow;
struct TmuxResponse_CreateWindowDefaultTypeInternal;
extern TmuxResponse_CreateWindowDefaultTypeInternal _TmuxResponse_CreateWindow_default_instance_;
class TmuxResponse_ListConnections;
struct TmuxResponse_ListConnectionsDefaultTypeInternal;
extern TmuxResponse_ListConnectionsDefaultTypeInternal _TmuxResponse_ListConnections_default_instance_;
class TmuxResponse_ListConnections_Connection;
struct TmuxResponse_ListConnections_ConnectionDefaultTypeInternal;
extern TmuxResponse_ListConnections_ConnectionDefaultTypeInternal _TmuxResponse_ListConnections_Connection_default_instance_;
class TmuxResponse_SendCommand;
struct TmuxResponse_SendCommandDefaultTypeInternal;
extern TmuxResponse_SendCommandDefaultTypeInternal _TmuxResponse_SendCommand_default_instance_;
class TmuxResponse_SetWindowVisible;
struct TmuxResponse_SetWindowVisibleDefaultTypeInternal;
extern TmuxResponse_SetWindowVisibleDefaultTypeInternal _TmuxResponse_SetWindowVisible_default_instance_;
class TransactionRequest;
struct TransactionRequestDefaultTypeInternal;
extern TransactionRequestDefaultTypeInternal _TransactionRequest_default_instance_;
class TransactionResponse;
struct TransactionResponseDefaultTypeInternal;
extern TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
class VariableChangedNotification;
struct VariableChangedNotificationDefaultTypeInternal;
extern VariableChangedNotificationDefaultTypeInternal _VariableChangedNotification_default_instance_;
class VariableMonitorRequest;
struct VariableMonitorRequestDefaultTypeInternal;
extern VariableMonitorRequestDefaultTypeInternal _VariableMonitorRequest_default_instance_;
class VariableRequest;
struct VariableRequestDefaultTypeInternal;
extern VariableRequestDefaultTypeInternal _VariableRequest_default_instance_;
class VariableRequest_Set;
struct VariableRequest_SetDefaultTypeInternal;
extern VariableRequest_SetDefaultTypeInternal _VariableRequest_Set_default_instance_;
class VariableResponse;
struct VariableResponseDefaultTypeInternal;
extern VariableResponseDefaultTypeInternal _VariableResponse_default_instance_;
class WindowedCoordRange;
struct WindowedCoordRangeDefaultTypeInternal;
extern WindowedCoordRangeDefaultTypeInternal _WindowedCoordRange_default_instance_;
}  // namespace iterm2
PROTOBUF_NAMESPACE_OPEN
template<> ::iterm2::ActivateRequest* Arena::CreateMaybeMessage<::iterm2::ActivateRequest>(Arena*);
template<> ::iterm2::ActivateRequest_App* Arena::CreateMaybeMessage<::iterm2::ActivateRequest_App>(Arena*);
template<> ::iterm2::ActivateResponse* Arena::CreateMaybeMessage<::iterm2::ActivateResponse>(Arena*);
template<> ::iterm2::BroadcastDomain* Arena::CreateMaybeMessage<::iterm2::BroadcastDomain>(Arena*);
template<> ::iterm2::BroadcastDomainsChangedNotification* Arena::CreateMaybeMessage<::iterm2::BroadcastDomainsChangedNotification>(Arena*);
template<> ::iterm2::ClientOriginatedMessage* Arena::CreateMaybeMessage<::iterm2::ClientOriginatedMessage>(Arena*);
template<> ::iterm2::CloseRequest* Arena::CreateMaybeMessage<::iterm2::CloseRequest>(Arena*);
template<> ::iterm2::CloseRequest_CloseSessions* Arena::CreateMaybeMessage<::iterm2::CloseRequest_CloseSessions>(Arena*);
template<> ::iterm2::CloseRequest_CloseTabs* Arena::CreateMaybeMessage<::iterm2::CloseRequest_CloseTabs>(Arena*);
template<> ::iterm2::CloseRequest_CloseWindows* Arena::CreateMaybeMessage<::iterm2::CloseRequest_CloseWindows>(Arena*);
template<> ::iterm2::CloseResponse* Arena::CreateMaybeMessage<::iterm2::CloseResponse>(Arena*);
template<> ::iterm2::CodePointsPerCell* Arena::CreateMaybeMessage<::iterm2::CodePointsPerCell>(Arena*);
template<> ::iterm2::ColorPresetRequest* Arena::CreateMaybeMessage<::iterm2::ColorPresetRequest>(Arena*);
template<> ::iterm2::ColorPresetRequest_GetPreset* Arena::CreateMaybeMessage<::iterm2::ColorPresetRequest_GetPreset>(Arena*);
template<> ::iterm2::ColorPresetRequest_ListPresets* Arena::CreateMaybeMessage<::iterm2::ColorPresetRequest_ListPresets>(Arena*);
template<> ::iterm2::ColorPresetResponse* Arena::CreateMaybeMessage<::iterm2::ColorPresetResponse>(Arena*);
template<> ::iterm2::ColorPresetResponse_GetPreset* Arena::CreateMaybeMessage<::iterm2::ColorPresetResponse_GetPreset>(Arena*);
template<> ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* Arena::CreateMaybeMessage<::iterm2::ColorPresetResponse_GetPreset_ColorSetting>(Arena*);
template<> ::iterm2::ColorPresetResponse_ListPresets* Arena::CreateMaybeMessage<::iterm2::ColorPresetResponse_ListPresets>(Arena*);
template<> ::iterm2::Coord* Arena::CreateMaybeMessage<::iterm2::Coord>(Arena*);
template<> ::iterm2::CoordRange* Arena::CreateMaybeMessage<::iterm2::CoordRange>(Arena*);
template<> ::iterm2::CreateTabRequest* Arena::CreateMaybeMessage<::iterm2::CreateTabRequest>(Arena*);
template<> ::iterm2::CreateTabResponse* Arena::CreateMaybeMessage<::iterm2::CreateTabResponse>(Arena*);
template<> ::iterm2::CustomEscapeSequenceNotification* Arena::CreateMaybeMessage<::iterm2::CustomEscapeSequenceNotification>(Arena*);
template<> ::iterm2::FocusChangedNotification* Arena::CreateMaybeMessage<::iterm2::FocusChangedNotification>(Arena*);
template<> ::iterm2::FocusChangedNotification_Window* Arena::CreateMaybeMessage<::iterm2::FocusChangedNotification_Window>(Arena*);
template<> ::iterm2::FocusRequest* Arena::CreateMaybeMessage<::iterm2::FocusRequest>(Arena*);
template<> ::iterm2::FocusResponse* Arena::CreateMaybeMessage<::iterm2::FocusResponse>(Arena*);
template<> ::iterm2::Frame* Arena::CreateMaybeMessage<::iterm2::Frame>(Arena*);
template<> ::iterm2::GetBroadcastDomainsRequest* Arena::CreateMaybeMessage<::iterm2::GetBroadcastDomainsRequest>(Arena*);
template<> ::iterm2::GetBroadcastDomainsResponse* Arena::CreateMaybeMessage<::iterm2::GetBroadcastDomainsResponse>(Arena*);
template<> ::iterm2::GetBufferRequest* Arena::CreateMaybeMessage<::iterm2::GetBufferRequest>(Arena*);
template<> ::iterm2::GetBufferResponse* Arena::CreateMaybeMessage<::iterm2::GetBufferResponse>(Arena*);
template<> ::iterm2::GetProfilePropertyRequest* Arena::CreateMaybeMessage<::iterm2::GetProfilePropertyRequest>(Arena*);
template<> ::iterm2::GetProfilePropertyResponse* Arena::CreateMaybeMessage<::iterm2::GetProfilePropertyResponse>(Arena*);
template<> ::iterm2::GetPromptRequest* Arena::CreateMaybeMessage<::iterm2::GetPromptRequest>(Arena*);
template<> ::iterm2::GetPromptResponse* Arena::CreateMaybeMessage<::iterm2::GetPromptResponse>(Arena*);
template<> ::iterm2::GetPropertyRequest* Arena::CreateMaybeMessage<::iterm2::GetPropertyRequest>(Arena*);
template<> ::iterm2::GetPropertyResponse* Arena::CreateMaybeMessage<::iterm2::GetPropertyResponse>(Arena*);
template<> ::iterm2::InjectRequest* Arena::CreateMaybeMessage<::iterm2::InjectRequest>(Arena*);
template<> ::iterm2::InjectResponse* Arena::CreateMaybeMessage<::iterm2::InjectResponse>(Arena*);
template<> ::iterm2::InvokeFunctionRequest* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionRequest>(Arena*);
template<> ::iterm2::InvokeFunctionRequest_App* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionRequest_App>(Arena*);
template<> ::iterm2::InvokeFunctionRequest_Method* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionRequest_Method>(Arena*);
template<> ::iterm2::InvokeFunctionRequest_Session* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionRequest_Session>(Arena*);
template<> ::iterm2::InvokeFunctionRequest_Tab* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionRequest_Tab>(Arena*);
template<> ::iterm2::InvokeFunctionRequest_Window* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionRequest_Window>(Arena*);
template<> ::iterm2::InvokeFunctionResponse* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionResponse>(Arena*);
template<> ::iterm2::InvokeFunctionResponse_Error* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionResponse_Error>(Arena*);
template<> ::iterm2::InvokeFunctionResponse_Success* Arena::CreateMaybeMessage<::iterm2::InvokeFunctionResponse_Success>(Arena*);
template<> ::iterm2::KeystrokeFilterRequest* Arena::CreateMaybeMessage<::iterm2::KeystrokeFilterRequest>(Arena*);
template<> ::iterm2::KeystrokeMonitorRequest* Arena::CreateMaybeMessage<::iterm2::KeystrokeMonitorRequest>(Arena*);
template<> ::iterm2::KeystrokeNotification* Arena::CreateMaybeMessage<::iterm2::KeystrokeNotification>(Arena*);
template<> ::iterm2::KeystrokePattern* Arena::CreateMaybeMessage<::iterm2::KeystrokePattern>(Arena*);
template<> ::iterm2::LayoutChangedNotification* Arena::CreateMaybeMessage<::iterm2::LayoutChangedNotification>(Arena*);
template<> ::iterm2::LineContents* Arena::CreateMaybeMessage<::iterm2::LineContents>(Arena*);
template<> ::iterm2::LineRange* Arena::CreateMaybeMessage<::iterm2::LineRange>(Arena*);
template<> ::iterm2::ListProfilesRequest* Arena::CreateMaybeMessage<::iterm2::ListProfilesRequest>(Arena*);
template<> ::iterm2::ListProfilesResponse* Arena::CreateMaybeMessage<::iterm2::ListProfilesResponse>(Arena*);
template<> ::iterm2::ListProfilesResponse_Profile* Arena::CreateMaybeMessage<::iterm2::ListProfilesResponse_Profile>(Arena*);
template<> ::iterm2::ListPromptsRequest* Arena::CreateMaybeMessage<::iterm2::ListPromptsRequest>(Arena*);
template<> ::iterm2::ListPromptsResponse* Arena::CreateMaybeMessage<::iterm2::ListPromptsResponse>(Arena*);
template<> ::iterm2::ListSessionsRequest* Arena::CreateMaybeMessage<::iterm2::ListSessionsRequest>(Arena*);
template<> ::iterm2::ListSessionsResponse* Arena::CreateMaybeMessage<::iterm2::ListSessionsResponse>(Arena*);
template<> ::iterm2::ListSessionsResponse_Tab* Arena::CreateMaybeMessage<::iterm2::ListSessionsResponse_Tab>(Arena*);
template<> ::iterm2::ListSessionsResponse_Window* Arena::CreateMaybeMessage<::iterm2::ListSessionsResponse_Window>(Arena*);
template<> ::iterm2::LocationChangeNotification* Arena::CreateMaybeMessage<::iterm2::LocationChangeNotification>(Arena*);
template<> ::iterm2::MenuItemRequest* Arena::CreateMaybeMessage<::iterm2::MenuItemRequest>(Arena*);
template<> ::iterm2::MenuItemResponse* Arena::CreateMaybeMessage<::iterm2::MenuItemResponse>(Arena*);
template<> ::iterm2::NewSessionNotification* Arena::CreateMaybeMessage<::iterm2::NewSessionNotification>(Arena*);
template<> ::iterm2::Notification* Arena::CreateMaybeMessage<::iterm2::Notification>(Arena*);
template<> ::iterm2::NotificationRequest* Arena::CreateMaybeMessage<::iterm2::NotificationRequest>(Arena*);
template<> ::iterm2::NotificationResponse* Arena::CreateMaybeMessage<::iterm2::NotificationResponse>(Arena*);
template<> ::iterm2::Point* Arena::CreateMaybeMessage<::iterm2::Point>(Arena*);
template<> ::iterm2::PreferencesRequest* Arena::CreateMaybeMessage<::iterm2::PreferencesRequest>(Arena*);
template<> ::iterm2::PreferencesRequest_Request* Arena::CreateMaybeMessage<::iterm2::PreferencesRequest_Request>(Arena*);
template<> ::iterm2::PreferencesRequest_Request_GetDefaultProfile* Arena::CreateMaybeMessage<::iterm2::PreferencesRequest_Request_GetDefaultProfile>(Arena*);
template<> ::iterm2::PreferencesRequest_Request_GetPreference* Arena::CreateMaybeMessage<::iterm2::PreferencesRequest_Request_GetPreference>(Arena*);
template<> ::iterm2::PreferencesRequest_Request_SetDefaultProfile* Arena::CreateMaybeMessage<::iterm2::PreferencesRequest_Request_SetDefaultProfile>(Arena*);
template<> ::iterm2::PreferencesRequest_Request_SetPreference* Arena::CreateMaybeMessage<::iterm2::PreferencesRequest_Request_SetPreference>(Arena*);
template<> ::iterm2::PreferencesResponse* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse>(Arena*);
template<> ::iterm2::PreferencesResponse_Result* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse_Result>(Arena*);
template<> ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse_Result_GetDefaultProfileResult>(Arena*);
template<> ::iterm2::PreferencesResponse_Result_GetPreferenceResult* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse_Result_GetPreferenceResult>(Arena*);
template<> ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse_Result_SetDefaultProfileResult>(Arena*);
template<> ::iterm2::PreferencesResponse_Result_SetPreferenceResult* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse_Result_SetPreferenceResult>(Arena*);
template<> ::iterm2::PreferencesResponse_Result_UnrecognizedResult* Arena::CreateMaybeMessage<::iterm2::PreferencesResponse_Result_UnrecognizedResult>(Arena*);
template<> ::iterm2::ProfileChangeRequest* Arena::CreateMaybeMessage<::iterm2::ProfileChangeRequest>(Arena*);
template<> ::iterm2::ProfileChangedNotification* Arena::CreateMaybeMessage<::iterm2::ProfileChangedNotification>(Arena*);
template<> ::iterm2::ProfileProperty* Arena::CreateMaybeMessage<::iterm2::ProfileProperty>(Arena*);
template<> ::iterm2::PromptMonitorRequest* Arena::CreateMaybeMessage<::iterm2::PromptMonitorRequest>(Arena*);
template<> ::iterm2::PromptNotification* Arena::CreateMaybeMessage<::iterm2::PromptNotification>(Arena*);
template<> ::iterm2::PromptNotificationCommandEnd* Arena::CreateMaybeMessage<::iterm2::PromptNotificationCommandEnd>(Arena*);
template<> ::iterm2::PromptNotificationCommandStart* Arena::CreateMaybeMessage<::iterm2::PromptNotificationCommandStart>(Arena*);
template<> ::iterm2::PromptNotificationPrompt* Arena::CreateMaybeMessage<::iterm2::PromptNotificationPrompt>(Arena*);
template<> ::iterm2::RPCRegistrationRequest* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_ContextMenuAttributes>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_RPCArgument* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_RPCArgument>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_RPCArgumentSignature>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_SessionTitleAttributes>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon>(Arena*);
template<> ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* Arena::CreateMaybeMessage<::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob>(Arena*);
template<> ::iterm2::Range* Arena::CreateMaybeMessage<::iterm2::Range>(Arena*);
template<> ::iterm2::RegisterToolRequest* Arena::CreateMaybeMessage<::iterm2::RegisterToolRequest>(Arena*);
template<> ::iterm2::RegisterToolResponse* Arena::CreateMaybeMessage<::iterm2::RegisterToolResponse>(Arena*);
template<> ::iterm2::ReorderTabsRequest* Arena::CreateMaybeMessage<::iterm2::ReorderTabsRequest>(Arena*);
template<> ::iterm2::ReorderTabsRequest_Assignment* Arena::CreateMaybeMessage<::iterm2::ReorderTabsRequest_Assignment>(Arena*);
template<> ::iterm2::ReorderTabsResponse* Arena::CreateMaybeMessage<::iterm2::ReorderTabsResponse>(Arena*);
template<> ::iterm2::RestartSessionRequest* Arena::CreateMaybeMessage<::iterm2::RestartSessionRequest>(Arena*);
template<> ::iterm2::RestartSessionResponse* Arena::CreateMaybeMessage<::iterm2::RestartSessionResponse>(Arena*);
template<> ::iterm2::SavedArrangementRequest* Arena::CreateMaybeMessage<::iterm2::SavedArrangementRequest>(Arena*);
template<> ::iterm2::SavedArrangementResponse* Arena::CreateMaybeMessage<::iterm2::SavedArrangementResponse>(Arena*);
template<> ::iterm2::ScreenUpdateNotification* Arena::CreateMaybeMessage<::iterm2::ScreenUpdateNotification>(Arena*);
template<> ::iterm2::Selection* Arena::CreateMaybeMessage<::iterm2::Selection>(Arena*);
template<> ::iterm2::SelectionRequest* Arena::CreateMaybeMessage<::iterm2::SelectionRequest>(Arena*);
template<> ::iterm2::SelectionRequest_GetSelectionRequest* Arena::CreateMaybeMessage<::iterm2::SelectionRequest_GetSelectionRequest>(Arena*);
template<> ::iterm2::SelectionRequest_SetSelectionRequest* Arena::CreateMaybeMessage<::iterm2::SelectionRequest_SetSelectionRequest>(Arena*);
template<> ::iterm2::SelectionResponse* Arena::CreateMaybeMessage<::iterm2::SelectionResponse>(Arena*);
template<> ::iterm2::SelectionResponse_GetSelectionResponse* Arena::CreateMaybeMessage<::iterm2::SelectionResponse_GetSelectionResponse>(Arena*);
template<> ::iterm2::SelectionResponse_SetSelectionResponse* Arena::CreateMaybeMessage<::iterm2::SelectionResponse_SetSelectionResponse>(Arena*);
template<> ::iterm2::SendTextRequest* Arena::CreateMaybeMessage<::iterm2::SendTextRequest>(Arena*);
template<> ::iterm2::SendTextResponse* Arena::CreateMaybeMessage<::iterm2::SendTextResponse>(Arena*);
template<> ::iterm2::ServerOriginatedMessage* Arena::CreateMaybeMessage<::iterm2::ServerOriginatedMessage>(Arena*);
template<> ::iterm2::ServerOriginatedRPC* Arena::CreateMaybeMessage<::iterm2::ServerOriginatedRPC>(Arena*);
template<> ::iterm2::ServerOriginatedRPCNotification* Arena::CreateMaybeMessage<::iterm2::ServerOriginatedRPCNotification>(Arena*);
template<> ::iterm2::ServerOriginatedRPCResultRequest* Arena::CreateMaybeMessage<::iterm2::ServerOriginatedRPCResultRequest>(Arena*);
template<> ::iterm2::ServerOriginatedRPCResultResponse* Arena::CreateMaybeMessage<::iterm2::ServerOriginatedRPCResultResponse>(Arena*);
template<> ::iterm2::ServerOriginatedRPC_RPCArgument* Arena::CreateMaybeMessage<::iterm2::ServerOriginatedRPC_RPCArgument>(Arena*);
template<> ::iterm2::SessionSummary* Arena::CreateMaybeMessage<::iterm2::SessionSummary>(Arena*);
template<> ::iterm2::SetBroadcastDomainsRequest* Arena::CreateMaybeMessage<::iterm2::SetBroadcastDomainsRequest>(Arena*);
template<> ::iterm2::SetBroadcastDomainsResponse* Arena::CreateMaybeMessage<::iterm2::SetBroadcastDomainsResponse>(Arena*);
template<> ::iterm2::SetProfilePropertyRequest* Arena::CreateMaybeMessage<::iterm2::SetProfilePropertyRequest>(Arena*);
template<> ::iterm2::SetProfilePropertyRequest_Assignment* Arena::CreateMaybeMessage<::iterm2::SetProfilePropertyRequest_Assignment>(Arena*);
template<> ::iterm2::SetProfilePropertyRequest_GuidList* Arena::CreateMaybeMessage<::iterm2::SetProfilePropertyRequest_GuidList>(Arena*);
template<> ::iterm2::SetProfilePropertyResponse* Arena::CreateMaybeMessage<::iterm2::SetProfilePropertyResponse>(Arena*);
template<> ::iterm2::SetPropertyRequest* Arena::CreateMaybeMessage<::iterm2::SetPropertyRequest>(Arena*);
template<> ::iterm2::SetPropertyResponse* Arena::CreateMaybeMessage<::iterm2::SetPropertyResponse>(Arena*);
template<> ::iterm2::SetTabLayoutRequest* Arena::CreateMaybeMessage<::iterm2::SetTabLayoutRequest>(Arena*);
template<> ::iterm2::SetTabLayoutResponse* Arena::CreateMaybeMessage<::iterm2::SetTabLayoutResponse>(Arena*);
template<> ::iterm2::Size* Arena::CreateMaybeMessage<::iterm2::Size>(Arena*);
template<> ::iterm2::SplitPaneRequest* Arena::CreateMaybeMessage<::iterm2::SplitPaneRequest>(Arena*);
template<> ::iterm2::SplitPaneResponse* Arena::CreateMaybeMessage<::iterm2::SplitPaneResponse>(Arena*);
template<> ::iterm2::SplitTreeNode* Arena::CreateMaybeMessage<::iterm2::SplitTreeNode>(Arena*);
template<> ::iterm2::SplitTreeNode_SplitTreeLink* Arena::CreateMaybeMessage<::iterm2::SplitTreeNode_SplitTreeLink>(Arena*);
template<> ::iterm2::StatusBarComponentRequest* Arena::CreateMaybeMessage<::iterm2::StatusBarComponentRequest>(Arena*);
template<> ::iterm2::StatusBarComponentRequest_OpenPopover* Arena::CreateMaybeMessage<::iterm2::StatusBarComponentRequest_OpenPopover>(Arena*);
template<> ::iterm2::StatusBarComponentResponse* Arena::CreateMaybeMessage<::iterm2::StatusBarComponentResponse>(Arena*);
template<> ::iterm2::SubSelection* Arena::CreateMaybeMessage<::iterm2::SubSelection>(Arena*);
template<> ::iterm2::TerminateSessionNotification* Arena::CreateMaybeMessage<::iterm2::TerminateSessionNotification>(Arena*);
template<> ::iterm2::TmuxRequest* Arena::CreateMaybeMessage<::iterm2::TmuxRequest>(Arena*);
template<> ::iterm2::TmuxRequest_CreateWindow* Arena::CreateMaybeMessage<::iterm2::TmuxRequest_CreateWindow>(Arena*);
template<> ::iterm2::TmuxRequest_ListConnections* Arena::CreateMaybeMessage<::iterm2::TmuxRequest_ListConnections>(Arena*);
template<> ::iterm2::TmuxRequest_SendCommand* Arena::CreateMaybeMessage<::iterm2::TmuxRequest_SendCommand>(Arena*);
template<> ::iterm2::TmuxRequest_SetWindowVisible* Arena::CreateMaybeMessage<::iterm2::TmuxRequest_SetWindowVisible>(Arena*);
template<> ::iterm2::TmuxResponse* Arena::CreateMaybeMessage<::iterm2::TmuxResponse>(Arena*);
template<> ::iterm2::TmuxResponse_CreateWindow* Arena::CreateMaybeMessage<::iterm2::TmuxResponse_CreateWindow>(Arena*);
template<> ::iterm2::TmuxResponse_ListConnections* Arena::CreateMaybeMessage<::iterm2::TmuxResponse_ListConnections>(Arena*);
template<> ::iterm2::TmuxResponse_ListConnections_Connection* Arena::CreateMaybeMessage<::iterm2::TmuxResponse_ListConnections_Connection>(Arena*);
template<> ::iterm2::TmuxResponse_SendCommand* Arena::CreateMaybeMessage<::iterm2::TmuxResponse_SendCommand>(Arena*);
template<> ::iterm2::TmuxResponse_SetWindowVisible* Arena::CreateMaybeMessage<::iterm2::TmuxResponse_SetWindowVisible>(Arena*);
template<> ::iterm2::TransactionRequest* Arena::CreateMaybeMessage<::iterm2::TransactionRequest>(Arena*);
template<> ::iterm2::TransactionResponse* Arena::CreateMaybeMessage<::iterm2::TransactionResponse>(Arena*);
template<> ::iterm2::VariableChangedNotification* Arena::CreateMaybeMessage<::iterm2::VariableChangedNotification>(Arena*);
template<> ::iterm2::VariableMonitorRequest* Arena::CreateMaybeMessage<::iterm2::VariableMonitorRequest>(Arena*);
template<> ::iterm2::VariableRequest* Arena::CreateMaybeMessage<::iterm2::VariableRequest>(Arena*);
template<> ::iterm2::VariableRequest_Set* Arena::CreateMaybeMessage<::iterm2::VariableRequest_Set>(Arena*);
template<> ::iterm2::VariableResponse* Arena::CreateMaybeMessage<::iterm2::VariableResponse>(Arena*);
template<> ::iterm2::WindowedCoordRange* Arena::CreateMaybeMessage<::iterm2::WindowedCoordRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iterm2 {

enum InvokeFunctionResponse_Status : int {
  InvokeFunctionResponse_Status_TIMEOUT = 1,
  InvokeFunctionResponse_Status_FAILED = 2,
  InvokeFunctionResponse_Status_REQUEST_MALFORMED = 3,
  InvokeFunctionResponse_Status_INVALID_ID = 4
};
bool InvokeFunctionResponse_Status_IsValid(int value);
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse_Status_Status_MIN = InvokeFunctionResponse_Status_TIMEOUT;
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse_Status_Status_MAX = InvokeFunctionResponse_Status_INVALID_ID;
constexpr int InvokeFunctionResponse_Status_Status_ARRAYSIZE = InvokeFunctionResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvokeFunctionResponse_Status_descriptor();
template<typename T>
inline const std::string& InvokeFunctionResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InvokeFunctionResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InvokeFunctionResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InvokeFunctionResponse_Status_descriptor(), enum_t_value);
}
inline bool InvokeFunctionResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InvokeFunctionResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InvokeFunctionResponse_Status>(
    InvokeFunctionResponse_Status_descriptor(), name, value);
}
enum CloseResponse_Status : int {
  CloseResponse_Status_OK = 0,
  CloseResponse_Status_NOT_FOUND = 1,
  CloseResponse_Status_USER_DECLINED = 2
};
bool CloseResponse_Status_IsValid(int value);
constexpr CloseResponse_Status CloseResponse_Status_Status_MIN = CloseResponse_Status_OK;
constexpr CloseResponse_Status CloseResponse_Status_Status_MAX = CloseResponse_Status_USER_DECLINED;
constexpr int CloseResponse_Status_Status_ARRAYSIZE = CloseResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloseResponse_Status_descriptor();
template<typename T>
inline const std::string& CloseResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CloseResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CloseResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CloseResponse_Status_descriptor(), enum_t_value);
}
inline bool CloseResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CloseResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CloseResponse_Status>(
    CloseResponse_Status_descriptor(), name, value);
}
enum SetBroadcastDomainsResponse_Status : int {
  SetBroadcastDomainsResponse_Status_OK = 0,
  SetBroadcastDomainsResponse_Status_SESSION_NOT_FOUND = 1,
  SetBroadcastDomainsResponse_Status_BROADCAST_DOMAINS_NOT_DISJOINT = 2,
  SetBroadcastDomainsResponse_Status_SESSIONS_NOT_IN_SAME_WINDOW = 3
};
bool SetBroadcastDomainsResponse_Status_IsValid(int value);
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse_Status_Status_MIN = SetBroadcastDomainsResponse_Status_OK;
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse_Status_Status_MAX = SetBroadcastDomainsResponse_Status_SESSIONS_NOT_IN_SAME_WINDOW;
constexpr int SetBroadcastDomainsResponse_Status_Status_ARRAYSIZE = SetBroadcastDomainsResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetBroadcastDomainsResponse_Status_descriptor();
template<typename T>
inline const std::string& SetBroadcastDomainsResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetBroadcastDomainsResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetBroadcastDomainsResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetBroadcastDomainsResponse_Status_descriptor(), enum_t_value);
}
inline bool SetBroadcastDomainsResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetBroadcastDomainsResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetBroadcastDomainsResponse_Status>(
    SetBroadcastDomainsResponse_Status_descriptor(), name, value);
}
enum StatusBarComponentResponse_Status : int {
  StatusBarComponentResponse_Status_OK = 0,
  StatusBarComponentResponse_Status_SESSION_NOT_FOUND = 1,
  StatusBarComponentResponse_Status_REQUEST_MALFORMED = 2,
  StatusBarComponentResponse_Status_INVALID_IDENTIFIER = 3
};
bool StatusBarComponentResponse_Status_IsValid(int value);
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse_Status_Status_MIN = StatusBarComponentResponse_Status_OK;
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse_Status_Status_MAX = StatusBarComponentResponse_Status_INVALID_IDENTIFIER;
constexpr int StatusBarComponentResponse_Status_Status_ARRAYSIZE = StatusBarComponentResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusBarComponentResponse_Status_descriptor();
template<typename T>
inline const std::string& StatusBarComponentResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusBarComponentResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusBarComponentResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusBarComponentResponse_Status_descriptor(), enum_t_value);
}
inline bool StatusBarComponentResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusBarComponentResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusBarComponentResponse_Status>(
    StatusBarComponentResponse_Status_descriptor(), name, value);
}
enum SelectionResponse_Status : int {
  SelectionResponse_Status_OK = 0,
  SelectionResponse_Status_INVALID_SESSION = 1,
  SelectionResponse_Status_INVALID_RANGE = 2,
  SelectionResponse_Status_REQUEST_MALFORMED = 3
};
bool SelectionResponse_Status_IsValid(int value);
constexpr SelectionResponse_Status SelectionResponse_Status_Status_MIN = SelectionResponse_Status_OK;
constexpr SelectionResponse_Status SelectionResponse_Status_Status_MAX = SelectionResponse_Status_REQUEST_MALFORMED;
constexpr int SelectionResponse_Status_Status_ARRAYSIZE = SelectionResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionResponse_Status_descriptor();
template<typename T>
inline const std::string& SelectionResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectionResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectionResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectionResponse_Status_descriptor(), enum_t_value);
}
inline bool SelectionResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectionResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectionResponse_Status>(
    SelectionResponse_Status_descriptor(), name, value);
}
enum ColorPresetResponse_Status : int {
  ColorPresetResponse_Status_OK = 0,
  ColorPresetResponse_Status_PRESET_NOT_FOUND = 1,
  ColorPresetResponse_Status_REQUEST_MALFORMED = 2
};
bool ColorPresetResponse_Status_IsValid(int value);
constexpr ColorPresetResponse_Status ColorPresetResponse_Status_Status_MIN = ColorPresetResponse_Status_OK;
constexpr ColorPresetResponse_Status ColorPresetResponse_Status_Status_MAX = ColorPresetResponse_Status_REQUEST_MALFORMED;
constexpr int ColorPresetResponse_Status_Status_ARRAYSIZE = ColorPresetResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorPresetResponse_Status_descriptor();
template<typename T>
inline const std::string& ColorPresetResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColorPresetResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColorPresetResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColorPresetResponse_Status_descriptor(), enum_t_value);
}
inline bool ColorPresetResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColorPresetResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColorPresetResponse_Status>(
    ColorPresetResponse_Status_descriptor(), name, value);
}
enum PreferencesResponse_Result_SetPreferenceResult_Status : int {
  PreferencesResponse_Result_SetPreferenceResult_Status_OK = 0,
  PreferencesResponse_Result_SetPreferenceResult_Status_BAD_JSON = 1,
  PreferencesResponse_Result_SetPreferenceResult_Status_INVALID_VALUE = 2
};
bool PreferencesResponse_Result_SetPreferenceResult_Status_IsValid(int value);
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult_Status_Status_MIN = PreferencesResponse_Result_SetPreferenceResult_Status_OK;
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult_Status_Status_MAX = PreferencesResponse_Result_SetPreferenceResult_Status_INVALID_VALUE;
constexpr int PreferencesResponse_Result_SetPreferenceResult_Status_Status_ARRAYSIZE = PreferencesResponse_Result_SetPreferenceResult_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreferencesResponse_Result_SetPreferenceResult_Status_descriptor();
template<typename T>
inline const std::string& PreferencesResponse_Result_SetPreferenceResult_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PreferencesResponse_Result_SetPreferenceResult_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PreferencesResponse_Result_SetPreferenceResult_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PreferencesResponse_Result_SetPreferenceResult_Status_descriptor(), enum_t_value);
}
inline bool PreferencesResponse_Result_SetPreferenceResult_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PreferencesResponse_Result_SetPreferenceResult_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PreferencesResponse_Result_SetPreferenceResult_Status>(
    PreferencesResponse_Result_SetPreferenceResult_Status_descriptor(), name, value);
}
enum PreferencesResponse_Result_SetDefaultProfileResult_Status : int {
  PreferencesResponse_Result_SetDefaultProfileResult_Status_OK = 0,
  PreferencesResponse_Result_SetDefaultProfileResult_Status_BAD_GUID = 1
};
bool PreferencesResponse_Result_SetDefaultProfileResult_Status_IsValid(int value);
constexpr PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_MIN = PreferencesResponse_Result_SetDefaultProfileResult_Status_OK;
constexpr PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_MAX = PreferencesResponse_Result_SetDefaultProfileResult_Status_BAD_GUID;
constexpr int PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_ARRAYSIZE = PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreferencesResponse_Result_SetDefaultProfileResult_Status_descriptor();
template<typename T>
inline const std::string& PreferencesResponse_Result_SetDefaultProfileResult_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PreferencesResponse_Result_SetDefaultProfileResult_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PreferencesResponse_Result_SetDefaultProfileResult_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PreferencesResponse_Result_SetDefaultProfileResult_Status_descriptor(), enum_t_value);
}
inline bool PreferencesResponse_Result_SetDefaultProfileResult_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PreferencesResponse_Result_SetDefaultProfileResult_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PreferencesResponse_Result_SetDefaultProfileResult_Status>(
    PreferencesResponse_Result_SetDefaultProfileResult_Status_descriptor(), name, value);
}
enum ReorderTabsResponse_Status : int {
  ReorderTabsResponse_Status_OK = 0,
  ReorderTabsResponse_Status_INVALID_ASSIGNMENT = 1,
  ReorderTabsResponse_Status_INVALID_WINDOW_ID = 2,
  ReorderTabsResponse_Status_INVALID_TAB_ID = 3
};
bool ReorderTabsResponse_Status_IsValid(int value);
constexpr ReorderTabsResponse_Status ReorderTabsResponse_Status_Status_MIN = ReorderTabsResponse_Status_OK;
constexpr ReorderTabsResponse_Status ReorderTabsResponse_Status_Status_MAX = ReorderTabsResponse_Status_INVALID_TAB_ID;
constexpr int ReorderTabsResponse_Status_Status_ARRAYSIZE = ReorderTabsResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReorderTabsResponse_Status_descriptor();
template<typename T>
inline const std::string& ReorderTabsResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReorderTabsResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReorderTabsResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReorderTabsResponse_Status_descriptor(), enum_t_value);
}
inline bool ReorderTabsResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReorderTabsResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReorderTabsResponse_Status>(
    ReorderTabsResponse_Status_descriptor(), name, value);
}
enum TmuxResponse_Status : int {
  TmuxResponse_Status_OK = 0,
  TmuxResponse_Status_INVALID_REQUEST = 1,
  TmuxResponse_Status_INVALID_CONNECTION_ID = 2,
  TmuxResponse_Status_INVALID_WINDOW_ID = 3
};
bool TmuxResponse_Status_IsValid(int value);
constexpr TmuxResponse_Status TmuxResponse_Status_Status_MIN = TmuxResponse_Status_OK;
constexpr TmuxResponse_Status TmuxResponse_Status_Status_MAX = TmuxResponse_Status_INVALID_WINDOW_ID;
constexpr int TmuxResponse_Status_Status_ARRAYSIZE = TmuxResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TmuxResponse_Status_descriptor();
template<typename T>
inline const std::string& TmuxResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TmuxResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TmuxResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TmuxResponse_Status_descriptor(), enum_t_value);
}
inline bool TmuxResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TmuxResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TmuxResponse_Status>(
    TmuxResponse_Status_descriptor(), name, value);
}
enum SetTabLayoutResponse_Status : int {
  SetTabLayoutResponse_Status_OK = 0,
  SetTabLayoutResponse_Status_BAD_TAB_ID = 1,
  SetTabLayoutResponse_Status_WRONG_TREE = 2,
  SetTabLayoutResponse_Status_INVALID_SIZE = 3
};
bool SetTabLayoutResponse_Status_IsValid(int value);
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse_Status_Status_MIN = SetTabLayoutResponse_Status_OK;
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse_Status_Status_MAX = SetTabLayoutResponse_Status_INVALID_SIZE;
constexpr int SetTabLayoutResponse_Status_Status_ARRAYSIZE = SetTabLayoutResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetTabLayoutResponse_Status_descriptor();
template<typename T>
inline const std::string& SetTabLayoutResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetTabLayoutResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetTabLayoutResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetTabLayoutResponse_Status_descriptor(), enum_t_value);
}
inline bool SetTabLayoutResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetTabLayoutResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetTabLayoutResponse_Status>(
    SetTabLayoutResponse_Status_descriptor(), name, value);
}
enum MenuItemResponse_Status : int {
  MenuItemResponse_Status_OK = 0,
  MenuItemResponse_Status_BAD_IDENTIFIER = 1,
  MenuItemResponse_Status_DISABLED = 2
};
bool MenuItemResponse_Status_IsValid(int value);
constexpr MenuItemResponse_Status MenuItemResponse_Status_Status_MIN = MenuItemResponse_Status_OK;
constexpr MenuItemResponse_Status MenuItemResponse_Status_Status_MAX = MenuItemResponse_Status_DISABLED;
constexpr int MenuItemResponse_Status_Status_ARRAYSIZE = MenuItemResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MenuItemResponse_Status_descriptor();
template<typename T>
inline const std::string& MenuItemResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MenuItemResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MenuItemResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MenuItemResponse_Status_descriptor(), enum_t_value);
}
inline bool MenuItemResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MenuItemResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MenuItemResponse_Status>(
    MenuItemResponse_Status_descriptor(), name, value);
}
enum RestartSessionResponse_Status : int {
  RestartSessionResponse_Status_OK = 0,
  RestartSessionResponse_Status_SESSION_NOT_FOUND = 1,
  RestartSessionResponse_Status_SESSION_NOT_RESTARTABLE = 2
};
bool RestartSessionResponse_Status_IsValid(int value);
constexpr RestartSessionResponse_Status RestartSessionResponse_Status_Status_MIN = RestartSessionResponse_Status_OK;
constexpr RestartSessionResponse_Status RestartSessionResponse_Status_Status_MAX = RestartSessionResponse_Status_SESSION_NOT_RESTARTABLE;
constexpr int RestartSessionResponse_Status_Status_ARRAYSIZE = RestartSessionResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestartSessionResponse_Status_descriptor();
template<typename T>
inline const std::string& RestartSessionResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RestartSessionResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RestartSessionResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RestartSessionResponse_Status_descriptor(), enum_t_value);
}
inline bool RestartSessionResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RestartSessionResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RestartSessionResponse_Status>(
    RestartSessionResponse_Status_descriptor(), name, value);
}
enum SavedArrangementRequest_Action : int {
  SavedArrangementRequest_Action_RESTORE = 0,
  SavedArrangementRequest_Action_SAVE = 1,
  SavedArrangementRequest_Action_LIST = 2
};
bool SavedArrangementRequest_Action_IsValid(int value);
constexpr SavedArrangementRequest_Action SavedArrangementRequest_Action_Action_MIN = SavedArrangementRequest_Action_RESTORE;
constexpr SavedArrangementRequest_Action SavedArrangementRequest_Action_Action_MAX = SavedArrangementRequest_Action_LIST;
constexpr int SavedArrangementRequest_Action_Action_ARRAYSIZE = SavedArrangementRequest_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SavedArrangementRequest_Action_descriptor();
template<typename T>
inline const std::string& SavedArrangementRequest_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SavedArrangementRequest_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SavedArrangementRequest_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SavedArrangementRequest_Action_descriptor(), enum_t_value);
}
inline bool SavedArrangementRequest_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SavedArrangementRequest_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SavedArrangementRequest_Action>(
    SavedArrangementRequest_Action_descriptor(), name, value);
}
enum SavedArrangementResponse_Status : int {
  SavedArrangementResponse_Status_OK = 0,
  SavedArrangementResponse_Status_ARRANGEMENT_NOT_FOUND = 1,
  SavedArrangementResponse_Status_WINDOW_NOT_FOUND = 2,
  SavedArrangementResponse_Status_REQUEST_MALFORMED = 3
};
bool SavedArrangementResponse_Status_IsValid(int value);
constexpr SavedArrangementResponse_Status SavedArrangementResponse_Status_Status_MIN = SavedArrangementResponse_Status_OK;
constexpr SavedArrangementResponse_Status SavedArrangementResponse_Status_Status_MAX = SavedArrangementResponse_Status_REQUEST_MALFORMED;
constexpr int SavedArrangementResponse_Status_Status_ARRAYSIZE = SavedArrangementResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SavedArrangementResponse_Status_descriptor();
template<typename T>
inline const std::string& SavedArrangementResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SavedArrangementResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SavedArrangementResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SavedArrangementResponse_Status_descriptor(), enum_t_value);
}
inline bool SavedArrangementResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SavedArrangementResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SavedArrangementResponse_Status>(
    SavedArrangementResponse_Status_descriptor(), name, value);
}
enum VariableResponse_Status : int {
  VariableResponse_Status_OK = 0,
  VariableResponse_Status_SESSION_NOT_FOUND = 1,
  VariableResponse_Status_INVALID_NAME = 2,
  VariableResponse_Status_MISSING_SCOPE = 3,
  VariableResponse_Status_TAB_NOT_FOUND = 4,
  VariableResponse_Status_MULTI_GET_DISALLOWED = 5,
  VariableResponse_Status_WINDOW_NOT_FOUND = 6
};
bool VariableResponse_Status_IsValid(int value);
constexpr VariableResponse_Status VariableResponse_Status_Status_MIN = VariableResponse_Status_OK;
constexpr VariableResponse_Status VariableResponse_Status_Status_MAX = VariableResponse_Status_WINDOW_NOT_FOUND;
constexpr int VariableResponse_Status_Status_ARRAYSIZE = VariableResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableResponse_Status_descriptor();
template<typename T>
inline const std::string& VariableResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VariableResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VariableResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VariableResponse_Status_descriptor(), enum_t_value);
}
inline bool VariableResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VariableResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VariableResponse_Status>(
    VariableResponse_Status_descriptor(), name, value);
}
enum ActivateResponse_Status : int {
  ActivateResponse_Status_OK = 0,
  ActivateResponse_Status_BAD_IDENTIFIER = 1,
  ActivateResponse_Status_INVALID_OPTION = 2
};
bool ActivateResponse_Status_IsValid(int value);
constexpr ActivateResponse_Status ActivateResponse_Status_Status_MIN = ActivateResponse_Status_OK;
constexpr ActivateResponse_Status ActivateResponse_Status_Status_MAX = ActivateResponse_Status_INVALID_OPTION;
constexpr int ActivateResponse_Status_Status_ARRAYSIZE = ActivateResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivateResponse_Status_descriptor();
template<typename T>
inline const std::string& ActivateResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActivateResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActivateResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActivateResponse_Status_descriptor(), enum_t_value);
}
inline bool ActivateResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActivateResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActivateResponse_Status>(
    ActivateResponse_Status_descriptor(), name, value);
}
enum InjectResponse_Status : int {
  InjectResponse_Status_OK = 0,
  InjectResponse_Status_SESSION_NOT_FOUND = 1
};
bool InjectResponse_Status_IsValid(int value);
constexpr InjectResponse_Status InjectResponse_Status_Status_MIN = InjectResponse_Status_OK;
constexpr InjectResponse_Status InjectResponse_Status_Status_MAX = InjectResponse_Status_SESSION_NOT_FOUND;
constexpr int InjectResponse_Status_Status_ARRAYSIZE = InjectResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InjectResponse_Status_descriptor();
template<typename T>
inline const std::string& InjectResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InjectResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InjectResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InjectResponse_Status_descriptor(), enum_t_value);
}
inline bool InjectResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InjectResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InjectResponse_Status>(
    InjectResponse_Status_descriptor(), name, value);
}
enum GetPropertyResponse_Status : int {
  GetPropertyResponse_Status_OK = 0,
  GetPropertyResponse_Status_UNRECOGNIZED_NAME = 1,
  GetPropertyResponse_Status_INVALID_TARGET = 2
};
bool GetPropertyResponse_Status_IsValid(int value);
constexpr GetPropertyResponse_Status GetPropertyResponse_Status_Status_MIN = GetPropertyResponse_Status_OK;
constexpr GetPropertyResponse_Status GetPropertyResponse_Status_Status_MAX = GetPropertyResponse_Status_INVALID_TARGET;
constexpr int GetPropertyResponse_Status_Status_ARRAYSIZE = GetPropertyResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPropertyResponse_Status_descriptor();
template<typename T>
inline const std::string& GetPropertyResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetPropertyResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetPropertyResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetPropertyResponse_Status_descriptor(), enum_t_value);
}
inline bool GetPropertyResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetPropertyResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetPropertyResponse_Status>(
    GetPropertyResponse_Status_descriptor(), name, value);
}
enum SetPropertyResponse_Status : int {
  SetPropertyResponse_Status_OK = 0,
  SetPropertyResponse_Status_UNRECOGNIZED_NAME = 1,
  SetPropertyResponse_Status_INVALID_VALUE = 2,
  SetPropertyResponse_Status_INVALID_TARGET = 3,
  SetPropertyResponse_Status_DEFERRED = 4,
  SetPropertyResponse_Status_IMPOSSIBLE = 5,
  SetPropertyResponse_Status_FAILED = 6
};
bool SetPropertyResponse_Status_IsValid(int value);
constexpr SetPropertyResponse_Status SetPropertyResponse_Status_Status_MIN = SetPropertyResponse_Status_OK;
constexpr SetPropertyResponse_Status SetPropertyResponse_Status_Status_MAX = SetPropertyResponse_Status_FAILED;
constexpr int SetPropertyResponse_Status_Status_ARRAYSIZE = SetPropertyResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPropertyResponse_Status_descriptor();
template<typename T>
inline const std::string& SetPropertyResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetPropertyResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetPropertyResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetPropertyResponse_Status_descriptor(), enum_t_value);
}
inline bool SetPropertyResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetPropertyResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetPropertyResponse_Status>(
    SetPropertyResponse_Status_descriptor(), name, value);
}
enum RegisterToolRequest_ToolType : int {
  RegisterToolRequest_ToolType_WEB_VIEW_TOOL = 1
};
bool RegisterToolRequest_ToolType_IsValid(int value);
constexpr RegisterToolRequest_ToolType RegisterToolRequest_ToolType_ToolType_MIN = RegisterToolRequest_ToolType_WEB_VIEW_TOOL;
constexpr RegisterToolRequest_ToolType RegisterToolRequest_ToolType_ToolType_MAX = RegisterToolRequest_ToolType_WEB_VIEW_TOOL;
constexpr int RegisterToolRequest_ToolType_ToolType_ARRAYSIZE = RegisterToolRequest_ToolType_ToolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterToolRequest_ToolType_descriptor();
template<typename T>
inline const std::string& RegisterToolRequest_ToolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterToolRequest_ToolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterToolRequest_ToolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterToolRequest_ToolType_descriptor(), enum_t_value);
}
inline bool RegisterToolRequest_ToolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterToolRequest_ToolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterToolRequest_ToolType>(
    RegisterToolRequest_ToolType_descriptor(), name, value);
}
enum RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type : int {
  RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Checkbox = 1,
  RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_String = 2,
  RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_PositiveFloatingPoint = 3,
  RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Color = 4
};
bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_IsValid(int value);
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_MIN = RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Checkbox;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_MAX = RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Color;
constexpr int RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_ARRAYSIZE = RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_descriptor();
template<typename T>
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_descriptor(), enum_t_value);
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type>(
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_descriptor(), name, value);
}
enum RPCRegistrationRequest_StatusBarComponentAttributes_Format : int {
  RPCRegistrationRequest_StatusBarComponentAttributes_Format_PLAIN_TEXT = 0,
  RPCRegistrationRequest_StatusBarComponentAttributes_Format_HTML = 1
};
bool RPCRegistrationRequest_StatusBarComponentAttributes_Format_IsValid(int value);
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_MIN = RPCRegistrationRequest_StatusBarComponentAttributes_Format_PLAIN_TEXT;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_MAX = RPCRegistrationRequest_StatusBarComponentAttributes_Format_HTML;
constexpr int RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_ARRAYSIZE = RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCRegistrationRequest_StatusBarComponentAttributes_Format_descriptor();
template<typename T>
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RPCRegistrationRequest_StatusBarComponentAttributes_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RPCRegistrationRequest_StatusBarComponentAttributes_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_descriptor(), enum_t_value);
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RPCRegistrationRequest_StatusBarComponentAttributes_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RPCRegistrationRequest_StatusBarComponentAttributes_Format>(
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_descriptor(), name, value);
}
enum RPCRegistrationRequest_Role : int {
  RPCRegistrationRequest_Role_GENERIC = 1,
  RPCRegistrationRequest_Role_SESSION_TITLE = 2,
  RPCRegistrationRequest_Role_STATUS_BAR_COMPONENT = 3,
  RPCRegistrationRequest_Role_CONTEXT_MENU = 4
};
bool RPCRegistrationRequest_Role_IsValid(int value);
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest_Role_Role_MIN = RPCRegistrationRequest_Role_GENERIC;
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest_Role_Role_MAX = RPCRegistrationRequest_Role_CONTEXT_MENU;
constexpr int RPCRegistrationRequest_Role_Role_ARRAYSIZE = RPCRegistrationRequest_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCRegistrationRequest_Role_descriptor();
template<typename T>
inline const std::string& RPCRegistrationRequest_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RPCRegistrationRequest_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RPCRegistrationRequest_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RPCRegistrationRequest_Role_descriptor(), enum_t_value);
}
inline bool RPCRegistrationRequest_Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RPCRegistrationRequest_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RPCRegistrationRequest_Role>(
    RPCRegistrationRequest_Role_descriptor(), name, value);
}
enum RegisterToolResponse_Status : int {
  RegisterToolResponse_Status_OK = 0,
  RegisterToolResponse_Status_REQUEST_MALFORMED = 1,
  RegisterToolResponse_Status_PERMISSION_DENIED = 2
};
bool RegisterToolResponse_Status_IsValid(int value);
constexpr RegisterToolResponse_Status RegisterToolResponse_Status_Status_MIN = RegisterToolResponse_Status_OK;
constexpr RegisterToolResponse_Status RegisterToolResponse_Status_Status_MAX = RegisterToolResponse_Status_PERMISSION_DENIED;
constexpr int RegisterToolResponse_Status_Status_ARRAYSIZE = RegisterToolResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterToolResponse_Status_descriptor();
template<typename T>
inline const std::string& RegisterToolResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterToolResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterToolResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterToolResponse_Status_descriptor(), enum_t_value);
}
inline bool RegisterToolResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterToolResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterToolResponse_Status>(
    RegisterToolResponse_Status_descriptor(), name, value);
}
enum NotificationResponse_Status : int {
  NotificationResponse_Status_OK = 0,
  NotificationResponse_Status_SESSION_NOT_FOUND = 1,
  NotificationResponse_Status_REQUEST_MALFORMED = 2,
  NotificationResponse_Status_NOT_SUBSCRIBED = 3,
  NotificationResponse_Status_ALREADY_SUBSCRIBED = 4,
  NotificationResponse_Status_DUPLICATE_SERVER_ORIGINATED_RPC = 5,
  NotificationResponse_Status_INVALID_IDENTIFIER = 6
};
bool NotificationResponse_Status_IsValid(int value);
constexpr NotificationResponse_Status NotificationResponse_Status_Status_MIN = NotificationResponse_Status_OK;
constexpr NotificationResponse_Status NotificationResponse_Status_Status_MAX = NotificationResponse_Status_INVALID_IDENTIFIER;
constexpr int NotificationResponse_Status_Status_ARRAYSIZE = NotificationResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationResponse_Status_descriptor();
template<typename T>
inline const std::string& NotificationResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotificationResponse_Status_descriptor(), enum_t_value);
}
inline bool NotificationResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationResponse_Status>(
    NotificationResponse_Status_descriptor(), name, value);
}
enum KeystrokeNotification_Action : int {
  KeystrokeNotification_Action_KEY_DOWN = 0,
  KeystrokeNotification_Action_KEY_UP = 1,
  KeystrokeNotification_Action_FLAGS_CHANGED = 2
};
bool KeystrokeNotification_Action_IsValid(int value);
constexpr KeystrokeNotification_Action KeystrokeNotification_Action_Action_MIN = KeystrokeNotification_Action_KEY_DOWN;
constexpr KeystrokeNotification_Action KeystrokeNotification_Action_Action_MAX = KeystrokeNotification_Action_FLAGS_CHANGED;
constexpr int KeystrokeNotification_Action_Action_ARRAYSIZE = KeystrokeNotification_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeystrokeNotification_Action_descriptor();
template<typename T>
inline const std::string& KeystrokeNotification_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeystrokeNotification_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeystrokeNotification_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeystrokeNotification_Action_descriptor(), enum_t_value);
}
inline bool KeystrokeNotification_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeystrokeNotification_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeystrokeNotification_Action>(
    KeystrokeNotification_Action_descriptor(), name, value);
}
enum FocusChangedNotification_Window_WindowStatus : int {
  FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_BECAME_KEY = 0,
  FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_IS_CURRENT = 1,
  FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_RESIGNED_KEY = 2
};
bool FocusChangedNotification_Window_WindowStatus_IsValid(int value);
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window_WindowStatus_WindowStatus_MIN = FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_BECAME_KEY;
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window_WindowStatus_WindowStatus_MAX = FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_RESIGNED_KEY;
constexpr int FocusChangedNotification_Window_WindowStatus_WindowStatus_ARRAYSIZE = FocusChangedNotification_Window_WindowStatus_WindowStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FocusChangedNotification_Window_WindowStatus_descriptor();
template<typename T>
inline const std::string& FocusChangedNotification_Window_WindowStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FocusChangedNotification_Window_WindowStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FocusChangedNotification_Window_WindowStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FocusChangedNotification_Window_WindowStatus_descriptor(), enum_t_value);
}
inline bool FocusChangedNotification_Window_WindowStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FocusChangedNotification_Window_WindowStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FocusChangedNotification_Window_WindowStatus>(
    FocusChangedNotification_Window_WindowStatus_descriptor(), name, value);
}
enum GetBufferResponse_Status : int {
  GetBufferResponse_Status_OK = 0,
  GetBufferResponse_Status_SESSION_NOT_FOUND = 1,
  GetBufferResponse_Status_INVALID_LINE_RANGE = 2,
  GetBufferResponse_Status_REQUEST_MALFORMED = 3
};
bool GetBufferResponse_Status_IsValid(int value);
constexpr GetBufferResponse_Status GetBufferResponse_Status_Status_MIN = GetBufferResponse_Status_OK;
constexpr GetBufferResponse_Status GetBufferResponse_Status_Status_MAX = GetBufferResponse_Status_REQUEST_MALFORMED;
constexpr int GetBufferResponse_Status_Status_ARRAYSIZE = GetBufferResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetBufferResponse_Status_descriptor();
template<typename T>
inline const std::string& GetBufferResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetBufferResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetBufferResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetBufferResponse_Status_descriptor(), enum_t_value);
}
inline bool GetBufferResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetBufferResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetBufferResponse_Status>(
    GetBufferResponse_Status_descriptor(), name, value);
}
enum GetPromptResponse_Status : int {
  GetPromptResponse_Status_OK = 0,
  GetPromptResponse_Status_SESSION_NOT_FOUND = 1,
  GetPromptResponse_Status_REQUEST_MALFORMED = 2,
  GetPromptResponse_Status_PROMPT_UNAVAILABLE = 3
};
bool GetPromptResponse_Status_IsValid(int value);
constexpr GetPromptResponse_Status GetPromptResponse_Status_Status_MIN = GetPromptResponse_Status_OK;
constexpr GetPromptResponse_Status GetPromptResponse_Status_Status_MAX = GetPromptResponse_Status_PROMPT_UNAVAILABLE;
constexpr int GetPromptResponse_Status_Status_ARRAYSIZE = GetPromptResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPromptResponse_Status_descriptor();
template<typename T>
inline const std::string& GetPromptResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetPromptResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetPromptResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetPromptResponse_Status_descriptor(), enum_t_value);
}
inline bool GetPromptResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetPromptResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetPromptResponse_Status>(
    GetPromptResponse_Status_descriptor(), name, value);
}
enum GetPromptResponse_State : int {
  GetPromptResponse_State_EDITING = 0,
  GetPromptResponse_State_RUNNING = 1,
  GetPromptResponse_State_FINISHED = 2
};
bool GetPromptResponse_State_IsValid(int value);
constexpr GetPromptResponse_State GetPromptResponse_State_State_MIN = GetPromptResponse_State_EDITING;
constexpr GetPromptResponse_State GetPromptResponse_State_State_MAX = GetPromptResponse_State_FINISHED;
constexpr int GetPromptResponse_State_State_ARRAYSIZE = GetPromptResponse_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPromptResponse_State_descriptor();
template<typename T>
inline const std::string& GetPromptResponse_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetPromptResponse_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetPromptResponse_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetPromptResponse_State_descriptor(), enum_t_value);
}
inline bool GetPromptResponse_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetPromptResponse_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetPromptResponse_State>(
    GetPromptResponse_State_descriptor(), name, value);
}
enum ListPromptsResponse_Status : int {
  ListPromptsResponse_Status_OK = 0,
  ListPromptsResponse_Status_SESSION_NOT_FOUND = 1
};
bool ListPromptsResponse_Status_IsValid(int value);
constexpr ListPromptsResponse_Status ListPromptsResponse_Status_Status_MIN = ListPromptsResponse_Status_OK;
constexpr ListPromptsResponse_Status ListPromptsResponse_Status_Status_MAX = ListPromptsResponse_Status_SESSION_NOT_FOUND;
constexpr int ListPromptsResponse_Status_Status_ARRAYSIZE = ListPromptsResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListPromptsResponse_Status_descriptor();
template<typename T>
inline const std::string& ListPromptsResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListPromptsResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListPromptsResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListPromptsResponse_Status_descriptor(), enum_t_value);
}
inline bool ListPromptsResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ListPromptsResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListPromptsResponse_Status>(
    ListPromptsResponse_Status_descriptor(), name, value);
}
enum GetProfilePropertyResponse_Status : int {
  GetProfilePropertyResponse_Status_OK = 0,
  GetProfilePropertyResponse_Status_SESSION_NOT_FOUND = 1,
  GetProfilePropertyResponse_Status_REQUEST_MALFORMED = 2,
  GetProfilePropertyResponse_Status_ERROR = 3
};
bool GetProfilePropertyResponse_Status_IsValid(int value);
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse_Status_Status_MIN = GetProfilePropertyResponse_Status_OK;
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse_Status_Status_MAX = GetProfilePropertyResponse_Status_ERROR;
constexpr int GetProfilePropertyResponse_Status_Status_ARRAYSIZE = GetProfilePropertyResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetProfilePropertyResponse_Status_descriptor();
template<typename T>
inline const std::string& GetProfilePropertyResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetProfilePropertyResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetProfilePropertyResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetProfilePropertyResponse_Status_descriptor(), enum_t_value);
}
inline bool GetProfilePropertyResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetProfilePropertyResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetProfilePropertyResponse_Status>(
    GetProfilePropertyResponse_Status_descriptor(), name, value);
}
enum SetProfilePropertyResponse_Status : int {
  SetProfilePropertyResponse_Status_OK = 0,
  SetProfilePropertyResponse_Status_SESSION_NOT_FOUND = 1,
  SetProfilePropertyResponse_Status_REQUEST_MALFORMED = 2,
  SetProfilePropertyResponse_Status_BAD_GUID = 3
};
bool SetProfilePropertyResponse_Status_IsValid(int value);
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse_Status_Status_MIN = SetProfilePropertyResponse_Status_OK;
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse_Status_Status_MAX = SetProfilePropertyResponse_Status_BAD_GUID;
constexpr int SetProfilePropertyResponse_Status_Status_ARRAYSIZE = SetProfilePropertyResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetProfilePropertyResponse_Status_descriptor();
template<typename T>
inline const std::string& SetProfilePropertyResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetProfilePropertyResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetProfilePropertyResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetProfilePropertyResponse_Status_descriptor(), enum_t_value);
}
inline bool SetProfilePropertyResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetProfilePropertyResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetProfilePropertyResponse_Status>(
    SetProfilePropertyResponse_Status_descriptor(), name, value);
}
enum TransactionResponse_Status : int {
  TransactionResponse_Status_OK = 0,
  TransactionResponse_Status_NO_TRANSACTION = 1,
  TransactionResponse_Status_ALREADY_IN_TRANSACTION = 2
};
bool TransactionResponse_Status_IsValid(int value);
constexpr TransactionResponse_Status TransactionResponse_Status_Status_MIN = TransactionResponse_Status_OK;
constexpr TransactionResponse_Status TransactionResponse_Status_Status_MAX = TransactionResponse_Status_ALREADY_IN_TRANSACTION;
constexpr int TransactionResponse_Status_Status_ARRAYSIZE = TransactionResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResponse_Status_descriptor();
template<typename T>
inline const std::string& TransactionResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionResponse_Status_descriptor(), enum_t_value);
}
inline bool TransactionResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionResponse_Status>(
    TransactionResponse_Status_descriptor(), name, value);
}
enum LineContents_Continuation : int {
  LineContents_Continuation_CONTINUATION_HARD_EOL = 1,
  LineContents_Continuation_CONTINUATION_SOFT_EOL = 2
};
bool LineContents_Continuation_IsValid(int value);
constexpr LineContents_Continuation LineContents_Continuation_Continuation_MIN = LineContents_Continuation_CONTINUATION_HARD_EOL;
constexpr LineContents_Continuation LineContents_Continuation_Continuation_MAX = LineContents_Continuation_CONTINUATION_SOFT_EOL;
constexpr int LineContents_Continuation_Continuation_ARRAYSIZE = LineContents_Continuation_Continuation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineContents_Continuation_descriptor();
template<typename T>
inline const std::string& LineContents_Continuation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineContents_Continuation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineContents_Continuation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LineContents_Continuation_descriptor(), enum_t_value);
}
inline bool LineContents_Continuation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineContents_Continuation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LineContents_Continuation>(
    LineContents_Continuation_descriptor(), name, value);
}
enum SendTextResponse_Status : int {
  SendTextResponse_Status_OK = 0,
  SendTextResponse_Status_SESSION_NOT_FOUND = 1
};
bool SendTextResponse_Status_IsValid(int value);
constexpr SendTextResponse_Status SendTextResponse_Status_Status_MIN = SendTextResponse_Status_OK;
constexpr SendTextResponse_Status SendTextResponse_Status_Status_MAX = SendTextResponse_Status_SESSION_NOT_FOUND;
constexpr int SendTextResponse_Status_Status_ARRAYSIZE = SendTextResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SendTextResponse_Status_descriptor();
template<typename T>
inline const std::string& SendTextResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SendTextResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SendTextResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SendTextResponse_Status_descriptor(), enum_t_value);
}
inline bool SendTextResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SendTextResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SendTextResponse_Status>(
    SendTextResponse_Status_descriptor(), name, value);
}
enum CreateTabResponse_Status : int {
  CreateTabResponse_Status_OK = 0,
  CreateTabResponse_Status_INVALID_PROFILE_NAME = 1,
  CreateTabResponse_Status_INVALID_WINDOW_ID = 2,
  CreateTabResponse_Status_INVALID_TAB_INDEX = 3,
  CreateTabResponse_Status_MISSING_SUBSTITUTION = 4
};
bool CreateTabResponse_Status_IsValid(int value);
constexpr CreateTabResponse_Status CreateTabResponse_Status_Status_MIN = CreateTabResponse_Status_OK;
constexpr CreateTabResponse_Status CreateTabResponse_Status_Status_MAX = CreateTabResponse_Status_MISSING_SUBSTITUTION;
constexpr int CreateTabResponse_Status_Status_ARRAYSIZE = CreateTabResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateTabResponse_Status_descriptor();
template<typename T>
inline const std::string& CreateTabResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateTabResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateTabResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateTabResponse_Status_descriptor(), enum_t_value);
}
inline bool CreateTabResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateTabResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateTabResponse_Status>(
    CreateTabResponse_Status_descriptor(), name, value);
}
enum SplitPaneRequest_SplitDirection : int {
  SplitPaneRequest_SplitDirection_VERTICAL = 0,
  SplitPaneRequest_SplitDirection_HORIZONTAL = 1
};
bool SplitPaneRequest_SplitDirection_IsValid(int value);
constexpr SplitPaneRequest_SplitDirection SplitPaneRequest_SplitDirection_SplitDirection_MIN = SplitPaneRequest_SplitDirection_VERTICAL;
constexpr SplitPaneRequest_SplitDirection SplitPaneRequest_SplitDirection_SplitDirection_MAX = SplitPaneRequest_SplitDirection_HORIZONTAL;
constexpr int SplitPaneRequest_SplitDirection_SplitDirection_ARRAYSIZE = SplitPaneRequest_SplitDirection_SplitDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SplitPaneRequest_SplitDirection_descriptor();
template<typename T>
inline const std::string& SplitPaneRequest_SplitDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SplitPaneRequest_SplitDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SplitPaneRequest_SplitDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SplitPaneRequest_SplitDirection_descriptor(), enum_t_value);
}
inline bool SplitPaneRequest_SplitDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SplitPaneRequest_SplitDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SplitPaneRequest_SplitDirection>(
    SplitPaneRequest_SplitDirection_descriptor(), name, value);
}
enum SplitPaneResponse_Status : int {
  SplitPaneResponse_Status_OK = 0,
  SplitPaneResponse_Status_SESSION_NOT_FOUND = 1,
  SplitPaneResponse_Status_INVALID_PROFILE_NAME = 2,
  SplitPaneResponse_Status_CANNOT_SPLIT = 3,
  SplitPaneResponse_Status_MALFORMED_CUSTOM_PROFILE_PROPERTY = 4
};
bool SplitPaneResponse_Status_IsValid(int value);
constexpr SplitPaneResponse_Status SplitPaneResponse_Status_Status_MIN = SplitPaneResponse_Status_OK;
constexpr SplitPaneResponse_Status SplitPaneResponse_Status_Status_MAX = SplitPaneResponse_Status_MALFORMED_CUSTOM_PROFILE_PROPERTY;
constexpr int SplitPaneResponse_Status_Status_ARRAYSIZE = SplitPaneResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SplitPaneResponse_Status_descriptor();
template<typename T>
inline const std::string& SplitPaneResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SplitPaneResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SplitPaneResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SplitPaneResponse_Status_descriptor(), enum_t_value);
}
inline bool SplitPaneResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SplitPaneResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SplitPaneResponse_Status>(
    SplitPaneResponse_Status_descriptor(), name, value);
}
enum SelectionMode : int {
  CHARACTER = 0,
  WORD = 1,
  LINE = 2,
  SMART = 3,
  BOX = 4,
  WHOLE_LINE = 5
};
bool SelectionMode_IsValid(int value);
constexpr SelectionMode SelectionMode_MIN = CHARACTER;
constexpr SelectionMode SelectionMode_MAX = WHOLE_LINE;
constexpr int SelectionMode_ARRAYSIZE = SelectionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionMode_descriptor();
template<typename T>
inline const std::string& SelectionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectionMode_descriptor(), enum_t_value);
}
inline bool SelectionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectionMode>(
    SelectionMode_descriptor(), name, value);
}
enum NotificationType : int {
  NOTIFY_ON_KEYSTROKE = 1,
  NOTIFY_ON_SCREEN_UPDATE = 2,
  NOTIFY_ON_PROMPT = 3,
  NOTIFY_ON_LOCATION_CHANGE PROTOBUF_DEPRECATED_ENUM = 4,
  NOTIFY_ON_CUSTOM_ESCAPE_SEQUENCE = 5,
  NOTIFY_ON_VARIABLE_CHANGE = 12,
  KEYSTROKE_FILTER = 14,
  NOTIFY_ON_NEW_SESSION = 6,
  NOTIFY_ON_TERMINATE_SESSION = 7,
  NOTIFY_ON_LAYOUT_CHANGE = 8,
  NOTIFY_ON_FOCUS_CHANGE = 9,
  NOTIFY_ON_SERVER_ORIGINATED_RPC = 10,
  NOTIFY_ON_BROADCAST_CHANGE = 11,
  NOTIFY_ON_PROFILE_CHANGE = 13
};
bool NotificationType_IsValid(int value);
constexpr NotificationType NotificationType_MIN = NOTIFY_ON_KEYSTROKE;
constexpr NotificationType NotificationType_MAX = KEYSTROKE_FILTER;
constexpr int NotificationType_ARRAYSIZE = NotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationType_descriptor();
template<typename T>
inline const std::string& NotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotificationType_descriptor(), enum_t_value);
}
inline bool NotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationType>(
    NotificationType_descriptor(), name, value);
}
enum Modifiers : int {
  CONTROL = 1,
  OPTION = 2,
  COMMAND = 3,
  SHIFT = 4,
  FUNCTION = 5,
  NUMPAD = 6
};
bool Modifiers_IsValid(int value);
constexpr Modifiers Modifiers_MIN = CONTROL;
constexpr Modifiers Modifiers_MAX = NUMPAD;
constexpr int Modifiers_ARRAYSIZE = Modifiers_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Modifiers_descriptor();
template<typename T>
inline const std::string& Modifiers_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Modifiers>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Modifiers_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Modifiers_descriptor(), enum_t_value);
}
inline bool Modifiers_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Modifiers* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Modifiers>(
    Modifiers_descriptor(), name, value);
}
enum VariableScope : int {
  SESSION = 1,
  TAB = 2,
  WINDOW = 3,
  APP = 4
};
bool VariableScope_IsValid(int value);
constexpr VariableScope VariableScope_MIN = SESSION;
constexpr VariableScope VariableScope_MAX = APP;
constexpr int VariableScope_ARRAYSIZE = VariableScope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableScope_descriptor();
template<typename T>
inline const std::string& VariableScope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VariableScope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VariableScope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VariableScope_descriptor(), enum_t_value);
}
inline bool VariableScope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VariableScope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VariableScope>(
    VariableScope_descriptor(), name, value);
}
enum PromptMonitorMode : int {
  PROMPT = 1,
  COMMAND_START = 2,
  COMMAND_END = 3
};
bool PromptMonitorMode_IsValid(int value);
constexpr PromptMonitorMode PromptMonitorMode_MIN = PROMPT;
constexpr PromptMonitorMode PromptMonitorMode_MAX = COMMAND_END;
constexpr int PromptMonitorMode_ARRAYSIZE = PromptMonitorMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PromptMonitorMode_descriptor();
template<typename T>
inline const std::string& PromptMonitorMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PromptMonitorMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PromptMonitorMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PromptMonitorMode_descriptor(), enum_t_value);
}
inline bool PromptMonitorMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PromptMonitorMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PromptMonitorMode>(
    PromptMonitorMode_descriptor(), name, value);
}
// ===================================================================

class ClientOriginatedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ClientOriginatedMessage) */ {
 public:
  inline ClientOriginatedMessage() : ClientOriginatedMessage(nullptr) {}
  ~ClientOriginatedMessage() override;
  explicit constexpr ClientOriginatedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientOriginatedMessage(const ClientOriginatedMessage& from);
  ClientOriginatedMessage(ClientOriginatedMessage&& from) noexcept
    : ClientOriginatedMessage() {
    *this = ::std::move(from);
  }

  inline ClientOriginatedMessage& operator=(const ClientOriginatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientOriginatedMessage& operator=(ClientOriginatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientOriginatedMessage& default_instance() {
    return *internal_default_instance();
  }
  enum SubmessageCase {
    kGetBufferRequest = 100,
    kGetPromptRequest = 101,
    kTransactionRequest = 102,
    kNotificationRequest = 103,
    kRegisterToolRequest = 104,
    kSetProfilePropertyRequest = 105,
    kListSessionsRequest = 106,
    kSendTextRequest = 107,
    kCreateTabRequest = 108,
    kSplitPaneRequest = 109,
    kGetProfilePropertyRequest = 110,
    kSetPropertyRequest = 111,
    kGetPropertyRequest = 112,
    kInjectRequest = 113,
    kActivateRequest = 114,
    kVariableRequest = 115,
    kSavedArrangementRequest = 116,
    kFocusRequest = 117,
    kListProfilesRequest = 118,
    kServerOriginatedRpcResultRequest = 119,
    kRestartSessionRequest = 120,
    kMenuItemRequest = 121,
    kSetTabLayoutRequest = 122,
    kGetBroadcastDomainsRequest = 123,
    kTmuxRequest = 124,
    kReorderTabsRequest = 125,
    kPreferencesRequest = 126,
    kColorPresetRequest = 127,
    kSelectionRequest = 128,
    kStatusBarComponentRequest = 129,
    kSetBroadcastDomainsRequest = 130,
    kCloseRequest = 131,
    kInvokeFunctionRequest = 132,
    kListPromptsRequest = 133,
    SUBMESSAGE_NOT_SET = 0,
  };

  static inline const ClientOriginatedMessage* internal_default_instance() {
    return reinterpret_cast<const ClientOriginatedMessage*>(
               &_ClientOriginatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientOriginatedMessage& a, ClientOriginatedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientOriginatedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientOriginatedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientOriginatedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientOriginatedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientOriginatedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientOriginatedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientOriginatedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ClientOriginatedMessage";
  }
  protected:
  explicit ClientOriginatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGetBufferRequestFieldNumber = 100,
    kGetPromptRequestFieldNumber = 101,
    kTransactionRequestFieldNumber = 102,
    kNotificationRequestFieldNumber = 103,
    kRegisterToolRequestFieldNumber = 104,
    kSetProfilePropertyRequestFieldNumber = 105,
    kListSessionsRequestFieldNumber = 106,
    kSendTextRequestFieldNumber = 107,
    kCreateTabRequestFieldNumber = 108,
    kSplitPaneRequestFieldNumber = 109,
    kGetProfilePropertyRequestFieldNumber = 110,
    kSetPropertyRequestFieldNumber = 111,
    kGetPropertyRequestFieldNumber = 112,
    kInjectRequestFieldNumber = 113,
    kActivateRequestFieldNumber = 114,
    kVariableRequestFieldNumber = 115,
    kSavedArrangementRequestFieldNumber = 116,
    kFocusRequestFieldNumber = 117,
    kListProfilesRequestFieldNumber = 118,
    kServerOriginatedRpcResultRequestFieldNumber = 119,
    kRestartSessionRequestFieldNumber = 120,
    kMenuItemRequestFieldNumber = 121,
    kSetTabLayoutRequestFieldNumber = 122,
    kGetBroadcastDomainsRequestFieldNumber = 123,
    kTmuxRequestFieldNumber = 124,
    kReorderTabsRequestFieldNumber = 125,
    kPreferencesRequestFieldNumber = 126,
    kColorPresetRequestFieldNumber = 127,
    kSelectionRequestFieldNumber = 128,
    kStatusBarComponentRequestFieldNumber = 129,
    kSetBroadcastDomainsRequestFieldNumber = 130,
    kCloseRequestFieldNumber = 131,
    kInvokeFunctionRequestFieldNumber = 132,
    kListPromptsRequestFieldNumber = 133,
  };
  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // .iterm2.GetBufferRequest get_buffer_request = 100;
  bool has_get_buffer_request() const;
  private:
  bool _internal_has_get_buffer_request() const;
  public:
  void clear_get_buffer_request();
  const ::iterm2::GetBufferRequest& get_buffer_request() const;
  PROTOBUF_NODISCARD ::iterm2::GetBufferRequest* release_get_buffer_request();
  ::iterm2::GetBufferRequest* mutable_get_buffer_request();
  void set_allocated_get_buffer_request(::iterm2::GetBufferRequest* get_buffer_request);
  private:
  const ::iterm2::GetBufferRequest& _internal_get_buffer_request() const;
  ::iterm2::GetBufferRequest* _internal_mutable_get_buffer_request();
  public:
  void unsafe_arena_set_allocated_get_buffer_request(
      ::iterm2::GetBufferRequest* get_buffer_request);
  ::iterm2::GetBufferRequest* unsafe_arena_release_get_buffer_request();

  // .iterm2.GetPromptRequest get_prompt_request = 101;
  bool has_get_prompt_request() const;
  private:
  bool _internal_has_get_prompt_request() const;
  public:
  void clear_get_prompt_request();
  const ::iterm2::GetPromptRequest& get_prompt_request() const;
  PROTOBUF_NODISCARD ::iterm2::GetPromptRequest* release_get_prompt_request();
  ::iterm2::GetPromptRequest* mutable_get_prompt_request();
  void set_allocated_get_prompt_request(::iterm2::GetPromptRequest* get_prompt_request);
  private:
  const ::iterm2::GetPromptRequest& _internal_get_prompt_request() const;
  ::iterm2::GetPromptRequest* _internal_mutable_get_prompt_request();
  public:
  void unsafe_arena_set_allocated_get_prompt_request(
      ::iterm2::GetPromptRequest* get_prompt_request);
  ::iterm2::GetPromptRequest* unsafe_arena_release_get_prompt_request();

  // .iterm2.TransactionRequest transaction_request = 102;
  bool has_transaction_request() const;
  private:
  bool _internal_has_transaction_request() const;
  public:
  void clear_transaction_request();
  const ::iterm2::TransactionRequest& transaction_request() const;
  PROTOBUF_NODISCARD ::iterm2::TransactionRequest* release_transaction_request();
  ::iterm2::TransactionRequest* mutable_transaction_request();
  void set_allocated_transaction_request(::iterm2::TransactionRequest* transaction_request);
  private:
  const ::iterm2::TransactionRequest& _internal_transaction_request() const;
  ::iterm2::TransactionRequest* _internal_mutable_transaction_request();
  public:
  void unsafe_arena_set_allocated_transaction_request(
      ::iterm2::TransactionRequest* transaction_request);
  ::iterm2::TransactionRequest* unsafe_arena_release_transaction_request();

  // .iterm2.NotificationRequest notification_request = 103;
  bool has_notification_request() const;
  private:
  bool _internal_has_notification_request() const;
  public:
  void clear_notification_request();
  const ::iterm2::NotificationRequest& notification_request() const;
  PROTOBUF_NODISCARD ::iterm2::NotificationRequest* release_notification_request();
  ::iterm2::NotificationRequest* mutable_notification_request();
  void set_allocated_notification_request(::iterm2::NotificationRequest* notification_request);
  private:
  const ::iterm2::NotificationRequest& _internal_notification_request() const;
  ::iterm2::NotificationRequest* _internal_mutable_notification_request();
  public:
  void unsafe_arena_set_allocated_notification_request(
      ::iterm2::NotificationRequest* notification_request);
  ::iterm2::NotificationRequest* unsafe_arena_release_notification_request();

  // .iterm2.RegisterToolRequest register_tool_request = 104;
  bool has_register_tool_request() const;
  private:
  bool _internal_has_register_tool_request() const;
  public:
  void clear_register_tool_request();
  const ::iterm2::RegisterToolRequest& register_tool_request() const;
  PROTOBUF_NODISCARD ::iterm2::RegisterToolRequest* release_register_tool_request();
  ::iterm2::RegisterToolRequest* mutable_register_tool_request();
  void set_allocated_register_tool_request(::iterm2::RegisterToolRequest* register_tool_request);
  private:
  const ::iterm2::RegisterToolRequest& _internal_register_tool_request() const;
  ::iterm2::RegisterToolRequest* _internal_mutable_register_tool_request();
  public:
  void unsafe_arena_set_allocated_register_tool_request(
      ::iterm2::RegisterToolRequest* register_tool_request);
  ::iterm2::RegisterToolRequest* unsafe_arena_release_register_tool_request();

  // .iterm2.SetProfilePropertyRequest set_profile_property_request = 105;
  bool has_set_profile_property_request() const;
  private:
  bool _internal_has_set_profile_property_request() const;
  public:
  void clear_set_profile_property_request();
  const ::iterm2::SetProfilePropertyRequest& set_profile_property_request() const;
  PROTOBUF_NODISCARD ::iterm2::SetProfilePropertyRequest* release_set_profile_property_request();
  ::iterm2::SetProfilePropertyRequest* mutable_set_profile_property_request();
  void set_allocated_set_profile_property_request(::iterm2::SetProfilePropertyRequest* set_profile_property_request);
  private:
  const ::iterm2::SetProfilePropertyRequest& _internal_set_profile_property_request() const;
  ::iterm2::SetProfilePropertyRequest* _internal_mutable_set_profile_property_request();
  public:
  void unsafe_arena_set_allocated_set_profile_property_request(
      ::iterm2::SetProfilePropertyRequest* set_profile_property_request);
  ::iterm2::SetProfilePropertyRequest* unsafe_arena_release_set_profile_property_request();

  // .iterm2.ListSessionsRequest list_sessions_request = 106;
  bool has_list_sessions_request() const;
  private:
  bool _internal_has_list_sessions_request() const;
  public:
  void clear_list_sessions_request();
  const ::iterm2::ListSessionsRequest& list_sessions_request() const;
  PROTOBUF_NODISCARD ::iterm2::ListSessionsRequest* release_list_sessions_request();
  ::iterm2::ListSessionsRequest* mutable_list_sessions_request();
  void set_allocated_list_sessions_request(::iterm2::ListSessionsRequest* list_sessions_request);
  private:
  const ::iterm2::ListSessionsRequest& _internal_list_sessions_request() const;
  ::iterm2::ListSessionsRequest* _internal_mutable_list_sessions_request();
  public:
  void unsafe_arena_set_allocated_list_sessions_request(
      ::iterm2::ListSessionsRequest* list_sessions_request);
  ::iterm2::ListSessionsRequest* unsafe_arena_release_list_sessions_request();

  // .iterm2.SendTextRequest send_text_request = 107;
  bool has_send_text_request() const;
  private:
  bool _internal_has_send_text_request() const;
  public:
  void clear_send_text_request();
  const ::iterm2::SendTextRequest& send_text_request() const;
  PROTOBUF_NODISCARD ::iterm2::SendTextRequest* release_send_text_request();
  ::iterm2::SendTextRequest* mutable_send_text_request();
  void set_allocated_send_text_request(::iterm2::SendTextRequest* send_text_request);
  private:
  const ::iterm2::SendTextRequest& _internal_send_text_request() const;
  ::iterm2::SendTextRequest* _internal_mutable_send_text_request();
  public:
  void unsafe_arena_set_allocated_send_text_request(
      ::iterm2::SendTextRequest* send_text_request);
  ::iterm2::SendTextRequest* unsafe_arena_release_send_text_request();

  // .iterm2.CreateTabRequest create_tab_request = 108;
  bool has_create_tab_request() const;
  private:
  bool _internal_has_create_tab_request() const;
  public:
  void clear_create_tab_request();
  const ::iterm2::CreateTabRequest& create_tab_request() const;
  PROTOBUF_NODISCARD ::iterm2::CreateTabRequest* release_create_tab_request();
  ::iterm2::CreateTabRequest* mutable_create_tab_request();
  void set_allocated_create_tab_request(::iterm2::CreateTabRequest* create_tab_request);
  private:
  const ::iterm2::CreateTabRequest& _internal_create_tab_request() const;
  ::iterm2::CreateTabRequest* _internal_mutable_create_tab_request();
  public:
  void unsafe_arena_set_allocated_create_tab_request(
      ::iterm2::CreateTabRequest* create_tab_request);
  ::iterm2::CreateTabRequest* unsafe_arena_release_create_tab_request();

  // .iterm2.SplitPaneRequest split_pane_request = 109;
  bool has_split_pane_request() const;
  private:
  bool _internal_has_split_pane_request() const;
  public:
  void clear_split_pane_request();
  const ::iterm2::SplitPaneRequest& split_pane_request() const;
  PROTOBUF_NODISCARD ::iterm2::SplitPaneRequest* release_split_pane_request();
  ::iterm2::SplitPaneRequest* mutable_split_pane_request();
  void set_allocated_split_pane_request(::iterm2::SplitPaneRequest* split_pane_request);
  private:
  const ::iterm2::SplitPaneRequest& _internal_split_pane_request() const;
  ::iterm2::SplitPaneRequest* _internal_mutable_split_pane_request();
  public:
  void unsafe_arena_set_allocated_split_pane_request(
      ::iterm2::SplitPaneRequest* split_pane_request);
  ::iterm2::SplitPaneRequest* unsafe_arena_release_split_pane_request();

  // .iterm2.GetProfilePropertyRequest get_profile_property_request = 110;
  bool has_get_profile_property_request() const;
  private:
  bool _internal_has_get_profile_property_request() const;
  public:
  void clear_get_profile_property_request();
  const ::iterm2::GetProfilePropertyRequest& get_profile_property_request() const;
  PROTOBUF_NODISCARD ::iterm2::GetProfilePropertyRequest* release_get_profile_property_request();
  ::iterm2::GetProfilePropertyRequest* mutable_get_profile_property_request();
  void set_allocated_get_profile_property_request(::iterm2::GetProfilePropertyRequest* get_profile_property_request);
  private:
  const ::iterm2::GetProfilePropertyRequest& _internal_get_profile_property_request() const;
  ::iterm2::GetProfilePropertyRequest* _internal_mutable_get_profile_property_request();
  public:
  void unsafe_arena_set_allocated_get_profile_property_request(
      ::iterm2::GetProfilePropertyRequest* get_profile_property_request);
  ::iterm2::GetProfilePropertyRequest* unsafe_arena_release_get_profile_property_request();

  // .iterm2.SetPropertyRequest set_property_request = 111;
  bool has_set_property_request() const;
  private:
  bool _internal_has_set_property_request() const;
  public:
  void clear_set_property_request();
  const ::iterm2::SetPropertyRequest& set_property_request() const;
  PROTOBUF_NODISCARD ::iterm2::SetPropertyRequest* release_set_property_request();
  ::iterm2::SetPropertyRequest* mutable_set_property_request();
  void set_allocated_set_property_request(::iterm2::SetPropertyRequest* set_property_request);
  private:
  const ::iterm2::SetPropertyRequest& _internal_set_property_request() const;
  ::iterm2::SetPropertyRequest* _internal_mutable_set_property_request();
  public:
  void unsafe_arena_set_allocated_set_property_request(
      ::iterm2::SetPropertyRequest* set_property_request);
  ::iterm2::SetPropertyRequest* unsafe_arena_release_set_property_request();

  // .iterm2.GetPropertyRequest get_property_request = 112;
  bool has_get_property_request() const;
  private:
  bool _internal_has_get_property_request() const;
  public:
  void clear_get_property_request();
  const ::iterm2::GetPropertyRequest& get_property_request() const;
  PROTOBUF_NODISCARD ::iterm2::GetPropertyRequest* release_get_property_request();
  ::iterm2::GetPropertyRequest* mutable_get_property_request();
  void set_allocated_get_property_request(::iterm2::GetPropertyRequest* get_property_request);
  private:
  const ::iterm2::GetPropertyRequest& _internal_get_property_request() const;
  ::iterm2::GetPropertyRequest* _internal_mutable_get_property_request();
  public:
  void unsafe_arena_set_allocated_get_property_request(
      ::iterm2::GetPropertyRequest* get_property_request);
  ::iterm2::GetPropertyRequest* unsafe_arena_release_get_property_request();

  // .iterm2.InjectRequest inject_request = 113;
  bool has_inject_request() const;
  private:
  bool _internal_has_inject_request() const;
  public:
  void clear_inject_request();
  const ::iterm2::InjectRequest& inject_request() const;
  PROTOBUF_NODISCARD ::iterm2::InjectRequest* release_inject_request();
  ::iterm2::InjectRequest* mutable_inject_request();
  void set_allocated_inject_request(::iterm2::InjectRequest* inject_request);
  private:
  const ::iterm2::InjectRequest& _internal_inject_request() const;
  ::iterm2::InjectRequest* _internal_mutable_inject_request();
  public:
  void unsafe_arena_set_allocated_inject_request(
      ::iterm2::InjectRequest* inject_request);
  ::iterm2::InjectRequest* unsafe_arena_release_inject_request();

  // .iterm2.ActivateRequest activate_request = 114;
  bool has_activate_request() const;
  private:
  bool _internal_has_activate_request() const;
  public:
  void clear_activate_request();
  const ::iterm2::ActivateRequest& activate_request() const;
  PROTOBUF_NODISCARD ::iterm2::ActivateRequest* release_activate_request();
  ::iterm2::ActivateRequest* mutable_activate_request();
  void set_allocated_activate_request(::iterm2::ActivateRequest* activate_request);
  private:
  const ::iterm2::ActivateRequest& _internal_activate_request() const;
  ::iterm2::ActivateRequest* _internal_mutable_activate_request();
  public:
  void unsafe_arena_set_allocated_activate_request(
      ::iterm2::ActivateRequest* activate_request);
  ::iterm2::ActivateRequest* unsafe_arena_release_activate_request();

  // .iterm2.VariableRequest variable_request = 115;
  bool has_variable_request() const;
  private:
  bool _internal_has_variable_request() const;
  public:
  void clear_variable_request();
  const ::iterm2::VariableRequest& variable_request() const;
  PROTOBUF_NODISCARD ::iterm2::VariableRequest* release_variable_request();
  ::iterm2::VariableRequest* mutable_variable_request();
  void set_allocated_variable_request(::iterm2::VariableRequest* variable_request);
  private:
  const ::iterm2::VariableRequest& _internal_variable_request() const;
  ::iterm2::VariableRequest* _internal_mutable_variable_request();
  public:
  void unsafe_arena_set_allocated_variable_request(
      ::iterm2::VariableRequest* variable_request);
  ::iterm2::VariableRequest* unsafe_arena_release_variable_request();

  // .iterm2.SavedArrangementRequest saved_arrangement_request = 116;
  bool has_saved_arrangement_request() const;
  private:
  bool _internal_has_saved_arrangement_request() const;
  public:
  void clear_saved_arrangement_request();
  const ::iterm2::SavedArrangementRequest& saved_arrangement_request() const;
  PROTOBUF_NODISCARD ::iterm2::SavedArrangementRequest* release_saved_arrangement_request();
  ::iterm2::SavedArrangementRequest* mutable_saved_arrangement_request();
  void set_allocated_saved_arrangement_request(::iterm2::SavedArrangementRequest* saved_arrangement_request);
  private:
  const ::iterm2::SavedArrangementRequest& _internal_saved_arrangement_request() const;
  ::iterm2::SavedArrangementRequest* _internal_mutable_saved_arrangement_request();
  public:
  void unsafe_arena_set_allocated_saved_arrangement_request(
      ::iterm2::SavedArrangementRequest* saved_arrangement_request);
  ::iterm2::SavedArrangementRequest* unsafe_arena_release_saved_arrangement_request();

  // .iterm2.FocusRequest focus_request = 117;
  bool has_focus_request() const;
  private:
  bool _internal_has_focus_request() const;
  public:
  void clear_focus_request();
  const ::iterm2::FocusRequest& focus_request() const;
  PROTOBUF_NODISCARD ::iterm2::FocusRequest* release_focus_request();
  ::iterm2::FocusRequest* mutable_focus_request();
  void set_allocated_focus_request(::iterm2::FocusRequest* focus_request);
  private:
  const ::iterm2::FocusRequest& _internal_focus_request() const;
  ::iterm2::FocusRequest* _internal_mutable_focus_request();
  public:
  void unsafe_arena_set_allocated_focus_request(
      ::iterm2::FocusRequest* focus_request);
  ::iterm2::FocusRequest* unsafe_arena_release_focus_request();

  // .iterm2.ListProfilesRequest list_profiles_request = 118;
  bool has_list_profiles_request() const;
  private:
  bool _internal_has_list_profiles_request() const;
  public:
  void clear_list_profiles_request();
  const ::iterm2::ListProfilesRequest& list_profiles_request() const;
  PROTOBUF_NODISCARD ::iterm2::ListProfilesRequest* release_list_profiles_request();
  ::iterm2::ListProfilesRequest* mutable_list_profiles_request();
  void set_allocated_list_profiles_request(::iterm2::ListProfilesRequest* list_profiles_request);
  private:
  const ::iterm2::ListProfilesRequest& _internal_list_profiles_request() const;
  ::iterm2::ListProfilesRequest* _internal_mutable_list_profiles_request();
  public:
  void unsafe_arena_set_allocated_list_profiles_request(
      ::iterm2::ListProfilesRequest* list_profiles_request);
  ::iterm2::ListProfilesRequest* unsafe_arena_release_list_profiles_request();

  // .iterm2.ServerOriginatedRPCResultRequest server_originated_rpc_result_request = 119;
  bool has_server_originated_rpc_result_request() const;
  private:
  bool _internal_has_server_originated_rpc_result_request() const;
  public:
  void clear_server_originated_rpc_result_request();
  const ::iterm2::ServerOriginatedRPCResultRequest& server_originated_rpc_result_request() const;
  PROTOBUF_NODISCARD ::iterm2::ServerOriginatedRPCResultRequest* release_server_originated_rpc_result_request();
  ::iterm2::ServerOriginatedRPCResultRequest* mutable_server_originated_rpc_result_request();
  void set_allocated_server_originated_rpc_result_request(::iterm2::ServerOriginatedRPCResultRequest* server_originated_rpc_result_request);
  private:
  const ::iterm2::ServerOriginatedRPCResultRequest& _internal_server_originated_rpc_result_request() const;
  ::iterm2::ServerOriginatedRPCResultRequest* _internal_mutable_server_originated_rpc_result_request();
  public:
  void unsafe_arena_set_allocated_server_originated_rpc_result_request(
      ::iterm2::ServerOriginatedRPCResultRequest* server_originated_rpc_result_request);
  ::iterm2::ServerOriginatedRPCResultRequest* unsafe_arena_release_server_originated_rpc_result_request();

  // .iterm2.RestartSessionRequest restart_session_request = 120;
  bool has_restart_session_request() const;
  private:
  bool _internal_has_restart_session_request() const;
  public:
  void clear_restart_session_request();
  const ::iterm2::RestartSessionRequest& restart_session_request() const;
  PROTOBUF_NODISCARD ::iterm2::RestartSessionRequest* release_restart_session_request();
  ::iterm2::RestartSessionRequest* mutable_restart_session_request();
  void set_allocated_restart_session_request(::iterm2::RestartSessionRequest* restart_session_request);
  private:
  const ::iterm2::RestartSessionRequest& _internal_restart_session_request() const;
  ::iterm2::RestartSessionRequest* _internal_mutable_restart_session_request();
  public:
  void unsafe_arena_set_allocated_restart_session_request(
      ::iterm2::RestartSessionRequest* restart_session_request);
  ::iterm2::RestartSessionRequest* unsafe_arena_release_restart_session_request();

  // .iterm2.MenuItemRequest menu_item_request = 121;
  bool has_menu_item_request() const;
  private:
  bool _internal_has_menu_item_request() const;
  public:
  void clear_menu_item_request();
  const ::iterm2::MenuItemRequest& menu_item_request() const;
  PROTOBUF_NODISCARD ::iterm2::MenuItemRequest* release_menu_item_request();
  ::iterm2::MenuItemRequest* mutable_menu_item_request();
  void set_allocated_menu_item_request(::iterm2::MenuItemRequest* menu_item_request);
  private:
  const ::iterm2::MenuItemRequest& _internal_menu_item_request() const;
  ::iterm2::MenuItemRequest* _internal_mutable_menu_item_request();
  public:
  void unsafe_arena_set_allocated_menu_item_request(
      ::iterm2::MenuItemRequest* menu_item_request);
  ::iterm2::MenuItemRequest* unsafe_arena_release_menu_item_request();

  // .iterm2.SetTabLayoutRequest set_tab_layout_request = 122;
  bool has_set_tab_layout_request() const;
  private:
  bool _internal_has_set_tab_layout_request() const;
  public:
  void clear_set_tab_layout_request();
  const ::iterm2::SetTabLayoutRequest& set_tab_layout_request() const;
  PROTOBUF_NODISCARD ::iterm2::SetTabLayoutRequest* release_set_tab_layout_request();
  ::iterm2::SetTabLayoutRequest* mutable_set_tab_layout_request();
  void set_allocated_set_tab_layout_request(::iterm2::SetTabLayoutRequest* set_tab_layout_request);
  private:
  const ::iterm2::SetTabLayoutRequest& _internal_set_tab_layout_request() const;
  ::iterm2::SetTabLayoutRequest* _internal_mutable_set_tab_layout_request();
  public:
  void unsafe_arena_set_allocated_set_tab_layout_request(
      ::iterm2::SetTabLayoutRequest* set_tab_layout_request);
  ::iterm2::SetTabLayoutRequest* unsafe_arena_release_set_tab_layout_request();

  // .iterm2.GetBroadcastDomainsRequest get_broadcast_domains_request = 123;
  bool has_get_broadcast_domains_request() const;
  private:
  bool _internal_has_get_broadcast_domains_request() const;
  public:
  void clear_get_broadcast_domains_request();
  const ::iterm2::GetBroadcastDomainsRequest& get_broadcast_domains_request() const;
  PROTOBUF_NODISCARD ::iterm2::GetBroadcastDomainsRequest* release_get_broadcast_domains_request();
  ::iterm2::GetBroadcastDomainsRequest* mutable_get_broadcast_domains_request();
  void set_allocated_get_broadcast_domains_request(::iterm2::GetBroadcastDomainsRequest* get_broadcast_domains_request);
  private:
  const ::iterm2::GetBroadcastDomainsRequest& _internal_get_broadcast_domains_request() const;
  ::iterm2::GetBroadcastDomainsRequest* _internal_mutable_get_broadcast_domains_request();
  public:
  void unsafe_arena_set_allocated_get_broadcast_domains_request(
      ::iterm2::GetBroadcastDomainsRequest* get_broadcast_domains_request);
  ::iterm2::GetBroadcastDomainsRequest* unsafe_arena_release_get_broadcast_domains_request();

  // .iterm2.TmuxRequest tmux_request = 124;
  bool has_tmux_request() const;
  private:
  bool _internal_has_tmux_request() const;
  public:
  void clear_tmux_request();
  const ::iterm2::TmuxRequest& tmux_request() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxRequest* release_tmux_request();
  ::iterm2::TmuxRequest* mutable_tmux_request();
  void set_allocated_tmux_request(::iterm2::TmuxRequest* tmux_request);
  private:
  const ::iterm2::TmuxRequest& _internal_tmux_request() const;
  ::iterm2::TmuxRequest* _internal_mutable_tmux_request();
  public:
  void unsafe_arena_set_allocated_tmux_request(
      ::iterm2::TmuxRequest* tmux_request);
  ::iterm2::TmuxRequest* unsafe_arena_release_tmux_request();

  // .iterm2.ReorderTabsRequest reorder_tabs_request = 125;
  bool has_reorder_tabs_request() const;
  private:
  bool _internal_has_reorder_tabs_request() const;
  public:
  void clear_reorder_tabs_request();
  const ::iterm2::ReorderTabsRequest& reorder_tabs_request() const;
  PROTOBUF_NODISCARD ::iterm2::ReorderTabsRequest* release_reorder_tabs_request();
  ::iterm2::ReorderTabsRequest* mutable_reorder_tabs_request();
  void set_allocated_reorder_tabs_request(::iterm2::ReorderTabsRequest* reorder_tabs_request);
  private:
  const ::iterm2::ReorderTabsRequest& _internal_reorder_tabs_request() const;
  ::iterm2::ReorderTabsRequest* _internal_mutable_reorder_tabs_request();
  public:
  void unsafe_arena_set_allocated_reorder_tabs_request(
      ::iterm2::ReorderTabsRequest* reorder_tabs_request);
  ::iterm2::ReorderTabsRequest* unsafe_arena_release_reorder_tabs_request();

  // .iterm2.PreferencesRequest preferences_request = 126;
  bool has_preferences_request() const;
  private:
  bool _internal_has_preferences_request() const;
  public:
  void clear_preferences_request();
  const ::iterm2::PreferencesRequest& preferences_request() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesRequest* release_preferences_request();
  ::iterm2::PreferencesRequest* mutable_preferences_request();
  void set_allocated_preferences_request(::iterm2::PreferencesRequest* preferences_request);
  private:
  const ::iterm2::PreferencesRequest& _internal_preferences_request() const;
  ::iterm2::PreferencesRequest* _internal_mutable_preferences_request();
  public:
  void unsafe_arena_set_allocated_preferences_request(
      ::iterm2::PreferencesRequest* preferences_request);
  ::iterm2::PreferencesRequest* unsafe_arena_release_preferences_request();

  // .iterm2.ColorPresetRequest color_preset_request = 127;
  bool has_color_preset_request() const;
  private:
  bool _internal_has_color_preset_request() const;
  public:
  void clear_color_preset_request();
  const ::iterm2::ColorPresetRequest& color_preset_request() const;
  PROTOBUF_NODISCARD ::iterm2::ColorPresetRequest* release_color_preset_request();
  ::iterm2::ColorPresetRequest* mutable_color_preset_request();
  void set_allocated_color_preset_request(::iterm2::ColorPresetRequest* color_preset_request);
  private:
  const ::iterm2::ColorPresetRequest& _internal_color_preset_request() const;
  ::iterm2::ColorPresetRequest* _internal_mutable_color_preset_request();
  public:
  void unsafe_arena_set_allocated_color_preset_request(
      ::iterm2::ColorPresetRequest* color_preset_request);
  ::iterm2::ColorPresetRequest* unsafe_arena_release_color_preset_request();

  // .iterm2.SelectionRequest selection_request = 128;
  bool has_selection_request() const;
  private:
  bool _internal_has_selection_request() const;
  public:
  void clear_selection_request();
  const ::iterm2::SelectionRequest& selection_request() const;
  PROTOBUF_NODISCARD ::iterm2::SelectionRequest* release_selection_request();
  ::iterm2::SelectionRequest* mutable_selection_request();
  void set_allocated_selection_request(::iterm2::SelectionRequest* selection_request);
  private:
  const ::iterm2::SelectionRequest& _internal_selection_request() const;
  ::iterm2::SelectionRequest* _internal_mutable_selection_request();
  public:
  void unsafe_arena_set_allocated_selection_request(
      ::iterm2::SelectionRequest* selection_request);
  ::iterm2::SelectionRequest* unsafe_arena_release_selection_request();

  // .iterm2.StatusBarComponentRequest status_bar_component_request = 129;
  bool has_status_bar_component_request() const;
  private:
  bool _internal_has_status_bar_component_request() const;
  public:
  void clear_status_bar_component_request();
  const ::iterm2::StatusBarComponentRequest& status_bar_component_request() const;
  PROTOBUF_NODISCARD ::iterm2::StatusBarComponentRequest* release_status_bar_component_request();
  ::iterm2::StatusBarComponentRequest* mutable_status_bar_component_request();
  void set_allocated_status_bar_component_request(::iterm2::StatusBarComponentRequest* status_bar_component_request);
  private:
  const ::iterm2::StatusBarComponentRequest& _internal_status_bar_component_request() const;
  ::iterm2::StatusBarComponentRequest* _internal_mutable_status_bar_component_request();
  public:
  void unsafe_arena_set_allocated_status_bar_component_request(
      ::iterm2::StatusBarComponentRequest* status_bar_component_request);
  ::iterm2::StatusBarComponentRequest* unsafe_arena_release_status_bar_component_request();

  // .iterm2.SetBroadcastDomainsRequest set_broadcast_domains_request = 130;
  bool has_set_broadcast_domains_request() const;
  private:
  bool _internal_has_set_broadcast_domains_request() const;
  public:
  void clear_set_broadcast_domains_request();
  const ::iterm2::SetBroadcastDomainsRequest& set_broadcast_domains_request() const;
  PROTOBUF_NODISCARD ::iterm2::SetBroadcastDomainsRequest* release_set_broadcast_domains_request();
  ::iterm2::SetBroadcastDomainsRequest* mutable_set_broadcast_domains_request();
  void set_allocated_set_broadcast_domains_request(::iterm2::SetBroadcastDomainsRequest* set_broadcast_domains_request);
  private:
  const ::iterm2::SetBroadcastDomainsRequest& _internal_set_broadcast_domains_request() const;
  ::iterm2::SetBroadcastDomainsRequest* _internal_mutable_set_broadcast_domains_request();
  public:
  void unsafe_arena_set_allocated_set_broadcast_domains_request(
      ::iterm2::SetBroadcastDomainsRequest* set_broadcast_domains_request);
  ::iterm2::SetBroadcastDomainsRequest* unsafe_arena_release_set_broadcast_domains_request();

  // .iterm2.CloseRequest close_request = 131;
  bool has_close_request() const;
  private:
  bool _internal_has_close_request() const;
  public:
  void clear_close_request();
  const ::iterm2::CloseRequest& close_request() const;
  PROTOBUF_NODISCARD ::iterm2::CloseRequest* release_close_request();
  ::iterm2::CloseRequest* mutable_close_request();
  void set_allocated_close_request(::iterm2::CloseRequest* close_request);
  private:
  const ::iterm2::CloseRequest& _internal_close_request() const;
  ::iterm2::CloseRequest* _internal_mutable_close_request();
  public:
  void unsafe_arena_set_allocated_close_request(
      ::iterm2::CloseRequest* close_request);
  ::iterm2::CloseRequest* unsafe_arena_release_close_request();

  // .iterm2.InvokeFunctionRequest invoke_function_request = 132;
  bool has_invoke_function_request() const;
  private:
  bool _internal_has_invoke_function_request() const;
  public:
  void clear_invoke_function_request();
  const ::iterm2::InvokeFunctionRequest& invoke_function_request() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionRequest* release_invoke_function_request();
  ::iterm2::InvokeFunctionRequest* mutable_invoke_function_request();
  void set_allocated_invoke_function_request(::iterm2::InvokeFunctionRequest* invoke_function_request);
  private:
  const ::iterm2::InvokeFunctionRequest& _internal_invoke_function_request() const;
  ::iterm2::InvokeFunctionRequest* _internal_mutable_invoke_function_request();
  public:
  void unsafe_arena_set_allocated_invoke_function_request(
      ::iterm2::InvokeFunctionRequest* invoke_function_request);
  ::iterm2::InvokeFunctionRequest* unsafe_arena_release_invoke_function_request();

  // .iterm2.ListPromptsRequest list_prompts_request = 133;
  bool has_list_prompts_request() const;
  private:
  bool _internal_has_list_prompts_request() const;
  public:
  void clear_list_prompts_request();
  const ::iterm2::ListPromptsRequest& list_prompts_request() const;
  PROTOBUF_NODISCARD ::iterm2::ListPromptsRequest* release_list_prompts_request();
  ::iterm2::ListPromptsRequest* mutable_list_prompts_request();
  void set_allocated_list_prompts_request(::iterm2::ListPromptsRequest* list_prompts_request);
  private:
  const ::iterm2::ListPromptsRequest& _internal_list_prompts_request() const;
  ::iterm2::ListPromptsRequest* _internal_mutable_list_prompts_request();
  public:
  void unsafe_arena_set_allocated_list_prompts_request(
      ::iterm2::ListPromptsRequest* list_prompts_request);
  ::iterm2::ListPromptsRequest* unsafe_arena_release_list_prompts_request();

  void clear_submessage();
  SubmessageCase submessage_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.ClientOriginatedMessage)
 private:
  class _Internal;
  void set_has_get_buffer_request();
  void set_has_get_prompt_request();
  void set_has_transaction_request();
  void set_has_notification_request();
  void set_has_register_tool_request();
  void set_has_set_profile_property_request();
  void set_has_list_sessions_request();
  void set_has_send_text_request();
  void set_has_create_tab_request();
  void set_has_split_pane_request();
  void set_has_get_profile_property_request();
  void set_has_set_property_request();
  void set_has_get_property_request();
  void set_has_inject_request();
  void set_has_activate_request();
  void set_has_variable_request();
  void set_has_saved_arrangement_request();
  void set_has_focus_request();
  void set_has_list_profiles_request();
  void set_has_server_originated_rpc_result_request();
  void set_has_restart_session_request();
  void set_has_menu_item_request();
  void set_has_set_tab_layout_request();
  void set_has_get_broadcast_domains_request();
  void set_has_tmux_request();
  void set_has_reorder_tabs_request();
  void set_has_preferences_request();
  void set_has_color_preset_request();
  void set_has_selection_request();
  void set_has_status_bar_component_request();
  void set_has_set_broadcast_domains_request();
  void set_has_close_request();
  void set_has_invoke_function_request();
  void set_has_list_prompts_request();

  inline bool has_submessage() const;
  inline void clear_has_submessage();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t id_;
  union SubmessageUnion {
    constexpr SubmessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::GetBufferRequest* get_buffer_request_;
    ::iterm2::GetPromptRequest* get_prompt_request_;
    ::iterm2::TransactionRequest* transaction_request_;
    ::iterm2::NotificationRequest* notification_request_;
    ::iterm2::RegisterToolRequest* register_tool_request_;
    ::iterm2::SetProfilePropertyRequest* set_profile_property_request_;
    ::iterm2::ListSessionsRequest* list_sessions_request_;
    ::iterm2::SendTextRequest* send_text_request_;
    ::iterm2::CreateTabRequest* create_tab_request_;
    ::iterm2::SplitPaneRequest* split_pane_request_;
    ::iterm2::GetProfilePropertyRequest* get_profile_property_request_;
    ::iterm2::SetPropertyRequest* set_property_request_;
    ::iterm2::GetPropertyRequest* get_property_request_;
    ::iterm2::InjectRequest* inject_request_;
    ::iterm2::ActivateRequest* activate_request_;
    ::iterm2::VariableRequest* variable_request_;
    ::iterm2::SavedArrangementRequest* saved_arrangement_request_;
    ::iterm2::FocusRequest* focus_request_;
    ::iterm2::ListProfilesRequest* list_profiles_request_;
    ::iterm2::ServerOriginatedRPCResultRequest* server_originated_rpc_result_request_;
    ::iterm2::RestartSessionRequest* restart_session_request_;
    ::iterm2::MenuItemRequest* menu_item_request_;
    ::iterm2::SetTabLayoutRequest* set_tab_layout_request_;
    ::iterm2::GetBroadcastDomainsRequest* get_broadcast_domains_request_;
    ::iterm2::TmuxRequest* tmux_request_;
    ::iterm2::ReorderTabsRequest* reorder_tabs_request_;
    ::iterm2::PreferencesRequest* preferences_request_;
    ::iterm2::ColorPresetRequest* color_preset_request_;
    ::iterm2::SelectionRequest* selection_request_;
    ::iterm2::StatusBarComponentRequest* status_bar_component_request_;
    ::iterm2::SetBroadcastDomainsRequest* set_broadcast_domains_request_;
    ::iterm2::CloseRequest* close_request_;
    ::iterm2::InvokeFunctionRequest* invoke_function_request_;
    ::iterm2::ListPromptsRequest* list_prompts_request_;
  } submessage_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ServerOriginatedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ServerOriginatedMessage) */ {
 public:
  inline ServerOriginatedMessage() : ServerOriginatedMessage(nullptr) {}
  ~ServerOriginatedMessage() override;
  explicit constexpr ServerOriginatedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerOriginatedMessage(const ServerOriginatedMessage& from);
  ServerOriginatedMessage(ServerOriginatedMessage&& from) noexcept
    : ServerOriginatedMessage() {
    *this = ::std::move(from);
  }

  inline ServerOriginatedMessage& operator=(const ServerOriginatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOriginatedMessage& operator=(ServerOriginatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerOriginatedMessage& default_instance() {
    return *internal_default_instance();
  }
  enum SubmessageCase {
    kError = 2,
    kGetBufferResponse = 100,
    kGetPromptResponse = 101,
    kTransactionResponse = 102,
    kNotificationResponse = 103,
    kRegisterToolResponse = 104,
    kSetProfilePropertyResponse = 105,
    kListSessionsResponse = 106,
    kSendTextResponse = 107,
    kCreateTabResponse = 108,
    kSplitPaneResponse = 109,
    kGetProfilePropertyResponse = 110,
    kSetPropertyResponse = 111,
    kGetPropertyResponse = 112,
    kInjectResponse = 113,
    kActivateResponse = 114,
    kVariableResponse = 115,
    kSavedArrangementResponse = 116,
    kFocusResponse = 117,
    kListProfilesResponse = 118,
    kServerOriginatedRpcResultResponse = 119,
    kRestartSessionResponse = 120,
    kMenuItemResponse = 121,
    kSetTabLayoutResponse = 122,
    kGetBroadcastDomainsResponse = 123,
    kTmuxResponse = 124,
    kReorderTabsResponse = 125,
    kPreferencesResponse = 126,
    kColorPresetResponse = 127,
    kSelectionResponse = 128,
    kStatusBarComponentResponse = 129,
    kSetBroadcastDomainsResponse = 130,
    kCloseResponse = 131,
    kInvokeFunctionResponse = 132,
    kListPromptsResponse = 133,
    kNotification = 1000,
    SUBMESSAGE_NOT_SET = 0,
  };

  static inline const ServerOriginatedMessage* internal_default_instance() {
    return reinterpret_cast<const ServerOriginatedMessage*>(
               &_ServerOriginatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerOriginatedMessage& a, ServerOriginatedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOriginatedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOriginatedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerOriginatedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerOriginatedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerOriginatedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerOriginatedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOriginatedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ServerOriginatedMessage";
  }
  protected:
  explicit ServerOriginatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetBufferResponseFieldNumber = 100,
    kGetPromptResponseFieldNumber = 101,
    kTransactionResponseFieldNumber = 102,
    kNotificationResponseFieldNumber = 103,
    kRegisterToolResponseFieldNumber = 104,
    kSetProfilePropertyResponseFieldNumber = 105,
    kListSessionsResponseFieldNumber = 106,
    kSendTextResponseFieldNumber = 107,
    kCreateTabResponseFieldNumber = 108,
    kSplitPaneResponseFieldNumber = 109,
    kGetProfilePropertyResponseFieldNumber = 110,
    kSetPropertyResponseFieldNumber = 111,
    kGetPropertyResponseFieldNumber = 112,
    kInjectResponseFieldNumber = 113,
    kActivateResponseFieldNumber = 114,
    kVariableResponseFieldNumber = 115,
    kSavedArrangementResponseFieldNumber = 116,
    kFocusResponseFieldNumber = 117,
    kListProfilesResponseFieldNumber = 118,
    kServerOriginatedRpcResultResponseFieldNumber = 119,
    kRestartSessionResponseFieldNumber = 120,
    kMenuItemResponseFieldNumber = 121,
    kSetTabLayoutResponseFieldNumber = 122,
    kGetBroadcastDomainsResponseFieldNumber = 123,
    kTmuxResponseFieldNumber = 124,
    kReorderTabsResponseFieldNumber = 125,
    kPreferencesResponseFieldNumber = 126,
    kColorPresetResponseFieldNumber = 127,
    kSelectionResponseFieldNumber = 128,
    kStatusBarComponentResponseFieldNumber = 129,
    kSetBroadcastDomainsResponseFieldNumber = 130,
    kCloseResponseFieldNumber = 131,
    kInvokeFunctionResponseFieldNumber = 132,
    kListPromptsResponseFieldNumber = 133,
    kNotificationFieldNumber = 1000,
  };
  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .iterm2.GetBufferResponse get_buffer_response = 100;
  bool has_get_buffer_response() const;
  private:
  bool _internal_has_get_buffer_response() const;
  public:
  void clear_get_buffer_response();
  const ::iterm2::GetBufferResponse& get_buffer_response() const;
  PROTOBUF_NODISCARD ::iterm2::GetBufferResponse* release_get_buffer_response();
  ::iterm2::GetBufferResponse* mutable_get_buffer_response();
  void set_allocated_get_buffer_response(::iterm2::GetBufferResponse* get_buffer_response);
  private:
  const ::iterm2::GetBufferResponse& _internal_get_buffer_response() const;
  ::iterm2::GetBufferResponse* _internal_mutable_get_buffer_response();
  public:
  void unsafe_arena_set_allocated_get_buffer_response(
      ::iterm2::GetBufferResponse* get_buffer_response);
  ::iterm2::GetBufferResponse* unsafe_arena_release_get_buffer_response();

  // .iterm2.GetPromptResponse get_prompt_response = 101;
  bool has_get_prompt_response() const;
  private:
  bool _internal_has_get_prompt_response() const;
  public:
  void clear_get_prompt_response();
  const ::iterm2::GetPromptResponse& get_prompt_response() const;
  PROTOBUF_NODISCARD ::iterm2::GetPromptResponse* release_get_prompt_response();
  ::iterm2::GetPromptResponse* mutable_get_prompt_response();
  void set_allocated_get_prompt_response(::iterm2::GetPromptResponse* get_prompt_response);
  private:
  const ::iterm2::GetPromptResponse& _internal_get_prompt_response() const;
  ::iterm2::GetPromptResponse* _internal_mutable_get_prompt_response();
  public:
  void unsafe_arena_set_allocated_get_prompt_response(
      ::iterm2::GetPromptResponse* get_prompt_response);
  ::iterm2::GetPromptResponse* unsafe_arena_release_get_prompt_response();

  // .iterm2.TransactionResponse transaction_response = 102;
  bool has_transaction_response() const;
  private:
  bool _internal_has_transaction_response() const;
  public:
  void clear_transaction_response();
  const ::iterm2::TransactionResponse& transaction_response() const;
  PROTOBUF_NODISCARD ::iterm2::TransactionResponse* release_transaction_response();
  ::iterm2::TransactionResponse* mutable_transaction_response();
  void set_allocated_transaction_response(::iterm2::TransactionResponse* transaction_response);
  private:
  const ::iterm2::TransactionResponse& _internal_transaction_response() const;
  ::iterm2::TransactionResponse* _internal_mutable_transaction_response();
  public:
  void unsafe_arena_set_allocated_transaction_response(
      ::iterm2::TransactionResponse* transaction_response);
  ::iterm2::TransactionResponse* unsafe_arena_release_transaction_response();

  // .iterm2.NotificationResponse notification_response = 103;
  bool has_notification_response() const;
  private:
  bool _internal_has_notification_response() const;
  public:
  void clear_notification_response();
  const ::iterm2::NotificationResponse& notification_response() const;
  PROTOBUF_NODISCARD ::iterm2::NotificationResponse* release_notification_response();
  ::iterm2::NotificationResponse* mutable_notification_response();
  void set_allocated_notification_response(::iterm2::NotificationResponse* notification_response);
  private:
  const ::iterm2::NotificationResponse& _internal_notification_response() const;
  ::iterm2::NotificationResponse* _internal_mutable_notification_response();
  public:
  void unsafe_arena_set_allocated_notification_response(
      ::iterm2::NotificationResponse* notification_response);
  ::iterm2::NotificationResponse* unsafe_arena_release_notification_response();

  // .iterm2.RegisterToolResponse register_tool_response = 104;
  bool has_register_tool_response() const;
  private:
  bool _internal_has_register_tool_response() const;
  public:
  void clear_register_tool_response();
  const ::iterm2::RegisterToolResponse& register_tool_response() const;
  PROTOBUF_NODISCARD ::iterm2::RegisterToolResponse* release_register_tool_response();
  ::iterm2::RegisterToolResponse* mutable_register_tool_response();
  void set_allocated_register_tool_response(::iterm2::RegisterToolResponse* register_tool_response);
  private:
  const ::iterm2::RegisterToolResponse& _internal_register_tool_response() const;
  ::iterm2::RegisterToolResponse* _internal_mutable_register_tool_response();
  public:
  void unsafe_arena_set_allocated_register_tool_response(
      ::iterm2::RegisterToolResponse* register_tool_response);
  ::iterm2::RegisterToolResponse* unsafe_arena_release_register_tool_response();

  // .iterm2.SetProfilePropertyResponse set_profile_property_response = 105;
  bool has_set_profile_property_response() const;
  private:
  bool _internal_has_set_profile_property_response() const;
  public:
  void clear_set_profile_property_response();
  const ::iterm2::SetProfilePropertyResponse& set_profile_property_response() const;
  PROTOBUF_NODISCARD ::iterm2::SetProfilePropertyResponse* release_set_profile_property_response();
  ::iterm2::SetProfilePropertyResponse* mutable_set_profile_property_response();
  void set_allocated_set_profile_property_response(::iterm2::SetProfilePropertyResponse* set_profile_property_response);
  private:
  const ::iterm2::SetProfilePropertyResponse& _internal_set_profile_property_response() const;
  ::iterm2::SetProfilePropertyResponse* _internal_mutable_set_profile_property_response();
  public:
  void unsafe_arena_set_allocated_set_profile_property_response(
      ::iterm2::SetProfilePropertyResponse* set_profile_property_response);
  ::iterm2::SetProfilePropertyResponse* unsafe_arena_release_set_profile_property_response();

  // .iterm2.ListSessionsResponse list_sessions_response = 106;
  bool has_list_sessions_response() const;
  private:
  bool _internal_has_list_sessions_response() const;
  public:
  void clear_list_sessions_response();
  const ::iterm2::ListSessionsResponse& list_sessions_response() const;
  PROTOBUF_NODISCARD ::iterm2::ListSessionsResponse* release_list_sessions_response();
  ::iterm2::ListSessionsResponse* mutable_list_sessions_response();
  void set_allocated_list_sessions_response(::iterm2::ListSessionsResponse* list_sessions_response);
  private:
  const ::iterm2::ListSessionsResponse& _internal_list_sessions_response() const;
  ::iterm2::ListSessionsResponse* _internal_mutable_list_sessions_response();
  public:
  void unsafe_arena_set_allocated_list_sessions_response(
      ::iterm2::ListSessionsResponse* list_sessions_response);
  ::iterm2::ListSessionsResponse* unsafe_arena_release_list_sessions_response();

  // .iterm2.SendTextResponse send_text_response = 107;
  bool has_send_text_response() const;
  private:
  bool _internal_has_send_text_response() const;
  public:
  void clear_send_text_response();
  const ::iterm2::SendTextResponse& send_text_response() const;
  PROTOBUF_NODISCARD ::iterm2::SendTextResponse* release_send_text_response();
  ::iterm2::SendTextResponse* mutable_send_text_response();
  void set_allocated_send_text_response(::iterm2::SendTextResponse* send_text_response);
  private:
  const ::iterm2::SendTextResponse& _internal_send_text_response() const;
  ::iterm2::SendTextResponse* _internal_mutable_send_text_response();
  public:
  void unsafe_arena_set_allocated_send_text_response(
      ::iterm2::SendTextResponse* send_text_response);
  ::iterm2::SendTextResponse* unsafe_arena_release_send_text_response();

  // .iterm2.CreateTabResponse create_tab_response = 108;
  bool has_create_tab_response() const;
  private:
  bool _internal_has_create_tab_response() const;
  public:
  void clear_create_tab_response();
  const ::iterm2::CreateTabResponse& create_tab_response() const;
  PROTOBUF_NODISCARD ::iterm2::CreateTabResponse* release_create_tab_response();
  ::iterm2::CreateTabResponse* mutable_create_tab_response();
  void set_allocated_create_tab_response(::iterm2::CreateTabResponse* create_tab_response);
  private:
  const ::iterm2::CreateTabResponse& _internal_create_tab_response() const;
  ::iterm2::CreateTabResponse* _internal_mutable_create_tab_response();
  public:
  void unsafe_arena_set_allocated_create_tab_response(
      ::iterm2::CreateTabResponse* create_tab_response);
  ::iterm2::CreateTabResponse* unsafe_arena_release_create_tab_response();

  // .iterm2.SplitPaneResponse split_pane_response = 109;
  bool has_split_pane_response() const;
  private:
  bool _internal_has_split_pane_response() const;
  public:
  void clear_split_pane_response();
  const ::iterm2::SplitPaneResponse& split_pane_response() const;
  PROTOBUF_NODISCARD ::iterm2::SplitPaneResponse* release_split_pane_response();
  ::iterm2::SplitPaneResponse* mutable_split_pane_response();
  void set_allocated_split_pane_response(::iterm2::SplitPaneResponse* split_pane_response);
  private:
  const ::iterm2::SplitPaneResponse& _internal_split_pane_response() const;
  ::iterm2::SplitPaneResponse* _internal_mutable_split_pane_response();
  public:
  void unsafe_arena_set_allocated_split_pane_response(
      ::iterm2::SplitPaneResponse* split_pane_response);
  ::iterm2::SplitPaneResponse* unsafe_arena_release_split_pane_response();

  // .iterm2.GetProfilePropertyResponse get_profile_property_response = 110;
  bool has_get_profile_property_response() const;
  private:
  bool _internal_has_get_profile_property_response() const;
  public:
  void clear_get_profile_property_response();
  const ::iterm2::GetProfilePropertyResponse& get_profile_property_response() const;
  PROTOBUF_NODISCARD ::iterm2::GetProfilePropertyResponse* release_get_profile_property_response();
  ::iterm2::GetProfilePropertyResponse* mutable_get_profile_property_response();
  void set_allocated_get_profile_property_response(::iterm2::GetProfilePropertyResponse* get_profile_property_response);
  private:
  const ::iterm2::GetProfilePropertyResponse& _internal_get_profile_property_response() const;
  ::iterm2::GetProfilePropertyResponse* _internal_mutable_get_profile_property_response();
  public:
  void unsafe_arena_set_allocated_get_profile_property_response(
      ::iterm2::GetProfilePropertyResponse* get_profile_property_response);
  ::iterm2::GetProfilePropertyResponse* unsafe_arena_release_get_profile_property_response();

  // .iterm2.SetPropertyResponse set_property_response = 111;
  bool has_set_property_response() const;
  private:
  bool _internal_has_set_property_response() const;
  public:
  void clear_set_property_response();
  const ::iterm2::SetPropertyResponse& set_property_response() const;
  PROTOBUF_NODISCARD ::iterm2::SetPropertyResponse* release_set_property_response();
  ::iterm2::SetPropertyResponse* mutable_set_property_response();
  void set_allocated_set_property_response(::iterm2::SetPropertyResponse* set_property_response);
  private:
  const ::iterm2::SetPropertyResponse& _internal_set_property_response() const;
  ::iterm2::SetPropertyResponse* _internal_mutable_set_property_response();
  public:
  void unsafe_arena_set_allocated_set_property_response(
      ::iterm2::SetPropertyResponse* set_property_response);
  ::iterm2::SetPropertyResponse* unsafe_arena_release_set_property_response();

  // .iterm2.GetPropertyResponse get_property_response = 112;
  bool has_get_property_response() const;
  private:
  bool _internal_has_get_property_response() const;
  public:
  void clear_get_property_response();
  const ::iterm2::GetPropertyResponse& get_property_response() const;
  PROTOBUF_NODISCARD ::iterm2::GetPropertyResponse* release_get_property_response();
  ::iterm2::GetPropertyResponse* mutable_get_property_response();
  void set_allocated_get_property_response(::iterm2::GetPropertyResponse* get_property_response);
  private:
  const ::iterm2::GetPropertyResponse& _internal_get_property_response() const;
  ::iterm2::GetPropertyResponse* _internal_mutable_get_property_response();
  public:
  void unsafe_arena_set_allocated_get_property_response(
      ::iterm2::GetPropertyResponse* get_property_response);
  ::iterm2::GetPropertyResponse* unsafe_arena_release_get_property_response();

  // .iterm2.InjectResponse inject_response = 113;
  bool has_inject_response() const;
  private:
  bool _internal_has_inject_response() const;
  public:
  void clear_inject_response();
  const ::iterm2::InjectResponse& inject_response() const;
  PROTOBUF_NODISCARD ::iterm2::InjectResponse* release_inject_response();
  ::iterm2::InjectResponse* mutable_inject_response();
  void set_allocated_inject_response(::iterm2::InjectResponse* inject_response);
  private:
  const ::iterm2::InjectResponse& _internal_inject_response() const;
  ::iterm2::InjectResponse* _internal_mutable_inject_response();
  public:
  void unsafe_arena_set_allocated_inject_response(
      ::iterm2::InjectResponse* inject_response);
  ::iterm2::InjectResponse* unsafe_arena_release_inject_response();

  // .iterm2.ActivateResponse activate_response = 114;
  bool has_activate_response() const;
  private:
  bool _internal_has_activate_response() const;
  public:
  void clear_activate_response();
  const ::iterm2::ActivateResponse& activate_response() const;
  PROTOBUF_NODISCARD ::iterm2::ActivateResponse* release_activate_response();
  ::iterm2::ActivateResponse* mutable_activate_response();
  void set_allocated_activate_response(::iterm2::ActivateResponse* activate_response);
  private:
  const ::iterm2::ActivateResponse& _internal_activate_response() const;
  ::iterm2::ActivateResponse* _internal_mutable_activate_response();
  public:
  void unsafe_arena_set_allocated_activate_response(
      ::iterm2::ActivateResponse* activate_response);
  ::iterm2::ActivateResponse* unsafe_arena_release_activate_response();

  // .iterm2.VariableResponse variable_response = 115;
  bool has_variable_response() const;
  private:
  bool _internal_has_variable_response() const;
  public:
  void clear_variable_response();
  const ::iterm2::VariableResponse& variable_response() const;
  PROTOBUF_NODISCARD ::iterm2::VariableResponse* release_variable_response();
  ::iterm2::VariableResponse* mutable_variable_response();
  void set_allocated_variable_response(::iterm2::VariableResponse* variable_response);
  private:
  const ::iterm2::VariableResponse& _internal_variable_response() const;
  ::iterm2::VariableResponse* _internal_mutable_variable_response();
  public:
  void unsafe_arena_set_allocated_variable_response(
      ::iterm2::VariableResponse* variable_response);
  ::iterm2::VariableResponse* unsafe_arena_release_variable_response();

  // .iterm2.SavedArrangementResponse saved_arrangement_response = 116;
  bool has_saved_arrangement_response() const;
  private:
  bool _internal_has_saved_arrangement_response() const;
  public:
  void clear_saved_arrangement_response();
  const ::iterm2::SavedArrangementResponse& saved_arrangement_response() const;
  PROTOBUF_NODISCARD ::iterm2::SavedArrangementResponse* release_saved_arrangement_response();
  ::iterm2::SavedArrangementResponse* mutable_saved_arrangement_response();
  void set_allocated_saved_arrangement_response(::iterm2::SavedArrangementResponse* saved_arrangement_response);
  private:
  const ::iterm2::SavedArrangementResponse& _internal_saved_arrangement_response() const;
  ::iterm2::SavedArrangementResponse* _internal_mutable_saved_arrangement_response();
  public:
  void unsafe_arena_set_allocated_saved_arrangement_response(
      ::iterm2::SavedArrangementResponse* saved_arrangement_response);
  ::iterm2::SavedArrangementResponse* unsafe_arena_release_saved_arrangement_response();

  // .iterm2.FocusResponse focus_response = 117;
  bool has_focus_response() const;
  private:
  bool _internal_has_focus_response() const;
  public:
  void clear_focus_response();
  const ::iterm2::FocusResponse& focus_response() const;
  PROTOBUF_NODISCARD ::iterm2::FocusResponse* release_focus_response();
  ::iterm2::FocusResponse* mutable_focus_response();
  void set_allocated_focus_response(::iterm2::FocusResponse* focus_response);
  private:
  const ::iterm2::FocusResponse& _internal_focus_response() const;
  ::iterm2::FocusResponse* _internal_mutable_focus_response();
  public:
  void unsafe_arena_set_allocated_focus_response(
      ::iterm2::FocusResponse* focus_response);
  ::iterm2::FocusResponse* unsafe_arena_release_focus_response();

  // .iterm2.ListProfilesResponse list_profiles_response = 118;
  bool has_list_profiles_response() const;
  private:
  bool _internal_has_list_profiles_response() const;
  public:
  void clear_list_profiles_response();
  const ::iterm2::ListProfilesResponse& list_profiles_response() const;
  PROTOBUF_NODISCARD ::iterm2::ListProfilesResponse* release_list_profiles_response();
  ::iterm2::ListProfilesResponse* mutable_list_profiles_response();
  void set_allocated_list_profiles_response(::iterm2::ListProfilesResponse* list_profiles_response);
  private:
  const ::iterm2::ListProfilesResponse& _internal_list_profiles_response() const;
  ::iterm2::ListProfilesResponse* _internal_mutable_list_profiles_response();
  public:
  void unsafe_arena_set_allocated_list_profiles_response(
      ::iterm2::ListProfilesResponse* list_profiles_response);
  ::iterm2::ListProfilesResponse* unsafe_arena_release_list_profiles_response();

  // .iterm2.ServerOriginatedRPCResultResponse server_originated_rpc_result_response = 119;
  bool has_server_originated_rpc_result_response() const;
  private:
  bool _internal_has_server_originated_rpc_result_response() const;
  public:
  void clear_server_originated_rpc_result_response();
  const ::iterm2::ServerOriginatedRPCResultResponse& server_originated_rpc_result_response() const;
  PROTOBUF_NODISCARD ::iterm2::ServerOriginatedRPCResultResponse* release_server_originated_rpc_result_response();
  ::iterm2::ServerOriginatedRPCResultResponse* mutable_server_originated_rpc_result_response();
  void set_allocated_server_originated_rpc_result_response(::iterm2::ServerOriginatedRPCResultResponse* server_originated_rpc_result_response);
  private:
  const ::iterm2::ServerOriginatedRPCResultResponse& _internal_server_originated_rpc_result_response() const;
  ::iterm2::ServerOriginatedRPCResultResponse* _internal_mutable_server_originated_rpc_result_response();
  public:
  void unsafe_arena_set_allocated_server_originated_rpc_result_response(
      ::iterm2::ServerOriginatedRPCResultResponse* server_originated_rpc_result_response);
  ::iterm2::ServerOriginatedRPCResultResponse* unsafe_arena_release_server_originated_rpc_result_response();

  // .iterm2.RestartSessionResponse restart_session_response = 120;
  bool has_restart_session_response() const;
  private:
  bool _internal_has_restart_session_response() const;
  public:
  void clear_restart_session_response();
  const ::iterm2::RestartSessionResponse& restart_session_response() const;
  PROTOBUF_NODISCARD ::iterm2::RestartSessionResponse* release_restart_session_response();
  ::iterm2::RestartSessionResponse* mutable_restart_session_response();
  void set_allocated_restart_session_response(::iterm2::RestartSessionResponse* restart_session_response);
  private:
  const ::iterm2::RestartSessionResponse& _internal_restart_session_response() const;
  ::iterm2::RestartSessionResponse* _internal_mutable_restart_session_response();
  public:
  void unsafe_arena_set_allocated_restart_session_response(
      ::iterm2::RestartSessionResponse* restart_session_response);
  ::iterm2::RestartSessionResponse* unsafe_arena_release_restart_session_response();

  // .iterm2.MenuItemResponse menu_item_response = 121;
  bool has_menu_item_response() const;
  private:
  bool _internal_has_menu_item_response() const;
  public:
  void clear_menu_item_response();
  const ::iterm2::MenuItemResponse& menu_item_response() const;
  PROTOBUF_NODISCARD ::iterm2::MenuItemResponse* release_menu_item_response();
  ::iterm2::MenuItemResponse* mutable_menu_item_response();
  void set_allocated_menu_item_response(::iterm2::MenuItemResponse* menu_item_response);
  private:
  const ::iterm2::MenuItemResponse& _internal_menu_item_response() const;
  ::iterm2::MenuItemResponse* _internal_mutable_menu_item_response();
  public:
  void unsafe_arena_set_allocated_menu_item_response(
      ::iterm2::MenuItemResponse* menu_item_response);
  ::iterm2::MenuItemResponse* unsafe_arena_release_menu_item_response();

  // .iterm2.SetTabLayoutResponse set_tab_layout_response = 122;
  bool has_set_tab_layout_response() const;
  private:
  bool _internal_has_set_tab_layout_response() const;
  public:
  void clear_set_tab_layout_response();
  const ::iterm2::SetTabLayoutResponse& set_tab_layout_response() const;
  PROTOBUF_NODISCARD ::iterm2::SetTabLayoutResponse* release_set_tab_layout_response();
  ::iterm2::SetTabLayoutResponse* mutable_set_tab_layout_response();
  void set_allocated_set_tab_layout_response(::iterm2::SetTabLayoutResponse* set_tab_layout_response);
  private:
  const ::iterm2::SetTabLayoutResponse& _internal_set_tab_layout_response() const;
  ::iterm2::SetTabLayoutResponse* _internal_mutable_set_tab_layout_response();
  public:
  void unsafe_arena_set_allocated_set_tab_layout_response(
      ::iterm2::SetTabLayoutResponse* set_tab_layout_response);
  ::iterm2::SetTabLayoutResponse* unsafe_arena_release_set_tab_layout_response();

  // .iterm2.GetBroadcastDomainsResponse get_broadcast_domains_response = 123;
  bool has_get_broadcast_domains_response() const;
  private:
  bool _internal_has_get_broadcast_domains_response() const;
  public:
  void clear_get_broadcast_domains_response();
  const ::iterm2::GetBroadcastDomainsResponse& get_broadcast_domains_response() const;
  PROTOBUF_NODISCARD ::iterm2::GetBroadcastDomainsResponse* release_get_broadcast_domains_response();
  ::iterm2::GetBroadcastDomainsResponse* mutable_get_broadcast_domains_response();
  void set_allocated_get_broadcast_domains_response(::iterm2::GetBroadcastDomainsResponse* get_broadcast_domains_response);
  private:
  const ::iterm2::GetBroadcastDomainsResponse& _internal_get_broadcast_domains_response() const;
  ::iterm2::GetBroadcastDomainsResponse* _internal_mutable_get_broadcast_domains_response();
  public:
  void unsafe_arena_set_allocated_get_broadcast_domains_response(
      ::iterm2::GetBroadcastDomainsResponse* get_broadcast_domains_response);
  ::iterm2::GetBroadcastDomainsResponse* unsafe_arena_release_get_broadcast_domains_response();

  // .iterm2.TmuxResponse tmux_response = 124;
  bool has_tmux_response() const;
  private:
  bool _internal_has_tmux_response() const;
  public:
  void clear_tmux_response();
  const ::iterm2::TmuxResponse& tmux_response() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxResponse* release_tmux_response();
  ::iterm2::TmuxResponse* mutable_tmux_response();
  void set_allocated_tmux_response(::iterm2::TmuxResponse* tmux_response);
  private:
  const ::iterm2::TmuxResponse& _internal_tmux_response() const;
  ::iterm2::TmuxResponse* _internal_mutable_tmux_response();
  public:
  void unsafe_arena_set_allocated_tmux_response(
      ::iterm2::TmuxResponse* tmux_response);
  ::iterm2::TmuxResponse* unsafe_arena_release_tmux_response();

  // .iterm2.ReorderTabsResponse reorder_tabs_response = 125;
  bool has_reorder_tabs_response() const;
  private:
  bool _internal_has_reorder_tabs_response() const;
  public:
  void clear_reorder_tabs_response();
  const ::iterm2::ReorderTabsResponse& reorder_tabs_response() const;
  PROTOBUF_NODISCARD ::iterm2::ReorderTabsResponse* release_reorder_tabs_response();
  ::iterm2::ReorderTabsResponse* mutable_reorder_tabs_response();
  void set_allocated_reorder_tabs_response(::iterm2::ReorderTabsResponse* reorder_tabs_response);
  private:
  const ::iterm2::ReorderTabsResponse& _internal_reorder_tabs_response() const;
  ::iterm2::ReorderTabsResponse* _internal_mutable_reorder_tabs_response();
  public:
  void unsafe_arena_set_allocated_reorder_tabs_response(
      ::iterm2::ReorderTabsResponse* reorder_tabs_response);
  ::iterm2::ReorderTabsResponse* unsafe_arena_release_reorder_tabs_response();

  // .iterm2.PreferencesResponse preferences_response = 126;
  bool has_preferences_response() const;
  private:
  bool _internal_has_preferences_response() const;
  public:
  void clear_preferences_response();
  const ::iterm2::PreferencesResponse& preferences_response() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesResponse* release_preferences_response();
  ::iterm2::PreferencesResponse* mutable_preferences_response();
  void set_allocated_preferences_response(::iterm2::PreferencesResponse* preferences_response);
  private:
  const ::iterm2::PreferencesResponse& _internal_preferences_response() const;
  ::iterm2::PreferencesResponse* _internal_mutable_preferences_response();
  public:
  void unsafe_arena_set_allocated_preferences_response(
      ::iterm2::PreferencesResponse* preferences_response);
  ::iterm2::PreferencesResponse* unsafe_arena_release_preferences_response();

  // .iterm2.ColorPresetResponse color_preset_response = 127;
  bool has_color_preset_response() const;
  private:
  bool _internal_has_color_preset_response() const;
  public:
  void clear_color_preset_response();
  const ::iterm2::ColorPresetResponse& color_preset_response() const;
  PROTOBUF_NODISCARD ::iterm2::ColorPresetResponse* release_color_preset_response();
  ::iterm2::ColorPresetResponse* mutable_color_preset_response();
  void set_allocated_color_preset_response(::iterm2::ColorPresetResponse* color_preset_response);
  private:
  const ::iterm2::ColorPresetResponse& _internal_color_preset_response() const;
  ::iterm2::ColorPresetResponse* _internal_mutable_color_preset_response();
  public:
  void unsafe_arena_set_allocated_color_preset_response(
      ::iterm2::ColorPresetResponse* color_preset_response);
  ::iterm2::ColorPresetResponse* unsafe_arena_release_color_preset_response();

  // .iterm2.SelectionResponse selection_response = 128;
  bool has_selection_response() const;
  private:
  bool _internal_has_selection_response() const;
  public:
  void clear_selection_response();
  const ::iterm2::SelectionResponse& selection_response() const;
  PROTOBUF_NODISCARD ::iterm2::SelectionResponse* release_selection_response();
  ::iterm2::SelectionResponse* mutable_selection_response();
  void set_allocated_selection_response(::iterm2::SelectionResponse* selection_response);
  private:
  const ::iterm2::SelectionResponse& _internal_selection_response() const;
  ::iterm2::SelectionResponse* _internal_mutable_selection_response();
  public:
  void unsafe_arena_set_allocated_selection_response(
      ::iterm2::SelectionResponse* selection_response);
  ::iterm2::SelectionResponse* unsafe_arena_release_selection_response();

  // .iterm2.StatusBarComponentResponse status_bar_component_response = 129;
  bool has_status_bar_component_response() const;
  private:
  bool _internal_has_status_bar_component_response() const;
  public:
  void clear_status_bar_component_response();
  const ::iterm2::StatusBarComponentResponse& status_bar_component_response() const;
  PROTOBUF_NODISCARD ::iterm2::StatusBarComponentResponse* release_status_bar_component_response();
  ::iterm2::StatusBarComponentResponse* mutable_status_bar_component_response();
  void set_allocated_status_bar_component_response(::iterm2::StatusBarComponentResponse* status_bar_component_response);
  private:
  const ::iterm2::StatusBarComponentResponse& _internal_status_bar_component_response() const;
  ::iterm2::StatusBarComponentResponse* _internal_mutable_status_bar_component_response();
  public:
  void unsafe_arena_set_allocated_status_bar_component_response(
      ::iterm2::StatusBarComponentResponse* status_bar_component_response);
  ::iterm2::StatusBarComponentResponse* unsafe_arena_release_status_bar_component_response();

  // .iterm2.SetBroadcastDomainsResponse set_broadcast_domains_response = 130;
  bool has_set_broadcast_domains_response() const;
  private:
  bool _internal_has_set_broadcast_domains_response() const;
  public:
  void clear_set_broadcast_domains_response();
  const ::iterm2::SetBroadcastDomainsResponse& set_broadcast_domains_response() const;
  PROTOBUF_NODISCARD ::iterm2::SetBroadcastDomainsResponse* release_set_broadcast_domains_response();
  ::iterm2::SetBroadcastDomainsResponse* mutable_set_broadcast_domains_response();
  void set_allocated_set_broadcast_domains_response(::iterm2::SetBroadcastDomainsResponse* set_broadcast_domains_response);
  private:
  const ::iterm2::SetBroadcastDomainsResponse& _internal_set_broadcast_domains_response() const;
  ::iterm2::SetBroadcastDomainsResponse* _internal_mutable_set_broadcast_domains_response();
  public:
  void unsafe_arena_set_allocated_set_broadcast_domains_response(
      ::iterm2::SetBroadcastDomainsResponse* set_broadcast_domains_response);
  ::iterm2::SetBroadcastDomainsResponse* unsafe_arena_release_set_broadcast_domains_response();

  // .iterm2.CloseResponse close_response = 131;
  bool has_close_response() const;
  private:
  bool _internal_has_close_response() const;
  public:
  void clear_close_response();
  const ::iterm2::CloseResponse& close_response() const;
  PROTOBUF_NODISCARD ::iterm2::CloseResponse* release_close_response();
  ::iterm2::CloseResponse* mutable_close_response();
  void set_allocated_close_response(::iterm2::CloseResponse* close_response);
  private:
  const ::iterm2::CloseResponse& _internal_close_response() const;
  ::iterm2::CloseResponse* _internal_mutable_close_response();
  public:
  void unsafe_arena_set_allocated_close_response(
      ::iterm2::CloseResponse* close_response);
  ::iterm2::CloseResponse* unsafe_arena_release_close_response();

  // .iterm2.InvokeFunctionResponse invoke_function_response = 132;
  bool has_invoke_function_response() const;
  private:
  bool _internal_has_invoke_function_response() const;
  public:
  void clear_invoke_function_response();
  const ::iterm2::InvokeFunctionResponse& invoke_function_response() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionResponse* release_invoke_function_response();
  ::iterm2::InvokeFunctionResponse* mutable_invoke_function_response();
  void set_allocated_invoke_function_response(::iterm2::InvokeFunctionResponse* invoke_function_response);
  private:
  const ::iterm2::InvokeFunctionResponse& _internal_invoke_function_response() const;
  ::iterm2::InvokeFunctionResponse* _internal_mutable_invoke_function_response();
  public:
  void unsafe_arena_set_allocated_invoke_function_response(
      ::iterm2::InvokeFunctionResponse* invoke_function_response);
  ::iterm2::InvokeFunctionResponse* unsafe_arena_release_invoke_function_response();

  // .iterm2.ListPromptsResponse list_prompts_response = 133;
  bool has_list_prompts_response() const;
  private:
  bool _internal_has_list_prompts_response() const;
  public:
  void clear_list_prompts_response();
  const ::iterm2::ListPromptsResponse& list_prompts_response() const;
  PROTOBUF_NODISCARD ::iterm2::ListPromptsResponse* release_list_prompts_response();
  ::iterm2::ListPromptsResponse* mutable_list_prompts_response();
  void set_allocated_list_prompts_response(::iterm2::ListPromptsResponse* list_prompts_response);
  private:
  const ::iterm2::ListPromptsResponse& _internal_list_prompts_response() const;
  ::iterm2::ListPromptsResponse* _internal_mutable_list_prompts_response();
  public:
  void unsafe_arena_set_allocated_list_prompts_response(
      ::iterm2::ListPromptsResponse* list_prompts_response);
  ::iterm2::ListPromptsResponse* unsafe_arena_release_list_prompts_response();

  // .iterm2.Notification notification = 1000;
  bool has_notification() const;
  private:
  bool _internal_has_notification() const;
  public:
  void clear_notification();
  const ::iterm2::Notification& notification() const;
  PROTOBUF_NODISCARD ::iterm2::Notification* release_notification();
  ::iterm2::Notification* mutable_notification();
  void set_allocated_notification(::iterm2::Notification* notification);
  private:
  const ::iterm2::Notification& _internal_notification() const;
  ::iterm2::Notification* _internal_mutable_notification();
  public:
  void unsafe_arena_set_allocated_notification(
      ::iterm2::Notification* notification);
  ::iterm2::Notification* unsafe_arena_release_notification();

  void clear_submessage();
  SubmessageCase submessage_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.ServerOriginatedMessage)
 private:
  class _Internal;
  void set_has_error();
  void set_has_get_buffer_response();
  void set_has_get_prompt_response();
  void set_has_transaction_response();
  void set_has_notification_response();
  void set_has_register_tool_response();
  void set_has_set_profile_property_response();
  void set_has_list_sessions_response();
  void set_has_send_text_response();
  void set_has_create_tab_response();
  void set_has_split_pane_response();
  void set_has_get_profile_property_response();
  void set_has_set_property_response();
  void set_has_get_property_response();
  void set_has_inject_response();
  void set_has_activate_response();
  void set_has_variable_response();
  void set_has_saved_arrangement_response();
  void set_has_focus_response();
  void set_has_list_profiles_response();
  void set_has_server_originated_rpc_result_response();
  void set_has_restart_session_response();
  void set_has_menu_item_response();
  void set_has_set_tab_layout_response();
  void set_has_get_broadcast_domains_response();
  void set_has_tmux_response();
  void set_has_reorder_tabs_response();
  void set_has_preferences_response();
  void set_has_color_preset_response();
  void set_has_selection_response();
  void set_has_status_bar_component_response();
  void set_has_set_broadcast_domains_response();
  void set_has_close_response();
  void set_has_invoke_function_response();
  void set_has_list_prompts_response();
  void set_has_notification();

  inline bool has_submessage() const;
  inline void clear_has_submessage();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t id_;
  union SubmessageUnion {
    constexpr SubmessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::iterm2::GetBufferResponse* get_buffer_response_;
    ::iterm2::GetPromptResponse* get_prompt_response_;
    ::iterm2::TransactionResponse* transaction_response_;
    ::iterm2::NotificationResponse* notification_response_;
    ::iterm2::RegisterToolResponse* register_tool_response_;
    ::iterm2::SetProfilePropertyResponse* set_profile_property_response_;
    ::iterm2::ListSessionsResponse* list_sessions_response_;
    ::iterm2::SendTextResponse* send_text_response_;
    ::iterm2::CreateTabResponse* create_tab_response_;
    ::iterm2::SplitPaneResponse* split_pane_response_;
    ::iterm2::GetProfilePropertyResponse* get_profile_property_response_;
    ::iterm2::SetPropertyResponse* set_property_response_;
    ::iterm2::GetPropertyResponse* get_property_response_;
    ::iterm2::InjectResponse* inject_response_;
    ::iterm2::ActivateResponse* activate_response_;
    ::iterm2::VariableResponse* variable_response_;
    ::iterm2::SavedArrangementResponse* saved_arrangement_response_;
    ::iterm2::FocusResponse* focus_response_;
    ::iterm2::ListProfilesResponse* list_profiles_response_;
    ::iterm2::ServerOriginatedRPCResultResponse* server_originated_rpc_result_response_;
    ::iterm2::RestartSessionResponse* restart_session_response_;
    ::iterm2::MenuItemResponse* menu_item_response_;
    ::iterm2::SetTabLayoutResponse* set_tab_layout_response_;
    ::iterm2::GetBroadcastDomainsResponse* get_broadcast_domains_response_;
    ::iterm2::TmuxResponse* tmux_response_;
    ::iterm2::ReorderTabsResponse* reorder_tabs_response_;
    ::iterm2::PreferencesResponse* preferences_response_;
    ::iterm2::ColorPresetResponse* color_preset_response_;
    ::iterm2::SelectionResponse* selection_response_;
    ::iterm2::StatusBarComponentResponse* status_bar_component_response_;
    ::iterm2::SetBroadcastDomainsResponse* set_broadcast_domains_response_;
    ::iterm2::CloseResponse* close_response_;
    ::iterm2::InvokeFunctionResponse* invoke_function_response_;
    ::iterm2::ListPromptsResponse* list_prompts_response_;
    ::iterm2::Notification* notification_;
  } submessage_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionRequest_Tab final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionRequest.Tab) */ {
 public:
  inline InvokeFunctionRequest_Tab() : InvokeFunctionRequest_Tab(nullptr) {}
  ~InvokeFunctionRequest_Tab() override;
  explicit constexpr InvokeFunctionRequest_Tab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionRequest_Tab(const InvokeFunctionRequest_Tab& from);
  InvokeFunctionRequest_Tab(InvokeFunctionRequest_Tab&& from) noexcept
    : InvokeFunctionRequest_Tab() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionRequest_Tab& operator=(const InvokeFunctionRequest_Tab& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionRequest_Tab& operator=(InvokeFunctionRequest_Tab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionRequest_Tab& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionRequest_Tab* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionRequest_Tab*>(
               &_InvokeFunctionRequest_Tab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InvokeFunctionRequest_Tab& a, InvokeFunctionRequest_Tab& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionRequest_Tab* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionRequest_Tab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionRequest_Tab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionRequest_Tab>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionRequest_Tab& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionRequest_Tab& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionRequest_Tab* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionRequest.Tab";
  }
  protected:
  explicit InvokeFunctionRequest_Tab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabIdFieldNumber = 1,
  };
  // optional string tab_id = 1;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  const std::string& tab_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tab_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tab_id();
  PROTOBUF_NODISCARD std::string* release_tab_id();
  void set_allocated_tab_id(std::string* tab_id);
  private:
  const std::string& _internal_tab_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tab_id(const std::string& value);
  std::string* _internal_mutable_tab_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionRequest.Tab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tab_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionRequest_Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionRequest.Session) */ {
 public:
  inline InvokeFunctionRequest_Session() : InvokeFunctionRequest_Session(nullptr) {}
  ~InvokeFunctionRequest_Session() override;
  explicit constexpr InvokeFunctionRequest_Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionRequest_Session(const InvokeFunctionRequest_Session& from);
  InvokeFunctionRequest_Session(InvokeFunctionRequest_Session&& from) noexcept
    : InvokeFunctionRequest_Session() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionRequest_Session& operator=(const InvokeFunctionRequest_Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionRequest_Session& operator=(InvokeFunctionRequest_Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionRequest_Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionRequest_Session* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionRequest_Session*>(
               &_InvokeFunctionRequest_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InvokeFunctionRequest_Session& a, InvokeFunctionRequest_Session& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionRequest_Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionRequest_Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionRequest_Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionRequest_Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionRequest_Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionRequest_Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionRequest_Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionRequest.Session";
  }
  protected:
  explicit InvokeFunctionRequest_Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionRequest.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionRequest_Window final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionRequest.Window) */ {
 public:
  inline InvokeFunctionRequest_Window() : InvokeFunctionRequest_Window(nullptr) {}
  ~InvokeFunctionRequest_Window() override;
  explicit constexpr InvokeFunctionRequest_Window(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionRequest_Window(const InvokeFunctionRequest_Window& from);
  InvokeFunctionRequest_Window(InvokeFunctionRequest_Window&& from) noexcept
    : InvokeFunctionRequest_Window() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionRequest_Window& operator=(const InvokeFunctionRequest_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionRequest_Window& operator=(InvokeFunctionRequest_Window&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionRequest_Window& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionRequest_Window* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionRequest_Window*>(
               &_InvokeFunctionRequest_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InvokeFunctionRequest_Window& a, InvokeFunctionRequest_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionRequest_Window* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionRequest_Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionRequest_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionRequest_Window>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionRequest_Window& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionRequest_Window& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionRequest_Window* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionRequest.Window";
  }
  protected:
  explicit InvokeFunctionRequest_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowIdFieldNumber = 1,
  };
  // optional string window_id = 1;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionRequest.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionRequest_App final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionRequest.App) */ {
 public:
  inline InvokeFunctionRequest_App() : InvokeFunctionRequest_App(nullptr) {}
  explicit constexpr InvokeFunctionRequest_App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionRequest_App(const InvokeFunctionRequest_App& from);
  InvokeFunctionRequest_App(InvokeFunctionRequest_App&& from) noexcept
    : InvokeFunctionRequest_App() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionRequest_App& operator=(const InvokeFunctionRequest_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionRequest_App& operator=(InvokeFunctionRequest_App&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionRequest_App& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionRequest_App* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionRequest_App*>(
               &_InvokeFunctionRequest_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InvokeFunctionRequest_App& a, InvokeFunctionRequest_App& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionRequest_App* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionRequest_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionRequest_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionRequest_App>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InvokeFunctionRequest_App& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InvokeFunctionRequest_App& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionRequest.App";
  }
  protected:
  explicit InvokeFunctionRequest_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionRequest.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionRequest_Method final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionRequest.Method) */ {
 public:
  inline InvokeFunctionRequest_Method() : InvokeFunctionRequest_Method(nullptr) {}
  ~InvokeFunctionRequest_Method() override;
  explicit constexpr InvokeFunctionRequest_Method(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionRequest_Method(const InvokeFunctionRequest_Method& from);
  InvokeFunctionRequest_Method(InvokeFunctionRequest_Method&& from) noexcept
    : InvokeFunctionRequest_Method() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionRequest_Method& operator=(const InvokeFunctionRequest_Method& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionRequest_Method& operator=(InvokeFunctionRequest_Method&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionRequest_Method& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionRequest_Method* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionRequest_Method*>(
               &_InvokeFunctionRequest_Method_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InvokeFunctionRequest_Method& a, InvokeFunctionRequest_Method& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionRequest_Method* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionRequest_Method* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionRequest_Method* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionRequest_Method>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionRequest_Method& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionRequest_Method& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionRequest_Method* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionRequest.Method";
  }
  protected:
  explicit InvokeFunctionRequest_Method(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverFieldNumber = 1,
  };
  // optional string receiver = 1;
  bool has_receiver() const;
  private:
  bool _internal_has_receiver() const;
  public:
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionRequest.Method)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionRequest) */ {
 public:
  inline InvokeFunctionRequest() : InvokeFunctionRequest(nullptr) {}
  ~InvokeFunctionRequest() override;
  explicit constexpr InvokeFunctionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionRequest(const InvokeFunctionRequest& from);
  InvokeFunctionRequest(InvokeFunctionRequest&& from) noexcept
    : InvokeFunctionRequest() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionRequest& operator=(const InvokeFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionRequest& operator=(InvokeFunctionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ContextCase {
    kTab = 1,
    kSession = 2,
    kWindow = 3,
    kApp = 4,
    kMethod = 7,
    CONTEXT_NOT_SET = 0,
  };

  static inline const InvokeFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionRequest*>(
               &_InvokeFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InvokeFunctionRequest& a, InvokeFunctionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionRequest";
  }
  protected:
  explicit InvokeFunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InvokeFunctionRequest_Tab Tab;
  typedef InvokeFunctionRequest_Session Session;
  typedef InvokeFunctionRequest_Window Window;
  typedef InvokeFunctionRequest_App App;
  typedef InvokeFunctionRequest_Method Method;

  // accessors -------------------------------------------------------

  enum : int {
    kInvocationFieldNumber = 5,
    kTimeoutFieldNumber = 6,
    kTabFieldNumber = 1,
    kSessionFieldNumber = 2,
    kWindowFieldNumber = 3,
    kAppFieldNumber = 4,
    kMethodFieldNumber = 7,
  };
  // optional string invocation = 5;
  bool has_invocation() const;
  private:
  bool _internal_has_invocation() const;
  public:
  void clear_invocation();
  const std::string& invocation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invocation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invocation();
  PROTOBUF_NODISCARD std::string* release_invocation();
  void set_allocated_invocation(std::string* invocation);
  private:
  const std::string& _internal_invocation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invocation(const std::string& value);
  std::string* _internal_mutable_invocation();
  public:

  // optional double timeout = 6 [default = -1];
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  double timeout() const;
  void set_timeout(double value);
  private:
  double _internal_timeout() const;
  void _internal_set_timeout(double value);
  public:

  // .iterm2.InvokeFunctionRequest.Tab tab = 1;
  bool has_tab() const;
  private:
  bool _internal_has_tab() const;
  public:
  void clear_tab();
  const ::iterm2::InvokeFunctionRequest_Tab& tab() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionRequest_Tab* release_tab();
  ::iterm2::InvokeFunctionRequest_Tab* mutable_tab();
  void set_allocated_tab(::iterm2::InvokeFunctionRequest_Tab* tab);
  private:
  const ::iterm2::InvokeFunctionRequest_Tab& _internal_tab() const;
  ::iterm2::InvokeFunctionRequest_Tab* _internal_mutable_tab();
  public:
  void unsafe_arena_set_allocated_tab(
      ::iterm2::InvokeFunctionRequest_Tab* tab);
  ::iterm2::InvokeFunctionRequest_Tab* unsafe_arena_release_tab();

  // .iterm2.InvokeFunctionRequest.Session session = 2;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::iterm2::InvokeFunctionRequest_Session& session() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionRequest_Session* release_session();
  ::iterm2::InvokeFunctionRequest_Session* mutable_session();
  void set_allocated_session(::iterm2::InvokeFunctionRequest_Session* session);
  private:
  const ::iterm2::InvokeFunctionRequest_Session& _internal_session() const;
  ::iterm2::InvokeFunctionRequest_Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::iterm2::InvokeFunctionRequest_Session* session);
  ::iterm2::InvokeFunctionRequest_Session* unsafe_arena_release_session();

  // .iterm2.InvokeFunctionRequest.Window window = 3;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::iterm2::InvokeFunctionRequest_Window& window() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionRequest_Window* release_window();
  ::iterm2::InvokeFunctionRequest_Window* mutable_window();
  void set_allocated_window(::iterm2::InvokeFunctionRequest_Window* window);
  private:
  const ::iterm2::InvokeFunctionRequest_Window& _internal_window() const;
  ::iterm2::InvokeFunctionRequest_Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::iterm2::InvokeFunctionRequest_Window* window);
  ::iterm2::InvokeFunctionRequest_Window* unsafe_arena_release_window();

  // .iterm2.InvokeFunctionRequest.App app = 4;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::iterm2::InvokeFunctionRequest_App& app() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionRequest_App* release_app();
  ::iterm2::InvokeFunctionRequest_App* mutable_app();
  void set_allocated_app(::iterm2::InvokeFunctionRequest_App* app);
  private:
  const ::iterm2::InvokeFunctionRequest_App& _internal_app() const;
  ::iterm2::InvokeFunctionRequest_App* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::iterm2::InvokeFunctionRequest_App* app);
  ::iterm2::InvokeFunctionRequest_App* unsafe_arena_release_app();

  // .iterm2.InvokeFunctionRequest.Method method = 7;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const ::iterm2::InvokeFunctionRequest_Method& method() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionRequest_Method* release_method();
  ::iterm2::InvokeFunctionRequest_Method* mutable_method();
  void set_allocated_method(::iterm2::InvokeFunctionRequest_Method* method);
  private:
  const ::iterm2::InvokeFunctionRequest_Method& _internal_method() const;
  ::iterm2::InvokeFunctionRequest_Method* _internal_mutable_method();
  public:
  void unsafe_arena_set_allocated_method(
      ::iterm2::InvokeFunctionRequest_Method* method);
  ::iterm2::InvokeFunctionRequest_Method* unsafe_arena_release_method();

  void clear_context();
  ContextCase context_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionRequest)
 private:
  class _Internal;
  void set_has_tab();
  void set_has_session();
  void set_has_window();
  void set_has_app();
  void set_has_method();

  inline bool has_context() const;
  inline void clear_has_context();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invocation_;
  double timeout_;
  union ContextUnion {
    constexpr ContextUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::InvokeFunctionRequest_Tab* tab_;
    ::iterm2::InvokeFunctionRequest_Session* session_;
    ::iterm2::InvokeFunctionRequest_Window* window_;
    ::iterm2::InvokeFunctionRequest_App* app_;
    ::iterm2::InvokeFunctionRequest_Method* method_;
  } context_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionResponse_Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionResponse.Error) */ {
 public:
  inline InvokeFunctionResponse_Error() : InvokeFunctionResponse_Error(nullptr) {}
  ~InvokeFunctionResponse_Error() override;
  explicit constexpr InvokeFunctionResponse_Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionResponse_Error(const InvokeFunctionResponse_Error& from);
  InvokeFunctionResponse_Error(InvokeFunctionResponse_Error&& from) noexcept
    : InvokeFunctionResponse_Error() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionResponse_Error& operator=(const InvokeFunctionResponse_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionResponse_Error& operator=(InvokeFunctionResponse_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionResponse_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionResponse_Error* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionResponse_Error*>(
               &_InvokeFunctionResponse_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InvokeFunctionResponse_Error& a, InvokeFunctionResponse_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionResponse_Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionResponse_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionResponse_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionResponse_Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionResponse_Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionResponse_Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionResponse_Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionResponse.Error";
  }
  protected:
  explicit InvokeFunctionResponse_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorReasonFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string error_reason = 2;
  bool has_error_reason() const;
  private:
  bool _internal_has_error_reason() const;
  public:
  void clear_error_reason();
  const std::string& error_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_reason();
  PROTOBUF_NODISCARD std::string* release_error_reason();
  void set_allocated_error_reason(std::string* error_reason);
  private:
  const std::string& _internal_error_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_reason(const std::string& value);
  std::string* _internal_mutable_error_reason();
  public:

  // optional .iterm2.InvokeFunctionResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::InvokeFunctionResponse_Status status() const;
  void set_status(::iterm2::InvokeFunctionResponse_Status value);
  private:
  ::iterm2::InvokeFunctionResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::InvokeFunctionResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionResponse.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_reason_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionResponse_Success final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionResponse.Success) */ {
 public:
  inline InvokeFunctionResponse_Success() : InvokeFunctionResponse_Success(nullptr) {}
  ~InvokeFunctionResponse_Success() override;
  explicit constexpr InvokeFunctionResponse_Success(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionResponse_Success(const InvokeFunctionResponse_Success& from);
  InvokeFunctionResponse_Success(InvokeFunctionResponse_Success&& from) noexcept
    : InvokeFunctionResponse_Success() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionResponse_Success& operator=(const InvokeFunctionResponse_Success& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionResponse_Success& operator=(InvokeFunctionResponse_Success&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionResponse_Success& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeFunctionResponse_Success* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionResponse_Success*>(
               &_InvokeFunctionResponse_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InvokeFunctionResponse_Success& a, InvokeFunctionResponse_Success& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionResponse_Success* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionResponse_Success* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionResponse_Success* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionResponse_Success>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionResponse_Success& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionResponse_Success& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionResponse_Success* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionResponse.Success";
  }
  protected:
  explicit InvokeFunctionResponse_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonResultFieldNumber = 1,
  };
  // optional string json_result = 1;
  bool has_json_result() const;
  private:
  bool _internal_has_json_result() const;
  public:
  void clear_json_result();
  const std::string& json_result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_result();
  PROTOBUF_NODISCARD std::string* release_json_result();
  void set_allocated_json_result(std::string* json_result);
  private:
  const std::string& _internal_json_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_result(const std::string& value);
  std::string* _internal_mutable_json_result();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionResponse.Success)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_result_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InvokeFunctionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InvokeFunctionResponse) */ {
 public:
  inline InvokeFunctionResponse() : InvokeFunctionResponse(nullptr) {}
  ~InvokeFunctionResponse() override;
  explicit constexpr InvokeFunctionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvokeFunctionResponse(const InvokeFunctionResponse& from);
  InvokeFunctionResponse(InvokeFunctionResponse&& from) noexcept
    : InvokeFunctionResponse() {
    *this = ::std::move(from);
  }

  inline InvokeFunctionResponse& operator=(const InvokeFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeFunctionResponse& operator=(InvokeFunctionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeFunctionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DispositionCase {
    kError = 1,
    kSuccess = 2,
    DISPOSITION_NOT_SET = 0,
  };

  static inline const InvokeFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const InvokeFunctionResponse*>(
               &_InvokeFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InvokeFunctionResponse& a, InvokeFunctionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeFunctionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeFunctionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeFunctionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeFunctionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvokeFunctionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvokeFunctionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeFunctionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InvokeFunctionResponse";
  }
  protected:
  explicit InvokeFunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InvokeFunctionResponse_Error Error;
  typedef InvokeFunctionResponse_Success Success;

  typedef InvokeFunctionResponse_Status Status;
  static constexpr Status TIMEOUT =
    InvokeFunctionResponse_Status_TIMEOUT;
  static constexpr Status FAILED =
    InvokeFunctionResponse_Status_FAILED;
  static constexpr Status REQUEST_MALFORMED =
    InvokeFunctionResponse_Status_REQUEST_MALFORMED;
  static constexpr Status INVALID_ID =
    InvokeFunctionResponse_Status_INVALID_ID;
  static inline bool Status_IsValid(int value) {
    return InvokeFunctionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    InvokeFunctionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    InvokeFunctionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    InvokeFunctionResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return InvokeFunctionResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return InvokeFunctionResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return InvokeFunctionResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .iterm2.InvokeFunctionResponse.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::iterm2::InvokeFunctionResponse_Error& error() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionResponse_Error* release_error();
  ::iterm2::InvokeFunctionResponse_Error* mutable_error();
  void set_allocated_error(::iterm2::InvokeFunctionResponse_Error* error);
  private:
  const ::iterm2::InvokeFunctionResponse_Error& _internal_error() const;
  ::iterm2::InvokeFunctionResponse_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::iterm2::InvokeFunctionResponse_Error* error);
  ::iterm2::InvokeFunctionResponse_Error* unsafe_arena_release_error();

  // .iterm2.InvokeFunctionResponse.Success success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::iterm2::InvokeFunctionResponse_Success& success() const;
  PROTOBUF_NODISCARD ::iterm2::InvokeFunctionResponse_Success* release_success();
  ::iterm2::InvokeFunctionResponse_Success* mutable_success();
  void set_allocated_success(::iterm2::InvokeFunctionResponse_Success* success);
  private:
  const ::iterm2::InvokeFunctionResponse_Success& _internal_success() const;
  ::iterm2::InvokeFunctionResponse_Success* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::iterm2::InvokeFunctionResponse_Success* success);
  ::iterm2::InvokeFunctionResponse_Success* unsafe_arena_release_success();

  void clear_disposition();
  DispositionCase disposition_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.InvokeFunctionResponse)
 private:
  class _Internal;
  void set_has_error();
  void set_has_success();

  inline bool has_disposition() const;
  inline void clear_has_disposition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DispositionUnion {
    constexpr DispositionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::InvokeFunctionResponse_Error* error_;
    ::iterm2::InvokeFunctionResponse_Success* success_;
  } disposition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CloseRequest_CloseTabs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CloseRequest.CloseTabs) */ {
 public:
  inline CloseRequest_CloseTabs() : CloseRequest_CloseTabs(nullptr) {}
  ~CloseRequest_CloseTabs() override;
  explicit constexpr CloseRequest_CloseTabs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseRequest_CloseTabs(const CloseRequest_CloseTabs& from);
  CloseRequest_CloseTabs(CloseRequest_CloseTabs&& from) noexcept
    : CloseRequest_CloseTabs() {
    *this = ::std::move(from);
  }

  inline CloseRequest_CloseTabs& operator=(const CloseRequest_CloseTabs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest_CloseTabs& operator=(CloseRequest_CloseTabs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseRequest_CloseTabs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseRequest_CloseTabs* internal_default_instance() {
    return reinterpret_cast<const CloseRequest_CloseTabs*>(
               &_CloseRequest_CloseTabs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CloseRequest_CloseTabs& a, CloseRequest_CloseTabs& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest_CloseTabs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest_CloseTabs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseRequest_CloseTabs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseRequest_CloseTabs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseRequest_CloseTabs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseRequest_CloseTabs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest_CloseTabs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CloseRequest.CloseTabs";
  }
  protected:
  explicit CloseRequest_CloseTabs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabIdsFieldNumber = 1,
  };
  // repeated string tab_ids = 1;
  int tab_ids_size() const;
  private:
  int _internal_tab_ids_size() const;
  public:
  void clear_tab_ids();
  const std::string& tab_ids(int index) const;
  std::string* mutable_tab_ids(int index);
  void set_tab_ids(int index, const std::string& value);
  void set_tab_ids(int index, std::string&& value);
  void set_tab_ids(int index, const char* value);
  void set_tab_ids(int index, const char* value, size_t size);
  std::string* add_tab_ids();
  void add_tab_ids(const std::string& value);
  void add_tab_ids(std::string&& value);
  void add_tab_ids(const char* value);
  void add_tab_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tab_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tab_ids();
  private:
  const std::string& _internal_tab_ids(int index) const;
  std::string* _internal_add_tab_ids();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CloseRequest.CloseTabs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tab_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CloseRequest_CloseSessions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CloseRequest.CloseSessions) */ {
 public:
  inline CloseRequest_CloseSessions() : CloseRequest_CloseSessions(nullptr) {}
  ~CloseRequest_CloseSessions() override;
  explicit constexpr CloseRequest_CloseSessions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseRequest_CloseSessions(const CloseRequest_CloseSessions& from);
  CloseRequest_CloseSessions(CloseRequest_CloseSessions&& from) noexcept
    : CloseRequest_CloseSessions() {
    *this = ::std::move(from);
  }

  inline CloseRequest_CloseSessions& operator=(const CloseRequest_CloseSessions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest_CloseSessions& operator=(CloseRequest_CloseSessions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseRequest_CloseSessions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseRequest_CloseSessions* internal_default_instance() {
    return reinterpret_cast<const CloseRequest_CloseSessions*>(
               &_CloseRequest_CloseSessions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CloseRequest_CloseSessions& a, CloseRequest_CloseSessions& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest_CloseSessions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest_CloseSessions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseRequest_CloseSessions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseRequest_CloseSessions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseRequest_CloseSessions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseRequest_CloseSessions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest_CloseSessions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CloseRequest.CloseSessions";
  }
  protected:
  explicit CloseRequest_CloseSessions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdsFieldNumber = 1,
  };
  // repeated string session_ids = 1;
  int session_ids_size() const;
  private:
  int _internal_session_ids_size() const;
  public:
  void clear_session_ids();
  const std::string& session_ids(int index) const;
  std::string* mutable_session_ids(int index);
  void set_session_ids(int index, const std::string& value);
  void set_session_ids(int index, std::string&& value);
  void set_session_ids(int index, const char* value);
  void set_session_ids(int index, const char* value, size_t size);
  std::string* add_session_ids();
  void add_session_ids(const std::string& value);
  void add_session_ids(std::string&& value);
  void add_session_ids(const char* value);
  void add_session_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_ids();
  private:
  const std::string& _internal_session_ids(int index) const;
  std::string* _internal_add_session_ids();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CloseRequest.CloseSessions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CloseRequest_CloseWindows final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CloseRequest.CloseWindows) */ {
 public:
  inline CloseRequest_CloseWindows() : CloseRequest_CloseWindows(nullptr) {}
  ~CloseRequest_CloseWindows() override;
  explicit constexpr CloseRequest_CloseWindows(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseRequest_CloseWindows(const CloseRequest_CloseWindows& from);
  CloseRequest_CloseWindows(CloseRequest_CloseWindows&& from) noexcept
    : CloseRequest_CloseWindows() {
    *this = ::std::move(from);
  }

  inline CloseRequest_CloseWindows& operator=(const CloseRequest_CloseWindows& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest_CloseWindows& operator=(CloseRequest_CloseWindows&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseRequest_CloseWindows& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseRequest_CloseWindows* internal_default_instance() {
    return reinterpret_cast<const CloseRequest_CloseWindows*>(
               &_CloseRequest_CloseWindows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CloseRequest_CloseWindows& a, CloseRequest_CloseWindows& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest_CloseWindows* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest_CloseWindows* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseRequest_CloseWindows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseRequest_CloseWindows>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseRequest_CloseWindows& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseRequest_CloseWindows& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest_CloseWindows* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CloseRequest.CloseWindows";
  }
  protected:
  explicit CloseRequest_CloseWindows(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowIdsFieldNumber = 1,
  };
  // repeated string window_ids = 1;
  int window_ids_size() const;
  private:
  int _internal_window_ids_size() const;
  public:
  void clear_window_ids();
  const std::string& window_ids(int index) const;
  std::string* mutable_window_ids(int index);
  void set_window_ids(int index, const std::string& value);
  void set_window_ids(int index, std::string&& value);
  void set_window_ids(int index, const char* value);
  void set_window_ids(int index, const char* value, size_t size);
  std::string* add_window_ids();
  void add_window_ids(const std::string& value);
  void add_window_ids(std::string&& value);
  void add_window_ids(const char* value);
  void add_window_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& window_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_window_ids();
  private:
  const std::string& _internal_window_ids(int index) const;
  std::string* _internal_add_window_ids();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CloseRequest.CloseWindows)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> window_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CloseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CloseRequest) */ {
 public:
  inline CloseRequest() : CloseRequest(nullptr) {}
  ~CloseRequest() override;
  explicit constexpr CloseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseRequest(const CloseRequest& from);
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kTabs = 1,
    kSessions = 2,
    kWindows = 3,
    TARGET_NOT_SET = 0,
  };

  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CloseRequest";
  }
  protected:
  explicit CloseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CloseRequest_CloseTabs CloseTabs;
  typedef CloseRequest_CloseSessions CloseSessions;
  typedef CloseRequest_CloseWindows CloseWindows;

  // accessors -------------------------------------------------------

  enum : int {
    kForceFieldNumber = 4,
    kTabsFieldNumber = 1,
    kSessionsFieldNumber = 2,
    kWindowsFieldNumber = 3,
  };
  // optional bool force = 4;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // .iterm2.CloseRequest.CloseTabs tabs = 1;
  bool has_tabs() const;
  private:
  bool _internal_has_tabs() const;
  public:
  void clear_tabs();
  const ::iterm2::CloseRequest_CloseTabs& tabs() const;
  PROTOBUF_NODISCARD ::iterm2::CloseRequest_CloseTabs* release_tabs();
  ::iterm2::CloseRequest_CloseTabs* mutable_tabs();
  void set_allocated_tabs(::iterm2::CloseRequest_CloseTabs* tabs);
  private:
  const ::iterm2::CloseRequest_CloseTabs& _internal_tabs() const;
  ::iterm2::CloseRequest_CloseTabs* _internal_mutable_tabs();
  public:
  void unsafe_arena_set_allocated_tabs(
      ::iterm2::CloseRequest_CloseTabs* tabs);
  ::iterm2::CloseRequest_CloseTabs* unsafe_arena_release_tabs();

  // .iterm2.CloseRequest.CloseSessions sessions = 2;
  bool has_sessions() const;
  private:
  bool _internal_has_sessions() const;
  public:
  void clear_sessions();
  const ::iterm2::CloseRequest_CloseSessions& sessions() const;
  PROTOBUF_NODISCARD ::iterm2::CloseRequest_CloseSessions* release_sessions();
  ::iterm2::CloseRequest_CloseSessions* mutable_sessions();
  void set_allocated_sessions(::iterm2::CloseRequest_CloseSessions* sessions);
  private:
  const ::iterm2::CloseRequest_CloseSessions& _internal_sessions() const;
  ::iterm2::CloseRequest_CloseSessions* _internal_mutable_sessions();
  public:
  void unsafe_arena_set_allocated_sessions(
      ::iterm2::CloseRequest_CloseSessions* sessions);
  ::iterm2::CloseRequest_CloseSessions* unsafe_arena_release_sessions();

  // .iterm2.CloseRequest.CloseWindows windows = 3;
  bool has_windows() const;
  private:
  bool _internal_has_windows() const;
  public:
  void clear_windows();
  const ::iterm2::CloseRequest_CloseWindows& windows() const;
  PROTOBUF_NODISCARD ::iterm2::CloseRequest_CloseWindows* release_windows();
  ::iterm2::CloseRequest_CloseWindows* mutable_windows();
  void set_allocated_windows(::iterm2::CloseRequest_CloseWindows* windows);
  private:
  const ::iterm2::CloseRequest_CloseWindows& _internal_windows() const;
  ::iterm2::CloseRequest_CloseWindows* _internal_mutable_windows();
  public:
  void unsafe_arena_set_allocated_windows(
      ::iterm2::CloseRequest_CloseWindows* windows);
  ::iterm2::CloseRequest_CloseWindows* unsafe_arena_release_windows();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.CloseRequest)
 private:
  class _Internal;
  void set_has_tabs();
  void set_has_sessions();
  void set_has_windows();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool force_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::CloseRequest_CloseTabs* tabs_;
    ::iterm2::CloseRequest_CloseSessions* sessions_;
    ::iterm2::CloseRequest_CloseWindows* windows_;
  } target_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CloseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CloseResponse) */ {
 public:
  inline CloseResponse() : CloseResponse(nullptr) {}
  ~CloseResponse() override;
  explicit constexpr CloseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseResponse(const CloseResponse& from);
  CloseResponse(CloseResponse&& from) noexcept
    : CloseResponse() {
    *this = ::std::move(from);
  }

  inline CloseResponse& operator=(const CloseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseResponse& operator=(CloseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseResponse* internal_default_instance() {
    return reinterpret_cast<const CloseResponse*>(
               &_CloseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CloseResponse& a, CloseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CloseResponse";
  }
  protected:
  explicit CloseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CloseResponse_Status Status;
  static constexpr Status OK =
    CloseResponse_Status_OK;
  static constexpr Status NOT_FOUND =
    CloseResponse_Status_NOT_FOUND;
  static constexpr Status USER_DECLINED =
    CloseResponse_Status_USER_DECLINED;
  static inline bool Status_IsValid(int value) {
    return CloseResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CloseResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CloseResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CloseResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CloseResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CloseResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return CloseResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusesFieldNumber = 1,
  };
  // repeated .iterm2.CloseResponse.Status statuses = 1;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;
  public:
  void clear_statuses();
  private:
  ::iterm2::CloseResponse_Status _internal_statuses(int index) const;
  void _internal_add_statuses(::iterm2::CloseResponse_Status value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_statuses();
  public:
  ::iterm2::CloseResponse_Status statuses(int index) const;
  void set_statuses(int index, ::iterm2::CloseResponse_Status value);
  void add_statuses(::iterm2::CloseResponse_Status value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& statuses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_statuses();

  // @@protoc_insertion_point(class_scope:iterm2.CloseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> statuses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetBroadcastDomainsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetBroadcastDomainsRequest) */ {
 public:
  inline SetBroadcastDomainsRequest() : SetBroadcastDomainsRequest(nullptr) {}
  ~SetBroadcastDomainsRequest() override;
  explicit constexpr SetBroadcastDomainsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBroadcastDomainsRequest(const SetBroadcastDomainsRequest& from);
  SetBroadcastDomainsRequest(SetBroadcastDomainsRequest&& from) noexcept
    : SetBroadcastDomainsRequest() {
    *this = ::std::move(from);
  }

  inline SetBroadcastDomainsRequest& operator=(const SetBroadcastDomainsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBroadcastDomainsRequest& operator=(SetBroadcastDomainsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBroadcastDomainsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBroadcastDomainsRequest* internal_default_instance() {
    return reinterpret_cast<const SetBroadcastDomainsRequest*>(
               &_SetBroadcastDomainsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetBroadcastDomainsRequest& a, SetBroadcastDomainsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBroadcastDomainsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBroadcastDomainsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBroadcastDomainsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBroadcastDomainsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBroadcastDomainsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBroadcastDomainsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBroadcastDomainsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetBroadcastDomainsRequest";
  }
  protected:
  explicit SetBroadcastDomainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastDomainsFieldNumber = 1,
  };
  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  int broadcast_domains_size() const;
  private:
  int _internal_broadcast_domains_size() const;
  public:
  void clear_broadcast_domains();
  ::iterm2::BroadcastDomain* mutable_broadcast_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >*
      mutable_broadcast_domains();
  private:
  const ::iterm2::BroadcastDomain& _internal_broadcast_domains(int index) const;
  ::iterm2::BroadcastDomain* _internal_add_broadcast_domains();
  public:
  const ::iterm2::BroadcastDomain& broadcast_domains(int index) const;
  ::iterm2::BroadcastDomain* add_broadcast_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >&
      broadcast_domains() const;

  // @@protoc_insertion_point(class_scope:iterm2.SetBroadcastDomainsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain > broadcast_domains_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetBroadcastDomainsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetBroadcastDomainsResponse) */ {
 public:
  inline SetBroadcastDomainsResponse() : SetBroadcastDomainsResponse(nullptr) {}
  ~SetBroadcastDomainsResponse() override;
  explicit constexpr SetBroadcastDomainsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBroadcastDomainsResponse(const SetBroadcastDomainsResponse& from);
  SetBroadcastDomainsResponse(SetBroadcastDomainsResponse&& from) noexcept
    : SetBroadcastDomainsResponse() {
    *this = ::std::move(from);
  }

  inline SetBroadcastDomainsResponse& operator=(const SetBroadcastDomainsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBroadcastDomainsResponse& operator=(SetBroadcastDomainsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBroadcastDomainsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBroadcastDomainsResponse* internal_default_instance() {
    return reinterpret_cast<const SetBroadcastDomainsResponse*>(
               &_SetBroadcastDomainsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetBroadcastDomainsResponse& a, SetBroadcastDomainsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBroadcastDomainsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBroadcastDomainsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBroadcastDomainsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBroadcastDomainsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBroadcastDomainsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBroadcastDomainsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBroadcastDomainsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetBroadcastDomainsResponse";
  }
  protected:
  explicit SetBroadcastDomainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetBroadcastDomainsResponse_Status Status;
  static constexpr Status OK =
    SetBroadcastDomainsResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    SetBroadcastDomainsResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status BROADCAST_DOMAINS_NOT_DISJOINT =
    SetBroadcastDomainsResponse_Status_BROADCAST_DOMAINS_NOT_DISJOINT;
  static constexpr Status SESSIONS_NOT_IN_SAME_WINDOW =
    SetBroadcastDomainsResponse_Status_SESSIONS_NOT_IN_SAME_WINDOW;
  static inline bool Status_IsValid(int value) {
    return SetBroadcastDomainsResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SetBroadcastDomainsResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SetBroadcastDomainsResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SetBroadcastDomainsResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SetBroadcastDomainsResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SetBroadcastDomainsResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SetBroadcastDomainsResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.SetBroadcastDomainsResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SetBroadcastDomainsResponse_Status status() const;
  void set_status(::iterm2::SetBroadcastDomainsResponse_Status value);
  private:
  ::iterm2::SetBroadcastDomainsResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SetBroadcastDomainsResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SetBroadcastDomainsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class StatusBarComponentRequest_OpenPopover final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.StatusBarComponentRequest.OpenPopover) */ {
 public:
  inline StatusBarComponentRequest_OpenPopover() : StatusBarComponentRequest_OpenPopover(nullptr) {}
  ~StatusBarComponentRequest_OpenPopover() override;
  explicit constexpr StatusBarComponentRequest_OpenPopover(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusBarComponentRequest_OpenPopover(const StatusBarComponentRequest_OpenPopover& from);
  StatusBarComponentRequest_OpenPopover(StatusBarComponentRequest_OpenPopover&& from) noexcept
    : StatusBarComponentRequest_OpenPopover() {
    *this = ::std::move(from);
  }

  inline StatusBarComponentRequest_OpenPopover& operator=(const StatusBarComponentRequest_OpenPopover& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusBarComponentRequest_OpenPopover& operator=(StatusBarComponentRequest_OpenPopover&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusBarComponentRequest_OpenPopover& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusBarComponentRequest_OpenPopover* internal_default_instance() {
    return reinterpret_cast<const StatusBarComponentRequest_OpenPopover*>(
               &_StatusBarComponentRequest_OpenPopover_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StatusBarComponentRequest_OpenPopover& a, StatusBarComponentRequest_OpenPopover& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusBarComponentRequest_OpenPopover* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusBarComponentRequest_OpenPopover* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusBarComponentRequest_OpenPopover* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusBarComponentRequest_OpenPopover>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusBarComponentRequest_OpenPopover& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusBarComponentRequest_OpenPopover& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusBarComponentRequest_OpenPopover* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.StatusBarComponentRequest.OpenPopover";
  }
  protected:
  explicit StatusBarComponentRequest_OpenPopover(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kHtmlFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional string html = 2;
  bool has_html() const;
  private:
  bool _internal_has_html() const;
  public:
  void clear_html();
  const std::string& html() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_html(ArgT0&& arg0, ArgT... args);
  std::string* mutable_html();
  PROTOBUF_NODISCARD std::string* release_html();
  void set_allocated_html(std::string* html);
  private:
  const std::string& _internal_html() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_html(const std::string& value);
  std::string* _internal_mutable_html();
  public:

  // optional .iterm2.Size size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::iterm2::Size& size() const;
  PROTOBUF_NODISCARD ::iterm2::Size* release_size();
  ::iterm2::Size* mutable_size();
  void set_allocated_size(::iterm2::Size* size);
  private:
  const ::iterm2::Size& _internal_size() const;
  ::iterm2::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::iterm2::Size* size);
  ::iterm2::Size* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:iterm2.StatusBarComponentRequest.OpenPopover)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_;
  ::iterm2::Size* size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class StatusBarComponentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.StatusBarComponentRequest) */ {
 public:
  inline StatusBarComponentRequest() : StatusBarComponentRequest(nullptr) {}
  ~StatusBarComponentRequest() override;
  explicit constexpr StatusBarComponentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusBarComponentRequest(const StatusBarComponentRequest& from);
  StatusBarComponentRequest(StatusBarComponentRequest&& from) noexcept
    : StatusBarComponentRequest() {
    *this = ::std::move(from);
  }

  inline StatusBarComponentRequest& operator=(const StatusBarComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusBarComponentRequest& operator=(StatusBarComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusBarComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kOpenPopover = 1,
    REQUEST_NOT_SET = 0,
  };

  static inline const StatusBarComponentRequest* internal_default_instance() {
    return reinterpret_cast<const StatusBarComponentRequest*>(
               &_StatusBarComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StatusBarComponentRequest& a, StatusBarComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusBarComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusBarComponentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusBarComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusBarComponentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusBarComponentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusBarComponentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusBarComponentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.StatusBarComponentRequest";
  }
  protected:
  explicit StatusBarComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatusBarComponentRequest_OpenPopover OpenPopover;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kOpenPopoverFieldNumber = 1,
  };
  // optional string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // .iterm2.StatusBarComponentRequest.OpenPopover open_popover = 1;
  bool has_open_popover() const;
  private:
  bool _internal_has_open_popover() const;
  public:
  void clear_open_popover();
  const ::iterm2::StatusBarComponentRequest_OpenPopover& open_popover() const;
  PROTOBUF_NODISCARD ::iterm2::StatusBarComponentRequest_OpenPopover* release_open_popover();
  ::iterm2::StatusBarComponentRequest_OpenPopover* mutable_open_popover();
  void set_allocated_open_popover(::iterm2::StatusBarComponentRequest_OpenPopover* open_popover);
  private:
  const ::iterm2::StatusBarComponentRequest_OpenPopover& _internal_open_popover() const;
  ::iterm2::StatusBarComponentRequest_OpenPopover* _internal_mutable_open_popover();
  public:
  void unsafe_arena_set_allocated_open_popover(
      ::iterm2::StatusBarComponentRequest_OpenPopover* open_popover);
  ::iterm2::StatusBarComponentRequest_OpenPopover* unsafe_arena_release_open_popover();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.StatusBarComponentRequest)
 private:
  class _Internal;
  void set_has_open_popover();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::StatusBarComponentRequest_OpenPopover* open_popover_;
  } request_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class StatusBarComponentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.StatusBarComponentResponse) */ {
 public:
  inline StatusBarComponentResponse() : StatusBarComponentResponse(nullptr) {}
  ~StatusBarComponentResponse() override;
  explicit constexpr StatusBarComponentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusBarComponentResponse(const StatusBarComponentResponse& from);
  StatusBarComponentResponse(StatusBarComponentResponse&& from) noexcept
    : StatusBarComponentResponse() {
    *this = ::std::move(from);
  }

  inline StatusBarComponentResponse& operator=(const StatusBarComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusBarComponentResponse& operator=(StatusBarComponentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusBarComponentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusBarComponentResponse* internal_default_instance() {
    return reinterpret_cast<const StatusBarComponentResponse*>(
               &_StatusBarComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StatusBarComponentResponse& a, StatusBarComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusBarComponentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusBarComponentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusBarComponentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusBarComponentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusBarComponentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusBarComponentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusBarComponentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.StatusBarComponentResponse";
  }
  protected:
  explicit StatusBarComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatusBarComponentResponse_Status Status;
  static constexpr Status OK =
    StatusBarComponentResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    StatusBarComponentResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    StatusBarComponentResponse_Status_REQUEST_MALFORMED;
  static constexpr Status INVALID_IDENTIFIER =
    StatusBarComponentResponse_Status_INVALID_IDENTIFIER;
  static inline bool Status_IsValid(int value) {
    return StatusBarComponentResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    StatusBarComponentResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    StatusBarComponentResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    StatusBarComponentResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return StatusBarComponentResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return StatusBarComponentResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return StatusBarComponentResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.StatusBarComponentResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::StatusBarComponentResponse_Status status() const;
  void set_status(::iterm2::StatusBarComponentResponse_Status value);
  private:
  ::iterm2::StatusBarComponentResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::StatusBarComponentResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.StatusBarComponentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class WindowedCoordRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.WindowedCoordRange) */ {
 public:
  inline WindowedCoordRange() : WindowedCoordRange(nullptr) {}
  ~WindowedCoordRange() override;
  explicit constexpr WindowedCoordRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WindowedCoordRange(const WindowedCoordRange& from);
  WindowedCoordRange(WindowedCoordRange&& from) noexcept
    : WindowedCoordRange() {
    *this = ::std::move(from);
  }

  inline WindowedCoordRange& operator=(const WindowedCoordRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowedCoordRange& operator=(WindowedCoordRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowedCoordRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowedCoordRange* internal_default_instance() {
    return reinterpret_cast<const WindowedCoordRange*>(
               &_WindowedCoordRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WindowedCoordRange& a, WindowedCoordRange& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowedCoordRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowedCoordRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowedCoordRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowedCoordRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WindowedCoordRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WindowedCoordRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowedCoordRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.WindowedCoordRange";
  }
  protected:
  explicit WindowedCoordRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordRangeFieldNumber = 1,
    kColumnsFieldNumber = 2,
  };
  // optional .iterm2.CoordRange coord_range = 1;
  bool has_coord_range() const;
  private:
  bool _internal_has_coord_range() const;
  public:
  void clear_coord_range();
  const ::iterm2::CoordRange& coord_range() const;
  PROTOBUF_NODISCARD ::iterm2::CoordRange* release_coord_range();
  ::iterm2::CoordRange* mutable_coord_range();
  void set_allocated_coord_range(::iterm2::CoordRange* coord_range);
  private:
  const ::iterm2::CoordRange& _internal_coord_range() const;
  ::iterm2::CoordRange* _internal_mutable_coord_range();
  public:
  void unsafe_arena_set_allocated_coord_range(
      ::iterm2::CoordRange* coord_range);
  ::iterm2::CoordRange* unsafe_arena_release_coord_range();

  // optional .iterm2.Range columns = 2;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  const ::iterm2::Range& columns() const;
  PROTOBUF_NODISCARD ::iterm2::Range* release_columns();
  ::iterm2::Range* mutable_columns();
  void set_allocated_columns(::iterm2::Range* columns);
  private:
  const ::iterm2::Range& _internal_columns() const;
  ::iterm2::Range* _internal_mutable_columns();
  public:
  void unsafe_arena_set_allocated_columns(
      ::iterm2::Range* columns);
  ::iterm2::Range* unsafe_arena_release_columns();

  // @@protoc_insertion_point(class_scope:iterm2.WindowedCoordRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::CoordRange* coord_range_;
  ::iterm2::Range* columns_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SubSelection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SubSelection) */ {
 public:
  inline SubSelection() : SubSelection(nullptr) {}
  ~SubSelection() override;
  explicit constexpr SubSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubSelection(const SubSelection& from);
  SubSelection(SubSelection&& from) noexcept
    : SubSelection() {
    *this = ::std::move(from);
  }

  inline SubSelection& operator=(const SubSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubSelection& operator=(SubSelection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubSelection* internal_default_instance() {
    return reinterpret_cast<const SubSelection*>(
               &_SubSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubSelection& a, SubSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(SubSelection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubSelection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubSelection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubSelection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubSelection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SubSelection";
  }
  protected:
  explicit SubSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowedCoordRangeFieldNumber = 1,
    kSelectionModeFieldNumber = 2,
    kConnectedFieldNumber = 3,
  };
  // optional .iterm2.WindowedCoordRange windowed_coord_range = 1;
  bool has_windowed_coord_range() const;
  private:
  bool _internal_has_windowed_coord_range() const;
  public:
  void clear_windowed_coord_range();
  const ::iterm2::WindowedCoordRange& windowed_coord_range() const;
  PROTOBUF_NODISCARD ::iterm2::WindowedCoordRange* release_windowed_coord_range();
  ::iterm2::WindowedCoordRange* mutable_windowed_coord_range();
  void set_allocated_windowed_coord_range(::iterm2::WindowedCoordRange* windowed_coord_range);
  private:
  const ::iterm2::WindowedCoordRange& _internal_windowed_coord_range() const;
  ::iterm2::WindowedCoordRange* _internal_mutable_windowed_coord_range();
  public:
  void unsafe_arena_set_allocated_windowed_coord_range(
      ::iterm2::WindowedCoordRange* windowed_coord_range);
  ::iterm2::WindowedCoordRange* unsafe_arena_release_windowed_coord_range();

  // optional .iterm2.SelectionMode selection_mode = 2;
  bool has_selection_mode() const;
  private:
  bool _internal_has_selection_mode() const;
  public:
  void clear_selection_mode();
  ::iterm2::SelectionMode selection_mode() const;
  void set_selection_mode(::iterm2::SelectionMode value);
  private:
  ::iterm2::SelectionMode _internal_selection_mode() const;
  void _internal_set_selection_mode(::iterm2::SelectionMode value);
  public:

  // optional bool connected = 3;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SubSelection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::WindowedCoordRange* windowed_coord_range_;
  int selection_mode_;
  bool connected_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Selection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Selection) */ {
 public:
  inline Selection() : Selection(nullptr) {}
  ~Selection() override;
  explicit constexpr Selection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Selection(const Selection& from);
  Selection(Selection&& from) noexcept
    : Selection() {
    *this = ::std::move(from);
  }

  inline Selection& operator=(const Selection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection& operator=(Selection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Selection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Selection* internal_default_instance() {
    return reinterpret_cast<const Selection*>(
               &_Selection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Selection& a, Selection& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Selection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Selection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Selection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Selection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Selection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Selection";
  }
  protected:
  explicit Selection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubSelectionsFieldNumber = 1,
  };
  // repeated .iterm2.SubSelection sub_selections = 1;
  int sub_selections_size() const;
  private:
  int _internal_sub_selections_size() const;
  public:
  void clear_sub_selections();
  ::iterm2::SubSelection* mutable_sub_selections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SubSelection >*
      mutable_sub_selections();
  private:
  const ::iterm2::SubSelection& _internal_sub_selections(int index) const;
  ::iterm2::SubSelection* _internal_add_sub_selections();
  public:
  const ::iterm2::SubSelection& sub_selections(int index) const;
  ::iterm2::SubSelection* add_sub_selections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SubSelection >&
      sub_selections() const;

  // @@protoc_insertion_point(class_scope:iterm2.Selection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SubSelection > sub_selections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SelectionRequest_GetSelectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SelectionRequest.GetSelectionRequest) */ {
 public:
  inline SelectionRequest_GetSelectionRequest() : SelectionRequest_GetSelectionRequest(nullptr) {}
  ~SelectionRequest_GetSelectionRequest() override;
  explicit constexpr SelectionRequest_GetSelectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionRequest_GetSelectionRequest(const SelectionRequest_GetSelectionRequest& from);
  SelectionRequest_GetSelectionRequest(SelectionRequest_GetSelectionRequest&& from) noexcept
    : SelectionRequest_GetSelectionRequest() {
    *this = ::std::move(from);
  }

  inline SelectionRequest_GetSelectionRequest& operator=(const SelectionRequest_GetSelectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionRequest_GetSelectionRequest& operator=(SelectionRequest_GetSelectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionRequest_GetSelectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionRequest_GetSelectionRequest* internal_default_instance() {
    return reinterpret_cast<const SelectionRequest_GetSelectionRequest*>(
               &_SelectionRequest_GetSelectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SelectionRequest_GetSelectionRequest& a, SelectionRequest_GetSelectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionRequest_GetSelectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionRequest_GetSelectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectionRequest_GetSelectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectionRequest_GetSelectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectionRequest_GetSelectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectionRequest_GetSelectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionRequest_GetSelectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SelectionRequest.GetSelectionRequest";
  }
  protected:
  explicit SelectionRequest_GetSelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SelectionRequest.GetSelectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SelectionRequest_SetSelectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SelectionRequest.SetSelectionRequest) */ {
 public:
  inline SelectionRequest_SetSelectionRequest() : SelectionRequest_SetSelectionRequest(nullptr) {}
  ~SelectionRequest_SetSelectionRequest() override;
  explicit constexpr SelectionRequest_SetSelectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionRequest_SetSelectionRequest(const SelectionRequest_SetSelectionRequest& from);
  SelectionRequest_SetSelectionRequest(SelectionRequest_SetSelectionRequest&& from) noexcept
    : SelectionRequest_SetSelectionRequest() {
    *this = ::std::move(from);
  }

  inline SelectionRequest_SetSelectionRequest& operator=(const SelectionRequest_SetSelectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionRequest_SetSelectionRequest& operator=(SelectionRequest_SetSelectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionRequest_SetSelectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionRequest_SetSelectionRequest* internal_default_instance() {
    return reinterpret_cast<const SelectionRequest_SetSelectionRequest*>(
               &_SelectionRequest_SetSelectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SelectionRequest_SetSelectionRequest& a, SelectionRequest_SetSelectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionRequest_SetSelectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionRequest_SetSelectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectionRequest_SetSelectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectionRequest_SetSelectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectionRequest_SetSelectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectionRequest_SetSelectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionRequest_SetSelectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SelectionRequest.SetSelectionRequest";
  }
  protected:
  explicit SelectionRequest_SetSelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kSelectionFieldNumber = 2,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional .iterm2.Selection selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::iterm2::Selection& selection() const;
  PROTOBUF_NODISCARD ::iterm2::Selection* release_selection();
  ::iterm2::Selection* mutable_selection();
  void set_allocated_selection(::iterm2::Selection* selection);
  private:
  const ::iterm2::Selection& _internal_selection() const;
  ::iterm2::Selection* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::iterm2::Selection* selection);
  ::iterm2::Selection* unsafe_arena_release_selection();

  // @@protoc_insertion_point(class_scope:iterm2.SelectionRequest.SetSelectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::iterm2::Selection* selection_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SelectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SelectionRequest) */ {
 public:
  inline SelectionRequest() : SelectionRequest(nullptr) {}
  ~SelectionRequest() override;
  explicit constexpr SelectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionRequest(const SelectionRequest& from);
  SelectionRequest(SelectionRequest&& from) noexcept
    : SelectionRequest() {
    *this = ::std::move(from);
  }

  inline SelectionRequest& operator=(const SelectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionRequest& operator=(SelectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kGetSelectionRequest = 1,
    kSetSelectionRequest = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const SelectionRequest* internal_default_instance() {
    return reinterpret_cast<const SelectionRequest*>(
               &_SelectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SelectionRequest& a, SelectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SelectionRequest";
  }
  protected:
  explicit SelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SelectionRequest_GetSelectionRequest GetSelectionRequest;
  typedef SelectionRequest_SetSelectionRequest SetSelectionRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kGetSelectionRequestFieldNumber = 1,
    kSetSelectionRequestFieldNumber = 2,
  };
  // .iterm2.SelectionRequest.GetSelectionRequest get_selection_request = 1;
  bool has_get_selection_request() const;
  private:
  bool _internal_has_get_selection_request() const;
  public:
  void clear_get_selection_request();
  const ::iterm2::SelectionRequest_GetSelectionRequest& get_selection_request() const;
  PROTOBUF_NODISCARD ::iterm2::SelectionRequest_GetSelectionRequest* release_get_selection_request();
  ::iterm2::SelectionRequest_GetSelectionRequest* mutable_get_selection_request();
  void set_allocated_get_selection_request(::iterm2::SelectionRequest_GetSelectionRequest* get_selection_request);
  private:
  const ::iterm2::SelectionRequest_GetSelectionRequest& _internal_get_selection_request() const;
  ::iterm2::SelectionRequest_GetSelectionRequest* _internal_mutable_get_selection_request();
  public:
  void unsafe_arena_set_allocated_get_selection_request(
      ::iterm2::SelectionRequest_GetSelectionRequest* get_selection_request);
  ::iterm2::SelectionRequest_GetSelectionRequest* unsafe_arena_release_get_selection_request();

  // .iterm2.SelectionRequest.SetSelectionRequest set_selection_request = 2;
  bool has_set_selection_request() const;
  private:
  bool _internal_has_set_selection_request() const;
  public:
  void clear_set_selection_request();
  const ::iterm2::SelectionRequest_SetSelectionRequest& set_selection_request() const;
  PROTOBUF_NODISCARD ::iterm2::SelectionRequest_SetSelectionRequest* release_set_selection_request();
  ::iterm2::SelectionRequest_SetSelectionRequest* mutable_set_selection_request();
  void set_allocated_set_selection_request(::iterm2::SelectionRequest_SetSelectionRequest* set_selection_request);
  private:
  const ::iterm2::SelectionRequest_SetSelectionRequest& _internal_set_selection_request() const;
  ::iterm2::SelectionRequest_SetSelectionRequest* _internal_mutable_set_selection_request();
  public:
  void unsafe_arena_set_allocated_set_selection_request(
      ::iterm2::SelectionRequest_SetSelectionRequest* set_selection_request);
  ::iterm2::SelectionRequest_SetSelectionRequest* unsafe_arena_release_set_selection_request();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.SelectionRequest)
 private:
  class _Internal;
  void set_has_get_selection_request();
  void set_has_set_selection_request();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::SelectionRequest_GetSelectionRequest* get_selection_request_;
    ::iterm2::SelectionRequest_SetSelectionRequest* set_selection_request_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SelectionResponse_GetSelectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SelectionResponse.GetSelectionResponse) */ {
 public:
  inline SelectionResponse_GetSelectionResponse() : SelectionResponse_GetSelectionResponse(nullptr) {}
  ~SelectionResponse_GetSelectionResponse() override;
  explicit constexpr SelectionResponse_GetSelectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionResponse_GetSelectionResponse(const SelectionResponse_GetSelectionResponse& from);
  SelectionResponse_GetSelectionResponse(SelectionResponse_GetSelectionResponse&& from) noexcept
    : SelectionResponse_GetSelectionResponse() {
    *this = ::std::move(from);
  }

  inline SelectionResponse_GetSelectionResponse& operator=(const SelectionResponse_GetSelectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionResponse_GetSelectionResponse& operator=(SelectionResponse_GetSelectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionResponse_GetSelectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionResponse_GetSelectionResponse* internal_default_instance() {
    return reinterpret_cast<const SelectionResponse_GetSelectionResponse*>(
               &_SelectionResponse_GetSelectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SelectionResponse_GetSelectionResponse& a, SelectionResponse_GetSelectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionResponse_GetSelectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionResponse_GetSelectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectionResponse_GetSelectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectionResponse_GetSelectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectionResponse_GetSelectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectionResponse_GetSelectionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionResponse_GetSelectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SelectionResponse.GetSelectionResponse";
  }
  protected:
  explicit SelectionResponse_GetSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 2,
  };
  // optional .iterm2.Selection selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::iterm2::Selection& selection() const;
  PROTOBUF_NODISCARD ::iterm2::Selection* release_selection();
  ::iterm2::Selection* mutable_selection();
  void set_allocated_selection(::iterm2::Selection* selection);
  private:
  const ::iterm2::Selection& _internal_selection() const;
  ::iterm2::Selection* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::iterm2::Selection* selection);
  ::iterm2::Selection* unsafe_arena_release_selection();

  // @@protoc_insertion_point(class_scope:iterm2.SelectionResponse.GetSelectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::Selection* selection_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SelectionResponse_SetSelectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.SelectionResponse.SetSelectionResponse) */ {
 public:
  inline SelectionResponse_SetSelectionResponse() : SelectionResponse_SetSelectionResponse(nullptr) {}
  explicit constexpr SelectionResponse_SetSelectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionResponse_SetSelectionResponse(const SelectionResponse_SetSelectionResponse& from);
  SelectionResponse_SetSelectionResponse(SelectionResponse_SetSelectionResponse&& from) noexcept
    : SelectionResponse_SetSelectionResponse() {
    *this = ::std::move(from);
  }

  inline SelectionResponse_SetSelectionResponse& operator=(const SelectionResponse_SetSelectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionResponse_SetSelectionResponse& operator=(SelectionResponse_SetSelectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionResponse_SetSelectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionResponse_SetSelectionResponse* internal_default_instance() {
    return reinterpret_cast<const SelectionResponse_SetSelectionResponse*>(
               &_SelectionResponse_SetSelectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SelectionResponse_SetSelectionResponse& a, SelectionResponse_SetSelectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionResponse_SetSelectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionResponse_SetSelectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectionResponse_SetSelectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectionResponse_SetSelectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SelectionResponse_SetSelectionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SelectionResponse_SetSelectionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SelectionResponse.SetSelectionResponse";
  }
  protected:
  explicit SelectionResponse_SetSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.SelectionResponse.SetSelectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SelectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SelectionResponse) */ {
 public:
  inline SelectionResponse() : SelectionResponse(nullptr) {}
  ~SelectionResponse() override;
  explicit constexpr SelectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionResponse(const SelectionResponse& from);
  SelectionResponse(SelectionResponse&& from) noexcept
    : SelectionResponse() {
    *this = ::std::move(from);
  }

  inline SelectionResponse& operator=(const SelectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionResponse& operator=(SelectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kGetSelectionResponse = 2,
    kSetSelectionResponse = 3,
    RESPONSE_NOT_SET = 0,
  };

  static inline const SelectionResponse* internal_default_instance() {
    return reinterpret_cast<const SelectionResponse*>(
               &_SelectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SelectionResponse& a, SelectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SelectionResponse";
  }
  protected:
  explicit SelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SelectionResponse_GetSelectionResponse GetSelectionResponse;
  typedef SelectionResponse_SetSelectionResponse SetSelectionResponse;

  typedef SelectionResponse_Status Status;
  static constexpr Status OK =
    SelectionResponse_Status_OK;
  static constexpr Status INVALID_SESSION =
    SelectionResponse_Status_INVALID_SESSION;
  static constexpr Status INVALID_RANGE =
    SelectionResponse_Status_INVALID_RANGE;
  static constexpr Status REQUEST_MALFORMED =
    SelectionResponse_Status_REQUEST_MALFORMED;
  static inline bool Status_IsValid(int value) {
    return SelectionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SelectionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SelectionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SelectionResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SelectionResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SelectionResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SelectionResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kGetSelectionResponseFieldNumber = 2,
    kSetSelectionResponseFieldNumber = 3,
  };
  // optional .iterm2.SelectionResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SelectionResponse_Status status() const;
  void set_status(::iterm2::SelectionResponse_Status value);
  private:
  ::iterm2::SelectionResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SelectionResponse_Status value);
  public:

  // .iterm2.SelectionResponse.GetSelectionResponse get_selection_response = 2;
  bool has_get_selection_response() const;
  private:
  bool _internal_has_get_selection_response() const;
  public:
  void clear_get_selection_response();
  const ::iterm2::SelectionResponse_GetSelectionResponse& get_selection_response() const;
  PROTOBUF_NODISCARD ::iterm2::SelectionResponse_GetSelectionResponse* release_get_selection_response();
  ::iterm2::SelectionResponse_GetSelectionResponse* mutable_get_selection_response();
  void set_allocated_get_selection_response(::iterm2::SelectionResponse_GetSelectionResponse* get_selection_response);
  private:
  const ::iterm2::SelectionResponse_GetSelectionResponse& _internal_get_selection_response() const;
  ::iterm2::SelectionResponse_GetSelectionResponse* _internal_mutable_get_selection_response();
  public:
  void unsafe_arena_set_allocated_get_selection_response(
      ::iterm2::SelectionResponse_GetSelectionResponse* get_selection_response);
  ::iterm2::SelectionResponse_GetSelectionResponse* unsafe_arena_release_get_selection_response();

  // .iterm2.SelectionResponse.SetSelectionResponse set_selection_response = 3;
  bool has_set_selection_response() const;
  private:
  bool _internal_has_set_selection_response() const;
  public:
  void clear_set_selection_response();
  const ::iterm2::SelectionResponse_SetSelectionResponse& set_selection_response() const;
  PROTOBUF_NODISCARD ::iterm2::SelectionResponse_SetSelectionResponse* release_set_selection_response();
  ::iterm2::SelectionResponse_SetSelectionResponse* mutable_set_selection_response();
  void set_allocated_set_selection_response(::iterm2::SelectionResponse_SetSelectionResponse* set_selection_response);
  private:
  const ::iterm2::SelectionResponse_SetSelectionResponse& _internal_set_selection_response() const;
  ::iterm2::SelectionResponse_SetSelectionResponse* _internal_mutable_set_selection_response();
  public:
  void unsafe_arena_set_allocated_set_selection_response(
      ::iterm2::SelectionResponse_SetSelectionResponse* set_selection_response);
  ::iterm2::SelectionResponse_SetSelectionResponse* unsafe_arena_release_set_selection_response();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.SelectionResponse)
 private:
  class _Internal;
  void set_has_get_selection_response();
  void set_has_set_selection_response();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::SelectionResponse_GetSelectionResponse* get_selection_response_;
    ::iterm2::SelectionResponse_SetSelectionResponse* set_selection_response_;
  } response_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetRequest_ListPresets final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetRequest.ListPresets) */ {
 public:
  inline ColorPresetRequest_ListPresets() : ColorPresetRequest_ListPresets(nullptr) {}
  explicit constexpr ColorPresetRequest_ListPresets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetRequest_ListPresets(const ColorPresetRequest_ListPresets& from);
  ColorPresetRequest_ListPresets(ColorPresetRequest_ListPresets&& from) noexcept
    : ColorPresetRequest_ListPresets() {
    *this = ::std::move(from);
  }

  inline ColorPresetRequest_ListPresets& operator=(const ColorPresetRequest_ListPresets& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetRequest_ListPresets& operator=(ColorPresetRequest_ListPresets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetRequest_ListPresets& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPresetRequest_ListPresets* internal_default_instance() {
    return reinterpret_cast<const ColorPresetRequest_ListPresets*>(
               &_ColorPresetRequest_ListPresets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ColorPresetRequest_ListPresets& a, ColorPresetRequest_ListPresets& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetRequest_ListPresets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetRequest_ListPresets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetRequest_ListPresets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetRequest_ListPresets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ColorPresetRequest_ListPresets& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ColorPresetRequest_ListPresets& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetRequest.ListPresets";
  }
  protected:
  explicit ColorPresetRequest_ListPresets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetRequest.ListPresets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetRequest_GetPreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetRequest.GetPreset) */ {
 public:
  inline ColorPresetRequest_GetPreset() : ColorPresetRequest_GetPreset(nullptr) {}
  ~ColorPresetRequest_GetPreset() override;
  explicit constexpr ColorPresetRequest_GetPreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetRequest_GetPreset(const ColorPresetRequest_GetPreset& from);
  ColorPresetRequest_GetPreset(ColorPresetRequest_GetPreset&& from) noexcept
    : ColorPresetRequest_GetPreset() {
    *this = ::std::move(from);
  }

  inline ColorPresetRequest_GetPreset& operator=(const ColorPresetRequest_GetPreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetRequest_GetPreset& operator=(ColorPresetRequest_GetPreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetRequest_GetPreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPresetRequest_GetPreset* internal_default_instance() {
    return reinterpret_cast<const ColorPresetRequest_GetPreset*>(
               &_ColorPresetRequest_GetPreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ColorPresetRequest_GetPreset& a, ColorPresetRequest_GetPreset& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetRequest_GetPreset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetRequest_GetPreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetRequest_GetPreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetRequest_GetPreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPresetRequest_GetPreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorPresetRequest_GetPreset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPresetRequest_GetPreset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetRequest.GetPreset";
  }
  protected:
  explicit ColorPresetRequest_GetPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetRequest.GetPreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetRequest) */ {
 public:
  inline ColorPresetRequest() : ColorPresetRequest(nullptr) {}
  ~ColorPresetRequest() override;
  explicit constexpr ColorPresetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetRequest(const ColorPresetRequest& from);
  ColorPresetRequest(ColorPresetRequest&& from) noexcept
    : ColorPresetRequest() {
    *this = ::std::move(from);
  }

  inline ColorPresetRequest& operator=(const ColorPresetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetRequest& operator=(ColorPresetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kListPresets = 1,
    kGetPreset = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const ColorPresetRequest* internal_default_instance() {
    return reinterpret_cast<const ColorPresetRequest*>(
               &_ColorPresetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ColorPresetRequest& a, ColorPresetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPresetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorPresetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPresetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetRequest";
  }
  protected:
  explicit ColorPresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColorPresetRequest_ListPresets ListPresets;
  typedef ColorPresetRequest_GetPreset GetPreset;

  // accessors -------------------------------------------------------

  enum : int {
    kListPresetsFieldNumber = 1,
    kGetPresetFieldNumber = 2,
  };
  // .iterm2.ColorPresetRequest.ListPresets list_presets = 1;
  bool has_list_presets() const;
  private:
  bool _internal_has_list_presets() const;
  public:
  void clear_list_presets();
  const ::iterm2::ColorPresetRequest_ListPresets& list_presets() const;
  PROTOBUF_NODISCARD ::iterm2::ColorPresetRequest_ListPresets* release_list_presets();
  ::iterm2::ColorPresetRequest_ListPresets* mutable_list_presets();
  void set_allocated_list_presets(::iterm2::ColorPresetRequest_ListPresets* list_presets);
  private:
  const ::iterm2::ColorPresetRequest_ListPresets& _internal_list_presets() const;
  ::iterm2::ColorPresetRequest_ListPresets* _internal_mutable_list_presets();
  public:
  void unsafe_arena_set_allocated_list_presets(
      ::iterm2::ColorPresetRequest_ListPresets* list_presets);
  ::iterm2::ColorPresetRequest_ListPresets* unsafe_arena_release_list_presets();

  // .iterm2.ColorPresetRequest.GetPreset get_preset = 2;
  bool has_get_preset() const;
  private:
  bool _internal_has_get_preset() const;
  public:
  void clear_get_preset();
  const ::iterm2::ColorPresetRequest_GetPreset& get_preset() const;
  PROTOBUF_NODISCARD ::iterm2::ColorPresetRequest_GetPreset* release_get_preset();
  ::iterm2::ColorPresetRequest_GetPreset* mutable_get_preset();
  void set_allocated_get_preset(::iterm2::ColorPresetRequest_GetPreset* get_preset);
  private:
  const ::iterm2::ColorPresetRequest_GetPreset& _internal_get_preset() const;
  ::iterm2::ColorPresetRequest_GetPreset* _internal_mutable_get_preset();
  public:
  void unsafe_arena_set_allocated_get_preset(
      ::iterm2::ColorPresetRequest_GetPreset* get_preset);
  ::iterm2::ColorPresetRequest_GetPreset* unsafe_arena_release_get_preset();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetRequest)
 private:
  class _Internal;
  void set_has_list_presets();
  void set_has_get_preset();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::ColorPresetRequest_ListPresets* list_presets_;
    ::iterm2::ColorPresetRequest_GetPreset* get_preset_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetResponse_ListPresets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetResponse.ListPresets) */ {
 public:
  inline ColorPresetResponse_ListPresets() : ColorPresetResponse_ListPresets(nullptr) {}
  ~ColorPresetResponse_ListPresets() override;
  explicit constexpr ColorPresetResponse_ListPresets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetResponse_ListPresets(const ColorPresetResponse_ListPresets& from);
  ColorPresetResponse_ListPresets(ColorPresetResponse_ListPresets&& from) noexcept
    : ColorPresetResponse_ListPresets() {
    *this = ::std::move(from);
  }

  inline ColorPresetResponse_ListPresets& operator=(const ColorPresetResponse_ListPresets& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetResponse_ListPresets& operator=(ColorPresetResponse_ListPresets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetResponse_ListPresets& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPresetResponse_ListPresets* internal_default_instance() {
    return reinterpret_cast<const ColorPresetResponse_ListPresets*>(
               &_ColorPresetResponse_ListPresets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ColorPresetResponse_ListPresets& a, ColorPresetResponse_ListPresets& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetResponse_ListPresets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetResponse_ListPresets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetResponse_ListPresets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetResponse_ListPresets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPresetResponse_ListPresets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorPresetResponse_ListPresets& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPresetResponse_ListPresets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetResponse.ListPresets";
  }
  protected:
  explicit ColorPresetResponse_ListPresets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetResponse.ListPresets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetResponse_GetPreset_ColorSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetResponse.GetPreset.ColorSetting) */ {
 public:
  inline ColorPresetResponse_GetPreset_ColorSetting() : ColorPresetResponse_GetPreset_ColorSetting(nullptr) {}
  ~ColorPresetResponse_GetPreset_ColorSetting() override;
  explicit constexpr ColorPresetResponse_GetPreset_ColorSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetResponse_GetPreset_ColorSetting(const ColorPresetResponse_GetPreset_ColorSetting& from);
  ColorPresetResponse_GetPreset_ColorSetting(ColorPresetResponse_GetPreset_ColorSetting&& from) noexcept
    : ColorPresetResponse_GetPreset_ColorSetting() {
    *this = ::std::move(from);
  }

  inline ColorPresetResponse_GetPreset_ColorSetting& operator=(const ColorPresetResponse_GetPreset_ColorSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetResponse_GetPreset_ColorSetting& operator=(ColorPresetResponse_GetPreset_ColorSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetResponse_GetPreset_ColorSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPresetResponse_GetPreset_ColorSetting* internal_default_instance() {
    return reinterpret_cast<const ColorPresetResponse_GetPreset_ColorSetting*>(
               &_ColorPresetResponse_GetPreset_ColorSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ColorPresetResponse_GetPreset_ColorSetting& a, ColorPresetResponse_GetPreset_ColorSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetResponse_GetPreset_ColorSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetResponse_GetPreset_ColorSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetResponse_GetPreset_ColorSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetResponse_GetPreset_ColorSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPresetResponse_GetPreset_ColorSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorPresetResponse_GetPreset_ColorSetting& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPresetResponse_GetPreset_ColorSetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetResponse.GetPreset.ColorSetting";
  }
  protected:
  explicit ColorPresetResponse_GetPreset_ColorSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorSpaceFieldNumber = 5,
    kKeyFieldNumber = 6,
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
    kAlphaFieldNumber = 4,
  };
  // optional string color_space = 5;
  bool has_color_space() const;
  private:
  bool _internal_has_color_space() const;
  public:
  void clear_color_space();
  const std::string& color_space() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_space(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_space();
  PROTOBUF_NODISCARD std::string* release_color_space();
  void set_allocated_color_space(std::string* color_space);
  private:
  const std::string& _internal_color_space() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_space(const std::string& value);
  std::string* _internal_mutable_color_space();
  public:

  // optional string key = 6;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional float red = 1;
  bool has_red() const;
  private:
  bool _internal_has_red() const;
  public:
  void clear_red();
  float red() const;
  void set_red(float value);
  private:
  float _internal_red() const;
  void _internal_set_red(float value);
  public:

  // optional float green = 2;
  bool has_green() const;
  private:
  bool _internal_has_green() const;
  public:
  void clear_green();
  float green() const;
  void set_green(float value);
  private:
  float _internal_green() const;
  void _internal_set_green(float value);
  public:

  // optional float blue = 3;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  float blue() const;
  void set_blue(float value);
  private:
  float _internal_blue() const;
  void _internal_set_blue(float value);
  public:

  // optional float alpha = 4;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  float red_;
  float green_;
  float blue_;
  float alpha_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetResponse_GetPreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetResponse.GetPreset) */ {
 public:
  inline ColorPresetResponse_GetPreset() : ColorPresetResponse_GetPreset(nullptr) {}
  ~ColorPresetResponse_GetPreset() override;
  explicit constexpr ColorPresetResponse_GetPreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetResponse_GetPreset(const ColorPresetResponse_GetPreset& from);
  ColorPresetResponse_GetPreset(ColorPresetResponse_GetPreset&& from) noexcept
    : ColorPresetResponse_GetPreset() {
    *this = ::std::move(from);
  }

  inline ColorPresetResponse_GetPreset& operator=(const ColorPresetResponse_GetPreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetResponse_GetPreset& operator=(ColorPresetResponse_GetPreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetResponse_GetPreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPresetResponse_GetPreset* internal_default_instance() {
    return reinterpret_cast<const ColorPresetResponse_GetPreset*>(
               &_ColorPresetResponse_GetPreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ColorPresetResponse_GetPreset& a, ColorPresetResponse_GetPreset& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetResponse_GetPreset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetResponse_GetPreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetResponse_GetPreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetResponse_GetPreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPresetResponse_GetPreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorPresetResponse_GetPreset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPresetResponse_GetPreset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetResponse.GetPreset";
  }
  protected:
  explicit ColorPresetResponse_GetPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColorPresetResponse_GetPreset_ColorSetting ColorSetting;

  // accessors -------------------------------------------------------

  enum : int {
    kColorSettingsFieldNumber = 1,
  };
  // repeated .iterm2.ColorPresetResponse.GetPreset.ColorSetting color_settings = 1;
  int color_settings_size() const;
  private:
  int _internal_color_settings_size() const;
  public:
  void clear_color_settings();
  ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* mutable_color_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting >*
      mutable_color_settings();
  private:
  const ::iterm2::ColorPresetResponse_GetPreset_ColorSetting& _internal_color_settings(int index) const;
  ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* _internal_add_color_settings();
  public:
  const ::iterm2::ColorPresetResponse_GetPreset_ColorSetting& color_settings(int index) const;
  ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* add_color_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting >&
      color_settings() const;

  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetResponse.GetPreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting > color_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ColorPresetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ColorPresetResponse) */ {
 public:
  inline ColorPresetResponse() : ColorPresetResponse(nullptr) {}
  ~ColorPresetResponse() override;
  explicit constexpr ColorPresetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPresetResponse(const ColorPresetResponse& from);
  ColorPresetResponse(ColorPresetResponse&& from) noexcept
    : ColorPresetResponse() {
    *this = ::std::move(from);
  }

  inline ColorPresetResponse& operator=(const ColorPresetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPresetResponse& operator=(ColorPresetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPresetResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kListPresets = 1,
    kGetPreset = 2,
    RESPONSE_NOT_SET = 0,
  };

  static inline const ColorPresetResponse* internal_default_instance() {
    return reinterpret_cast<const ColorPresetResponse*>(
               &_ColorPresetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ColorPresetResponse& a, ColorPresetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPresetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPresetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPresetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPresetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPresetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColorPresetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPresetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ColorPresetResponse";
  }
  protected:
  explicit ColorPresetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColorPresetResponse_ListPresets ListPresets;
  typedef ColorPresetResponse_GetPreset GetPreset;

  typedef ColorPresetResponse_Status Status;
  static constexpr Status OK =
    ColorPresetResponse_Status_OK;
  static constexpr Status PRESET_NOT_FOUND =
    ColorPresetResponse_Status_PRESET_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    ColorPresetResponse_Status_REQUEST_MALFORMED;
  static inline bool Status_IsValid(int value) {
    return ColorPresetResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ColorPresetResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ColorPresetResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ColorPresetResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ColorPresetResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ColorPresetResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ColorPresetResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kListPresetsFieldNumber = 1,
    kGetPresetFieldNumber = 2,
  };
  // optional .iterm2.ColorPresetResponse.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::ColorPresetResponse_Status status() const;
  void set_status(::iterm2::ColorPresetResponse_Status value);
  private:
  ::iterm2::ColorPresetResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::ColorPresetResponse_Status value);
  public:

  // .iterm2.ColorPresetResponse.ListPresets list_presets = 1;
  bool has_list_presets() const;
  private:
  bool _internal_has_list_presets() const;
  public:
  void clear_list_presets();
  const ::iterm2::ColorPresetResponse_ListPresets& list_presets() const;
  PROTOBUF_NODISCARD ::iterm2::ColorPresetResponse_ListPresets* release_list_presets();
  ::iterm2::ColorPresetResponse_ListPresets* mutable_list_presets();
  void set_allocated_list_presets(::iterm2::ColorPresetResponse_ListPresets* list_presets);
  private:
  const ::iterm2::ColorPresetResponse_ListPresets& _internal_list_presets() const;
  ::iterm2::ColorPresetResponse_ListPresets* _internal_mutable_list_presets();
  public:
  void unsafe_arena_set_allocated_list_presets(
      ::iterm2::ColorPresetResponse_ListPresets* list_presets);
  ::iterm2::ColorPresetResponse_ListPresets* unsafe_arena_release_list_presets();

  // .iterm2.ColorPresetResponse.GetPreset get_preset = 2;
  bool has_get_preset() const;
  private:
  bool _internal_has_get_preset() const;
  public:
  void clear_get_preset();
  const ::iterm2::ColorPresetResponse_GetPreset& get_preset() const;
  PROTOBUF_NODISCARD ::iterm2::ColorPresetResponse_GetPreset* release_get_preset();
  ::iterm2::ColorPresetResponse_GetPreset* mutable_get_preset();
  void set_allocated_get_preset(::iterm2::ColorPresetResponse_GetPreset* get_preset);
  private:
  const ::iterm2::ColorPresetResponse_GetPreset& _internal_get_preset() const;
  ::iterm2::ColorPresetResponse_GetPreset* _internal_mutable_get_preset();
  public:
  void unsafe_arena_set_allocated_get_preset(
      ::iterm2::ColorPresetResponse_GetPreset* get_preset);
  ::iterm2::ColorPresetResponse_GetPreset* unsafe_arena_release_get_preset();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.ColorPresetResponse)
 private:
  class _Internal;
  void set_has_list_presets();
  void set_has_get_preset();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::ColorPresetResponse_ListPresets* list_presets_;
    ::iterm2::ColorPresetResponse_GetPreset* get_preset_;
  } response_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesRequest_Request_SetPreference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesRequest.Request.SetPreference) */ {
 public:
  inline PreferencesRequest_Request_SetPreference() : PreferencesRequest_Request_SetPreference(nullptr) {}
  ~PreferencesRequest_Request_SetPreference() override;
  explicit constexpr PreferencesRequest_Request_SetPreference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesRequest_Request_SetPreference(const PreferencesRequest_Request_SetPreference& from);
  PreferencesRequest_Request_SetPreference(PreferencesRequest_Request_SetPreference&& from) noexcept
    : PreferencesRequest_Request_SetPreference() {
    *this = ::std::move(from);
  }

  inline PreferencesRequest_Request_SetPreference& operator=(const PreferencesRequest_Request_SetPreference& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesRequest_Request_SetPreference& operator=(PreferencesRequest_Request_SetPreference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesRequest_Request_SetPreference& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesRequest_Request_SetPreference* internal_default_instance() {
    return reinterpret_cast<const PreferencesRequest_Request_SetPreference*>(
               &_PreferencesRequest_Request_SetPreference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PreferencesRequest_Request_SetPreference& a, PreferencesRequest_Request_SetPreference& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesRequest_Request_SetPreference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesRequest_Request_SetPreference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesRequest_Request_SetPreference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesRequest_Request_SetPreference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesRequest_Request_SetPreference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesRequest_Request_SetPreference& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesRequest_Request_SetPreference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesRequest.Request.SetPreference";
  }
  protected:
  explicit PreferencesRequest_Request_SetPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kJsonValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string json_value = 2;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesRequest.Request.SetPreference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesRequest_Request_GetPreference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesRequest.Request.GetPreference) */ {
 public:
  inline PreferencesRequest_Request_GetPreference() : PreferencesRequest_Request_GetPreference(nullptr) {}
  ~PreferencesRequest_Request_GetPreference() override;
  explicit constexpr PreferencesRequest_Request_GetPreference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesRequest_Request_GetPreference(const PreferencesRequest_Request_GetPreference& from);
  PreferencesRequest_Request_GetPreference(PreferencesRequest_Request_GetPreference&& from) noexcept
    : PreferencesRequest_Request_GetPreference() {
    *this = ::std::move(from);
  }

  inline PreferencesRequest_Request_GetPreference& operator=(const PreferencesRequest_Request_GetPreference& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesRequest_Request_GetPreference& operator=(PreferencesRequest_Request_GetPreference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesRequest_Request_GetPreference& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesRequest_Request_GetPreference* internal_default_instance() {
    return reinterpret_cast<const PreferencesRequest_Request_GetPreference*>(
               &_PreferencesRequest_Request_GetPreference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PreferencesRequest_Request_GetPreference& a, PreferencesRequest_Request_GetPreference& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesRequest_Request_GetPreference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesRequest_Request_GetPreference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesRequest_Request_GetPreference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesRequest_Request_GetPreference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesRequest_Request_GetPreference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesRequest_Request_GetPreference& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesRequest_Request_GetPreference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesRequest.Request.GetPreference";
  }
  protected:
  explicit PreferencesRequest_Request_GetPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesRequest.Request.GetPreference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesRequest_Request_SetDefaultProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesRequest.Request.SetDefaultProfile) */ {
 public:
  inline PreferencesRequest_Request_SetDefaultProfile() : PreferencesRequest_Request_SetDefaultProfile(nullptr) {}
  ~PreferencesRequest_Request_SetDefaultProfile() override;
  explicit constexpr PreferencesRequest_Request_SetDefaultProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesRequest_Request_SetDefaultProfile(const PreferencesRequest_Request_SetDefaultProfile& from);
  PreferencesRequest_Request_SetDefaultProfile(PreferencesRequest_Request_SetDefaultProfile&& from) noexcept
    : PreferencesRequest_Request_SetDefaultProfile() {
    *this = ::std::move(from);
  }

  inline PreferencesRequest_Request_SetDefaultProfile& operator=(const PreferencesRequest_Request_SetDefaultProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesRequest_Request_SetDefaultProfile& operator=(PreferencesRequest_Request_SetDefaultProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesRequest_Request_SetDefaultProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesRequest_Request_SetDefaultProfile* internal_default_instance() {
    return reinterpret_cast<const PreferencesRequest_Request_SetDefaultProfile*>(
               &_PreferencesRequest_Request_SetDefaultProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PreferencesRequest_Request_SetDefaultProfile& a, PreferencesRequest_Request_SetDefaultProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesRequest_Request_SetDefaultProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesRequest_Request_SetDefaultProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesRequest_Request_SetDefaultProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesRequest_Request_SetDefaultProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesRequest_Request_SetDefaultProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesRequest_Request_SetDefaultProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesRequest_Request_SetDefaultProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesRequest.Request.SetDefaultProfile";
  }
  protected:
  explicit PreferencesRequest_Request_SetDefaultProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesRequest.Request.SetDefaultProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesRequest_Request_GetDefaultProfile final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.PreferencesRequest.Request.GetDefaultProfile) */ {
 public:
  inline PreferencesRequest_Request_GetDefaultProfile() : PreferencesRequest_Request_GetDefaultProfile(nullptr) {}
  explicit constexpr PreferencesRequest_Request_GetDefaultProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesRequest_Request_GetDefaultProfile(const PreferencesRequest_Request_GetDefaultProfile& from);
  PreferencesRequest_Request_GetDefaultProfile(PreferencesRequest_Request_GetDefaultProfile&& from) noexcept
    : PreferencesRequest_Request_GetDefaultProfile() {
    *this = ::std::move(from);
  }

  inline PreferencesRequest_Request_GetDefaultProfile& operator=(const PreferencesRequest_Request_GetDefaultProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesRequest_Request_GetDefaultProfile& operator=(PreferencesRequest_Request_GetDefaultProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesRequest_Request_GetDefaultProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesRequest_Request_GetDefaultProfile* internal_default_instance() {
    return reinterpret_cast<const PreferencesRequest_Request_GetDefaultProfile*>(
               &_PreferencesRequest_Request_GetDefaultProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PreferencesRequest_Request_GetDefaultProfile& a, PreferencesRequest_Request_GetDefaultProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesRequest_Request_GetDefaultProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesRequest_Request_GetDefaultProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesRequest_Request_GetDefaultProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesRequest_Request_GetDefaultProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PreferencesRequest_Request_GetDefaultProfile& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PreferencesRequest_Request_GetDefaultProfile& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesRequest.Request.GetDefaultProfile";
  }
  protected:
  explicit PreferencesRequest_Request_GetDefaultProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesRequest.Request.GetDefaultProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesRequest_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesRequest.Request) */ {
 public:
  inline PreferencesRequest_Request() : PreferencesRequest_Request(nullptr) {}
  ~PreferencesRequest_Request() override;
  explicit constexpr PreferencesRequest_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesRequest_Request(const PreferencesRequest_Request& from);
  PreferencesRequest_Request(PreferencesRequest_Request&& from) noexcept
    : PreferencesRequest_Request() {
    *this = ::std::move(from);
  }

  inline PreferencesRequest_Request& operator=(const PreferencesRequest_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesRequest_Request& operator=(PreferencesRequest_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesRequest_Request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kSetPreferenceRequest = 1,
    kGetPreferenceRequest = 2,
    kSetDefaultProfileRequest = 3,
    kGetDefaultProfileRequest = 4,
    REQUEST_NOT_SET = 0,
  };

  static inline const PreferencesRequest_Request* internal_default_instance() {
    return reinterpret_cast<const PreferencesRequest_Request*>(
               &_PreferencesRequest_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PreferencesRequest_Request& a, PreferencesRequest_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesRequest_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesRequest_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesRequest_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesRequest_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesRequest_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesRequest_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesRequest_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesRequest.Request";
  }
  protected:
  explicit PreferencesRequest_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreferencesRequest_Request_SetPreference SetPreference;
  typedef PreferencesRequest_Request_GetPreference GetPreference;
  typedef PreferencesRequest_Request_SetDefaultProfile SetDefaultProfile;
  typedef PreferencesRequest_Request_GetDefaultProfile GetDefaultProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kSetPreferenceRequestFieldNumber = 1,
    kGetPreferenceRequestFieldNumber = 2,
    kSetDefaultProfileRequestFieldNumber = 3,
    kGetDefaultProfileRequestFieldNumber = 4,
  };
  // .iterm2.PreferencesRequest.Request.SetPreference set_preference_request = 1;
  bool has_set_preference_request() const;
  private:
  bool _internal_has_set_preference_request() const;
  public:
  void clear_set_preference_request();
  const ::iterm2::PreferencesRequest_Request_SetPreference& set_preference_request() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesRequest_Request_SetPreference* release_set_preference_request();
  ::iterm2::PreferencesRequest_Request_SetPreference* mutable_set_preference_request();
  void set_allocated_set_preference_request(::iterm2::PreferencesRequest_Request_SetPreference* set_preference_request);
  private:
  const ::iterm2::PreferencesRequest_Request_SetPreference& _internal_set_preference_request() const;
  ::iterm2::PreferencesRequest_Request_SetPreference* _internal_mutable_set_preference_request();
  public:
  void unsafe_arena_set_allocated_set_preference_request(
      ::iterm2::PreferencesRequest_Request_SetPreference* set_preference_request);
  ::iterm2::PreferencesRequest_Request_SetPreference* unsafe_arena_release_set_preference_request();

  // .iterm2.PreferencesRequest.Request.GetPreference get_preference_request = 2;
  bool has_get_preference_request() const;
  private:
  bool _internal_has_get_preference_request() const;
  public:
  void clear_get_preference_request();
  const ::iterm2::PreferencesRequest_Request_GetPreference& get_preference_request() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesRequest_Request_GetPreference* release_get_preference_request();
  ::iterm2::PreferencesRequest_Request_GetPreference* mutable_get_preference_request();
  void set_allocated_get_preference_request(::iterm2::PreferencesRequest_Request_GetPreference* get_preference_request);
  private:
  const ::iterm2::PreferencesRequest_Request_GetPreference& _internal_get_preference_request() const;
  ::iterm2::PreferencesRequest_Request_GetPreference* _internal_mutable_get_preference_request();
  public:
  void unsafe_arena_set_allocated_get_preference_request(
      ::iterm2::PreferencesRequest_Request_GetPreference* get_preference_request);
  ::iterm2::PreferencesRequest_Request_GetPreference* unsafe_arena_release_get_preference_request();

  // .iterm2.PreferencesRequest.Request.SetDefaultProfile set_default_profile_request = 3;
  bool has_set_default_profile_request() const;
  private:
  bool _internal_has_set_default_profile_request() const;
  public:
  void clear_set_default_profile_request();
  const ::iterm2::PreferencesRequest_Request_SetDefaultProfile& set_default_profile_request() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesRequest_Request_SetDefaultProfile* release_set_default_profile_request();
  ::iterm2::PreferencesRequest_Request_SetDefaultProfile* mutable_set_default_profile_request();
  void set_allocated_set_default_profile_request(::iterm2::PreferencesRequest_Request_SetDefaultProfile* set_default_profile_request);
  private:
  const ::iterm2::PreferencesRequest_Request_SetDefaultProfile& _internal_set_default_profile_request() const;
  ::iterm2::PreferencesRequest_Request_SetDefaultProfile* _internal_mutable_set_default_profile_request();
  public:
  void unsafe_arena_set_allocated_set_default_profile_request(
      ::iterm2::PreferencesRequest_Request_SetDefaultProfile* set_default_profile_request);
  ::iterm2::PreferencesRequest_Request_SetDefaultProfile* unsafe_arena_release_set_default_profile_request();

  // .iterm2.PreferencesRequest.Request.GetDefaultProfile get_default_profile_request = 4;
  bool has_get_default_profile_request() const;
  private:
  bool _internal_has_get_default_profile_request() const;
  public:
  void clear_get_default_profile_request();
  const ::iterm2::PreferencesRequest_Request_GetDefaultProfile& get_default_profile_request() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesRequest_Request_GetDefaultProfile* release_get_default_profile_request();
  ::iterm2::PreferencesRequest_Request_GetDefaultProfile* mutable_get_default_profile_request();
  void set_allocated_get_default_profile_request(::iterm2::PreferencesRequest_Request_GetDefaultProfile* get_default_profile_request);
  private:
  const ::iterm2::PreferencesRequest_Request_GetDefaultProfile& _internal_get_default_profile_request() const;
  ::iterm2::PreferencesRequest_Request_GetDefaultProfile* _internal_mutable_get_default_profile_request();
  public:
  void unsafe_arena_set_allocated_get_default_profile_request(
      ::iterm2::PreferencesRequest_Request_GetDefaultProfile* get_default_profile_request);
  ::iterm2::PreferencesRequest_Request_GetDefaultProfile* unsafe_arena_release_get_default_profile_request();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.PreferencesRequest.Request)
 private:
  class _Internal;
  void set_has_set_preference_request();
  void set_has_get_preference_request();
  void set_has_set_default_profile_request();
  void set_has_get_default_profile_request();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::PreferencesRequest_Request_SetPreference* set_preference_request_;
    ::iterm2::PreferencesRequest_Request_GetPreference* get_preference_request_;
    ::iterm2::PreferencesRequest_Request_SetDefaultProfile* set_default_profile_request_;
    ::iterm2::PreferencesRequest_Request_GetDefaultProfile* get_default_profile_request_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesRequest) */ {
 public:
  inline PreferencesRequest() : PreferencesRequest(nullptr) {}
  ~PreferencesRequest() override;
  explicit constexpr PreferencesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesRequest(const PreferencesRequest& from);
  PreferencesRequest(PreferencesRequest&& from) noexcept
    : PreferencesRequest() {
    *this = ::std::move(from);
  }

  inline PreferencesRequest& operator=(const PreferencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesRequest& operator=(PreferencesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesRequest* internal_default_instance() {
    return reinterpret_cast<const PreferencesRequest*>(
               &_PreferencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PreferencesRequest& a, PreferencesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesRequest";
  }
  protected:
  explicit PreferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreferencesRequest_Request Request;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .iterm2.PreferencesRequest.Request requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::iterm2::PreferencesRequest_Request* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesRequest_Request >*
      mutable_requests();
  private:
  const ::iterm2::PreferencesRequest_Request& _internal_requests(int index) const;
  ::iterm2::PreferencesRequest_Request* _internal_add_requests();
  public:
  const ::iterm2::PreferencesRequest_Request& requests(int index) const;
  ::iterm2::PreferencesRequest_Request* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesRequest_Request >&
      requests() const;

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesRequest_Request > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse_Result_SetPreferenceResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse.Result.SetPreferenceResult) */ {
 public:
  inline PreferencesResponse_Result_SetPreferenceResult() : PreferencesResponse_Result_SetPreferenceResult(nullptr) {}
  ~PreferencesResponse_Result_SetPreferenceResult() override;
  explicit constexpr PreferencesResponse_Result_SetPreferenceResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse_Result_SetPreferenceResult(const PreferencesResponse_Result_SetPreferenceResult& from);
  PreferencesResponse_Result_SetPreferenceResult(PreferencesResponse_Result_SetPreferenceResult&& from) noexcept
    : PreferencesResponse_Result_SetPreferenceResult() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse_Result_SetPreferenceResult& operator=(const PreferencesResponse_Result_SetPreferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse_Result_SetPreferenceResult& operator=(PreferencesResponse_Result_SetPreferenceResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse_Result_SetPreferenceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesResponse_Result_SetPreferenceResult* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse_Result_SetPreferenceResult*>(
               &_PreferencesResponse_Result_SetPreferenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PreferencesResponse_Result_SetPreferenceResult& a, PreferencesResponse_Result_SetPreferenceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse_Result_SetPreferenceResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse_Result_SetPreferenceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse_Result_SetPreferenceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse_Result_SetPreferenceResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesResponse_Result_SetPreferenceResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesResponse_Result_SetPreferenceResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesResponse_Result_SetPreferenceResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse.Result.SetPreferenceResult";
  }
  protected:
  explicit PreferencesResponse_Result_SetPreferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreferencesResponse_Result_SetPreferenceResult_Status Status;
  static constexpr Status OK =
    PreferencesResponse_Result_SetPreferenceResult_Status_OK;
  static constexpr Status BAD_JSON =
    PreferencesResponse_Result_SetPreferenceResult_Status_BAD_JSON;
  static constexpr Status INVALID_VALUE =
    PreferencesResponse_Result_SetPreferenceResult_Status_INVALID_VALUE;
  static inline bool Status_IsValid(int value) {
    return PreferencesResponse_Result_SetPreferenceResult_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    PreferencesResponse_Result_SetPreferenceResult_Status_Status_MIN;
  static constexpr Status Status_MAX =
    PreferencesResponse_Result_SetPreferenceResult_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    PreferencesResponse_Result_SetPreferenceResult_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return PreferencesResponse_Result_SetPreferenceResult_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return PreferencesResponse_Result_SetPreferenceResult_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return PreferencesResponse_Result_SetPreferenceResult_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.PreferencesResponse.Result.SetPreferenceResult.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status status() const;
  void set_status(::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status value);
  private:
  ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status _internal_status() const;
  void _internal_set_status(::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse.Result.SetPreferenceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse_Result_GetPreferenceResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse.Result.GetPreferenceResult) */ {
 public:
  inline PreferencesResponse_Result_GetPreferenceResult() : PreferencesResponse_Result_GetPreferenceResult(nullptr) {}
  ~PreferencesResponse_Result_GetPreferenceResult() override;
  explicit constexpr PreferencesResponse_Result_GetPreferenceResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse_Result_GetPreferenceResult(const PreferencesResponse_Result_GetPreferenceResult& from);
  PreferencesResponse_Result_GetPreferenceResult(PreferencesResponse_Result_GetPreferenceResult&& from) noexcept
    : PreferencesResponse_Result_GetPreferenceResult() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse_Result_GetPreferenceResult& operator=(const PreferencesResponse_Result_GetPreferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse_Result_GetPreferenceResult& operator=(PreferencesResponse_Result_GetPreferenceResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse_Result_GetPreferenceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesResponse_Result_GetPreferenceResult* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse_Result_GetPreferenceResult*>(
               &_PreferencesResponse_Result_GetPreferenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PreferencesResponse_Result_GetPreferenceResult& a, PreferencesResponse_Result_GetPreferenceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse_Result_GetPreferenceResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse_Result_GetPreferenceResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse_Result_GetPreferenceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse_Result_GetPreferenceResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesResponse_Result_GetPreferenceResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesResponse_Result_GetPreferenceResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesResponse_Result_GetPreferenceResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse.Result.GetPreferenceResult";
  }
  protected:
  explicit PreferencesResponse_Result_GetPreferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonValueFieldNumber = 1,
  };
  // optional string json_value = 1;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse.Result.GetPreferenceResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse_Result_SetDefaultProfileResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse.Result.SetDefaultProfileResult) */ {
 public:
  inline PreferencesResponse_Result_SetDefaultProfileResult() : PreferencesResponse_Result_SetDefaultProfileResult(nullptr) {}
  ~PreferencesResponse_Result_SetDefaultProfileResult() override;
  explicit constexpr PreferencesResponse_Result_SetDefaultProfileResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse_Result_SetDefaultProfileResult(const PreferencesResponse_Result_SetDefaultProfileResult& from);
  PreferencesResponse_Result_SetDefaultProfileResult(PreferencesResponse_Result_SetDefaultProfileResult&& from) noexcept
    : PreferencesResponse_Result_SetDefaultProfileResult() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse_Result_SetDefaultProfileResult& operator=(const PreferencesResponse_Result_SetDefaultProfileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse_Result_SetDefaultProfileResult& operator=(PreferencesResponse_Result_SetDefaultProfileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse_Result_SetDefaultProfileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesResponse_Result_SetDefaultProfileResult* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse_Result_SetDefaultProfileResult*>(
               &_PreferencesResponse_Result_SetDefaultProfileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PreferencesResponse_Result_SetDefaultProfileResult& a, PreferencesResponse_Result_SetDefaultProfileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse_Result_SetDefaultProfileResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse_Result_SetDefaultProfileResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse_Result_SetDefaultProfileResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse_Result_SetDefaultProfileResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesResponse_Result_SetDefaultProfileResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesResponse_Result_SetDefaultProfileResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesResponse_Result_SetDefaultProfileResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse.Result.SetDefaultProfileResult";
  }
  protected:
  explicit PreferencesResponse_Result_SetDefaultProfileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreferencesResponse_Result_SetDefaultProfileResult_Status Status;
  static constexpr Status OK =
    PreferencesResponse_Result_SetDefaultProfileResult_Status_OK;
  static constexpr Status BAD_GUID =
    PreferencesResponse_Result_SetDefaultProfileResult_Status_BAD_GUID;
  static inline bool Status_IsValid(int value) {
    return PreferencesResponse_Result_SetDefaultProfileResult_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_MIN;
  static constexpr Status Status_MAX =
    PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    PreferencesResponse_Result_SetDefaultProfileResult_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return PreferencesResponse_Result_SetDefaultProfileResult_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return PreferencesResponse_Result_SetDefaultProfileResult_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return PreferencesResponse_Result_SetDefaultProfileResult_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.PreferencesResponse.Result.SetDefaultProfileResult.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status status() const;
  void set_status(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status value);
  private:
  ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status _internal_status() const;
  void _internal_set_status(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse_Result_UnrecognizedResult final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse.Result.UnrecognizedResult) */ {
 public:
  inline PreferencesResponse_Result_UnrecognizedResult() : PreferencesResponse_Result_UnrecognizedResult(nullptr) {}
  explicit constexpr PreferencesResponse_Result_UnrecognizedResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse_Result_UnrecognizedResult(const PreferencesResponse_Result_UnrecognizedResult& from);
  PreferencesResponse_Result_UnrecognizedResult(PreferencesResponse_Result_UnrecognizedResult&& from) noexcept
    : PreferencesResponse_Result_UnrecognizedResult() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse_Result_UnrecognizedResult& operator=(const PreferencesResponse_Result_UnrecognizedResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse_Result_UnrecognizedResult& operator=(PreferencesResponse_Result_UnrecognizedResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse_Result_UnrecognizedResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesResponse_Result_UnrecognizedResult* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse_Result_UnrecognizedResult*>(
               &_PreferencesResponse_Result_UnrecognizedResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PreferencesResponse_Result_UnrecognizedResult& a, PreferencesResponse_Result_UnrecognizedResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse_Result_UnrecognizedResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse_Result_UnrecognizedResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse_Result_UnrecognizedResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse_Result_UnrecognizedResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PreferencesResponse_Result_UnrecognizedResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PreferencesResponse_Result_UnrecognizedResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse.Result.UnrecognizedResult";
  }
  protected:
  explicit PreferencesResponse_Result_UnrecognizedResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse.Result.UnrecognizedResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse_Result_GetDefaultProfileResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse.Result.GetDefaultProfileResult) */ {
 public:
  inline PreferencesResponse_Result_GetDefaultProfileResult() : PreferencesResponse_Result_GetDefaultProfileResult(nullptr) {}
  ~PreferencesResponse_Result_GetDefaultProfileResult() override;
  explicit constexpr PreferencesResponse_Result_GetDefaultProfileResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse_Result_GetDefaultProfileResult(const PreferencesResponse_Result_GetDefaultProfileResult& from);
  PreferencesResponse_Result_GetDefaultProfileResult(PreferencesResponse_Result_GetDefaultProfileResult&& from) noexcept
    : PreferencesResponse_Result_GetDefaultProfileResult() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse_Result_GetDefaultProfileResult& operator=(const PreferencesResponse_Result_GetDefaultProfileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse_Result_GetDefaultProfileResult& operator=(PreferencesResponse_Result_GetDefaultProfileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse_Result_GetDefaultProfileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesResponse_Result_GetDefaultProfileResult* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse_Result_GetDefaultProfileResult*>(
               &_PreferencesResponse_Result_GetDefaultProfileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PreferencesResponse_Result_GetDefaultProfileResult& a, PreferencesResponse_Result_GetDefaultProfileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse_Result_GetDefaultProfileResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse_Result_GetDefaultProfileResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse_Result_GetDefaultProfileResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse_Result_GetDefaultProfileResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesResponse_Result_GetDefaultProfileResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesResponse_Result_GetDefaultProfileResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesResponse_Result_GetDefaultProfileResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse.Result.GetDefaultProfileResult";
  }
  protected:
  explicit PreferencesResponse_Result_GetDefaultProfileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse.Result) */ {
 public:
  inline PreferencesResponse_Result() : PreferencesResponse_Result(nullptr) {}
  ~PreferencesResponse_Result() override;
  explicit constexpr PreferencesResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse_Result(const PreferencesResponse_Result& from);
  PreferencesResponse_Result(PreferencesResponse_Result&& from) noexcept
    : PreferencesResponse_Result() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse_Result& operator=(const PreferencesResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse_Result& operator=(PreferencesResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kUnrecognizedRequest = 1,
    kSetPreferenceResult = 2,
    kGetPreferenceResult = 3,
    kSetDefaultProfileResult = 4,
    kGetDefaultProfileResult = 5,
    RESULT_NOT_SET = 0,
  };

  static inline const PreferencesResponse_Result* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse_Result*>(
               &_PreferencesResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PreferencesResponse_Result& a, PreferencesResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesResponse_Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesResponse_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse.Result";
  }
  protected:
  explicit PreferencesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreferencesResponse_Result_SetPreferenceResult SetPreferenceResult;
  typedef PreferencesResponse_Result_GetPreferenceResult GetPreferenceResult;
  typedef PreferencesResponse_Result_SetDefaultProfileResult SetDefaultProfileResult;
  typedef PreferencesResponse_Result_UnrecognizedResult UnrecognizedResult;
  typedef PreferencesResponse_Result_GetDefaultProfileResult GetDefaultProfileResult;

  // accessors -------------------------------------------------------

  enum : int {
    kUnrecognizedRequestFieldNumber = 1,
    kSetPreferenceResultFieldNumber = 2,
    kGetPreferenceResultFieldNumber = 3,
    kSetDefaultProfileResultFieldNumber = 4,
    kGetDefaultProfileResultFieldNumber = 5,
  };
  // .iterm2.PreferencesResponse.Result.UnrecognizedResult unrecognized_request = 1;
  bool has_unrecognized_request() const;
  private:
  bool _internal_has_unrecognized_request() const;
  public:
  void clear_unrecognized_request();
  const ::iterm2::PreferencesResponse_Result_UnrecognizedResult& unrecognized_request() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesResponse_Result_UnrecognizedResult* release_unrecognized_request();
  ::iterm2::PreferencesResponse_Result_UnrecognizedResult* mutable_unrecognized_request();
  void set_allocated_unrecognized_request(::iterm2::PreferencesResponse_Result_UnrecognizedResult* unrecognized_request);
  private:
  const ::iterm2::PreferencesResponse_Result_UnrecognizedResult& _internal_unrecognized_request() const;
  ::iterm2::PreferencesResponse_Result_UnrecognizedResult* _internal_mutable_unrecognized_request();
  public:
  void unsafe_arena_set_allocated_unrecognized_request(
      ::iterm2::PreferencesResponse_Result_UnrecognizedResult* unrecognized_request);
  ::iterm2::PreferencesResponse_Result_UnrecognizedResult* unsafe_arena_release_unrecognized_request();

  // .iterm2.PreferencesResponse.Result.SetPreferenceResult set_preference_result = 2;
  bool has_set_preference_result() const;
  private:
  bool _internal_has_set_preference_result() const;
  public:
  void clear_set_preference_result();
  const ::iterm2::PreferencesResponse_Result_SetPreferenceResult& set_preference_result() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesResponse_Result_SetPreferenceResult* release_set_preference_result();
  ::iterm2::PreferencesResponse_Result_SetPreferenceResult* mutable_set_preference_result();
  void set_allocated_set_preference_result(::iterm2::PreferencesResponse_Result_SetPreferenceResult* set_preference_result);
  private:
  const ::iterm2::PreferencesResponse_Result_SetPreferenceResult& _internal_set_preference_result() const;
  ::iterm2::PreferencesResponse_Result_SetPreferenceResult* _internal_mutable_set_preference_result();
  public:
  void unsafe_arena_set_allocated_set_preference_result(
      ::iterm2::PreferencesResponse_Result_SetPreferenceResult* set_preference_result);
  ::iterm2::PreferencesResponse_Result_SetPreferenceResult* unsafe_arena_release_set_preference_result();

  // .iterm2.PreferencesResponse.Result.GetPreferenceResult get_preference_result = 3;
  bool has_get_preference_result() const;
  private:
  bool _internal_has_get_preference_result() const;
  public:
  void clear_get_preference_result();
  const ::iterm2::PreferencesResponse_Result_GetPreferenceResult& get_preference_result() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesResponse_Result_GetPreferenceResult* release_get_preference_result();
  ::iterm2::PreferencesResponse_Result_GetPreferenceResult* mutable_get_preference_result();
  void set_allocated_get_preference_result(::iterm2::PreferencesResponse_Result_GetPreferenceResult* get_preference_result);
  private:
  const ::iterm2::PreferencesResponse_Result_GetPreferenceResult& _internal_get_preference_result() const;
  ::iterm2::PreferencesResponse_Result_GetPreferenceResult* _internal_mutable_get_preference_result();
  public:
  void unsafe_arena_set_allocated_get_preference_result(
      ::iterm2::PreferencesResponse_Result_GetPreferenceResult* get_preference_result);
  ::iterm2::PreferencesResponse_Result_GetPreferenceResult* unsafe_arena_release_get_preference_result();

  // .iterm2.PreferencesResponse.Result.SetDefaultProfileResult set_default_profile_result = 4;
  bool has_set_default_profile_result() const;
  private:
  bool _internal_has_set_default_profile_result() const;
  public:
  void clear_set_default_profile_result();
  const ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult& set_default_profile_result() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* release_set_default_profile_result();
  ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* mutable_set_default_profile_result();
  void set_allocated_set_default_profile_result(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* set_default_profile_result);
  private:
  const ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult& _internal_set_default_profile_result() const;
  ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* _internal_mutable_set_default_profile_result();
  public:
  void unsafe_arena_set_allocated_set_default_profile_result(
      ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* set_default_profile_result);
  ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* unsafe_arena_release_set_default_profile_result();

  // .iterm2.PreferencesResponse.Result.GetDefaultProfileResult get_default_profile_result = 5;
  bool has_get_default_profile_result() const;
  private:
  bool _internal_has_get_default_profile_result() const;
  public:
  void clear_get_default_profile_result();
  const ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult& get_default_profile_result() const;
  PROTOBUF_NODISCARD ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* release_get_default_profile_result();
  ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* mutable_get_default_profile_result();
  void set_allocated_get_default_profile_result(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* get_default_profile_result);
  private:
  const ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult& _internal_get_default_profile_result() const;
  ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* _internal_mutable_get_default_profile_result();
  public:
  void unsafe_arena_set_allocated_get_default_profile_result(
      ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* get_default_profile_result);
  ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* unsafe_arena_release_get_default_profile_result();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse.Result)
 private:
  class _Internal;
  void set_has_unrecognized_request();
  void set_has_set_preference_result();
  void set_has_get_preference_result();
  void set_has_set_default_profile_result();
  void set_has_get_default_profile_result();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResultUnion {
    constexpr ResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::PreferencesResponse_Result_UnrecognizedResult* unrecognized_request_;
    ::iterm2::PreferencesResponse_Result_SetPreferenceResult* set_preference_result_;
    ::iterm2::PreferencesResponse_Result_GetPreferenceResult* get_preference_result_;
    ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* set_default_profile_result_;
    ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* get_default_profile_result_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PreferencesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PreferencesResponse) */ {
 public:
  inline PreferencesResponse() : PreferencesResponse(nullptr) {}
  ~PreferencesResponse() override;
  explicit constexpr PreferencesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferencesResponse(const PreferencesResponse& from);
  PreferencesResponse(PreferencesResponse&& from) noexcept
    : PreferencesResponse() {
    *this = ::std::move(from);
  }

  inline PreferencesResponse& operator=(const PreferencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferencesResponse& operator=(PreferencesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreferencesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferencesResponse* internal_default_instance() {
    return reinterpret_cast<const PreferencesResponse*>(
               &_PreferencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PreferencesResponse& a, PreferencesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferencesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferencesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferencesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferencesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreferencesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreferencesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreferencesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PreferencesResponse";
  }
  protected:
  explicit PreferencesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PreferencesResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .iterm2.PreferencesResponse.Result results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::iterm2::PreferencesResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesResponse_Result >*
      mutable_results();
  private:
  const ::iterm2::PreferencesResponse_Result& _internal_results(int index) const;
  ::iterm2::PreferencesResponse_Result* _internal_add_results();
  public:
  const ::iterm2::PreferencesResponse_Result& results(int index) const;
  ::iterm2::PreferencesResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesResponse_Result >&
      results() const;

  // @@protoc_insertion_point(class_scope:iterm2.PreferencesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesResponse_Result > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ReorderTabsRequest_Assignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ReorderTabsRequest.Assignment) */ {
 public:
  inline ReorderTabsRequest_Assignment() : ReorderTabsRequest_Assignment(nullptr) {}
  ~ReorderTabsRequest_Assignment() override;
  explicit constexpr ReorderTabsRequest_Assignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderTabsRequest_Assignment(const ReorderTabsRequest_Assignment& from);
  ReorderTabsRequest_Assignment(ReorderTabsRequest_Assignment&& from) noexcept
    : ReorderTabsRequest_Assignment() {
    *this = ::std::move(from);
  }

  inline ReorderTabsRequest_Assignment& operator=(const ReorderTabsRequest_Assignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderTabsRequest_Assignment& operator=(ReorderTabsRequest_Assignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderTabsRequest_Assignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderTabsRequest_Assignment* internal_default_instance() {
    return reinterpret_cast<const ReorderTabsRequest_Assignment*>(
               &_ReorderTabsRequest_Assignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ReorderTabsRequest_Assignment& a, ReorderTabsRequest_Assignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderTabsRequest_Assignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderTabsRequest_Assignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderTabsRequest_Assignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderTabsRequest_Assignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderTabsRequest_Assignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReorderTabsRequest_Assignment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderTabsRequest_Assignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ReorderTabsRequest.Assignment";
  }
  protected:
  explicit ReorderTabsRequest_Assignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabIdsFieldNumber = 2,
    kWindowIdFieldNumber = 1,
  };
  // repeated string tab_ids = 2;
  int tab_ids_size() const;
  private:
  int _internal_tab_ids_size() const;
  public:
  void clear_tab_ids();
  const std::string& tab_ids(int index) const;
  std::string* mutable_tab_ids(int index);
  void set_tab_ids(int index, const std::string& value);
  void set_tab_ids(int index, std::string&& value);
  void set_tab_ids(int index, const char* value);
  void set_tab_ids(int index, const char* value, size_t size);
  std::string* add_tab_ids();
  void add_tab_ids(const std::string& value);
  void add_tab_ids(std::string&& value);
  void add_tab_ids(const char* value);
  void add_tab_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tab_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tab_ids();
  private:
  const std::string& _internal_tab_ids(int index) const;
  std::string* _internal_add_tab_ids();
  public:

  // optional string window_id = 1;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ReorderTabsRequest.Assignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tab_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ReorderTabsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ReorderTabsRequest) */ {
 public:
  inline ReorderTabsRequest() : ReorderTabsRequest(nullptr) {}
  ~ReorderTabsRequest() override;
  explicit constexpr ReorderTabsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderTabsRequest(const ReorderTabsRequest& from);
  ReorderTabsRequest(ReorderTabsRequest&& from) noexcept
    : ReorderTabsRequest() {
    *this = ::std::move(from);
  }

  inline ReorderTabsRequest& operator=(const ReorderTabsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderTabsRequest& operator=(ReorderTabsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderTabsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderTabsRequest* internal_default_instance() {
    return reinterpret_cast<const ReorderTabsRequest*>(
               &_ReorderTabsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ReorderTabsRequest& a, ReorderTabsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderTabsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderTabsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderTabsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderTabsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderTabsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReorderTabsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderTabsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ReorderTabsRequest";
  }
  protected:
  explicit ReorderTabsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderTabsRequest_Assignment Assignment;

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 3,
  };
  // repeated .iterm2.ReorderTabsRequest.Assignment assignments = 3;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::iterm2::ReorderTabsRequest_Assignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ReorderTabsRequest_Assignment >*
      mutable_assignments();
  private:
  const ::iterm2::ReorderTabsRequest_Assignment& _internal_assignments(int index) const;
  ::iterm2::ReorderTabsRequest_Assignment* _internal_add_assignments();
  public:
  const ::iterm2::ReorderTabsRequest_Assignment& assignments(int index) const;
  ::iterm2::ReorderTabsRequest_Assignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ReorderTabsRequest_Assignment >&
      assignments() const;

  // @@protoc_insertion_point(class_scope:iterm2.ReorderTabsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ReorderTabsRequest_Assignment > assignments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ReorderTabsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ReorderTabsResponse) */ {
 public:
  inline ReorderTabsResponse() : ReorderTabsResponse(nullptr) {}
  ~ReorderTabsResponse() override;
  explicit constexpr ReorderTabsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderTabsResponse(const ReorderTabsResponse& from);
  ReorderTabsResponse(ReorderTabsResponse&& from) noexcept
    : ReorderTabsResponse() {
    *this = ::std::move(from);
  }

  inline ReorderTabsResponse& operator=(const ReorderTabsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderTabsResponse& operator=(ReorderTabsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderTabsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderTabsResponse* internal_default_instance() {
    return reinterpret_cast<const ReorderTabsResponse*>(
               &_ReorderTabsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ReorderTabsResponse& a, ReorderTabsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderTabsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderTabsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderTabsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderTabsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderTabsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReorderTabsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderTabsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ReorderTabsResponse";
  }
  protected:
  explicit ReorderTabsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderTabsResponse_Status Status;
  static constexpr Status OK =
    ReorderTabsResponse_Status_OK;
  static constexpr Status INVALID_ASSIGNMENT =
    ReorderTabsResponse_Status_INVALID_ASSIGNMENT;
  static constexpr Status INVALID_WINDOW_ID =
    ReorderTabsResponse_Status_INVALID_WINDOW_ID;
  static constexpr Status INVALID_TAB_ID =
    ReorderTabsResponse_Status_INVALID_TAB_ID;
  static inline bool Status_IsValid(int value) {
    return ReorderTabsResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ReorderTabsResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ReorderTabsResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ReorderTabsResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ReorderTabsResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ReorderTabsResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ReorderTabsResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 4,
  };
  // optional .iterm2.ReorderTabsResponse.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::ReorderTabsResponse_Status status() const;
  void set_status(::iterm2::ReorderTabsResponse_Status value);
  private:
  ::iterm2::ReorderTabsResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::ReorderTabsResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ReorderTabsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxRequest_ListConnections final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.TmuxRequest.ListConnections) */ {
 public:
  inline TmuxRequest_ListConnections() : TmuxRequest_ListConnections(nullptr) {}
  explicit constexpr TmuxRequest_ListConnections(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxRequest_ListConnections(const TmuxRequest_ListConnections& from);
  TmuxRequest_ListConnections(TmuxRequest_ListConnections&& from) noexcept
    : TmuxRequest_ListConnections() {
    *this = ::std::move(from);
  }

  inline TmuxRequest_ListConnections& operator=(const TmuxRequest_ListConnections& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxRequest_ListConnections& operator=(TmuxRequest_ListConnections&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxRequest_ListConnections& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxRequest_ListConnections* internal_default_instance() {
    return reinterpret_cast<const TmuxRequest_ListConnections*>(
               &_TmuxRequest_ListConnections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TmuxRequest_ListConnections& a, TmuxRequest_ListConnections& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxRequest_ListConnections* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxRequest_ListConnections* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxRequest_ListConnections* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxRequest_ListConnections>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TmuxRequest_ListConnections& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TmuxRequest_ListConnections& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxRequest.ListConnections";
  }
  protected:
  explicit TmuxRequest_ListConnections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.TmuxRequest.ListConnections)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxRequest_SendCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxRequest.SendCommand) */ {
 public:
  inline TmuxRequest_SendCommand() : TmuxRequest_SendCommand(nullptr) {}
  ~TmuxRequest_SendCommand() override;
  explicit constexpr TmuxRequest_SendCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxRequest_SendCommand(const TmuxRequest_SendCommand& from);
  TmuxRequest_SendCommand(TmuxRequest_SendCommand&& from) noexcept
    : TmuxRequest_SendCommand() {
    *this = ::std::move(from);
  }

  inline TmuxRequest_SendCommand& operator=(const TmuxRequest_SendCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxRequest_SendCommand& operator=(TmuxRequest_SendCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxRequest_SendCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxRequest_SendCommand* internal_default_instance() {
    return reinterpret_cast<const TmuxRequest_SendCommand*>(
               &_TmuxRequest_SendCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TmuxRequest_SendCommand& a, TmuxRequest_SendCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxRequest_SendCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxRequest_SendCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxRequest_SendCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxRequest_SendCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxRequest_SendCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxRequest_SendCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxRequest_SendCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxRequest.SendCommand";
  }
  protected:
  explicit TmuxRequest_SendCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // optional string connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const std::string& connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // optional string command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TmuxRequest.SendCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxRequest_SetWindowVisible final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxRequest.SetWindowVisible) */ {
 public:
  inline TmuxRequest_SetWindowVisible() : TmuxRequest_SetWindowVisible(nullptr) {}
  ~TmuxRequest_SetWindowVisible() override;
  explicit constexpr TmuxRequest_SetWindowVisible(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxRequest_SetWindowVisible(const TmuxRequest_SetWindowVisible& from);
  TmuxRequest_SetWindowVisible(TmuxRequest_SetWindowVisible&& from) noexcept
    : TmuxRequest_SetWindowVisible() {
    *this = ::std::move(from);
  }

  inline TmuxRequest_SetWindowVisible& operator=(const TmuxRequest_SetWindowVisible& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxRequest_SetWindowVisible& operator=(TmuxRequest_SetWindowVisible&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxRequest_SetWindowVisible& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxRequest_SetWindowVisible* internal_default_instance() {
    return reinterpret_cast<const TmuxRequest_SetWindowVisible*>(
               &_TmuxRequest_SetWindowVisible_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TmuxRequest_SetWindowVisible& a, TmuxRequest_SetWindowVisible& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxRequest_SetWindowVisible* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxRequest_SetWindowVisible* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxRequest_SetWindowVisible* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxRequest_SetWindowVisible>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxRequest_SetWindowVisible& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxRequest_SetWindowVisible& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxRequest_SetWindowVisible* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxRequest.SetWindowVisible";
  }
  protected:
  explicit TmuxRequest_SetWindowVisible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kWindowIdFieldNumber = 2,
    kVisibleFieldNumber = 3,
  };
  // optional string connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const std::string& connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // optional string window_id = 2;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // optional bool visible = 3;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TmuxRequest.SetWindowVisible)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  bool visible_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxRequest_CreateWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxRequest.CreateWindow) */ {
 public:
  inline TmuxRequest_CreateWindow() : TmuxRequest_CreateWindow(nullptr) {}
  ~TmuxRequest_CreateWindow() override;
  explicit constexpr TmuxRequest_CreateWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxRequest_CreateWindow(const TmuxRequest_CreateWindow& from);
  TmuxRequest_CreateWindow(TmuxRequest_CreateWindow&& from) noexcept
    : TmuxRequest_CreateWindow() {
    *this = ::std::move(from);
  }

  inline TmuxRequest_CreateWindow& operator=(const TmuxRequest_CreateWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxRequest_CreateWindow& operator=(TmuxRequest_CreateWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxRequest_CreateWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxRequest_CreateWindow* internal_default_instance() {
    return reinterpret_cast<const TmuxRequest_CreateWindow*>(
               &_TmuxRequest_CreateWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TmuxRequest_CreateWindow& a, TmuxRequest_CreateWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxRequest_CreateWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxRequest_CreateWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxRequest_CreateWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxRequest_CreateWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxRequest_CreateWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxRequest_CreateWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxRequest_CreateWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxRequest.CreateWindow";
  }
  protected:
  explicit TmuxRequest_CreateWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kAffinityFieldNumber = 2,
  };
  // optional string connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const std::string& connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // optional string affinity = 2;
  bool has_affinity() const;
  private:
  bool _internal_has_affinity() const;
  public:
  void clear_affinity();
  const std::string& affinity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affinity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affinity();
  PROTOBUF_NODISCARD std::string* release_affinity();
  void set_allocated_affinity(std::string* affinity);
  private:
  const std::string& _internal_affinity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affinity(const std::string& value);
  std::string* _internal_mutable_affinity();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TmuxRequest.CreateWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affinity_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxRequest) */ {
 public:
  inline TmuxRequest() : TmuxRequest(nullptr) {}
  ~TmuxRequest() override;
  explicit constexpr TmuxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxRequest(const TmuxRequest& from);
  TmuxRequest(TmuxRequest&& from) noexcept
    : TmuxRequest() {
    *this = ::std::move(from);
  }

  inline TmuxRequest& operator=(const TmuxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxRequest& operator=(TmuxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kListConnections = 1,
    kSendCommand = 2,
    kSetWindowVisible = 3,
    kCreateWindow = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const TmuxRequest* internal_default_instance() {
    return reinterpret_cast<const TmuxRequest*>(
               &_TmuxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TmuxRequest& a, TmuxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxRequest";
  }
  protected:
  explicit TmuxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TmuxRequest_ListConnections ListConnections;
  typedef TmuxRequest_SendCommand SendCommand;
  typedef TmuxRequest_SetWindowVisible SetWindowVisible;
  typedef TmuxRequest_CreateWindow CreateWindow;

  // accessors -------------------------------------------------------

  enum : int {
    kListConnectionsFieldNumber = 1,
    kSendCommandFieldNumber = 2,
    kSetWindowVisibleFieldNumber = 3,
    kCreateWindowFieldNumber = 4,
  };
  // .iterm2.TmuxRequest.ListConnections list_connections = 1;
  bool has_list_connections() const;
  private:
  bool _internal_has_list_connections() const;
  public:
  void clear_list_connections();
  const ::iterm2::TmuxRequest_ListConnections& list_connections() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxRequest_ListConnections* release_list_connections();
  ::iterm2::TmuxRequest_ListConnections* mutable_list_connections();
  void set_allocated_list_connections(::iterm2::TmuxRequest_ListConnections* list_connections);
  private:
  const ::iterm2::TmuxRequest_ListConnections& _internal_list_connections() const;
  ::iterm2::TmuxRequest_ListConnections* _internal_mutable_list_connections();
  public:
  void unsafe_arena_set_allocated_list_connections(
      ::iterm2::TmuxRequest_ListConnections* list_connections);
  ::iterm2::TmuxRequest_ListConnections* unsafe_arena_release_list_connections();

  // .iterm2.TmuxRequest.SendCommand send_command = 2;
  bool has_send_command() const;
  private:
  bool _internal_has_send_command() const;
  public:
  void clear_send_command();
  const ::iterm2::TmuxRequest_SendCommand& send_command() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxRequest_SendCommand* release_send_command();
  ::iterm2::TmuxRequest_SendCommand* mutable_send_command();
  void set_allocated_send_command(::iterm2::TmuxRequest_SendCommand* send_command);
  private:
  const ::iterm2::TmuxRequest_SendCommand& _internal_send_command() const;
  ::iterm2::TmuxRequest_SendCommand* _internal_mutable_send_command();
  public:
  void unsafe_arena_set_allocated_send_command(
      ::iterm2::TmuxRequest_SendCommand* send_command);
  ::iterm2::TmuxRequest_SendCommand* unsafe_arena_release_send_command();

  // .iterm2.TmuxRequest.SetWindowVisible set_window_visible = 3;
  bool has_set_window_visible() const;
  private:
  bool _internal_has_set_window_visible() const;
  public:
  void clear_set_window_visible();
  const ::iterm2::TmuxRequest_SetWindowVisible& set_window_visible() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxRequest_SetWindowVisible* release_set_window_visible();
  ::iterm2::TmuxRequest_SetWindowVisible* mutable_set_window_visible();
  void set_allocated_set_window_visible(::iterm2::TmuxRequest_SetWindowVisible* set_window_visible);
  private:
  const ::iterm2::TmuxRequest_SetWindowVisible& _internal_set_window_visible() const;
  ::iterm2::TmuxRequest_SetWindowVisible* _internal_mutable_set_window_visible();
  public:
  void unsafe_arena_set_allocated_set_window_visible(
      ::iterm2::TmuxRequest_SetWindowVisible* set_window_visible);
  ::iterm2::TmuxRequest_SetWindowVisible* unsafe_arena_release_set_window_visible();

  // .iterm2.TmuxRequest.CreateWindow create_window = 4;
  bool has_create_window() const;
  private:
  bool _internal_has_create_window() const;
  public:
  void clear_create_window();
  const ::iterm2::TmuxRequest_CreateWindow& create_window() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxRequest_CreateWindow* release_create_window();
  ::iterm2::TmuxRequest_CreateWindow* mutable_create_window();
  void set_allocated_create_window(::iterm2::TmuxRequest_CreateWindow* create_window);
  private:
  const ::iterm2::TmuxRequest_CreateWindow& _internal_create_window() const;
  ::iterm2::TmuxRequest_CreateWindow* _internal_mutable_create_window();
  public:
  void unsafe_arena_set_allocated_create_window(
      ::iterm2::TmuxRequest_CreateWindow* create_window);
  ::iterm2::TmuxRequest_CreateWindow* unsafe_arena_release_create_window();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.TmuxRequest)
 private:
  class _Internal;
  void set_has_list_connections();
  void set_has_send_command();
  void set_has_set_window_visible();
  void set_has_create_window();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::TmuxRequest_ListConnections* list_connections_;
    ::iterm2::TmuxRequest_SendCommand* send_command_;
    ::iterm2::TmuxRequest_SetWindowVisible* set_window_visible_;
    ::iterm2::TmuxRequest_CreateWindow* create_window_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxResponse_ListConnections_Connection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxResponse.ListConnections.Connection) */ {
 public:
  inline TmuxResponse_ListConnections_Connection() : TmuxResponse_ListConnections_Connection(nullptr) {}
  ~TmuxResponse_ListConnections_Connection() override;
  explicit constexpr TmuxResponse_ListConnections_Connection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxResponse_ListConnections_Connection(const TmuxResponse_ListConnections_Connection& from);
  TmuxResponse_ListConnections_Connection(TmuxResponse_ListConnections_Connection&& from) noexcept
    : TmuxResponse_ListConnections_Connection() {
    *this = ::std::move(from);
  }

  inline TmuxResponse_ListConnections_Connection& operator=(const TmuxResponse_ListConnections_Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxResponse_ListConnections_Connection& operator=(TmuxResponse_ListConnections_Connection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxResponse_ListConnections_Connection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxResponse_ListConnections_Connection* internal_default_instance() {
    return reinterpret_cast<const TmuxResponse_ListConnections_Connection*>(
               &_TmuxResponse_ListConnections_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TmuxResponse_ListConnections_Connection& a, TmuxResponse_ListConnections_Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxResponse_ListConnections_Connection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxResponse_ListConnections_Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxResponse_ListConnections_Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxResponse_ListConnections_Connection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxResponse_ListConnections_Connection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxResponse_ListConnections_Connection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxResponse_ListConnections_Connection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxResponse.ListConnections.Connection";
  }
  protected:
  explicit TmuxResponse_ListConnections_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kOwningSessionIdFieldNumber = 2,
  };
  // optional string connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const std::string& connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // optional string owning_session_id = 2;
  bool has_owning_session_id() const;
  private:
  bool _internal_has_owning_session_id() const;
  public:
  void clear_owning_session_id();
  const std::string& owning_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owning_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owning_session_id();
  PROTOBUF_NODISCARD std::string* release_owning_session_id();
  void set_allocated_owning_session_id(std::string* owning_session_id);
  private:
  const std::string& _internal_owning_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owning_session_id(const std::string& value);
  std::string* _internal_mutable_owning_session_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TmuxResponse.ListConnections.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owning_session_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxResponse_ListConnections final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxResponse.ListConnections) */ {
 public:
  inline TmuxResponse_ListConnections() : TmuxResponse_ListConnections(nullptr) {}
  ~TmuxResponse_ListConnections() override;
  explicit constexpr TmuxResponse_ListConnections(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxResponse_ListConnections(const TmuxResponse_ListConnections& from);
  TmuxResponse_ListConnections(TmuxResponse_ListConnections&& from) noexcept
    : TmuxResponse_ListConnections() {
    *this = ::std::move(from);
  }

  inline TmuxResponse_ListConnections& operator=(const TmuxResponse_ListConnections& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxResponse_ListConnections& operator=(TmuxResponse_ListConnections&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxResponse_ListConnections& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxResponse_ListConnections* internal_default_instance() {
    return reinterpret_cast<const TmuxResponse_ListConnections*>(
               &_TmuxResponse_ListConnections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TmuxResponse_ListConnections& a, TmuxResponse_ListConnections& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxResponse_ListConnections* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxResponse_ListConnections* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxResponse_ListConnections* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxResponse_ListConnections>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxResponse_ListConnections& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxResponse_ListConnections& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxResponse_ListConnections* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxResponse.ListConnections";
  }
  protected:
  explicit TmuxResponse_ListConnections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TmuxResponse_ListConnections_Connection Connection;

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 1,
  };
  // repeated .iterm2.TmuxResponse.ListConnections.Connection connections = 1;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::iterm2::TmuxResponse_ListConnections_Connection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::TmuxResponse_ListConnections_Connection >*
      mutable_connections();
  private:
  const ::iterm2::TmuxResponse_ListConnections_Connection& _internal_connections(int index) const;
  ::iterm2::TmuxResponse_ListConnections_Connection* _internal_add_connections();
  public:
  const ::iterm2::TmuxResponse_ListConnections_Connection& connections(int index) const;
  ::iterm2::TmuxResponse_ListConnections_Connection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::TmuxResponse_ListConnections_Connection >&
      connections() const;

  // @@protoc_insertion_point(class_scope:iterm2.TmuxResponse.ListConnections)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::TmuxResponse_ListConnections_Connection > connections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxResponse_SendCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxResponse.SendCommand) */ {
 public:
  inline TmuxResponse_SendCommand() : TmuxResponse_SendCommand(nullptr) {}
  ~TmuxResponse_SendCommand() override;
  explicit constexpr TmuxResponse_SendCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxResponse_SendCommand(const TmuxResponse_SendCommand& from);
  TmuxResponse_SendCommand(TmuxResponse_SendCommand&& from) noexcept
    : TmuxResponse_SendCommand() {
    *this = ::std::move(from);
  }

  inline TmuxResponse_SendCommand& operator=(const TmuxResponse_SendCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxResponse_SendCommand& operator=(TmuxResponse_SendCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxResponse_SendCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxResponse_SendCommand* internal_default_instance() {
    return reinterpret_cast<const TmuxResponse_SendCommand*>(
               &_TmuxResponse_SendCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TmuxResponse_SendCommand& a, TmuxResponse_SendCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxResponse_SendCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxResponse_SendCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxResponse_SendCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxResponse_SendCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxResponse_SendCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxResponse_SendCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxResponse_SendCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxResponse.SendCommand";
  }
  protected:
  explicit TmuxResponse_SendCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
  };
  // optional string output = 1;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TmuxResponse.SendCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxResponse_SetWindowVisible final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.TmuxResponse.SetWindowVisible) */ {
 public:
  inline TmuxResponse_SetWindowVisible() : TmuxResponse_SetWindowVisible(nullptr) {}
  explicit constexpr TmuxResponse_SetWindowVisible(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxResponse_SetWindowVisible(const TmuxResponse_SetWindowVisible& from);
  TmuxResponse_SetWindowVisible(TmuxResponse_SetWindowVisible&& from) noexcept
    : TmuxResponse_SetWindowVisible() {
    *this = ::std::move(from);
  }

  inline TmuxResponse_SetWindowVisible& operator=(const TmuxResponse_SetWindowVisible& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxResponse_SetWindowVisible& operator=(TmuxResponse_SetWindowVisible&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxResponse_SetWindowVisible& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxResponse_SetWindowVisible* internal_default_instance() {
    return reinterpret_cast<const TmuxResponse_SetWindowVisible*>(
               &_TmuxResponse_SetWindowVisible_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TmuxResponse_SetWindowVisible& a, TmuxResponse_SetWindowVisible& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxResponse_SetWindowVisible* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxResponse_SetWindowVisible* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxResponse_SetWindowVisible* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxResponse_SetWindowVisible>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TmuxResponse_SetWindowVisible& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TmuxResponse_SetWindowVisible& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxResponse.SetWindowVisible";
  }
  protected:
  explicit TmuxResponse_SetWindowVisible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.TmuxResponse.SetWindowVisible)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxResponse_CreateWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxResponse.CreateWindow) */ {
 public:
  inline TmuxResponse_CreateWindow() : TmuxResponse_CreateWindow(nullptr) {}
  ~TmuxResponse_CreateWindow() override;
  explicit constexpr TmuxResponse_CreateWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxResponse_CreateWindow(const TmuxResponse_CreateWindow& from);
  TmuxResponse_CreateWindow(TmuxResponse_CreateWindow&& from) noexcept
    : TmuxResponse_CreateWindow() {
    *this = ::std::move(from);
  }

  inline TmuxResponse_CreateWindow& operator=(const TmuxResponse_CreateWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxResponse_CreateWindow& operator=(TmuxResponse_CreateWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxResponse_CreateWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const TmuxResponse_CreateWindow* internal_default_instance() {
    return reinterpret_cast<const TmuxResponse_CreateWindow*>(
               &_TmuxResponse_CreateWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TmuxResponse_CreateWindow& a, TmuxResponse_CreateWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxResponse_CreateWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxResponse_CreateWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxResponse_CreateWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxResponse_CreateWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxResponse_CreateWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxResponse_CreateWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxResponse_CreateWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxResponse.CreateWindow";
  }
  protected:
  explicit TmuxResponse_CreateWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabIdFieldNumber = 1,
  };
  // optional string tab_id = 1;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  const std::string& tab_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tab_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tab_id();
  PROTOBUF_NODISCARD std::string* release_tab_id();
  void set_allocated_tab_id(std::string* tab_id);
  private:
  const std::string& _internal_tab_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tab_id(const std::string& value);
  std::string* _internal_mutable_tab_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TmuxResponse.CreateWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tab_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TmuxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TmuxResponse) */ {
 public:
  inline TmuxResponse() : TmuxResponse(nullptr) {}
  ~TmuxResponse() override;
  explicit constexpr TmuxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TmuxResponse(const TmuxResponse& from);
  TmuxResponse(TmuxResponse&& from) noexcept
    : TmuxResponse() {
    *this = ::std::move(from);
  }

  inline TmuxResponse& operator=(const TmuxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmuxResponse& operator=(TmuxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TmuxResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kListConnections = 1,
    kSendCommand = 2,
    kSetWindowVisible = 3,
    kCreateWindow = 5,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const TmuxResponse* internal_default_instance() {
    return reinterpret_cast<const TmuxResponse*>(
               &_TmuxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(TmuxResponse& a, TmuxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TmuxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmuxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TmuxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TmuxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TmuxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TmuxResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmuxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TmuxResponse";
  }
  protected:
  explicit TmuxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TmuxResponse_ListConnections ListConnections;
  typedef TmuxResponse_SendCommand SendCommand;
  typedef TmuxResponse_SetWindowVisible SetWindowVisible;
  typedef TmuxResponse_CreateWindow CreateWindow;

  typedef TmuxResponse_Status Status;
  static constexpr Status OK =
    TmuxResponse_Status_OK;
  static constexpr Status INVALID_REQUEST =
    TmuxResponse_Status_INVALID_REQUEST;
  static constexpr Status INVALID_CONNECTION_ID =
    TmuxResponse_Status_INVALID_CONNECTION_ID;
  static constexpr Status INVALID_WINDOW_ID =
    TmuxResponse_Status_INVALID_WINDOW_ID;
  static inline bool Status_IsValid(int value) {
    return TmuxResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TmuxResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TmuxResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TmuxResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TmuxResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TmuxResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return TmuxResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 4,
    kListConnectionsFieldNumber = 1,
    kSendCommandFieldNumber = 2,
    kSetWindowVisibleFieldNumber = 3,
    kCreateWindowFieldNumber = 5,
  };
  // optional .iterm2.TmuxResponse.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::TmuxResponse_Status status() const;
  void set_status(::iterm2::TmuxResponse_Status value);
  private:
  ::iterm2::TmuxResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::TmuxResponse_Status value);
  public:

  // .iterm2.TmuxResponse.ListConnections list_connections = 1;
  bool has_list_connections() const;
  private:
  bool _internal_has_list_connections() const;
  public:
  void clear_list_connections();
  const ::iterm2::TmuxResponse_ListConnections& list_connections() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxResponse_ListConnections* release_list_connections();
  ::iterm2::TmuxResponse_ListConnections* mutable_list_connections();
  void set_allocated_list_connections(::iterm2::TmuxResponse_ListConnections* list_connections);
  private:
  const ::iterm2::TmuxResponse_ListConnections& _internal_list_connections() const;
  ::iterm2::TmuxResponse_ListConnections* _internal_mutable_list_connections();
  public:
  void unsafe_arena_set_allocated_list_connections(
      ::iterm2::TmuxResponse_ListConnections* list_connections);
  ::iterm2::TmuxResponse_ListConnections* unsafe_arena_release_list_connections();

  // .iterm2.TmuxResponse.SendCommand send_command = 2;
  bool has_send_command() const;
  private:
  bool _internal_has_send_command() const;
  public:
  void clear_send_command();
  const ::iterm2::TmuxResponse_SendCommand& send_command() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxResponse_SendCommand* release_send_command();
  ::iterm2::TmuxResponse_SendCommand* mutable_send_command();
  void set_allocated_send_command(::iterm2::TmuxResponse_SendCommand* send_command);
  private:
  const ::iterm2::TmuxResponse_SendCommand& _internal_send_command() const;
  ::iterm2::TmuxResponse_SendCommand* _internal_mutable_send_command();
  public:
  void unsafe_arena_set_allocated_send_command(
      ::iterm2::TmuxResponse_SendCommand* send_command);
  ::iterm2::TmuxResponse_SendCommand* unsafe_arena_release_send_command();

  // .iterm2.TmuxResponse.SetWindowVisible set_window_visible = 3;
  bool has_set_window_visible() const;
  private:
  bool _internal_has_set_window_visible() const;
  public:
  void clear_set_window_visible();
  const ::iterm2::TmuxResponse_SetWindowVisible& set_window_visible() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxResponse_SetWindowVisible* release_set_window_visible();
  ::iterm2::TmuxResponse_SetWindowVisible* mutable_set_window_visible();
  void set_allocated_set_window_visible(::iterm2::TmuxResponse_SetWindowVisible* set_window_visible);
  private:
  const ::iterm2::TmuxResponse_SetWindowVisible& _internal_set_window_visible() const;
  ::iterm2::TmuxResponse_SetWindowVisible* _internal_mutable_set_window_visible();
  public:
  void unsafe_arena_set_allocated_set_window_visible(
      ::iterm2::TmuxResponse_SetWindowVisible* set_window_visible);
  ::iterm2::TmuxResponse_SetWindowVisible* unsafe_arena_release_set_window_visible();

  // .iterm2.TmuxResponse.CreateWindow create_window = 5;
  bool has_create_window() const;
  private:
  bool _internal_has_create_window() const;
  public:
  void clear_create_window();
  const ::iterm2::TmuxResponse_CreateWindow& create_window() const;
  PROTOBUF_NODISCARD ::iterm2::TmuxResponse_CreateWindow* release_create_window();
  ::iterm2::TmuxResponse_CreateWindow* mutable_create_window();
  void set_allocated_create_window(::iterm2::TmuxResponse_CreateWindow* create_window);
  private:
  const ::iterm2::TmuxResponse_CreateWindow& _internal_create_window() const;
  ::iterm2::TmuxResponse_CreateWindow* _internal_mutable_create_window();
  public:
  void unsafe_arena_set_allocated_create_window(
      ::iterm2::TmuxResponse_CreateWindow* create_window);
  ::iterm2::TmuxResponse_CreateWindow* unsafe_arena_release_create_window();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.TmuxResponse)
 private:
  class _Internal;
  void set_has_list_connections();
  void set_has_send_command();
  void set_has_set_window_visible();
  void set_has_create_window();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::TmuxResponse_ListConnections* list_connections_;
    ::iterm2::TmuxResponse_SendCommand* send_command_;
    ::iterm2::TmuxResponse_SetWindowVisible* set_window_visible_;
    ::iterm2::TmuxResponse_CreateWindow* create_window_;
  } payload_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetBroadcastDomainsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.GetBroadcastDomainsRequest) */ {
 public:
  inline GetBroadcastDomainsRequest() : GetBroadcastDomainsRequest(nullptr) {}
  explicit constexpr GetBroadcastDomainsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBroadcastDomainsRequest(const GetBroadcastDomainsRequest& from);
  GetBroadcastDomainsRequest(GetBroadcastDomainsRequest&& from) noexcept
    : GetBroadcastDomainsRequest() {
    *this = ::std::move(from);
  }

  inline GetBroadcastDomainsRequest& operator=(const GetBroadcastDomainsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBroadcastDomainsRequest& operator=(GetBroadcastDomainsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBroadcastDomainsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBroadcastDomainsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBroadcastDomainsRequest*>(
               &_GetBroadcastDomainsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetBroadcastDomainsRequest& a, GetBroadcastDomainsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBroadcastDomainsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBroadcastDomainsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBroadcastDomainsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBroadcastDomainsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBroadcastDomainsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBroadcastDomainsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetBroadcastDomainsRequest";
  }
  protected:
  explicit GetBroadcastDomainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.GetBroadcastDomainsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class BroadcastDomain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.BroadcastDomain) */ {
 public:
  inline BroadcastDomain() : BroadcastDomain(nullptr) {}
  ~BroadcastDomain() override;
  explicit constexpr BroadcastDomain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastDomain(const BroadcastDomain& from);
  BroadcastDomain(BroadcastDomain&& from) noexcept
    : BroadcastDomain() {
    *this = ::std::move(from);
  }

  inline BroadcastDomain& operator=(const BroadcastDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastDomain& operator=(BroadcastDomain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastDomain& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastDomain* internal_default_instance() {
    return reinterpret_cast<const BroadcastDomain*>(
               &_BroadcastDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(BroadcastDomain& a, BroadcastDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastDomain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastDomain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastDomain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadcastDomain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastDomain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.BroadcastDomain";
  }
  protected:
  explicit BroadcastDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdsFieldNumber = 1,
  };
  // repeated string session_ids = 1;
  int session_ids_size() const;
  private:
  int _internal_session_ids_size() const;
  public:
  void clear_session_ids();
  const std::string& session_ids(int index) const;
  std::string* mutable_session_ids(int index);
  void set_session_ids(int index, const std::string& value);
  void set_session_ids(int index, std::string&& value);
  void set_session_ids(int index, const char* value);
  void set_session_ids(int index, const char* value, size_t size);
  std::string* add_session_ids();
  void add_session_ids(const std::string& value);
  void add_session_ids(std::string&& value);
  void add_session_ids(const char* value);
  void add_session_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_ids();
  private:
  const std::string& _internal_session_ids(int index) const;
  std::string* _internal_add_session_ids();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.BroadcastDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetBroadcastDomainsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetBroadcastDomainsResponse) */ {
 public:
  inline GetBroadcastDomainsResponse() : GetBroadcastDomainsResponse(nullptr) {}
  ~GetBroadcastDomainsResponse() override;
  explicit constexpr GetBroadcastDomainsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBroadcastDomainsResponse(const GetBroadcastDomainsResponse& from);
  GetBroadcastDomainsResponse(GetBroadcastDomainsResponse&& from) noexcept
    : GetBroadcastDomainsResponse() {
    *this = ::std::move(from);
  }

  inline GetBroadcastDomainsResponse& operator=(const GetBroadcastDomainsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBroadcastDomainsResponse& operator=(GetBroadcastDomainsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBroadcastDomainsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBroadcastDomainsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBroadcastDomainsResponse*>(
               &_GetBroadcastDomainsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetBroadcastDomainsResponse& a, GetBroadcastDomainsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBroadcastDomainsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBroadcastDomainsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBroadcastDomainsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBroadcastDomainsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBroadcastDomainsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBroadcastDomainsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBroadcastDomainsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetBroadcastDomainsResponse";
  }
  protected:
  explicit GetBroadcastDomainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastDomainsFieldNumber = 1,
  };
  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  int broadcast_domains_size() const;
  private:
  int _internal_broadcast_domains_size() const;
  public:
  void clear_broadcast_domains();
  ::iterm2::BroadcastDomain* mutable_broadcast_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >*
      mutable_broadcast_domains();
  private:
  const ::iterm2::BroadcastDomain& _internal_broadcast_domains(int index) const;
  ::iterm2::BroadcastDomain* _internal_add_broadcast_domains();
  public:
  const ::iterm2::BroadcastDomain& broadcast_domains(int index) const;
  ::iterm2::BroadcastDomain* add_broadcast_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >&
      broadcast_domains() const;

  // @@protoc_insertion_point(class_scope:iterm2.GetBroadcastDomainsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain > broadcast_domains_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetTabLayoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetTabLayoutRequest) */ {
 public:
  inline SetTabLayoutRequest() : SetTabLayoutRequest(nullptr) {}
  ~SetTabLayoutRequest() override;
  explicit constexpr SetTabLayoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTabLayoutRequest(const SetTabLayoutRequest& from);
  SetTabLayoutRequest(SetTabLayoutRequest&& from) noexcept
    : SetTabLayoutRequest() {
    *this = ::std::move(from);
  }

  inline SetTabLayoutRequest& operator=(const SetTabLayoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTabLayoutRequest& operator=(SetTabLayoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTabLayoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTabLayoutRequest* internal_default_instance() {
    return reinterpret_cast<const SetTabLayoutRequest*>(
               &_SetTabLayoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SetTabLayoutRequest& a, SetTabLayoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTabLayoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTabLayoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTabLayoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTabLayoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTabLayoutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTabLayoutRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTabLayoutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetTabLayoutRequest";
  }
  protected:
  explicit SetTabLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabIdFieldNumber = 2,
    kRootFieldNumber = 1,
  };
  // optional string tab_id = 2;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  const std::string& tab_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tab_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tab_id();
  PROTOBUF_NODISCARD std::string* release_tab_id();
  void set_allocated_tab_id(std::string* tab_id);
  private:
  const std::string& _internal_tab_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tab_id(const std::string& value);
  std::string* _internal_mutable_tab_id();
  public:

  // optional .iterm2.SplitTreeNode root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::iterm2::SplitTreeNode& root() const;
  PROTOBUF_NODISCARD ::iterm2::SplitTreeNode* release_root();
  ::iterm2::SplitTreeNode* mutable_root();
  void set_allocated_root(::iterm2::SplitTreeNode* root);
  private:
  const ::iterm2::SplitTreeNode& _internal_root() const;
  ::iterm2::SplitTreeNode* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::iterm2::SplitTreeNode* root);
  ::iterm2::SplitTreeNode* unsafe_arena_release_root();

  // @@protoc_insertion_point(class_scope:iterm2.SetTabLayoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tab_id_;
  ::iterm2::SplitTreeNode* root_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetTabLayoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetTabLayoutResponse) */ {
 public:
  inline SetTabLayoutResponse() : SetTabLayoutResponse(nullptr) {}
  ~SetTabLayoutResponse() override;
  explicit constexpr SetTabLayoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTabLayoutResponse(const SetTabLayoutResponse& from);
  SetTabLayoutResponse(SetTabLayoutResponse&& from) noexcept
    : SetTabLayoutResponse() {
    *this = ::std::move(from);
  }

  inline SetTabLayoutResponse& operator=(const SetTabLayoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTabLayoutResponse& operator=(SetTabLayoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTabLayoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTabLayoutResponse* internal_default_instance() {
    return reinterpret_cast<const SetTabLayoutResponse*>(
               &_SetTabLayoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SetTabLayoutResponse& a, SetTabLayoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTabLayoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTabLayoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTabLayoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTabLayoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTabLayoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTabLayoutResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTabLayoutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetTabLayoutResponse";
  }
  protected:
  explicit SetTabLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetTabLayoutResponse_Status Status;
  static constexpr Status OK =
    SetTabLayoutResponse_Status_OK;
  static constexpr Status BAD_TAB_ID =
    SetTabLayoutResponse_Status_BAD_TAB_ID;
  static constexpr Status WRONG_TREE =
    SetTabLayoutResponse_Status_WRONG_TREE;
  static constexpr Status INVALID_SIZE =
    SetTabLayoutResponse_Status_INVALID_SIZE;
  static inline bool Status_IsValid(int value) {
    return SetTabLayoutResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SetTabLayoutResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SetTabLayoutResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SetTabLayoutResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SetTabLayoutResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SetTabLayoutResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SetTabLayoutResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.SetTabLayoutResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SetTabLayoutResponse_Status status() const;
  void set_status(::iterm2::SetTabLayoutResponse_Status value);
  private:
  ::iterm2::SetTabLayoutResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SetTabLayoutResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SetTabLayoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class MenuItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.MenuItemRequest) */ {
 public:
  inline MenuItemRequest() : MenuItemRequest(nullptr) {}
  ~MenuItemRequest() override;
  explicit constexpr MenuItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MenuItemRequest(const MenuItemRequest& from);
  MenuItemRequest(MenuItemRequest&& from) noexcept
    : MenuItemRequest() {
    *this = ::std::move(from);
  }

  inline MenuItemRequest& operator=(const MenuItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MenuItemRequest& operator=(MenuItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MenuItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MenuItemRequest* internal_default_instance() {
    return reinterpret_cast<const MenuItemRequest*>(
               &_MenuItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MenuItemRequest& a, MenuItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MenuItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MenuItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MenuItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MenuItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MenuItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MenuItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MenuItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.MenuItemRequest";
  }
  protected:
  explicit MenuItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kQueryOnlyFieldNumber = 2,
  };
  // optional string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional bool query_only = 2;
  bool has_query_only() const;
  private:
  bool _internal_has_query_only() const;
  public:
  void clear_query_only();
  bool query_only() const;
  void set_query_only(bool value);
  private:
  bool _internal_query_only() const;
  void _internal_set_query_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.MenuItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  bool query_only_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class MenuItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.MenuItemResponse) */ {
 public:
  inline MenuItemResponse() : MenuItemResponse(nullptr) {}
  ~MenuItemResponse() override;
  explicit constexpr MenuItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MenuItemResponse(const MenuItemResponse& from);
  MenuItemResponse(MenuItemResponse&& from) noexcept
    : MenuItemResponse() {
    *this = ::std::move(from);
  }

  inline MenuItemResponse& operator=(const MenuItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MenuItemResponse& operator=(MenuItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MenuItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MenuItemResponse* internal_default_instance() {
    return reinterpret_cast<const MenuItemResponse*>(
               &_MenuItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(MenuItemResponse& a, MenuItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MenuItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MenuItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MenuItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MenuItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MenuItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MenuItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MenuItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.MenuItemResponse";
  }
  protected:
  explicit MenuItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MenuItemResponse_Status Status;
  static constexpr Status OK =
    MenuItemResponse_Status_OK;
  static constexpr Status BAD_IDENTIFIER =
    MenuItemResponse_Status_BAD_IDENTIFIER;
  static constexpr Status DISABLED =
    MenuItemResponse_Status_DISABLED;
  static inline bool Status_IsValid(int value) {
    return MenuItemResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    MenuItemResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    MenuItemResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    MenuItemResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return MenuItemResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return MenuItemResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return MenuItemResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCheckedFieldNumber = 2,
    kEnabledFieldNumber = 3,
  };
  // optional .iterm2.MenuItemResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::MenuItemResponse_Status status() const;
  void set_status(::iterm2::MenuItemResponse_Status value);
  private:
  ::iterm2::MenuItemResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::MenuItemResponse_Status value);
  public:

  // optional bool checked = 2;
  bool has_checked() const;
  private:
  bool _internal_has_checked() const;
  public:
  void clear_checked();
  bool checked() const;
  void set_checked(bool value);
  private:
  bool _internal_checked() const;
  void _internal_set_checked(bool value);
  public:

  // optional bool enabled = 3;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.MenuItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  bool checked_;
  bool enabled_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RestartSessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RestartSessionRequest) */ {
 public:
  inline RestartSessionRequest() : RestartSessionRequest(nullptr) {}
  ~RestartSessionRequest() override;
  explicit constexpr RestartSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestartSessionRequest(const RestartSessionRequest& from);
  RestartSessionRequest(RestartSessionRequest&& from) noexcept
    : RestartSessionRequest() {
    *this = ::std::move(from);
  }

  inline RestartSessionRequest& operator=(const RestartSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartSessionRequest& operator=(RestartSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestartSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestartSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RestartSessionRequest*>(
               &_RestartSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(RestartSessionRequest& a, RestartSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestartSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestartSessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestartSessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RestartSessionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartSessionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RestartSessionRequest";
  }
  protected:
  explicit RestartSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kOnlyIfExitedFieldNumber = 2,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional bool only_if_exited = 2;
  bool has_only_if_exited() const;
  private:
  bool _internal_has_only_if_exited() const;
  public:
  void clear_only_if_exited();
  bool only_if_exited() const;
  void set_only_if_exited(bool value);
  private:
  bool _internal_only_if_exited() const;
  void _internal_set_only_if_exited(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RestartSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  bool only_if_exited_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RestartSessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RestartSessionResponse) */ {
 public:
  inline RestartSessionResponse() : RestartSessionResponse(nullptr) {}
  ~RestartSessionResponse() override;
  explicit constexpr RestartSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestartSessionResponse(const RestartSessionResponse& from);
  RestartSessionResponse(RestartSessionResponse&& from) noexcept
    : RestartSessionResponse() {
    *this = ::std::move(from);
  }

  inline RestartSessionResponse& operator=(const RestartSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartSessionResponse& operator=(RestartSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestartSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestartSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RestartSessionResponse*>(
               &_RestartSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(RestartSessionResponse& a, RestartSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartSessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestartSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestartSessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestartSessionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RestartSessionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartSessionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RestartSessionResponse";
  }
  protected:
  explicit RestartSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RestartSessionResponse_Status Status;
  static constexpr Status OK =
    RestartSessionResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    RestartSessionResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status SESSION_NOT_RESTARTABLE =
    RestartSessionResponse_Status_SESSION_NOT_RESTARTABLE;
  static inline bool Status_IsValid(int value) {
    return RestartSessionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RestartSessionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RestartSessionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RestartSessionResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RestartSessionResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RestartSessionResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RestartSessionResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.RestartSessionResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::RestartSessionResponse_Status status() const;
  void set_status(::iterm2::RestartSessionResponse_Status value);
  private:
  ::iterm2::RestartSessionResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::RestartSessionResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RestartSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ServerOriginatedRPCResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ServerOriginatedRPCResultRequest) */ {
 public:
  inline ServerOriginatedRPCResultRequest() : ServerOriginatedRPCResultRequest(nullptr) {}
  ~ServerOriginatedRPCResultRequest() override;
  explicit constexpr ServerOriginatedRPCResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerOriginatedRPCResultRequest(const ServerOriginatedRPCResultRequest& from);
  ServerOriginatedRPCResultRequest(ServerOriginatedRPCResultRequest&& from) noexcept
    : ServerOriginatedRPCResultRequest() {
    *this = ::std::move(from);
  }

  inline ServerOriginatedRPCResultRequest& operator=(const ServerOriginatedRPCResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOriginatedRPCResultRequest& operator=(ServerOriginatedRPCResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerOriginatedRPCResultRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kJsonException = 2,
    kJsonValue = 3,
    RESULT_NOT_SET = 0,
  };

  static inline const ServerOriginatedRPCResultRequest* internal_default_instance() {
    return reinterpret_cast<const ServerOriginatedRPCResultRequest*>(
               &_ServerOriginatedRPCResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ServerOriginatedRPCResultRequest& a, ServerOriginatedRPCResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOriginatedRPCResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOriginatedRPCResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerOriginatedRPCResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerOriginatedRPCResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerOriginatedRPCResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerOriginatedRPCResultRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOriginatedRPCResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ServerOriginatedRPCResultRequest";
  }
  protected:
  explicit ServerOriginatedRPCResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kJsonExceptionFieldNumber = 2,
    kJsonValueFieldNumber = 3,
  };
  // optional string request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string json_exception = 2;
  bool has_json_exception() const;
  private:
  bool _internal_has_json_exception() const;
  public:
  void clear_json_exception();
  const std::string& json_exception() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_exception(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_exception();
  PROTOBUF_NODISCARD std::string* release_json_exception();
  void set_allocated_json_exception(std::string* json_exception);
  private:
  const std::string& _internal_json_exception() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_exception(const std::string& value);
  std::string* _internal_mutable_json_exception();
  public:

  // string json_value = 3;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.ServerOriginatedRPCResultRequest)
 private:
  class _Internal;
  void set_has_json_exception();
  void set_has_json_value();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  union ResultUnion {
    constexpr ResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_exception_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  } result_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ServerOriginatedRPCResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.ServerOriginatedRPCResultResponse) */ {
 public:
  inline ServerOriginatedRPCResultResponse() : ServerOriginatedRPCResultResponse(nullptr) {}
  explicit constexpr ServerOriginatedRPCResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerOriginatedRPCResultResponse(const ServerOriginatedRPCResultResponse& from);
  ServerOriginatedRPCResultResponse(ServerOriginatedRPCResultResponse&& from) noexcept
    : ServerOriginatedRPCResultResponse() {
    *this = ::std::move(from);
  }

  inline ServerOriginatedRPCResultResponse& operator=(const ServerOriginatedRPCResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOriginatedRPCResultResponse& operator=(ServerOriginatedRPCResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerOriginatedRPCResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerOriginatedRPCResultResponse* internal_default_instance() {
    return reinterpret_cast<const ServerOriginatedRPCResultResponse*>(
               &_ServerOriginatedRPCResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ServerOriginatedRPCResultResponse& a, ServerOriginatedRPCResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOriginatedRPCResultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOriginatedRPCResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerOriginatedRPCResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerOriginatedRPCResultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ServerOriginatedRPCResultResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ServerOriginatedRPCResultResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ServerOriginatedRPCResultResponse";
  }
  protected:
  explicit ServerOriginatedRPCResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.ServerOriginatedRPCResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListProfilesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListProfilesRequest) */ {
 public:
  inline ListProfilesRequest() : ListProfilesRequest(nullptr) {}
  ~ListProfilesRequest() override;
  explicit constexpr ListProfilesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProfilesRequest(const ListProfilesRequest& from);
  ListProfilesRequest(ListProfilesRequest&& from) noexcept
    : ListProfilesRequest() {
    *this = ::std::move(from);
  }

  inline ListProfilesRequest& operator=(const ListProfilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProfilesRequest& operator=(ListProfilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProfilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProfilesRequest* internal_default_instance() {
    return reinterpret_cast<const ListProfilesRequest*>(
               &_ListProfilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ListProfilesRequest& a, ListProfilesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProfilesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProfilesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListProfilesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListProfilesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProfilesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProfilesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProfilesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListProfilesRequest";
  }
  protected:
  explicit ListProfilesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
    kGuidsFieldNumber = 2,
  };
  // repeated string properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  const std::string& properties(int index) const;
  std::string* mutable_properties(int index);
  void set_properties(int index, const std::string& value);
  void set_properties(int index, std::string&& value);
  void set_properties(int index, const char* value);
  void set_properties(int index, const char* value, size_t size);
  std::string* add_properties();
  void add_properties(const std::string& value);
  void add_properties(std::string&& value);
  void add_properties(const char* value);
  void add_properties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_properties();
  private:
  const std::string& _internal_properties(int index) const;
  std::string* _internal_add_properties();
  public:

  // repeated string guids = 2;
  int guids_size() const;
  private:
  int _internal_guids_size() const;
  public:
  void clear_guids();
  const std::string& guids(int index) const;
  std::string* mutable_guids(int index);
  void set_guids(int index, const std::string& value);
  void set_guids(int index, std::string&& value);
  void set_guids(int index, const char* value);
  void set_guids(int index, const char* value, size_t size);
  std::string* add_guids();
  void add_guids(const std::string& value);
  void add_guids(std::string&& value);
  void add_guids(const char* value);
  void add_guids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& guids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_guids();
  private:
  const std::string& _internal_guids(int index) const;
  std::string* _internal_add_guids();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ListProfilesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> guids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListProfilesResponse_Profile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListProfilesResponse.Profile) */ {
 public:
  inline ListProfilesResponse_Profile() : ListProfilesResponse_Profile(nullptr) {}
  ~ListProfilesResponse_Profile() override;
  explicit constexpr ListProfilesResponse_Profile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProfilesResponse_Profile(const ListProfilesResponse_Profile& from);
  ListProfilesResponse_Profile(ListProfilesResponse_Profile&& from) noexcept
    : ListProfilesResponse_Profile() {
    *this = ::std::move(from);
  }

  inline ListProfilesResponse_Profile& operator=(const ListProfilesResponse_Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProfilesResponse_Profile& operator=(ListProfilesResponse_Profile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProfilesResponse_Profile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProfilesResponse_Profile* internal_default_instance() {
    return reinterpret_cast<const ListProfilesResponse_Profile*>(
               &_ListProfilesResponse_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ListProfilesResponse_Profile& a, ListProfilesResponse_Profile& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProfilesResponse_Profile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProfilesResponse_Profile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListProfilesResponse_Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListProfilesResponse_Profile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProfilesResponse_Profile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProfilesResponse_Profile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProfilesResponse_Profile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListProfilesResponse.Profile";
  }
  protected:
  explicit ListProfilesResponse_Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .iterm2.ProfileProperty properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::iterm2::ProfileProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
      mutable_properties();
  private:
  const ::iterm2::ProfileProperty& _internal_properties(int index) const;
  ::iterm2::ProfileProperty* _internal_add_properties();
  public:
  const ::iterm2::ProfileProperty& properties(int index) const;
  ::iterm2::ProfileProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:iterm2.ListProfilesResponse.Profile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListProfilesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListProfilesResponse) */ {
 public:
  inline ListProfilesResponse() : ListProfilesResponse(nullptr) {}
  ~ListProfilesResponse() override;
  explicit constexpr ListProfilesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProfilesResponse(const ListProfilesResponse& from);
  ListProfilesResponse(ListProfilesResponse&& from) noexcept
    : ListProfilesResponse() {
    *this = ::std::move(from);
  }

  inline ListProfilesResponse& operator=(const ListProfilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProfilesResponse& operator=(ListProfilesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProfilesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProfilesResponse* internal_default_instance() {
    return reinterpret_cast<const ListProfilesResponse*>(
               &_ListProfilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ListProfilesResponse& a, ListProfilesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProfilesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProfilesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListProfilesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListProfilesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProfilesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProfilesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProfilesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListProfilesResponse";
  }
  protected:
  explicit ListProfilesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListProfilesResponse_Profile Profile;

  // accessors -------------------------------------------------------

  enum : int {
    kProfilesFieldNumber = 1,
  };
  // repeated .iterm2.ListProfilesResponse.Profile profiles = 1;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;
  public:
  void clear_profiles();
  ::iterm2::ListProfilesResponse_Profile* mutable_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListProfilesResponse_Profile >*
      mutable_profiles();
  private:
  const ::iterm2::ListProfilesResponse_Profile& _internal_profiles(int index) const;
  ::iterm2::ListProfilesResponse_Profile* _internal_add_profiles();
  public:
  const ::iterm2::ListProfilesResponse_Profile& profiles(int index) const;
  ::iterm2::ListProfilesResponse_Profile* add_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListProfilesResponse_Profile >&
      profiles() const;

  // @@protoc_insertion_point(class_scope:iterm2.ListProfilesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListProfilesResponse_Profile > profiles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class FocusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.FocusRequest) */ {
 public:
  inline FocusRequest() : FocusRequest(nullptr) {}
  explicit constexpr FocusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusRequest(const FocusRequest& from);
  FocusRequest(FocusRequest&& from) noexcept
    : FocusRequest() {
    *this = ::std::move(from);
  }

  inline FocusRequest& operator=(const FocusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusRequest& operator=(FocusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusRequest* internal_default_instance() {
    return reinterpret_cast<const FocusRequest*>(
               &_FocusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(FocusRequest& a, FocusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FocusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FocusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.FocusRequest";
  }
  protected:
  explicit FocusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.FocusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class FocusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.FocusResponse) */ {
 public:
  inline FocusResponse() : FocusResponse(nullptr) {}
  ~FocusResponse() override;
  explicit constexpr FocusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusResponse(const FocusResponse& from);
  FocusResponse(FocusResponse&& from) noexcept
    : FocusResponse() {
    *this = ::std::move(from);
  }

  inline FocusResponse& operator=(const FocusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusResponse& operator=(FocusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusResponse* internal_default_instance() {
    return reinterpret_cast<const FocusResponse*>(
               &_FocusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(FocusResponse& a, FocusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FocusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.FocusResponse";
  }
  protected:
  explicit FocusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
  };
  // repeated .iterm2.FocusChangedNotification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::iterm2::FocusChangedNotification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::FocusChangedNotification >*
      mutable_notifications();
  private:
  const ::iterm2::FocusChangedNotification& _internal_notifications(int index) const;
  ::iterm2::FocusChangedNotification* _internal_add_notifications();
  public:
  const ::iterm2::FocusChangedNotification& notifications(int index) const;
  ::iterm2::FocusChangedNotification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::FocusChangedNotification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:iterm2.FocusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::FocusChangedNotification > notifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SavedArrangementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SavedArrangementRequest) */ {
 public:
  inline SavedArrangementRequest() : SavedArrangementRequest(nullptr) {}
  ~SavedArrangementRequest() override;
  explicit constexpr SavedArrangementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavedArrangementRequest(const SavedArrangementRequest& from);
  SavedArrangementRequest(SavedArrangementRequest&& from) noexcept
    : SavedArrangementRequest() {
    *this = ::std::move(from);
  }

  inline SavedArrangementRequest& operator=(const SavedArrangementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedArrangementRequest& operator=(SavedArrangementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SavedArrangementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavedArrangementRequest* internal_default_instance() {
    return reinterpret_cast<const SavedArrangementRequest*>(
               &_SavedArrangementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SavedArrangementRequest& a, SavedArrangementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SavedArrangementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedArrangementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SavedArrangementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SavedArrangementRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SavedArrangementRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SavedArrangementRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavedArrangementRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SavedArrangementRequest";
  }
  protected:
  explicit SavedArrangementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SavedArrangementRequest_Action Action;
  static constexpr Action RESTORE =
    SavedArrangementRequest_Action_RESTORE;
  static constexpr Action SAVE =
    SavedArrangementRequest_Action_SAVE;
  static constexpr Action LIST =
    SavedArrangementRequest_Action_LIST;
  static inline bool Action_IsValid(int value) {
    return SavedArrangementRequest_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    SavedArrangementRequest_Action_Action_MIN;
  static constexpr Action Action_MAX =
    SavedArrangementRequest_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    SavedArrangementRequest_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return SavedArrangementRequest_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return SavedArrangementRequest_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return SavedArrangementRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWindowIdFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string window_id = 3;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // optional .iterm2.SavedArrangementRequest.Action action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::iterm2::SavedArrangementRequest_Action action() const;
  void set_action(::iterm2::SavedArrangementRequest_Action value);
  private:
  ::iterm2::SavedArrangementRequest_Action _internal_action() const;
  void _internal_set_action(::iterm2::SavedArrangementRequest_Action value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SavedArrangementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  int action_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SavedArrangementResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SavedArrangementResponse) */ {
 public:
  inline SavedArrangementResponse() : SavedArrangementResponse(nullptr) {}
  ~SavedArrangementResponse() override;
  explicit constexpr SavedArrangementResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavedArrangementResponse(const SavedArrangementResponse& from);
  SavedArrangementResponse(SavedArrangementResponse&& from) noexcept
    : SavedArrangementResponse() {
    *this = ::std::move(from);
  }

  inline SavedArrangementResponse& operator=(const SavedArrangementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedArrangementResponse& operator=(SavedArrangementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SavedArrangementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavedArrangementResponse* internal_default_instance() {
    return reinterpret_cast<const SavedArrangementResponse*>(
               &_SavedArrangementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SavedArrangementResponse& a, SavedArrangementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SavedArrangementResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedArrangementResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SavedArrangementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SavedArrangementResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SavedArrangementResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SavedArrangementResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavedArrangementResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SavedArrangementResponse";
  }
  protected:
  explicit SavedArrangementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SavedArrangementResponse_Status Status;
  static constexpr Status OK =
    SavedArrangementResponse_Status_OK;
  static constexpr Status ARRANGEMENT_NOT_FOUND =
    SavedArrangementResponse_Status_ARRANGEMENT_NOT_FOUND;
  static constexpr Status WINDOW_NOT_FOUND =
    SavedArrangementResponse_Status_WINDOW_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    SavedArrangementResponse_Status_REQUEST_MALFORMED;
  static inline bool Status_IsValid(int value) {
    return SavedArrangementResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SavedArrangementResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SavedArrangementResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SavedArrangementResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SavedArrangementResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SavedArrangementResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SavedArrangementResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // optional .iterm2.SavedArrangementResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SavedArrangementResponse_Status status() const;
  void set_status(::iterm2::SavedArrangementResponse_Status value);
  private:
  ::iterm2::SavedArrangementResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SavedArrangementResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SavedArrangementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class VariableRequest_Set final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.VariableRequest.Set) */ {
 public:
  inline VariableRequest_Set() : VariableRequest_Set(nullptr) {}
  ~VariableRequest_Set() override;
  explicit constexpr VariableRequest_Set(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableRequest_Set(const VariableRequest_Set& from);
  VariableRequest_Set(VariableRequest_Set&& from) noexcept
    : VariableRequest_Set() {
    *this = ::std::move(from);
  }

  inline VariableRequest_Set& operator=(const VariableRequest_Set& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableRequest_Set& operator=(VariableRequest_Set&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableRequest_Set& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableRequest_Set* internal_default_instance() {
    return reinterpret_cast<const VariableRequest_Set*>(
               &_VariableRequest_Set_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(VariableRequest_Set& a, VariableRequest_Set& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableRequest_Set* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableRequest_Set* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableRequest_Set* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableRequest_Set>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableRequest_Set& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableRequest_Set& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableRequest_Set* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.VariableRequest.Set";
  }
  protected:
  explicit VariableRequest_Set(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.VariableRequest.Set)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class VariableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.VariableRequest) */ {
 public:
  inline VariableRequest() : VariableRequest(nullptr) {}
  ~VariableRequest() override;
  explicit constexpr VariableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableRequest(const VariableRequest& from);
  VariableRequest(VariableRequest&& from) noexcept
    : VariableRequest() {
    *this = ::std::move(from);
  }

  inline VariableRequest& operator=(const VariableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableRequest& operator=(VariableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ScopeCase {
    kSessionId = 1,
    kTabId = 4,
    kApp = 5,
    kWindowId = 6,
    SCOPE_NOT_SET = 0,
  };

  static inline const VariableRequest* internal_default_instance() {
    return reinterpret_cast<const VariableRequest*>(
               &_VariableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(VariableRequest& a, VariableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.VariableRequest";
  }
  protected:
  explicit VariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VariableRequest_Set Set;

  // accessors -------------------------------------------------------

  enum : int {
    kSetFieldNumber = 2,
    kGetFieldNumber = 3,
    kSessionIdFieldNumber = 1,
    kTabIdFieldNumber = 4,
    kAppFieldNumber = 5,
    kWindowIdFieldNumber = 6,
  };
  // repeated .iterm2.VariableRequest.Set set = 2;
  int set_size() const;
  private:
  int _internal_set_size() const;
  public:
  void clear_set();
  ::iterm2::VariableRequest_Set* mutable_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::VariableRequest_Set >*
      mutable_set();
  private:
  const ::iterm2::VariableRequest_Set& _internal_set(int index) const;
  ::iterm2::VariableRequest_Set* _internal_add_set();
  public:
  const ::iterm2::VariableRequest_Set& set(int index) const;
  ::iterm2::VariableRequest_Set* add_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::VariableRequest_Set >&
      set() const;

  // repeated string get = 3;
  int get_size() const;
  private:
  int _internal_get_size() const;
  public:
  void clear_get();
  const std::string& get(int index) const;
  std::string* mutable_get(int index);
  void set_get(int index, const std::string& value);
  void set_get(int index, std::string&& value);
  void set_get(int index, const char* value);
  void set_get(int index, const char* value, size_t size);
  std::string* add_get();
  void add_get(const std::string& value);
  void add_get(std::string&& value);
  void add_get(const char* value);
  void add_get(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& get() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_get();
  private:
  const std::string& _internal_get(int index) const;
  std::string* _internal_add_get();
  public:

  // string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string tab_id = 4;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  const std::string& tab_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tab_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tab_id();
  PROTOBUF_NODISCARD std::string* release_tab_id();
  void set_allocated_tab_id(std::string* tab_id);
  private:
  const std::string& _internal_tab_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tab_id(const std::string& value);
  std::string* _internal_mutable_tab_id();
  public:

  // bool app = 5;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  bool app() const;
  void set_app(bool value);
  private:
  bool _internal_app() const;
  void _internal_set_app(bool value);
  public:

  // string window_id = 6;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  void clear_scope();
  ScopeCase scope_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.VariableRequest)
 private:
  class _Internal;
  void set_has_session_id();
  void set_has_tab_id();
  void set_has_app();
  void set_has_window_id();

  inline bool has_scope() const;
  inline void clear_has_scope();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::VariableRequest_Set > set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> get_;
  union ScopeUnion {
    constexpr ScopeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tab_id_;
    bool app_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  } scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class VariableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.VariableResponse) */ {
 public:
  inline VariableResponse() : VariableResponse(nullptr) {}
  ~VariableResponse() override;
  explicit constexpr VariableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableResponse(const VariableResponse& from);
  VariableResponse(VariableResponse&& from) noexcept
    : VariableResponse() {
    *this = ::std::move(from);
  }

  inline VariableResponse& operator=(const VariableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableResponse& operator=(VariableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableResponse* internal_default_instance() {
    return reinterpret_cast<const VariableResponse*>(
               &_VariableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(VariableResponse& a, VariableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.VariableResponse";
  }
  protected:
  explicit VariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VariableResponse_Status Status;
  static constexpr Status OK =
    VariableResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    VariableResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status INVALID_NAME =
    VariableResponse_Status_INVALID_NAME;
  static constexpr Status MISSING_SCOPE =
    VariableResponse_Status_MISSING_SCOPE;
  static constexpr Status TAB_NOT_FOUND =
    VariableResponse_Status_TAB_NOT_FOUND;
  static constexpr Status MULTI_GET_DISALLOWED =
    VariableResponse_Status_MULTI_GET_DISALLOWED;
  static constexpr Status WINDOW_NOT_FOUND =
    VariableResponse_Status_WINDOW_NOT_FOUND;
  static inline bool Status_IsValid(int value) {
    return VariableResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    VariableResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    VariableResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    VariableResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return VariableResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return VariableResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return VariableResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // optional .iterm2.VariableResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::VariableResponse_Status status() const;
  void set_status(::iterm2::VariableResponse_Status value);
  private:
  ::iterm2::VariableResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::VariableResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.VariableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ActivateRequest_App final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ActivateRequest.App) */ {
 public:
  inline ActivateRequest_App() : ActivateRequest_App(nullptr) {}
  ~ActivateRequest_App() override;
  explicit constexpr ActivateRequest_App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateRequest_App(const ActivateRequest_App& from);
  ActivateRequest_App(ActivateRequest_App&& from) noexcept
    : ActivateRequest_App() {
    *this = ::std::move(from);
  }

  inline ActivateRequest_App& operator=(const ActivateRequest_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateRequest_App& operator=(ActivateRequest_App&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateRequest_App& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateRequest_App* internal_default_instance() {
    return reinterpret_cast<const ActivateRequest_App*>(
               &_ActivateRequest_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ActivateRequest_App& a, ActivateRequest_App& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateRequest_App* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateRequest_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateRequest_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateRequest_App>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivateRequest_App& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivateRequest_App& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateRequest_App* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ActivateRequest.App";
  }
  protected:
  explicit ActivateRequest_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRaiseAllWindowsFieldNumber = 1,
    kIgnoringOtherAppsFieldNumber = 2,
  };
  // optional bool raise_all_windows = 1;
  bool has_raise_all_windows() const;
  private:
  bool _internal_has_raise_all_windows() const;
  public:
  void clear_raise_all_windows();
  bool raise_all_windows() const;
  void set_raise_all_windows(bool value);
  private:
  bool _internal_raise_all_windows() const;
  void _internal_set_raise_all_windows(bool value);
  public:

  // optional bool ignoring_other_apps = 2;
  bool has_ignoring_other_apps() const;
  private:
  bool _internal_has_ignoring_other_apps() const;
  public:
  void clear_ignoring_other_apps();
  bool ignoring_other_apps() const;
  void set_ignoring_other_apps(bool value);
  private:
  bool _internal_ignoring_other_apps() const;
  void _internal_set_ignoring_other_apps(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ActivateRequest.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool raise_all_windows_;
  bool ignoring_other_apps_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ActivateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ActivateRequest) */ {
 public:
  inline ActivateRequest() : ActivateRequest(nullptr) {}
  ~ActivateRequest() override;
  explicit constexpr ActivateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateRequest(const ActivateRequest& from);
  ActivateRequest(ActivateRequest&& from) noexcept
    : ActivateRequest() {
    *this = ::std::move(from);
  }

  inline ActivateRequest& operator=(const ActivateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateRequest& operator=(ActivateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdentifierCase {
    kWindowId = 1,
    kTabId = 2,
    kSessionId = 3,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const ActivateRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateRequest*>(
               &_ActivateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ActivateRequest& a, ActivateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ActivateRequest";
  }
  protected:
  explicit ActivateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActivateRequest_App App;

  // accessors -------------------------------------------------------

  enum : int {
    kActivateAppFieldNumber = 7,
    kOrderWindowFrontFieldNumber = 4,
    kSelectTabFieldNumber = 5,
    kSelectSessionFieldNumber = 6,
    kWindowIdFieldNumber = 1,
    kTabIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // optional .iterm2.ActivateRequest.App activate_app = 7;
  bool has_activate_app() const;
  private:
  bool _internal_has_activate_app() const;
  public:
  void clear_activate_app();
  const ::iterm2::ActivateRequest_App& activate_app() const;
  PROTOBUF_NODISCARD ::iterm2::ActivateRequest_App* release_activate_app();
  ::iterm2::ActivateRequest_App* mutable_activate_app();
  void set_allocated_activate_app(::iterm2::ActivateRequest_App* activate_app);
  private:
  const ::iterm2::ActivateRequest_App& _internal_activate_app() const;
  ::iterm2::ActivateRequest_App* _internal_mutable_activate_app();
  public:
  void unsafe_arena_set_allocated_activate_app(
      ::iterm2::ActivateRequest_App* activate_app);
  ::iterm2::ActivateRequest_App* unsafe_arena_release_activate_app();

  // optional bool order_window_front = 4;
  bool has_order_window_front() const;
  private:
  bool _internal_has_order_window_front() const;
  public:
  void clear_order_window_front();
  bool order_window_front() const;
  void set_order_window_front(bool value);
  private:
  bool _internal_order_window_front() const;
  void _internal_set_order_window_front(bool value);
  public:

  // optional bool select_tab = 5;
  bool has_select_tab() const;
  private:
  bool _internal_has_select_tab() const;
  public:
  void clear_select_tab();
  bool select_tab() const;
  void set_select_tab(bool value);
  private:
  bool _internal_select_tab() const;
  void _internal_set_select_tab(bool value);
  public:

  // optional bool select_session = 6;
  bool has_select_session() const;
  private:
  bool _internal_has_select_session() const;
  public:
  void clear_select_session();
  bool select_session() const;
  void set_select_session(bool value);
  private:
  bool _internal_select_session() const;
  void _internal_set_select_session(bool value);
  public:

  // string window_id = 1;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // string tab_id = 2;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  const std::string& tab_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tab_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tab_id();
  PROTOBUF_NODISCARD std::string* release_tab_id();
  void set_allocated_tab_id(std::string* tab_id);
  private:
  const std::string& _internal_tab_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tab_id(const std::string& value);
  std::string* _internal_mutable_tab_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.ActivateRequest)
 private:
  class _Internal;
  void set_has_window_id();
  void set_has_tab_id();
  void set_has_session_id();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::ActivateRequest_App* activate_app_;
  bool order_window_front_;
  bool select_tab_;
  bool select_session_;
  union IdentifierUnion {
    constexpr IdentifierUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tab_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  } identifier_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ActivateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ActivateResponse) */ {
 public:
  inline ActivateResponse() : ActivateResponse(nullptr) {}
  ~ActivateResponse() override;
  explicit constexpr ActivateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivateResponse(const ActivateResponse& from);
  ActivateResponse(ActivateResponse&& from) noexcept
    : ActivateResponse() {
    *this = ::std::move(from);
  }

  inline ActivateResponse& operator=(const ActivateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateResponse& operator=(ActivateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivateResponse* internal_default_instance() {
    return reinterpret_cast<const ActivateResponse*>(
               &_ActivateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ActivateResponse& a, ActivateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ActivateResponse";
  }
  protected:
  explicit ActivateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActivateResponse_Status Status;
  static constexpr Status OK =
    ActivateResponse_Status_OK;
  static constexpr Status BAD_IDENTIFIER =
    ActivateResponse_Status_BAD_IDENTIFIER;
  static constexpr Status INVALID_OPTION =
    ActivateResponse_Status_INVALID_OPTION;
  static inline bool Status_IsValid(int value) {
    return ActivateResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ActivateResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ActivateResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ActivateResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ActivateResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ActivateResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ActivateResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.ActivateResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::ActivateResponse_Status status() const;
  void set_status(::iterm2::ActivateResponse_Status value);
  private:
  ::iterm2::ActivateResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::ActivateResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ActivateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InjectRequest) */ {
 public:
  inline InjectRequest() : InjectRequest(nullptr) {}
  ~InjectRequest() override;
  explicit constexpr InjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InjectRequest(const InjectRequest& from);
  InjectRequest(InjectRequest&& from) noexcept
    : InjectRequest() {
    *this = ::std::move(from);
  }

  inline InjectRequest& operator=(const InjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectRequest& operator=(InjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InjectRequest* internal_default_instance() {
    return reinterpret_cast<const InjectRequest*>(
               &_InjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(InjectRequest& a, InjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InjectRequest";
  }
  protected:
  explicit InjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated string session_id = 1;
  int session_id_size() const;
  private:
  int _internal_session_id_size() const;
  public:
  void clear_session_id();
  const std::string& session_id(int index) const;
  std::string* mutable_session_id(int index);
  void set_session_id(int index, const std::string& value);
  void set_session_id(int index, std::string&& value);
  void set_session_id(int index, const char* value);
  void set_session_id(int index, const char* value, size_t size);
  std::string* add_session_id();
  void add_session_id(const std::string& value);
  void add_session_id(std::string&& value);
  void add_session_id(const char* value);
  void add_session_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_id();
  private:
  const std::string& _internal_session_id(int index) const;
  std::string* _internal_add_session_id();
  public:

  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.InjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class InjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.InjectResponse) */ {
 public:
  inline InjectResponse() : InjectResponse(nullptr) {}
  ~InjectResponse() override;
  explicit constexpr InjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InjectResponse(const InjectResponse& from);
  InjectResponse(InjectResponse&& from) noexcept
    : InjectResponse() {
    *this = ::std::move(from);
  }

  inline InjectResponse& operator=(const InjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectResponse& operator=(InjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InjectResponse* internal_default_instance() {
    return reinterpret_cast<const InjectResponse*>(
               &_InjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(InjectResponse& a, InjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.InjectResponse";
  }
  protected:
  explicit InjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InjectResponse_Status Status;
  static constexpr Status OK =
    InjectResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    InjectResponse_Status_SESSION_NOT_FOUND;
  static inline bool Status_IsValid(int value) {
    return InjectResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    InjectResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    InjectResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    InjectResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return InjectResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return InjectResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return InjectResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .iterm2.InjectResponse.Status status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  ::iterm2::InjectResponse_Status _internal_status(int index) const;
  void _internal_add_status(::iterm2::InjectResponse_Status value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_status();
  public:
  ::iterm2::InjectResponse_Status status(int index) const;
  void set_status(int index, ::iterm2::InjectResponse_Status value);
  void add_status(::iterm2::InjectResponse_Status value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_status();

  // @@protoc_insertion_point(class_scope:iterm2.InjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetPropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetPropertyRequest) */ {
 public:
  inline GetPropertyRequest() : GetPropertyRequest(nullptr) {}
  ~GetPropertyRequest() override;
  explicit constexpr GetPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertyRequest(const GetPropertyRequest& from);
  GetPropertyRequest(GetPropertyRequest&& from) noexcept
    : GetPropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertyRequest& operator=(const GetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertyRequest& operator=(GetPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdentifierCase {
    kWindowId = 1,
    kSessionId = 3,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const GetPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertyRequest*>(
               &_GetPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GetPropertyRequest& a, GetPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPropertyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetPropertyRequest";
  }
  protected:
  explicit GetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kWindowIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string window_id = 1;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.GetPropertyRequest)
 private:
  class _Internal;
  void set_has_window_id();
  void set_has_session_id();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union IdentifierUnion {
    constexpr IdentifierUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  } identifier_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetPropertyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetPropertyResponse) */ {
 public:
  inline GetPropertyResponse() : GetPropertyResponse(nullptr) {}
  ~GetPropertyResponse() override;
  explicit constexpr GetPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertyResponse(const GetPropertyResponse& from);
  GetPropertyResponse(GetPropertyResponse&& from) noexcept
    : GetPropertyResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertyResponse& operator=(const GetPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertyResponse& operator=(GetPropertyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertyResponse*>(
               &_GetPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetPropertyResponse& a, GetPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPropertyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetPropertyResponse";
  }
  protected:
  explicit GetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetPropertyResponse_Status Status;
  static constexpr Status OK =
    GetPropertyResponse_Status_OK;
  static constexpr Status UNRECOGNIZED_NAME =
    GetPropertyResponse_Status_UNRECOGNIZED_NAME;
  static constexpr Status INVALID_TARGET =
    GetPropertyResponse_Status_INVALID_TARGET;
  static inline bool Status_IsValid(int value) {
    return GetPropertyResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetPropertyResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetPropertyResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetPropertyResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetPropertyResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetPropertyResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetPropertyResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kJsonValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string json_value = 2;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // optional .iterm2.GetPropertyResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::GetPropertyResponse_Status status() const;
  void set_status(::iterm2::GetPropertyResponse_Status value);
  private:
  ::iterm2::GetPropertyResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::GetPropertyResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.GetPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetPropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetPropertyRequest) */ {
 public:
  inline SetPropertyRequest() : SetPropertyRequest(nullptr) {}
  ~SetPropertyRequest() override;
  explicit constexpr SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPropertyRequest(const SetPropertyRequest& from);
  SetPropertyRequest(SetPropertyRequest&& from) noexcept
    : SetPropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetPropertyRequest& operator=(const SetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPropertyRequest& operator=(SetPropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdentifierCase {
    kWindowId = 1,
    kSessionId = 5,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const SetPropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetPropertyRequest*>(
               &_SetPropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SetPropertyRequest& a, SetPropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPropertyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetPropertyRequest";
  }
  protected:
  explicit SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kJsonValueFieldNumber = 4,
    kWindowIdFieldNumber = 1,
    kSessionIdFieldNumber = 5,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string json_value = 4;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // string window_id = 1;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // string session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.SetPropertyRequest)
 private:
  class _Internal;
  void set_has_window_id();
  void set_has_session_id();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  union IdentifierUnion {
    constexpr IdentifierUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  } identifier_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetPropertyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetPropertyResponse) */ {
 public:
  inline SetPropertyResponse() : SetPropertyResponse(nullptr) {}
  ~SetPropertyResponse() override;
  explicit constexpr SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPropertyResponse(const SetPropertyResponse& from);
  SetPropertyResponse(SetPropertyResponse&& from) noexcept
    : SetPropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetPropertyResponse& operator=(const SetPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPropertyResponse& operator=(SetPropertyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetPropertyResponse*>(
               &_SetPropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(SetPropertyResponse& a, SetPropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPropertyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPropertyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPropertyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPropertyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPropertyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetPropertyResponse";
  }
  protected:
  explicit SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetPropertyResponse_Status Status;
  static constexpr Status OK =
    SetPropertyResponse_Status_OK;
  static constexpr Status UNRECOGNIZED_NAME =
    SetPropertyResponse_Status_UNRECOGNIZED_NAME;
  static constexpr Status INVALID_VALUE =
    SetPropertyResponse_Status_INVALID_VALUE;
  static constexpr Status INVALID_TARGET =
    SetPropertyResponse_Status_INVALID_TARGET;
  static constexpr Status DEFERRED =
    SetPropertyResponse_Status_DEFERRED;
  static constexpr Status IMPOSSIBLE =
    SetPropertyResponse_Status_IMPOSSIBLE;
  static constexpr Status FAILED =
    SetPropertyResponse_Status_FAILED;
  static inline bool Status_IsValid(int value) {
    return SetPropertyResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SetPropertyResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SetPropertyResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SetPropertyResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SetPropertyResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SetPropertyResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SetPropertyResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.SetPropertyResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SetPropertyResponse_Status status() const;
  void set_status(::iterm2::SetPropertyResponse_Status value);
  private:
  ::iterm2::SetPropertyResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SetPropertyResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SetPropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RegisterToolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RegisterToolRequest) */ {
 public:
  inline RegisterToolRequest() : RegisterToolRequest(nullptr) {}
  ~RegisterToolRequest() override;
  explicit constexpr RegisterToolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterToolRequest(const RegisterToolRequest& from);
  RegisterToolRequest(RegisterToolRequest&& from) noexcept
    : RegisterToolRequest() {
    *this = ::std::move(from);
  }

  inline RegisterToolRequest& operator=(const RegisterToolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterToolRequest& operator=(RegisterToolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterToolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterToolRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterToolRequest*>(
               &_RegisterToolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(RegisterToolRequest& a, RegisterToolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterToolRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterToolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterToolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterToolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterToolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterToolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToolRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RegisterToolRequest";
  }
  protected:
  explicit RegisterToolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterToolRequest_ToolType ToolType;
  static constexpr ToolType WEB_VIEW_TOOL =
    RegisterToolRequest_ToolType_WEB_VIEW_TOOL;
  static inline bool ToolType_IsValid(int value) {
    return RegisterToolRequest_ToolType_IsValid(value);
  }
  static constexpr ToolType ToolType_MIN =
    RegisterToolRequest_ToolType_ToolType_MIN;
  static constexpr ToolType ToolType_MAX =
    RegisterToolRequest_ToolType_ToolType_MAX;
  static constexpr int ToolType_ARRAYSIZE =
    RegisterToolRequest_ToolType_ToolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ToolType_descriptor() {
    return RegisterToolRequest_ToolType_descriptor();
  }
  template<typename T>
  static inline const std::string& ToolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ToolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ToolType_Name.");
    return RegisterToolRequest_ToolType_Name(enum_t_value);
  }
  static inline bool ToolType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ToolType* value) {
    return RegisterToolRequest_ToolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdentifierFieldNumber = 2,
    kURLFieldNumber = 4,
    kRevealIfAlreadyRegisteredFieldNumber = 5,
    kToolTypeFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional string URL = 4;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional bool reveal_if_already_registered = 5 [default = false];
  bool has_reveal_if_already_registered() const;
  private:
  bool _internal_has_reveal_if_already_registered() const;
  public:
  void clear_reveal_if_already_registered();
  bool reveal_if_already_registered() const;
  void set_reveal_if_already_registered(bool value);
  private:
  bool _internal_reveal_if_already_registered() const;
  void _internal_set_reveal_if_already_registered(bool value);
  public:

  // optional .iterm2.RegisterToolRequest.ToolType tool_type = 3 [default = WEB_VIEW_TOOL];
  bool has_tool_type() const;
  private:
  bool _internal_has_tool_type() const;
  public:
  void clear_tool_type();
  ::iterm2::RegisterToolRequest_ToolType tool_type() const;
  void set_tool_type(::iterm2::RegisterToolRequest_ToolType value);
  private:
  ::iterm2::RegisterToolRequest_ToolType _internal_tool_type() const;
  void _internal_set_tool_type(::iterm2::RegisterToolRequest_ToolType value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RegisterToolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  bool reveal_if_already_registered_;
  int tool_type_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_RPCArgumentSignature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.RPCArgumentSignature) */ {
 public:
  inline RPCRegistrationRequest_RPCArgumentSignature() : RPCRegistrationRequest_RPCArgumentSignature(nullptr) {}
  ~RPCRegistrationRequest_RPCArgumentSignature() override;
  explicit constexpr RPCRegistrationRequest_RPCArgumentSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_RPCArgumentSignature(const RPCRegistrationRequest_RPCArgumentSignature& from);
  RPCRegistrationRequest_RPCArgumentSignature(RPCRegistrationRequest_RPCArgumentSignature&& from) noexcept
    : RPCRegistrationRequest_RPCArgumentSignature() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_RPCArgumentSignature& operator=(const RPCRegistrationRequest_RPCArgumentSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_RPCArgumentSignature& operator=(RPCRegistrationRequest_RPCArgumentSignature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_RPCArgumentSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_RPCArgumentSignature* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_RPCArgumentSignature*>(
               &_RPCRegistrationRequest_RPCArgumentSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(RPCRegistrationRequest_RPCArgumentSignature& a, RPCRegistrationRequest_RPCArgumentSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_RPCArgumentSignature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_RPCArgumentSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_RPCArgumentSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_RPCArgumentSignature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_RPCArgumentSignature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_RPCArgumentSignature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_RPCArgumentSignature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.RPCArgumentSignature";
  }
  protected:
  explicit RPCRegistrationRequest_RPCArgumentSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_RPCArgument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.RPCArgument) */ {
 public:
  inline RPCRegistrationRequest_RPCArgument() : RPCRegistrationRequest_RPCArgument(nullptr) {}
  ~RPCRegistrationRequest_RPCArgument() override;
  explicit constexpr RPCRegistrationRequest_RPCArgument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_RPCArgument(const RPCRegistrationRequest_RPCArgument& from);
  RPCRegistrationRequest_RPCArgument(RPCRegistrationRequest_RPCArgument&& from) noexcept
    : RPCRegistrationRequest_RPCArgument() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_RPCArgument& operator=(const RPCRegistrationRequest_RPCArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_RPCArgument& operator=(RPCRegistrationRequest_RPCArgument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_RPCArgument& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_RPCArgument* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_RPCArgument*>(
               &_RPCRegistrationRequest_RPCArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(RPCRegistrationRequest_RPCArgument& a, RPCRegistrationRequest_RPCArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_RPCArgument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_RPCArgument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_RPCArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_RPCArgument>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_RPCArgument& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_RPCArgument& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_RPCArgument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.RPCArgument";
  }
  protected:
  explicit RPCRegistrationRequest_RPCArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.RPCArgument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_SessionTitleAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.SessionTitleAttributes) */ {
 public:
  inline RPCRegistrationRequest_SessionTitleAttributes() : RPCRegistrationRequest_SessionTitleAttributes(nullptr) {}
  ~RPCRegistrationRequest_SessionTitleAttributes() override;
  explicit constexpr RPCRegistrationRequest_SessionTitleAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_SessionTitleAttributes(const RPCRegistrationRequest_SessionTitleAttributes& from);
  RPCRegistrationRequest_SessionTitleAttributes(RPCRegistrationRequest_SessionTitleAttributes&& from) noexcept
    : RPCRegistrationRequest_SessionTitleAttributes() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_SessionTitleAttributes& operator=(const RPCRegistrationRequest_SessionTitleAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_SessionTitleAttributes& operator=(RPCRegistrationRequest_SessionTitleAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_SessionTitleAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_SessionTitleAttributes* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_SessionTitleAttributes*>(
               &_RPCRegistrationRequest_SessionTitleAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RPCRegistrationRequest_SessionTitleAttributes& a, RPCRegistrationRequest_SessionTitleAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_SessionTitleAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_SessionTitleAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_SessionTitleAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_SessionTitleAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_SessionTitleAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_SessionTitleAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_SessionTitleAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.SessionTitleAttributes";
  }
  protected:
  explicit RPCRegistrationRequest_SessionTitleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 1,
    kUniqueIdentifierFieldNumber = 6,
  };
  // optional string display_name = 1;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string unique_identifier = 6;
  bool has_unique_identifier() const;
  private:
  bool _internal_has_unique_identifier() const;
  public:
  void clear_unique_identifier();
  const std::string& unique_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_identifier();
  PROTOBUF_NODISCARD std::string* release_unique_identifier();
  void set_allocated_unique_identifier(std::string* unique_identifier);
  private:
  const std::string& _internal_unique_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_identifier(const std::string& value);
  std::string* _internal_mutable_unique_identifier();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_identifier_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_StatusBarComponentAttributes_Knob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob) */ {
 public:
  inline RPCRegistrationRequest_StatusBarComponentAttributes_Knob() : RPCRegistrationRequest_StatusBarComponentAttributes_Knob(nullptr) {}
  ~RPCRegistrationRequest_StatusBarComponentAttributes_Knob() override;
  explicit constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_StatusBarComponentAttributes_Knob(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from);
  RPCRegistrationRequest_StatusBarComponentAttributes_Knob(RPCRegistrationRequest_StatusBarComponentAttributes_Knob&& from) noexcept
    : RPCRegistrationRequest_StatusBarComponentAttributes_Knob() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_StatusBarComponentAttributes_Knob& operator=(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_StatusBarComponentAttributes_Knob& operator=(RPCRegistrationRequest_StatusBarComponentAttributes_Knob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_StatusBarComponentAttributes_Knob* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_StatusBarComponentAttributes_Knob*>(
               &_RPCRegistrationRequest_StatusBarComponentAttributes_Knob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(RPCRegistrationRequest_StatusBarComponentAttributes_Knob& a, RPCRegistrationRequest_StatusBarComponentAttributes_Knob& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_StatusBarComponentAttributes_Knob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_StatusBarComponentAttributes_Knob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_StatusBarComponentAttributes_Knob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_StatusBarComponentAttributes_Knob>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_StatusBarComponentAttributes_Knob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob";
  }
  protected:
  explicit RPCRegistrationRequest_StatusBarComponentAttributes_Knob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type Type;
  static constexpr Type Checkbox =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Checkbox;
  static constexpr Type String =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_String;
  static constexpr Type PositiveFloatingPoint =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_PositiveFloatingPoint;
  static constexpr Type Color =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Color;
  static inline bool Type_IsValid(int value) {
    return RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPlaceholderFieldNumber = 3,
    kJsonDefaultValueFieldNumber = 4,
    kKeyFieldNumber = 5,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string placeholder = 3;
  bool has_placeholder() const;
  private:
  bool _internal_has_placeholder() const;
  public:
  void clear_placeholder();
  const std::string& placeholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_placeholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_placeholder();
  PROTOBUF_NODISCARD std::string* release_placeholder();
  void set_allocated_placeholder(std::string* placeholder);
  private:
  const std::string& _internal_placeholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_placeholder(const std::string& value);
  std::string* _internal_mutable_placeholder();
  public:

  // optional string json_default_value = 4;
  bool has_json_default_value() const;
  private:
  bool _internal_has_json_default_value() const;
  public:
  void clear_json_default_value();
  const std::string& json_default_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_default_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_default_value();
  PROTOBUF_NODISCARD std::string* release_json_default_value();
  void set_allocated_json_default_value(std::string* json_default_value);
  private:
  const std::string& _internal_json_default_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_default_value(const std::string& value);
  std::string* _internal_mutable_json_default_value();
  public:

  // optional string key = 5;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type type() const;
  void set_type(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type value);
  private:
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type _internal_type() const;
  void _internal_set_type(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_default_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int type_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_StatusBarComponentAttributes_Icon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon) */ {
 public:
  inline RPCRegistrationRequest_StatusBarComponentAttributes_Icon() : RPCRegistrationRequest_StatusBarComponentAttributes_Icon(nullptr) {}
  ~RPCRegistrationRequest_StatusBarComponentAttributes_Icon() override;
  explicit constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Icon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_StatusBarComponentAttributes_Icon(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from);
  RPCRegistrationRequest_StatusBarComponentAttributes_Icon(RPCRegistrationRequest_StatusBarComponentAttributes_Icon&& from) noexcept
    : RPCRegistrationRequest_StatusBarComponentAttributes_Icon() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_StatusBarComponentAttributes_Icon& operator=(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_StatusBarComponentAttributes_Icon& operator=(RPCRegistrationRequest_StatusBarComponentAttributes_Icon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_StatusBarComponentAttributes_Icon* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_StatusBarComponentAttributes_Icon*>(
               &_RPCRegistrationRequest_StatusBarComponentAttributes_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(RPCRegistrationRequest_StatusBarComponentAttributes_Icon& a, RPCRegistrationRequest_StatusBarComponentAttributes_Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_StatusBarComponentAttributes_Icon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_StatusBarComponentAttributes_Icon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_StatusBarComponentAttributes_Icon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_StatusBarComponentAttributes_Icon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_StatusBarComponentAttributes_Icon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon";
  }
  protected:
  explicit RPCRegistrationRequest_StatusBarComponentAttributes_Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional float scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  float scale_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_StatusBarComponentAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes) */ {
 public:
  inline RPCRegistrationRequest_StatusBarComponentAttributes() : RPCRegistrationRequest_StatusBarComponentAttributes(nullptr) {}
  ~RPCRegistrationRequest_StatusBarComponentAttributes() override;
  explicit constexpr RPCRegistrationRequest_StatusBarComponentAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_StatusBarComponentAttributes(const RPCRegistrationRequest_StatusBarComponentAttributes& from);
  RPCRegistrationRequest_StatusBarComponentAttributes(RPCRegistrationRequest_StatusBarComponentAttributes&& from) noexcept
    : RPCRegistrationRequest_StatusBarComponentAttributes() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_StatusBarComponentAttributes& operator=(const RPCRegistrationRequest_StatusBarComponentAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_StatusBarComponentAttributes& operator=(RPCRegistrationRequest_StatusBarComponentAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_StatusBarComponentAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_StatusBarComponentAttributes* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_StatusBarComponentAttributes*>(
               &_RPCRegistrationRequest_StatusBarComponentAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(RPCRegistrationRequest_StatusBarComponentAttributes& a, RPCRegistrationRequest_StatusBarComponentAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_StatusBarComponentAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_StatusBarComponentAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_StatusBarComponentAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_StatusBarComponentAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_StatusBarComponentAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_StatusBarComponentAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_StatusBarComponentAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes";
  }
  protected:
  explicit RPCRegistrationRequest_StatusBarComponentAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RPCRegistrationRequest_StatusBarComponentAttributes_Knob Knob;
  typedef RPCRegistrationRequest_StatusBarComponentAttributes_Icon Icon;

  typedef RPCRegistrationRequest_StatusBarComponentAttributes_Format Format;
  static constexpr Format PLAIN_TEXT =
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_PLAIN_TEXT;
  static constexpr Format HTML =
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_HTML;
  static inline bool Format_IsValid(int value) {
    return RPCRegistrationRequest_StatusBarComponentAttributes_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_MIN;
  static constexpr Format Format_MAX =
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    RPCRegistrationRequest_StatusBarComponentAttributes_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return RPCRegistrationRequest_StatusBarComponentAttributes_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return RPCRegistrationRequest_StatusBarComponentAttributes_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Format* value) {
    return RPCRegistrationRequest_StatusBarComponentAttributes_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKnobsFieldNumber = 3,
    kIconsFieldNumber = 7,
    kShortDescriptionFieldNumber = 1,
    kDetailedDescriptionFieldNumber = 2,
    kExemplarFieldNumber = 4,
    kUniqueIdentifierFieldNumber = 6,
    kUpdateCadenceFieldNumber = 5,
    kFormatFieldNumber = 8,
  };
  // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob knobs = 3;
  int knobs_size() const;
  private:
  int _internal_knobs_size() const;
  public:
  void clear_knobs();
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* mutable_knobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob >*
      mutable_knobs();
  private:
  const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob& _internal_knobs(int index) const;
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* _internal_add_knobs();
  public:
  const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob& knobs(int index) const;
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* add_knobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob >&
      knobs() const;

  // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon icons = 7;
  int icons_size() const;
  private:
  int _internal_icons_size() const;
  public:
  void clear_icons();
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon >*
      mutable_icons();
  private:
  const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon& _internal_icons(int index) const;
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* _internal_add_icons();
  public:
  const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon& icons(int index) const;
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon >&
      icons() const;

  // optional string short_description = 1;
  bool has_short_description() const;
  private:
  bool _internal_has_short_description() const;
  public:
  void clear_short_description();
  const std::string& short_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_description();
  PROTOBUF_NODISCARD std::string* release_short_description();
  void set_allocated_short_description(std::string* short_description);
  private:
  const std::string& _internal_short_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_description(const std::string& value);
  std::string* _internal_mutable_short_description();
  public:

  // optional string detailed_description = 2;
  bool has_detailed_description() const;
  private:
  bool _internal_has_detailed_description() const;
  public:
  void clear_detailed_description();
  const std::string& detailed_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detailed_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detailed_description();
  PROTOBUF_NODISCARD std::string* release_detailed_description();
  void set_allocated_detailed_description(std::string* detailed_description);
  private:
  const std::string& _internal_detailed_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detailed_description(const std::string& value);
  std::string* _internal_mutable_detailed_description();
  public:

  // optional string exemplar = 4;
  bool has_exemplar() const;
  private:
  bool _internal_has_exemplar() const;
  public:
  void clear_exemplar();
  const std::string& exemplar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exemplar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exemplar();
  PROTOBUF_NODISCARD std::string* release_exemplar();
  void set_allocated_exemplar(std::string* exemplar);
  private:
  const std::string& _internal_exemplar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exemplar(const std::string& value);
  std::string* _internal_mutable_exemplar();
  public:

  // optional string unique_identifier = 6;
  bool has_unique_identifier() const;
  private:
  bool _internal_has_unique_identifier() const;
  public:
  void clear_unique_identifier();
  const std::string& unique_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_identifier();
  PROTOBUF_NODISCARD std::string* release_unique_identifier();
  void set_allocated_unique_identifier(std::string* unique_identifier);
  private:
  const std::string& _internal_unique_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_identifier(const std::string& value);
  std::string* _internal_mutable_unique_identifier();
  public:

  // optional float update_cadence = 5;
  bool has_update_cadence() const;
  private:
  bool _internal_has_update_cadence() const;
  public:
  void clear_update_cadence();
  float update_cadence() const;
  void set_update_cadence(float value);
  private:
  float _internal_update_cadence() const;
  void _internal_set_update_cadence(float value);
  public:

  // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Format format = 8 [default = PLAIN_TEXT];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format format() const;
  void set_format(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format value);
  private:
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format _internal_format() const;
  void _internal_set_format(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob > knobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon > icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detailed_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exemplar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_identifier_;
  float update_cadence_;
  int format_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest_ContextMenuAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest.ContextMenuAttributes) */ {
 public:
  inline RPCRegistrationRequest_ContextMenuAttributes() : RPCRegistrationRequest_ContextMenuAttributes(nullptr) {}
  ~RPCRegistrationRequest_ContextMenuAttributes() override;
  explicit constexpr RPCRegistrationRequest_ContextMenuAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest_ContextMenuAttributes(const RPCRegistrationRequest_ContextMenuAttributes& from);
  RPCRegistrationRequest_ContextMenuAttributes(RPCRegistrationRequest_ContextMenuAttributes&& from) noexcept
    : RPCRegistrationRequest_ContextMenuAttributes() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest_ContextMenuAttributes& operator=(const RPCRegistrationRequest_ContextMenuAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest_ContextMenuAttributes& operator=(RPCRegistrationRequest_ContextMenuAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest_ContextMenuAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRegistrationRequest_ContextMenuAttributes* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest_ContextMenuAttributes*>(
               &_RPCRegistrationRequest_ContextMenuAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(RPCRegistrationRequest_ContextMenuAttributes& a, RPCRegistrationRequest_ContextMenuAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest_ContextMenuAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest_ContextMenuAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest_ContextMenuAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest_ContextMenuAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest_ContextMenuAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest_ContextMenuAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest_ContextMenuAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest.ContextMenuAttributes";
  }
  protected:
  explicit RPCRegistrationRequest_ContextMenuAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 1,
    kUniqueIdentifierFieldNumber = 2,
  };
  // optional string display_name = 1;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string unique_identifier = 2;
  bool has_unique_identifier() const;
  private:
  bool _internal_has_unique_identifier() const;
  public:
  void clear_unique_identifier();
  const std::string& unique_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_identifier();
  PROTOBUF_NODISCARD std::string* release_unique_identifier();
  void set_allocated_unique_identifier(std::string* unique_identifier);
  private:
  const std::string& _internal_unique_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_identifier(const std::string& value);
  std::string* _internal_mutable_unique_identifier();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_identifier_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RPCRegistrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RPCRegistrationRequest) */ {
 public:
  inline RPCRegistrationRequest() : RPCRegistrationRequest(nullptr) {}
  ~RPCRegistrationRequest() override;
  explicit constexpr RPCRegistrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCRegistrationRequest(const RPCRegistrationRequest& from);
  RPCRegistrationRequest(RPCRegistrationRequest&& from) noexcept
    : RPCRegistrationRequest() {
    *this = ::std::move(from);
  }

  inline RPCRegistrationRequest& operator=(const RPCRegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRegistrationRequest& operator=(RPCRegistrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRegistrationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RoleSpecificAttributesCase {
    kSessionTitleAttributes = 7,
    kStatusBarComponentAttributes = 8,
    kContextMenuAttributes = 9,
    ROLESPECIFICATTRIBUTES_NOT_SET = 0,
  };

  static inline const RPCRegistrationRequest* internal_default_instance() {
    return reinterpret_cast<const RPCRegistrationRequest*>(
               &_RPCRegistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(RPCRegistrationRequest& a, RPCRegistrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCRegistrationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRegistrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRegistrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCRegistrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCRegistrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCRegistrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCRegistrationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RPCRegistrationRequest";
  }
  protected:
  explicit RPCRegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RPCRegistrationRequest_RPCArgumentSignature RPCArgumentSignature;
  typedef RPCRegistrationRequest_RPCArgument RPCArgument;
  typedef RPCRegistrationRequest_SessionTitleAttributes SessionTitleAttributes;
  typedef RPCRegistrationRequest_StatusBarComponentAttributes StatusBarComponentAttributes;
  typedef RPCRegistrationRequest_ContextMenuAttributes ContextMenuAttributes;

  typedef RPCRegistrationRequest_Role Role;
  static constexpr Role GENERIC =
    RPCRegistrationRequest_Role_GENERIC;
  static constexpr Role SESSION_TITLE =
    RPCRegistrationRequest_Role_SESSION_TITLE;
  static constexpr Role STATUS_BAR_COMPONENT =
    RPCRegistrationRequest_Role_STATUS_BAR_COMPONENT;
  static constexpr Role CONTEXT_MENU =
    RPCRegistrationRequest_Role_CONTEXT_MENU;
  static inline bool Role_IsValid(int value) {
    return RPCRegistrationRequest_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    RPCRegistrationRequest_Role_Role_MIN;
  static constexpr Role Role_MAX =
    RPCRegistrationRequest_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    RPCRegistrationRequest_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return RPCRegistrationRequest_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return RPCRegistrationRequest_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Role* value) {
    return RPCRegistrationRequest_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 2,
    kDefaultsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDisplayNameFieldNumber = 6,
    kTimeoutFieldNumber = 3,
    kRoleFieldNumber = 5,
    kSessionTitleAttributesFieldNumber = 7,
    kStatusBarComponentAttributesFieldNumber = 8,
    kContextMenuAttributesFieldNumber = 9,
  };
  // repeated .iterm2.RPCRegistrationRequest.RPCArgumentSignature arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature >*
      mutable_arguments();
  private:
  const ::iterm2::RPCRegistrationRequest_RPCArgumentSignature& _internal_arguments(int index) const;
  ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* _internal_add_arguments();
  public:
  const ::iterm2::RPCRegistrationRequest_RPCArgumentSignature& arguments(int index) const;
  ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature >&
      arguments() const;

  // repeated .iterm2.RPCRegistrationRequest.RPCArgument defaults = 4;
  int defaults_size() const;
  private:
  int _internal_defaults_size() const;
  public:
  void clear_defaults();
  ::iterm2::RPCRegistrationRequest_RPCArgument* mutable_defaults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgument >*
      mutable_defaults();
  private:
  const ::iterm2::RPCRegistrationRequest_RPCArgument& _internal_defaults(int index) const;
  ::iterm2::RPCRegistrationRequest_RPCArgument* _internal_add_defaults();
  public:
  const ::iterm2::RPCRegistrationRequest_RPCArgument& defaults(int index) const;
  ::iterm2::RPCRegistrationRequest_RPCArgument* add_defaults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgument >&
      defaults() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string display_name = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  PROTOBUF_DEPRECATED void clear_display_name();
  PROTOBUF_DEPRECATED const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_display_name(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_display_name();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_display_name();
  PROTOBUF_DEPRECATED void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional float timeout = 3;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  float timeout() const;
  void set_timeout(float value);
  private:
  float _internal_timeout() const;
  void _internal_set_timeout(float value);
  public:

  // optional .iterm2.RPCRegistrationRequest.Role role = 5 [default = GENERIC];
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::iterm2::RPCRegistrationRequest_Role role() const;
  void set_role(::iterm2::RPCRegistrationRequest_Role value);
  private:
  ::iterm2::RPCRegistrationRequest_Role _internal_role() const;
  void _internal_set_role(::iterm2::RPCRegistrationRequest_Role value);
  public:

  // .iterm2.RPCRegistrationRequest.SessionTitleAttributes session_title_attributes = 7;
  bool has_session_title_attributes() const;
  private:
  bool _internal_has_session_title_attributes() const;
  public:
  void clear_session_title_attributes();
  const ::iterm2::RPCRegistrationRequest_SessionTitleAttributes& session_title_attributes() const;
  PROTOBUF_NODISCARD ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* release_session_title_attributes();
  ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* mutable_session_title_attributes();
  void set_allocated_session_title_attributes(::iterm2::RPCRegistrationRequest_SessionTitleAttributes* session_title_attributes);
  private:
  const ::iterm2::RPCRegistrationRequest_SessionTitleAttributes& _internal_session_title_attributes() const;
  ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* _internal_mutable_session_title_attributes();
  public:
  void unsafe_arena_set_allocated_session_title_attributes(
      ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* session_title_attributes);
  ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* unsafe_arena_release_session_title_attributes();

  // .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes status_bar_component_attributes = 8;
  bool has_status_bar_component_attributes() const;
  private:
  bool _internal_has_status_bar_component_attributes() const;
  public:
  void clear_status_bar_component_attributes();
  const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes& status_bar_component_attributes() const;
  PROTOBUF_NODISCARD ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* release_status_bar_component_attributes();
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* mutable_status_bar_component_attributes();
  void set_allocated_status_bar_component_attributes(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* status_bar_component_attributes);
  private:
  const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes& _internal_status_bar_component_attributes() const;
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* _internal_mutable_status_bar_component_attributes();
  public:
  void unsafe_arena_set_allocated_status_bar_component_attributes(
      ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* status_bar_component_attributes);
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* unsafe_arena_release_status_bar_component_attributes();

  // .iterm2.RPCRegistrationRequest.ContextMenuAttributes context_menu_attributes = 9;
  bool has_context_menu_attributes() const;
  private:
  bool _internal_has_context_menu_attributes() const;
  public:
  void clear_context_menu_attributes();
  const ::iterm2::RPCRegistrationRequest_ContextMenuAttributes& context_menu_attributes() const;
  PROTOBUF_NODISCARD ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* release_context_menu_attributes();
  ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* mutable_context_menu_attributes();
  void set_allocated_context_menu_attributes(::iterm2::RPCRegistrationRequest_ContextMenuAttributes* context_menu_attributes);
  private:
  const ::iterm2::RPCRegistrationRequest_ContextMenuAttributes& _internal_context_menu_attributes() const;
  ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* _internal_mutable_context_menu_attributes();
  public:
  void unsafe_arena_set_allocated_context_menu_attributes(
      ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* context_menu_attributes);
  ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* unsafe_arena_release_context_menu_attributes();

  void clear_RoleSpecificAttributes();
  RoleSpecificAttributesCase RoleSpecificAttributes_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.RPCRegistrationRequest)
 private:
  class _Internal;
  void set_has_session_title_attributes();
  void set_has_status_bar_component_attributes();
  void set_has_context_menu_attributes();

  inline bool has_RoleSpecificAttributes() const;
  inline void clear_has_RoleSpecificAttributes();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature > arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgument > defaults_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  float timeout_;
  int role_;
  union RoleSpecificAttributesUnion {
    constexpr RoleSpecificAttributesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* session_title_attributes_;
    ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* status_bar_component_attributes_;
    ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* context_menu_attributes_;
  } RoleSpecificAttributes_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class RegisterToolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.RegisterToolResponse) */ {
 public:
  inline RegisterToolResponse() : RegisterToolResponse(nullptr) {}
  ~RegisterToolResponse() override;
  explicit constexpr RegisterToolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterToolResponse(const RegisterToolResponse& from);
  RegisterToolResponse(RegisterToolResponse&& from) noexcept
    : RegisterToolResponse() {
    *this = ::std::move(from);
  }

  inline RegisterToolResponse& operator=(const RegisterToolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterToolResponse& operator=(RegisterToolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterToolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterToolResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterToolResponse*>(
               &_RegisterToolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(RegisterToolResponse& a, RegisterToolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterToolResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterToolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterToolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterToolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterToolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterToolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToolResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.RegisterToolResponse";
  }
  protected:
  explicit RegisterToolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterToolResponse_Status Status;
  static constexpr Status OK =
    RegisterToolResponse_Status_OK;
  static constexpr Status REQUEST_MALFORMED =
    RegisterToolResponse_Status_REQUEST_MALFORMED;
  static constexpr Status PERMISSION_DENIED =
    RegisterToolResponse_Status_PERMISSION_DENIED;
  static inline bool Status_IsValid(int value) {
    return RegisterToolResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RegisterToolResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RegisterToolResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RegisterToolResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RegisterToolResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RegisterToolResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RegisterToolResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.RegisterToolResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::RegisterToolResponse_Status status() const;
  void set_status(::iterm2::RegisterToolResponse_Status value);
  private:
  ::iterm2::RegisterToolResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::RegisterToolResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.RegisterToolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class KeystrokePattern final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.KeystrokePattern) */ {
 public:
  inline KeystrokePattern() : KeystrokePattern(nullptr) {}
  ~KeystrokePattern() override;
  explicit constexpr KeystrokePattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeystrokePattern(const KeystrokePattern& from);
  KeystrokePattern(KeystrokePattern&& from) noexcept
    : KeystrokePattern() {
    *this = ::std::move(from);
  }

  inline KeystrokePattern& operator=(const KeystrokePattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystrokePattern& operator=(KeystrokePattern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeystrokePattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeystrokePattern* internal_default_instance() {
    return reinterpret_cast<const KeystrokePattern*>(
               &_KeystrokePattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(KeystrokePattern& a, KeystrokePattern& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystrokePattern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeystrokePattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeystrokePattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeystrokePattern>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeystrokePattern& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeystrokePattern& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeystrokePattern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.KeystrokePattern";
  }
  protected:
  explicit KeystrokePattern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredModifiersFieldNumber = 1,
    kForbiddenModifiersFieldNumber = 2,
    kKeycodesFieldNumber = 3,
    kCharactersFieldNumber = 4,
    kCharactersIgnoringModifiersFieldNumber = 5,
  };
  // repeated .iterm2.Modifiers required_modifiers = 1;
  int required_modifiers_size() const;
  private:
  int _internal_required_modifiers_size() const;
  public:
  void clear_required_modifiers();
  private:
  ::iterm2::Modifiers _internal_required_modifiers(int index) const;
  void _internal_add_required_modifiers(::iterm2::Modifiers value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_required_modifiers();
  public:
  ::iterm2::Modifiers required_modifiers(int index) const;
  void set_required_modifiers(int index, ::iterm2::Modifiers value);
  void add_required_modifiers(::iterm2::Modifiers value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& required_modifiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_required_modifiers();

  // repeated .iterm2.Modifiers forbidden_modifiers = 2;
  int forbidden_modifiers_size() const;
  private:
  int _internal_forbidden_modifiers_size() const;
  public:
  void clear_forbidden_modifiers();
  private:
  ::iterm2::Modifiers _internal_forbidden_modifiers(int index) const;
  void _internal_add_forbidden_modifiers(::iterm2::Modifiers value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_forbidden_modifiers();
  public:
  ::iterm2::Modifiers forbidden_modifiers(int index) const;
  void set_forbidden_modifiers(int index, ::iterm2::Modifiers value);
  void add_forbidden_modifiers(::iterm2::Modifiers value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& forbidden_modifiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_forbidden_modifiers();

  // repeated int32 keycodes = 3;
  int keycodes_size() const;
  private:
  int _internal_keycodes_size() const;
  public:
  void clear_keycodes();
  private:
  int32_t _internal_keycodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_keycodes() const;
  void _internal_add_keycodes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_keycodes();
  public:
  int32_t keycodes(int index) const;
  void set_keycodes(int index, int32_t value);
  void add_keycodes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      keycodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_keycodes();

  // repeated string characters = 4;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  const std::string& characters(int index) const;
  std::string* mutable_characters(int index);
  void set_characters(int index, const std::string& value);
  void set_characters(int index, std::string&& value);
  void set_characters(int index, const char* value);
  void set_characters(int index, const char* value, size_t size);
  std::string* add_characters();
  void add_characters(const std::string& value);
  void add_characters(std::string&& value);
  void add_characters(const char* value);
  void add_characters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& characters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_characters();
  private:
  const std::string& _internal_characters(int index) const;
  std::string* _internal_add_characters();
  public:

  // repeated string characters_ignoring_modifiers = 5;
  int characters_ignoring_modifiers_size() const;
  private:
  int _internal_characters_ignoring_modifiers_size() const;
  public:
  void clear_characters_ignoring_modifiers();
  const std::string& characters_ignoring_modifiers(int index) const;
  std::string* mutable_characters_ignoring_modifiers(int index);
  void set_characters_ignoring_modifiers(int index, const std::string& value);
  void set_characters_ignoring_modifiers(int index, std::string&& value);
  void set_characters_ignoring_modifiers(int index, const char* value);
  void set_characters_ignoring_modifiers(int index, const char* value, size_t size);
  std::string* add_characters_ignoring_modifiers();
  void add_characters_ignoring_modifiers(const std::string& value);
  void add_characters_ignoring_modifiers(std::string&& value);
  void add_characters_ignoring_modifiers(const char* value);
  void add_characters_ignoring_modifiers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& characters_ignoring_modifiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_characters_ignoring_modifiers();
  private:
  const std::string& _internal_characters_ignoring_modifiers(int index) const;
  std::string* _internal_add_characters_ignoring_modifiers();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.KeystrokePattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> required_modifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> forbidden_modifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > keycodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> characters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> characters_ignoring_modifiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class KeystrokeMonitorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.KeystrokeMonitorRequest) */ {
 public:
  inline KeystrokeMonitorRequest() : KeystrokeMonitorRequest(nullptr) {}
  ~KeystrokeMonitorRequest() override;
  explicit constexpr KeystrokeMonitorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeystrokeMonitorRequest(const KeystrokeMonitorRequest& from);
  KeystrokeMonitorRequest(KeystrokeMonitorRequest&& from) noexcept
    : KeystrokeMonitorRequest() {
    *this = ::std::move(from);
  }

  inline KeystrokeMonitorRequest& operator=(const KeystrokeMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystrokeMonitorRequest& operator=(KeystrokeMonitorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeystrokeMonitorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeystrokeMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const KeystrokeMonitorRequest*>(
               &_KeystrokeMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(KeystrokeMonitorRequest& a, KeystrokeMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystrokeMonitorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeystrokeMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeystrokeMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeystrokeMonitorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeystrokeMonitorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeystrokeMonitorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeystrokeMonitorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.KeystrokeMonitorRequest";
  }
  protected:
  explicit KeystrokeMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternsToIgnoreFieldNumber = 1,
    kAdvancedFieldNumber = 2,
  };
  // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int patterns_to_ignore_size() const;
  private:
  int _internal_patterns_to_ignore_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_patterns_to_ignore();
  PROTOBUF_DEPRECATED ::iterm2::KeystrokePattern* mutable_patterns_to_ignore(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >*
      mutable_patterns_to_ignore();
  private:
  const ::iterm2::KeystrokePattern& _internal_patterns_to_ignore(int index) const;
  ::iterm2::KeystrokePattern* _internal_add_patterns_to_ignore();
  public:
  PROTOBUF_DEPRECATED const ::iterm2::KeystrokePattern& patterns_to_ignore(int index) const;
  PROTOBUF_DEPRECATED ::iterm2::KeystrokePattern* add_patterns_to_ignore();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >&
      patterns_to_ignore() const;

  // optional bool advanced = 2;
  bool has_advanced() const;
  private:
  bool _internal_has_advanced() const;
  public:
  void clear_advanced();
  bool advanced() const;
  void set_advanced(bool value);
  private:
  bool _internal_advanced() const;
  void _internal_set_advanced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.KeystrokeMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern > patterns_to_ignore_;
  bool advanced_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class KeystrokeFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.KeystrokeFilterRequest) */ {
 public:
  inline KeystrokeFilterRequest() : KeystrokeFilterRequest(nullptr) {}
  ~KeystrokeFilterRequest() override;
  explicit constexpr KeystrokeFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeystrokeFilterRequest(const KeystrokeFilterRequest& from);
  KeystrokeFilterRequest(KeystrokeFilterRequest&& from) noexcept
    : KeystrokeFilterRequest() {
    *this = ::std::move(from);
  }

  inline KeystrokeFilterRequest& operator=(const KeystrokeFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystrokeFilterRequest& operator=(KeystrokeFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeystrokeFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeystrokeFilterRequest* internal_default_instance() {
    return reinterpret_cast<const KeystrokeFilterRequest*>(
               &_KeystrokeFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(KeystrokeFilterRequest& a, KeystrokeFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystrokeFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeystrokeFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeystrokeFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeystrokeFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeystrokeFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeystrokeFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeystrokeFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.KeystrokeFilterRequest";
  }
  protected:
  explicit KeystrokeFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternsToIgnoreFieldNumber = 1,
  };
  // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1;
  int patterns_to_ignore_size() const;
  private:
  int _internal_patterns_to_ignore_size() const;
  public:
  void clear_patterns_to_ignore();
  ::iterm2::KeystrokePattern* mutable_patterns_to_ignore(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >*
      mutable_patterns_to_ignore();
  private:
  const ::iterm2::KeystrokePattern& _internal_patterns_to_ignore(int index) const;
  ::iterm2::KeystrokePattern* _internal_add_patterns_to_ignore();
  public:
  const ::iterm2::KeystrokePattern& patterns_to_ignore(int index) const;
  ::iterm2::KeystrokePattern* add_patterns_to_ignore();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >&
      patterns_to_ignore() const;

  // @@protoc_insertion_point(class_scope:iterm2.KeystrokeFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern > patterns_to_ignore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class VariableMonitorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.VariableMonitorRequest) */ {
 public:
  inline VariableMonitorRequest() : VariableMonitorRequest(nullptr) {}
  ~VariableMonitorRequest() override;
  explicit constexpr VariableMonitorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableMonitorRequest(const VariableMonitorRequest& from);
  VariableMonitorRequest(VariableMonitorRequest&& from) noexcept
    : VariableMonitorRequest() {
    *this = ::std::move(from);
  }

  inline VariableMonitorRequest& operator=(const VariableMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableMonitorRequest& operator=(VariableMonitorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableMonitorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const VariableMonitorRequest*>(
               &_VariableMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(VariableMonitorRequest& a, VariableMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableMonitorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableMonitorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableMonitorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableMonitorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMonitorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.VariableMonitorRequest";
  }
  protected:
  explicit VariableMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdentifierFieldNumber = 3,
    kScopeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string identifier = 3;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional .iterm2.VariableScope scope = 2;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  ::iterm2::VariableScope scope() const;
  void set_scope(::iterm2::VariableScope value);
  private:
  ::iterm2::VariableScope _internal_scope() const;
  void _internal_set_scope(::iterm2::VariableScope value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.VariableMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  int scope_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ProfileChangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ProfileChangeRequest) */ {
 public:
  inline ProfileChangeRequest() : ProfileChangeRequest(nullptr) {}
  ~ProfileChangeRequest() override;
  explicit constexpr ProfileChangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileChangeRequest(const ProfileChangeRequest& from);
  ProfileChangeRequest(ProfileChangeRequest&& from) noexcept
    : ProfileChangeRequest() {
    *this = ::std::move(from);
  }

  inline ProfileChangeRequest& operator=(const ProfileChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileChangeRequest& operator=(ProfileChangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileChangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ProfileChangeRequest*>(
               &_ProfileChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ProfileChangeRequest& a, ProfileChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileChangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileChangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileChangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileChangeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileChangeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ProfileChangeRequest";
  }
  protected:
  explicit ProfileChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ProfileChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PromptMonitorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PromptMonitorRequest) */ {
 public:
  inline PromptMonitorRequest() : PromptMonitorRequest(nullptr) {}
  ~PromptMonitorRequest() override;
  explicit constexpr PromptMonitorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptMonitorRequest(const PromptMonitorRequest& from);
  PromptMonitorRequest(PromptMonitorRequest&& from) noexcept
    : PromptMonitorRequest() {
    *this = ::std::move(from);
  }

  inline PromptMonitorRequest& operator=(const PromptMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptMonitorRequest& operator=(PromptMonitorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptMonitorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromptMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const PromptMonitorRequest*>(
               &_PromptMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(PromptMonitorRequest& a, PromptMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptMonitorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptMonitorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptMonitorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PromptMonitorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptMonitorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PromptMonitorRequest";
  }
  protected:
  explicit PromptMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModesFieldNumber = 1,
  };
  // repeated .iterm2.PromptMonitorMode modes = 1;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  private:
  ::iterm2::PromptMonitorMode _internal_modes(int index) const;
  void _internal_add_modes(::iterm2::PromptMonitorMode value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_modes();
  public:
  ::iterm2::PromptMonitorMode modes(int index) const;
  void set_modes(int index, ::iterm2::PromptMonitorMode value);
  void add_modes(::iterm2::PromptMonitorMode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_modes();

  // @@protoc_insertion_point(class_scope:iterm2.PromptMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> modes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class NotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.NotificationRequest) */ {
 public:
  inline NotificationRequest() : NotificationRequest(nullptr) {}
  ~NotificationRequest() override;
  explicit constexpr NotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationRequest(const NotificationRequest& from);
  NotificationRequest(NotificationRequest&& from) noexcept
    : NotificationRequest() {
    *this = ::std::move(from);
  }

  inline NotificationRequest& operator=(const NotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationRequest& operator=(NotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ArgumentsCase {
    kRpcRegistrationRequest = 4,
    kKeystrokeMonitorRequest = 5,
    kVariableMonitorRequest = 6,
    kProfileChangeRequest = 7,
    kKeystrokeFilterRequest = 8,
    kPromptMonitorRequest = 9,
    ARGUMENTS_NOT_SET = 0,
  };

  static inline const NotificationRequest* internal_default_instance() {
    return reinterpret_cast<const NotificationRequest*>(
               &_NotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(NotificationRequest& a, NotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotificationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.NotificationRequest";
  }
  protected:
  explicit NotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kSubscribeFieldNumber = 2,
    kNotificationTypeFieldNumber = 3,
    kRpcRegistrationRequestFieldNumber = 4,
    kKeystrokeMonitorRequestFieldNumber = 5,
    kVariableMonitorRequestFieldNumber = 6,
    kProfileChangeRequestFieldNumber = 7,
    kKeystrokeFilterRequestFieldNumber = 8,
    kPromptMonitorRequestFieldNumber = 9,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional bool subscribe = 2;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  bool subscribe() const;
  void set_subscribe(bool value);
  private:
  bool _internal_subscribe() const;
  void _internal_set_subscribe(bool value);
  public:

  // optional .iterm2.NotificationType notification_type = 3;
  bool has_notification_type() const;
  private:
  bool _internal_has_notification_type() const;
  public:
  void clear_notification_type();
  ::iterm2::NotificationType notification_type() const;
  void set_notification_type(::iterm2::NotificationType value);
  private:
  ::iterm2::NotificationType _internal_notification_type() const;
  void _internal_set_notification_type(::iterm2::NotificationType value);
  public:

  // .iterm2.RPCRegistrationRequest rpc_registration_request = 4;
  bool has_rpc_registration_request() const;
  private:
  bool _internal_has_rpc_registration_request() const;
  public:
  void clear_rpc_registration_request();
  const ::iterm2::RPCRegistrationRequest& rpc_registration_request() const;
  PROTOBUF_NODISCARD ::iterm2::RPCRegistrationRequest* release_rpc_registration_request();
  ::iterm2::RPCRegistrationRequest* mutable_rpc_registration_request();
  void set_allocated_rpc_registration_request(::iterm2::RPCRegistrationRequest* rpc_registration_request);
  private:
  const ::iterm2::RPCRegistrationRequest& _internal_rpc_registration_request() const;
  ::iterm2::RPCRegistrationRequest* _internal_mutable_rpc_registration_request();
  public:
  void unsafe_arena_set_allocated_rpc_registration_request(
      ::iterm2::RPCRegistrationRequest* rpc_registration_request);
  ::iterm2::RPCRegistrationRequest* unsafe_arena_release_rpc_registration_request();

  // .iterm2.KeystrokeMonitorRequest keystroke_monitor_request = 5;
  bool has_keystroke_monitor_request() const;
  private:
  bool _internal_has_keystroke_monitor_request() const;
  public:
  void clear_keystroke_monitor_request();
  const ::iterm2::KeystrokeMonitorRequest& keystroke_monitor_request() const;
  PROTOBUF_NODISCARD ::iterm2::KeystrokeMonitorRequest* release_keystroke_monitor_request();
  ::iterm2::KeystrokeMonitorRequest* mutable_keystroke_monitor_request();
  void set_allocated_keystroke_monitor_request(::iterm2::KeystrokeMonitorRequest* keystroke_monitor_request);
  private:
  const ::iterm2::KeystrokeMonitorRequest& _internal_keystroke_monitor_request() const;
  ::iterm2::KeystrokeMonitorRequest* _internal_mutable_keystroke_monitor_request();
  public:
  void unsafe_arena_set_allocated_keystroke_monitor_request(
      ::iterm2::KeystrokeMonitorRequest* keystroke_monitor_request);
  ::iterm2::KeystrokeMonitorRequest* unsafe_arena_release_keystroke_monitor_request();

  // .iterm2.VariableMonitorRequest variable_monitor_request = 6;
  bool has_variable_monitor_request() const;
  private:
  bool _internal_has_variable_monitor_request() const;
  public:
  void clear_variable_monitor_request();
  const ::iterm2::VariableMonitorRequest& variable_monitor_request() const;
  PROTOBUF_NODISCARD ::iterm2::VariableMonitorRequest* release_variable_monitor_request();
  ::iterm2::VariableMonitorRequest* mutable_variable_monitor_request();
  void set_allocated_variable_monitor_request(::iterm2::VariableMonitorRequest* variable_monitor_request);
  private:
  const ::iterm2::VariableMonitorRequest& _internal_variable_monitor_request() const;
  ::iterm2::VariableMonitorRequest* _internal_mutable_variable_monitor_request();
  public:
  void unsafe_arena_set_allocated_variable_monitor_request(
      ::iterm2::VariableMonitorRequest* variable_monitor_request);
  ::iterm2::VariableMonitorRequest* unsafe_arena_release_variable_monitor_request();

  // .iterm2.ProfileChangeRequest profile_change_request = 7;
  bool has_profile_change_request() const;
  private:
  bool _internal_has_profile_change_request() const;
  public:
  void clear_profile_change_request();
  const ::iterm2::ProfileChangeRequest& profile_change_request() const;
  PROTOBUF_NODISCARD ::iterm2::ProfileChangeRequest* release_profile_change_request();
  ::iterm2::ProfileChangeRequest* mutable_profile_change_request();
  void set_allocated_profile_change_request(::iterm2::ProfileChangeRequest* profile_change_request);
  private:
  const ::iterm2::ProfileChangeRequest& _internal_profile_change_request() const;
  ::iterm2::ProfileChangeRequest* _internal_mutable_profile_change_request();
  public:
  void unsafe_arena_set_allocated_profile_change_request(
      ::iterm2::ProfileChangeRequest* profile_change_request);
  ::iterm2::ProfileChangeRequest* unsafe_arena_release_profile_change_request();

  // .iterm2.KeystrokeFilterRequest keystroke_filter_request = 8;
  bool has_keystroke_filter_request() const;
  private:
  bool _internal_has_keystroke_filter_request() const;
  public:
  void clear_keystroke_filter_request();
  const ::iterm2::KeystrokeFilterRequest& keystroke_filter_request() const;
  PROTOBUF_NODISCARD ::iterm2::KeystrokeFilterRequest* release_keystroke_filter_request();
  ::iterm2::KeystrokeFilterRequest* mutable_keystroke_filter_request();
  void set_allocated_keystroke_filter_request(::iterm2::KeystrokeFilterRequest* keystroke_filter_request);
  private:
  const ::iterm2::KeystrokeFilterRequest& _internal_keystroke_filter_request() const;
  ::iterm2::KeystrokeFilterRequest* _internal_mutable_keystroke_filter_request();
  public:
  void unsafe_arena_set_allocated_keystroke_filter_request(
      ::iterm2::KeystrokeFilterRequest* keystroke_filter_request);
  ::iterm2::KeystrokeFilterRequest* unsafe_arena_release_keystroke_filter_request();

  // .iterm2.PromptMonitorRequest prompt_monitor_request = 9;
  bool has_prompt_monitor_request() const;
  private:
  bool _internal_has_prompt_monitor_request() const;
  public:
  void clear_prompt_monitor_request();
  const ::iterm2::PromptMonitorRequest& prompt_monitor_request() const;
  PROTOBUF_NODISCARD ::iterm2::PromptMonitorRequest* release_prompt_monitor_request();
  ::iterm2::PromptMonitorRequest* mutable_prompt_monitor_request();
  void set_allocated_prompt_monitor_request(::iterm2::PromptMonitorRequest* prompt_monitor_request);
  private:
  const ::iterm2::PromptMonitorRequest& _internal_prompt_monitor_request() const;
  ::iterm2::PromptMonitorRequest* _internal_mutable_prompt_monitor_request();
  public:
  void unsafe_arena_set_allocated_prompt_monitor_request(
      ::iterm2::PromptMonitorRequest* prompt_monitor_request);
  ::iterm2::PromptMonitorRequest* unsafe_arena_release_prompt_monitor_request();

  void clear_arguments();
  ArgumentsCase arguments_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.NotificationRequest)
 private:
  class _Internal;
  void set_has_rpc_registration_request();
  void set_has_keystroke_monitor_request();
  void set_has_variable_monitor_request();
  void set_has_profile_change_request();
  void set_has_keystroke_filter_request();
  void set_has_prompt_monitor_request();

  inline bool has_arguments() const;
  inline void clear_has_arguments();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  bool subscribe_;
  int notification_type_;
  union ArgumentsUnion {
    constexpr ArgumentsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::RPCRegistrationRequest* rpc_registration_request_;
    ::iterm2::KeystrokeMonitorRequest* keystroke_monitor_request_;
    ::iterm2::VariableMonitorRequest* variable_monitor_request_;
    ::iterm2::ProfileChangeRequest* profile_change_request_;
    ::iterm2::KeystrokeFilterRequest* keystroke_filter_request_;
    ::iterm2::PromptMonitorRequest* prompt_monitor_request_;
  } arguments_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class NotificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.NotificationResponse) */ {
 public:
  inline NotificationResponse() : NotificationResponse(nullptr) {}
  ~NotificationResponse() override;
  explicit constexpr NotificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationResponse(const NotificationResponse& from);
  NotificationResponse(NotificationResponse&& from) noexcept
    : NotificationResponse() {
    *this = ::std::move(from);
  }

  inline NotificationResponse& operator=(const NotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationResponse& operator=(NotificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationResponse* internal_default_instance() {
    return reinterpret_cast<const NotificationResponse*>(
               &_NotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(NotificationResponse& a, NotificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotificationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.NotificationResponse";
  }
  protected:
  explicit NotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NotificationResponse_Status Status;
  static constexpr Status OK =
    NotificationResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    NotificationResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    NotificationResponse_Status_REQUEST_MALFORMED;
  static constexpr Status NOT_SUBSCRIBED =
    NotificationResponse_Status_NOT_SUBSCRIBED;
  static constexpr Status ALREADY_SUBSCRIBED =
    NotificationResponse_Status_ALREADY_SUBSCRIBED;
  static constexpr Status DUPLICATE_SERVER_ORIGINATED_RPC =
    NotificationResponse_Status_DUPLICATE_SERVER_ORIGINATED_RPC;
  static constexpr Status INVALID_IDENTIFIER =
    NotificationResponse_Status_INVALID_IDENTIFIER;
  static inline bool Status_IsValid(int value) {
    return NotificationResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    NotificationResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    NotificationResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    NotificationResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return NotificationResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return NotificationResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return NotificationResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.NotificationResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::NotificationResponse_Status status() const;
  void set_status(::iterm2::NotificationResponse_Status value);
  private:
  ::iterm2::NotificationResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::NotificationResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.NotificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  ~Notification() override;
  explicit constexpr Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeystrokeNotificationFieldNumber = 1,
    kScreenUpdateNotificationFieldNumber = 2,
    kPromptNotificationFieldNumber = 3,
    kLocationChangeNotificationFieldNumber = 4,
    kCustomEscapeSequenceNotificationFieldNumber = 5,
    kNewSessionNotificationFieldNumber = 6,
    kTerminateSessionNotificationFieldNumber = 7,
    kLayoutChangedNotificationFieldNumber = 8,
    kFocusChangedNotificationFieldNumber = 9,
    kServerOriginatedRpcNotificationFieldNumber = 10,
    kBroadcastDomainsChangedFieldNumber = 11,
    kVariableChangedNotificationFieldNumber = 12,
    kProfileChangedNotificationFieldNumber = 13,
  };
  // optional .iterm2.KeystrokeNotification keystroke_notification = 1;
  bool has_keystroke_notification() const;
  private:
  bool _internal_has_keystroke_notification() const;
  public:
  void clear_keystroke_notification();
  const ::iterm2::KeystrokeNotification& keystroke_notification() const;
  PROTOBUF_NODISCARD ::iterm2::KeystrokeNotification* release_keystroke_notification();
  ::iterm2::KeystrokeNotification* mutable_keystroke_notification();
  void set_allocated_keystroke_notification(::iterm2::KeystrokeNotification* keystroke_notification);
  private:
  const ::iterm2::KeystrokeNotification& _internal_keystroke_notification() const;
  ::iterm2::KeystrokeNotification* _internal_mutable_keystroke_notification();
  public:
  void unsafe_arena_set_allocated_keystroke_notification(
      ::iterm2::KeystrokeNotification* keystroke_notification);
  ::iterm2::KeystrokeNotification* unsafe_arena_release_keystroke_notification();

  // optional .iterm2.ScreenUpdateNotification screen_update_notification = 2;
  bool has_screen_update_notification() const;
  private:
  bool _internal_has_screen_update_notification() const;
  public:
  void clear_screen_update_notification();
  const ::iterm2::ScreenUpdateNotification& screen_update_notification() const;
  PROTOBUF_NODISCARD ::iterm2::ScreenUpdateNotification* release_screen_update_notification();
  ::iterm2::ScreenUpdateNotification* mutable_screen_update_notification();
  void set_allocated_screen_update_notification(::iterm2::ScreenUpdateNotification* screen_update_notification);
  private:
  const ::iterm2::ScreenUpdateNotification& _internal_screen_update_notification() const;
  ::iterm2::ScreenUpdateNotification* _internal_mutable_screen_update_notification();
  public:
  void unsafe_arena_set_allocated_screen_update_notification(
      ::iterm2::ScreenUpdateNotification* screen_update_notification);
  ::iterm2::ScreenUpdateNotification* unsafe_arena_release_screen_update_notification();

  // optional .iterm2.PromptNotification prompt_notification = 3;
  bool has_prompt_notification() const;
  private:
  bool _internal_has_prompt_notification() const;
  public:
  void clear_prompt_notification();
  const ::iterm2::PromptNotification& prompt_notification() const;
  PROTOBUF_NODISCARD ::iterm2::PromptNotification* release_prompt_notification();
  ::iterm2::PromptNotification* mutable_prompt_notification();
  void set_allocated_prompt_notification(::iterm2::PromptNotification* prompt_notification);
  private:
  const ::iterm2::PromptNotification& _internal_prompt_notification() const;
  ::iterm2::PromptNotification* _internal_mutable_prompt_notification();
  public:
  void unsafe_arena_set_allocated_prompt_notification(
      ::iterm2::PromptNotification* prompt_notification);
  ::iterm2::PromptNotification* unsafe_arena_release_prompt_notification();

  // optional .iterm2.LocationChangeNotification location_change_notification = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_location_change_notification() const;
  private:
  bool _internal_has_location_change_notification() const;
  public:
  PROTOBUF_DEPRECATED void clear_location_change_notification();
  PROTOBUF_DEPRECATED const ::iterm2::LocationChangeNotification& location_change_notification() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::iterm2::LocationChangeNotification* release_location_change_notification();
  PROTOBUF_DEPRECATED ::iterm2::LocationChangeNotification* mutable_location_change_notification();
  PROTOBUF_DEPRECATED void set_allocated_location_change_notification(::iterm2::LocationChangeNotification* location_change_notification);
  private:
  const ::iterm2::LocationChangeNotification& _internal_location_change_notification() const;
  ::iterm2::LocationChangeNotification* _internal_mutable_location_change_notification();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_location_change_notification(
      ::iterm2::LocationChangeNotification* location_change_notification);
  PROTOBUF_DEPRECATED ::iterm2::LocationChangeNotification* unsafe_arena_release_location_change_notification();

  // optional .iterm2.CustomEscapeSequenceNotification custom_escape_sequence_notification = 5;
  bool has_custom_escape_sequence_notification() const;
  private:
  bool _internal_has_custom_escape_sequence_notification() const;
  public:
  void clear_custom_escape_sequence_notification();
  const ::iterm2::CustomEscapeSequenceNotification& custom_escape_sequence_notification() const;
  PROTOBUF_NODISCARD ::iterm2::CustomEscapeSequenceNotification* release_custom_escape_sequence_notification();
  ::iterm2::CustomEscapeSequenceNotification* mutable_custom_escape_sequence_notification();
  void set_allocated_custom_escape_sequence_notification(::iterm2::CustomEscapeSequenceNotification* custom_escape_sequence_notification);
  private:
  const ::iterm2::CustomEscapeSequenceNotification& _internal_custom_escape_sequence_notification() const;
  ::iterm2::CustomEscapeSequenceNotification* _internal_mutable_custom_escape_sequence_notification();
  public:
  void unsafe_arena_set_allocated_custom_escape_sequence_notification(
      ::iterm2::CustomEscapeSequenceNotification* custom_escape_sequence_notification);
  ::iterm2::CustomEscapeSequenceNotification* unsafe_arena_release_custom_escape_sequence_notification();

  // optional .iterm2.NewSessionNotification new_session_notification = 6;
  bool has_new_session_notification() const;
  private:
  bool _internal_has_new_session_notification() const;
  public:
  void clear_new_session_notification();
  const ::iterm2::NewSessionNotification& new_session_notification() const;
  PROTOBUF_NODISCARD ::iterm2::NewSessionNotification* release_new_session_notification();
  ::iterm2::NewSessionNotification* mutable_new_session_notification();
  void set_allocated_new_session_notification(::iterm2::NewSessionNotification* new_session_notification);
  private:
  const ::iterm2::NewSessionNotification& _internal_new_session_notification() const;
  ::iterm2::NewSessionNotification* _internal_mutable_new_session_notification();
  public:
  void unsafe_arena_set_allocated_new_session_notification(
      ::iterm2::NewSessionNotification* new_session_notification);
  ::iterm2::NewSessionNotification* unsafe_arena_release_new_session_notification();

  // optional .iterm2.TerminateSessionNotification terminate_session_notification = 7;
  bool has_terminate_session_notification() const;
  private:
  bool _internal_has_terminate_session_notification() const;
  public:
  void clear_terminate_session_notification();
  const ::iterm2::TerminateSessionNotification& terminate_session_notification() const;
  PROTOBUF_NODISCARD ::iterm2::TerminateSessionNotification* release_terminate_session_notification();
  ::iterm2::TerminateSessionNotification* mutable_terminate_session_notification();
  void set_allocated_terminate_session_notification(::iterm2::TerminateSessionNotification* terminate_session_notification);
  private:
  const ::iterm2::TerminateSessionNotification& _internal_terminate_session_notification() const;
  ::iterm2::TerminateSessionNotification* _internal_mutable_terminate_session_notification();
  public:
  void unsafe_arena_set_allocated_terminate_session_notification(
      ::iterm2::TerminateSessionNotification* terminate_session_notification);
  ::iterm2::TerminateSessionNotification* unsafe_arena_release_terminate_session_notification();

  // optional .iterm2.LayoutChangedNotification layout_changed_notification = 8;
  bool has_layout_changed_notification() const;
  private:
  bool _internal_has_layout_changed_notification() const;
  public:
  void clear_layout_changed_notification();
  const ::iterm2::LayoutChangedNotification& layout_changed_notification() const;
  PROTOBUF_NODISCARD ::iterm2::LayoutChangedNotification* release_layout_changed_notification();
  ::iterm2::LayoutChangedNotification* mutable_layout_changed_notification();
  void set_allocated_layout_changed_notification(::iterm2::LayoutChangedNotification* layout_changed_notification);
  private:
  const ::iterm2::LayoutChangedNotification& _internal_layout_changed_notification() const;
  ::iterm2::LayoutChangedNotification* _internal_mutable_layout_changed_notification();
  public:
  void unsafe_arena_set_allocated_layout_changed_notification(
      ::iterm2::LayoutChangedNotification* layout_changed_notification);
  ::iterm2::LayoutChangedNotification* unsafe_arena_release_layout_changed_notification();

  // optional .iterm2.FocusChangedNotification focus_changed_notification = 9;
  bool has_focus_changed_notification() const;
  private:
  bool _internal_has_focus_changed_notification() const;
  public:
  void clear_focus_changed_notification();
  const ::iterm2::FocusChangedNotification& focus_changed_notification() const;
  PROTOBUF_NODISCARD ::iterm2::FocusChangedNotification* release_focus_changed_notification();
  ::iterm2::FocusChangedNotification* mutable_focus_changed_notification();
  void set_allocated_focus_changed_notification(::iterm2::FocusChangedNotification* focus_changed_notification);
  private:
  const ::iterm2::FocusChangedNotification& _internal_focus_changed_notification() const;
  ::iterm2::FocusChangedNotification* _internal_mutable_focus_changed_notification();
  public:
  void unsafe_arena_set_allocated_focus_changed_notification(
      ::iterm2::FocusChangedNotification* focus_changed_notification);
  ::iterm2::FocusChangedNotification* unsafe_arena_release_focus_changed_notification();

  // optional .iterm2.ServerOriginatedRPCNotification server_originated_rpc_notification = 10;
  bool has_server_originated_rpc_notification() const;
  private:
  bool _internal_has_server_originated_rpc_notification() const;
  public:
  void clear_server_originated_rpc_notification();
  const ::iterm2::ServerOriginatedRPCNotification& server_originated_rpc_notification() const;
  PROTOBUF_NODISCARD ::iterm2::ServerOriginatedRPCNotification* release_server_originated_rpc_notification();
  ::iterm2::ServerOriginatedRPCNotification* mutable_server_originated_rpc_notification();
  void set_allocated_server_originated_rpc_notification(::iterm2::ServerOriginatedRPCNotification* server_originated_rpc_notification);
  private:
  const ::iterm2::ServerOriginatedRPCNotification& _internal_server_originated_rpc_notification() const;
  ::iterm2::ServerOriginatedRPCNotification* _internal_mutable_server_originated_rpc_notification();
  public:
  void unsafe_arena_set_allocated_server_originated_rpc_notification(
      ::iterm2::ServerOriginatedRPCNotification* server_originated_rpc_notification);
  ::iterm2::ServerOriginatedRPCNotification* unsafe_arena_release_server_originated_rpc_notification();

  // optional .iterm2.BroadcastDomainsChangedNotification broadcast_domains_changed = 11;
  bool has_broadcast_domains_changed() const;
  private:
  bool _internal_has_broadcast_domains_changed() const;
  public:
  void clear_broadcast_domains_changed();
  const ::iterm2::BroadcastDomainsChangedNotification& broadcast_domains_changed() const;
  PROTOBUF_NODISCARD ::iterm2::BroadcastDomainsChangedNotification* release_broadcast_domains_changed();
  ::iterm2::BroadcastDomainsChangedNotification* mutable_broadcast_domains_changed();
  void set_allocated_broadcast_domains_changed(::iterm2::BroadcastDomainsChangedNotification* broadcast_domains_changed);
  private:
  const ::iterm2::BroadcastDomainsChangedNotification& _internal_broadcast_domains_changed() const;
  ::iterm2::BroadcastDomainsChangedNotification* _internal_mutable_broadcast_domains_changed();
  public:
  void unsafe_arena_set_allocated_broadcast_domains_changed(
      ::iterm2::BroadcastDomainsChangedNotification* broadcast_domains_changed);
  ::iterm2::BroadcastDomainsChangedNotification* unsafe_arena_release_broadcast_domains_changed();

  // optional .iterm2.VariableChangedNotification variable_changed_notification = 12;
  bool has_variable_changed_notification() const;
  private:
  bool _internal_has_variable_changed_notification() const;
  public:
  void clear_variable_changed_notification();
  const ::iterm2::VariableChangedNotification& variable_changed_notification() const;
  PROTOBUF_NODISCARD ::iterm2::VariableChangedNotification* release_variable_changed_notification();
  ::iterm2::VariableChangedNotification* mutable_variable_changed_notification();
  void set_allocated_variable_changed_notification(::iterm2::VariableChangedNotification* variable_changed_notification);
  private:
  const ::iterm2::VariableChangedNotification& _internal_variable_changed_notification() const;
  ::iterm2::VariableChangedNotification* _internal_mutable_variable_changed_notification();
  public:
  void unsafe_arena_set_allocated_variable_changed_notification(
      ::iterm2::VariableChangedNotification* variable_changed_notification);
  ::iterm2::VariableChangedNotification* unsafe_arena_release_variable_changed_notification();

  // optional .iterm2.ProfileChangedNotification profile_changed_notification = 13;
  bool has_profile_changed_notification() const;
  private:
  bool _internal_has_profile_changed_notification() const;
  public:
  void clear_profile_changed_notification();
  const ::iterm2::ProfileChangedNotification& profile_changed_notification() const;
  PROTOBUF_NODISCARD ::iterm2::ProfileChangedNotification* release_profile_changed_notification();
  ::iterm2::ProfileChangedNotification* mutable_profile_changed_notification();
  void set_allocated_profile_changed_notification(::iterm2::ProfileChangedNotification* profile_changed_notification);
  private:
  const ::iterm2::ProfileChangedNotification& _internal_profile_changed_notification() const;
  ::iterm2::ProfileChangedNotification* _internal_mutable_profile_changed_notification();
  public:
  void unsafe_arena_set_allocated_profile_changed_notification(
      ::iterm2::ProfileChangedNotification* profile_changed_notification);
  ::iterm2::ProfileChangedNotification* unsafe_arena_release_profile_changed_notification();

  // @@protoc_insertion_point(class_scope:iterm2.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::KeystrokeNotification* keystroke_notification_;
  ::iterm2::ScreenUpdateNotification* screen_update_notification_;
  ::iterm2::PromptNotification* prompt_notification_;
  ::iterm2::LocationChangeNotification* location_change_notification_;
  ::iterm2::CustomEscapeSequenceNotification* custom_escape_sequence_notification_;
  ::iterm2::NewSessionNotification* new_session_notification_;
  ::iterm2::TerminateSessionNotification* terminate_session_notification_;
  ::iterm2::LayoutChangedNotification* layout_changed_notification_;
  ::iterm2::FocusChangedNotification* focus_changed_notification_;
  ::iterm2::ServerOriginatedRPCNotification* server_originated_rpc_notification_;
  ::iterm2::BroadcastDomainsChangedNotification* broadcast_domains_changed_;
  ::iterm2::VariableChangedNotification* variable_changed_notification_;
  ::iterm2::ProfileChangedNotification* profile_changed_notification_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ProfileChangedNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ProfileChangedNotification) */ {
 public:
  inline ProfileChangedNotification() : ProfileChangedNotification(nullptr) {}
  ~ProfileChangedNotification() override;
  explicit constexpr ProfileChangedNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileChangedNotification(const ProfileChangedNotification& from);
  ProfileChangedNotification(ProfileChangedNotification&& from) noexcept
    : ProfileChangedNotification() {
    *this = ::std::move(from);
  }

  inline ProfileChangedNotification& operator=(const ProfileChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileChangedNotification& operator=(ProfileChangedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileChangedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileChangedNotification* internal_default_instance() {
    return reinterpret_cast<const ProfileChangedNotification*>(
               &_ProfileChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ProfileChangedNotification& a, ProfileChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileChangedNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileChangedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileChangedNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileChangedNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileChangedNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileChangedNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ProfileChangedNotification";
  }
  protected:
  explicit ProfileChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ProfileChangedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class VariableChangedNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.VariableChangedNotification) */ {
 public:
  inline VariableChangedNotification() : VariableChangedNotification(nullptr) {}
  ~VariableChangedNotification() override;
  explicit constexpr VariableChangedNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableChangedNotification(const VariableChangedNotification& from);
  VariableChangedNotification(VariableChangedNotification&& from) noexcept
    : VariableChangedNotification() {
    *this = ::std::move(from);
  }

  inline VariableChangedNotification& operator=(const VariableChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableChangedNotification& operator=(VariableChangedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableChangedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableChangedNotification* internal_default_instance() {
    return reinterpret_cast<const VariableChangedNotification*>(
               &_VariableChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(VariableChangedNotification& a, VariableChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableChangedNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableChangedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableChangedNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableChangedNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VariableChangedNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableChangedNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.VariableChangedNotification";
  }
  protected:
  explicit VariableChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kNameFieldNumber = 3,
    kJsonNewValueFieldNumber = 4,
    kScopeFieldNumber = 1,
  };
  // optional string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string json_new_value = 4;
  bool has_json_new_value() const;
  private:
  bool _internal_has_json_new_value() const;
  public:
  void clear_json_new_value();
  const std::string& json_new_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_new_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_new_value();
  PROTOBUF_NODISCARD std::string* release_json_new_value();
  void set_allocated_json_new_value(std::string* json_new_value);
  private:
  const std::string& _internal_json_new_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_new_value(const std::string& value);
  std::string* _internal_mutable_json_new_value();
  public:

  // optional .iterm2.VariableScope scope = 1;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  ::iterm2::VariableScope scope() const;
  void set_scope(::iterm2::VariableScope value);
  private:
  ::iterm2::VariableScope _internal_scope() const;
  void _internal_set_scope(::iterm2::VariableScope value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.VariableChangedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_new_value_;
  int scope_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class BroadcastDomainsChangedNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.BroadcastDomainsChangedNotification) */ {
 public:
  inline BroadcastDomainsChangedNotification() : BroadcastDomainsChangedNotification(nullptr) {}
  ~BroadcastDomainsChangedNotification() override;
  explicit constexpr BroadcastDomainsChangedNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastDomainsChangedNotification(const BroadcastDomainsChangedNotification& from);
  BroadcastDomainsChangedNotification(BroadcastDomainsChangedNotification&& from) noexcept
    : BroadcastDomainsChangedNotification() {
    *this = ::std::move(from);
  }

  inline BroadcastDomainsChangedNotification& operator=(const BroadcastDomainsChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastDomainsChangedNotification& operator=(BroadcastDomainsChangedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastDomainsChangedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastDomainsChangedNotification* internal_default_instance() {
    return reinterpret_cast<const BroadcastDomainsChangedNotification*>(
               &_BroadcastDomainsChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(BroadcastDomainsChangedNotification& a, BroadcastDomainsChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastDomainsChangedNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastDomainsChangedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastDomainsChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastDomainsChangedNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastDomainsChangedNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadcastDomainsChangedNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastDomainsChangedNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.BroadcastDomainsChangedNotification";
  }
  protected:
  explicit BroadcastDomainsChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastDomainsFieldNumber = 1,
  };
  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  int broadcast_domains_size() const;
  private:
  int _internal_broadcast_domains_size() const;
  public:
  void clear_broadcast_domains();
  ::iterm2::BroadcastDomain* mutable_broadcast_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >*
      mutable_broadcast_domains();
  private:
  const ::iterm2::BroadcastDomain& _internal_broadcast_domains(int index) const;
  ::iterm2::BroadcastDomain* _internal_add_broadcast_domains();
  public:
  const ::iterm2::BroadcastDomain& broadcast_domains(int index) const;
  ::iterm2::BroadcastDomain* add_broadcast_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >&
      broadcast_domains() const;

  // @@protoc_insertion_point(class_scope:iterm2.BroadcastDomainsChangedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain > broadcast_domains_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ServerOriginatedRPC_RPCArgument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ServerOriginatedRPC.RPCArgument) */ {
 public:
  inline ServerOriginatedRPC_RPCArgument() : ServerOriginatedRPC_RPCArgument(nullptr) {}
  ~ServerOriginatedRPC_RPCArgument() override;
  explicit constexpr ServerOriginatedRPC_RPCArgument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerOriginatedRPC_RPCArgument(const ServerOriginatedRPC_RPCArgument& from);
  ServerOriginatedRPC_RPCArgument(ServerOriginatedRPC_RPCArgument&& from) noexcept
    : ServerOriginatedRPC_RPCArgument() {
    *this = ::std::move(from);
  }

  inline ServerOriginatedRPC_RPCArgument& operator=(const ServerOriginatedRPC_RPCArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOriginatedRPC_RPCArgument& operator=(ServerOriginatedRPC_RPCArgument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerOriginatedRPC_RPCArgument& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerOriginatedRPC_RPCArgument* internal_default_instance() {
    return reinterpret_cast<const ServerOriginatedRPC_RPCArgument*>(
               &_ServerOriginatedRPC_RPCArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ServerOriginatedRPC_RPCArgument& a, ServerOriginatedRPC_RPCArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOriginatedRPC_RPCArgument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOriginatedRPC_RPCArgument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerOriginatedRPC_RPCArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerOriginatedRPC_RPCArgument>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerOriginatedRPC_RPCArgument& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerOriginatedRPC_RPCArgument& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOriginatedRPC_RPCArgument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ServerOriginatedRPC.RPCArgument";
  }
  protected:
  explicit ServerOriginatedRPC_RPCArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kJsonValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string json_value = 2;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ServerOriginatedRPC.RPCArgument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ServerOriginatedRPC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ServerOriginatedRPC) */ {
 public:
  inline ServerOriginatedRPC() : ServerOriginatedRPC(nullptr) {}
  ~ServerOriginatedRPC() override;
  explicit constexpr ServerOriginatedRPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerOriginatedRPC(const ServerOriginatedRPC& from);
  ServerOriginatedRPC(ServerOriginatedRPC&& from) noexcept
    : ServerOriginatedRPC() {
    *this = ::std::move(from);
  }

  inline ServerOriginatedRPC& operator=(const ServerOriginatedRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOriginatedRPC& operator=(ServerOriginatedRPC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerOriginatedRPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerOriginatedRPC* internal_default_instance() {
    return reinterpret_cast<const ServerOriginatedRPC*>(
               &_ServerOriginatedRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ServerOriginatedRPC& a, ServerOriginatedRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOriginatedRPC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOriginatedRPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerOriginatedRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerOriginatedRPC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerOriginatedRPC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerOriginatedRPC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOriginatedRPC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ServerOriginatedRPC";
  }
  protected:
  explicit ServerOriginatedRPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerOriginatedRPC_RPCArgument RPCArgument;

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 3,
    kNameFieldNumber = 2,
  };
  // repeated .iterm2.ServerOriginatedRPC.RPCArgument arguments = 3;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::iterm2::ServerOriginatedRPC_RPCArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ServerOriginatedRPC_RPCArgument >*
      mutable_arguments();
  private:
  const ::iterm2::ServerOriginatedRPC_RPCArgument& _internal_arguments(int index) const;
  ::iterm2::ServerOriginatedRPC_RPCArgument* _internal_add_arguments();
  public:
  const ::iterm2::ServerOriginatedRPC_RPCArgument& arguments(int index) const;
  ::iterm2::ServerOriginatedRPC_RPCArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ServerOriginatedRPC_RPCArgument >&
      arguments() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ServerOriginatedRPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ServerOriginatedRPC_RPCArgument > arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ServerOriginatedRPCNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ServerOriginatedRPCNotification) */ {
 public:
  inline ServerOriginatedRPCNotification() : ServerOriginatedRPCNotification(nullptr) {}
  ~ServerOriginatedRPCNotification() override;
  explicit constexpr ServerOriginatedRPCNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerOriginatedRPCNotification(const ServerOriginatedRPCNotification& from);
  ServerOriginatedRPCNotification(ServerOriginatedRPCNotification&& from) noexcept
    : ServerOriginatedRPCNotification() {
    *this = ::std::move(from);
  }

  inline ServerOriginatedRPCNotification& operator=(const ServerOriginatedRPCNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOriginatedRPCNotification& operator=(ServerOriginatedRPCNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerOriginatedRPCNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerOriginatedRPCNotification* internal_default_instance() {
    return reinterpret_cast<const ServerOriginatedRPCNotification*>(
               &_ServerOriginatedRPCNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(ServerOriginatedRPCNotification& a, ServerOriginatedRPCNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOriginatedRPCNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOriginatedRPCNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerOriginatedRPCNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerOriginatedRPCNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerOriginatedRPCNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerOriginatedRPCNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOriginatedRPCNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ServerOriginatedRPCNotification";
  }
  protected:
  explicit ServerOriginatedRPCNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kRpcFieldNumber = 2,
  };
  // optional string request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional .iterm2.ServerOriginatedRPC rpc = 2;
  bool has_rpc() const;
  private:
  bool _internal_has_rpc() const;
  public:
  void clear_rpc();
  const ::iterm2::ServerOriginatedRPC& rpc() const;
  PROTOBUF_NODISCARD ::iterm2::ServerOriginatedRPC* release_rpc();
  ::iterm2::ServerOriginatedRPC* mutable_rpc();
  void set_allocated_rpc(::iterm2::ServerOriginatedRPC* rpc);
  private:
  const ::iterm2::ServerOriginatedRPC& _internal_rpc() const;
  ::iterm2::ServerOriginatedRPC* _internal_mutable_rpc();
  public:
  void unsafe_arena_set_allocated_rpc(
      ::iterm2::ServerOriginatedRPC* rpc);
  ::iterm2::ServerOriginatedRPC* unsafe_arena_release_rpc();

  // @@protoc_insertion_point(class_scope:iterm2.ServerOriginatedRPCNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::iterm2::ServerOriginatedRPC* rpc_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class KeystrokeNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.KeystrokeNotification) */ {
 public:
  inline KeystrokeNotification() : KeystrokeNotification(nullptr) {}
  ~KeystrokeNotification() override;
  explicit constexpr KeystrokeNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeystrokeNotification(const KeystrokeNotification& from);
  KeystrokeNotification(KeystrokeNotification&& from) noexcept
    : KeystrokeNotification() {
    *this = ::std::move(from);
  }

  inline KeystrokeNotification& operator=(const KeystrokeNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystrokeNotification& operator=(KeystrokeNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeystrokeNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeystrokeNotification* internal_default_instance() {
    return reinterpret_cast<const KeystrokeNotification*>(
               &_KeystrokeNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(KeystrokeNotification& a, KeystrokeNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystrokeNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeystrokeNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeystrokeNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeystrokeNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeystrokeNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeystrokeNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeystrokeNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.KeystrokeNotification";
  }
  protected:
  explicit KeystrokeNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KeystrokeNotification_Action Action;
  static constexpr Action KEY_DOWN =
    KeystrokeNotification_Action_KEY_DOWN;
  static constexpr Action KEY_UP =
    KeystrokeNotification_Action_KEY_UP;
  static constexpr Action FLAGS_CHANGED =
    KeystrokeNotification_Action_FLAGS_CHANGED;
  static inline bool Action_IsValid(int value) {
    return KeystrokeNotification_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    KeystrokeNotification_Action_Action_MIN;
  static constexpr Action Action_MAX =
    KeystrokeNotification_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    KeystrokeNotification_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return KeystrokeNotification_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return KeystrokeNotification_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return KeystrokeNotification_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModifiersFieldNumber = 3,
    kCharactersFieldNumber = 1,
    kCharactersIgnoringModifiersFieldNumber = 2,
    kSessionFieldNumber = 5,
    kKeyCodeFieldNumber = 4,
    kActionFieldNumber = 6,
  };
  // repeated .iterm2.Modifiers modifiers = 3;
  int modifiers_size() const;
  private:
  int _internal_modifiers_size() const;
  public:
  void clear_modifiers();
  private:
  ::iterm2::Modifiers _internal_modifiers(int index) const;
  void _internal_add_modifiers(::iterm2::Modifiers value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_modifiers();
  public:
  ::iterm2::Modifiers modifiers(int index) const;
  void set_modifiers(int index, ::iterm2::Modifiers value);
  void add_modifiers(::iterm2::Modifiers value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& modifiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_modifiers();

  // optional string characters = 1;
  bool has_characters() const;
  private:
  bool _internal_has_characters() const;
  public:
  void clear_characters();
  const std::string& characters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_characters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_characters();
  PROTOBUF_NODISCARD std::string* release_characters();
  void set_allocated_characters(std::string* characters);
  private:
  const std::string& _internal_characters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_characters(const std::string& value);
  std::string* _internal_mutable_characters();
  public:

  // optional string charactersIgnoringModifiers = 2;
  bool has_charactersignoringmodifiers() const;
  private:
  bool _internal_has_charactersignoringmodifiers() const;
  public:
  void clear_charactersignoringmodifiers();
  const std::string& charactersignoringmodifiers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_charactersignoringmodifiers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_charactersignoringmodifiers();
  PROTOBUF_NODISCARD std::string* release_charactersignoringmodifiers();
  void set_allocated_charactersignoringmodifiers(std::string* charactersignoringmodifiers);
  private:
  const std::string& _internal_charactersignoringmodifiers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_charactersignoringmodifiers(const std::string& value);
  std::string* _internal_mutable_charactersignoringmodifiers();
  public:

  // optional string session = 5;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional int32 keyCode = 4;
  bool has_keycode() const;
  private:
  bool _internal_has_keycode() const;
  public:
  void clear_keycode();
  int32_t keycode() const;
  void set_keycode(int32_t value);
  private:
  int32_t _internal_keycode() const;
  void _internal_set_keycode(int32_t value);
  public:

  // optional .iterm2.KeystrokeNotification.Action action = 6;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::iterm2::KeystrokeNotification_Action action() const;
  void set_action(::iterm2::KeystrokeNotification_Action value);
  private:
  ::iterm2::KeystrokeNotification_Action _internal_action() const;
  void _internal_set_action(::iterm2::KeystrokeNotification_Action value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.KeystrokeNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> modifiers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr characters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charactersignoringmodifiers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  int32_t keycode_;
  int action_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ScreenUpdateNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ScreenUpdateNotification) */ {
 public:
  inline ScreenUpdateNotification() : ScreenUpdateNotification(nullptr) {}
  ~ScreenUpdateNotification() override;
  explicit constexpr ScreenUpdateNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScreenUpdateNotification(const ScreenUpdateNotification& from);
  ScreenUpdateNotification(ScreenUpdateNotification&& from) noexcept
    : ScreenUpdateNotification() {
    *this = ::std::move(from);
  }

  inline ScreenUpdateNotification& operator=(const ScreenUpdateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenUpdateNotification& operator=(ScreenUpdateNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScreenUpdateNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenUpdateNotification* internal_default_instance() {
    return reinterpret_cast<const ScreenUpdateNotification*>(
               &_ScreenUpdateNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(ScreenUpdateNotification& a, ScreenUpdateNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenUpdateNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenUpdateNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScreenUpdateNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScreenUpdateNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScreenUpdateNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScreenUpdateNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenUpdateNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ScreenUpdateNotification";
  }
  protected:
  explicit ScreenUpdateNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ScreenUpdateNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PromptNotificationPrompt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PromptNotificationPrompt) */ {
 public:
  inline PromptNotificationPrompt() : PromptNotificationPrompt(nullptr) {}
  ~PromptNotificationPrompt() override;
  explicit constexpr PromptNotificationPrompt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptNotificationPrompt(const PromptNotificationPrompt& from);
  PromptNotificationPrompt(PromptNotificationPrompt&& from) noexcept
    : PromptNotificationPrompt() {
    *this = ::std::move(from);
  }

  inline PromptNotificationPrompt& operator=(const PromptNotificationPrompt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptNotificationPrompt& operator=(PromptNotificationPrompt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptNotificationPrompt& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromptNotificationPrompt* internal_default_instance() {
    return reinterpret_cast<const PromptNotificationPrompt*>(
               &_PromptNotificationPrompt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(PromptNotificationPrompt& a, PromptNotificationPrompt& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptNotificationPrompt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptNotificationPrompt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptNotificationPrompt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptNotificationPrompt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptNotificationPrompt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PromptNotificationPrompt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptNotificationPrompt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PromptNotificationPrompt";
  }
  protected:
  explicit PromptNotificationPrompt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholderFieldNumber = 1,
    kPromptFieldNumber = 2,
  };
  // optional string placeholder = 1;
  bool has_placeholder() const;
  private:
  bool _internal_has_placeholder() const;
  public:
  void clear_placeholder();
  const std::string& placeholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_placeholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_placeholder();
  PROTOBUF_NODISCARD std::string* release_placeholder();
  void set_allocated_placeholder(std::string* placeholder);
  private:
  const std::string& _internal_placeholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_placeholder(const std::string& value);
  std::string* _internal_mutable_placeholder();
  public:

  // optional .iterm2.GetPromptResponse prompt = 2;
  bool has_prompt() const;
  private:
  bool _internal_has_prompt() const;
  public:
  void clear_prompt();
  const ::iterm2::GetPromptResponse& prompt() const;
  PROTOBUF_NODISCARD ::iterm2::GetPromptResponse* release_prompt();
  ::iterm2::GetPromptResponse* mutable_prompt();
  void set_allocated_prompt(::iterm2::GetPromptResponse* prompt);
  private:
  const ::iterm2::GetPromptResponse& _internal_prompt() const;
  ::iterm2::GetPromptResponse* _internal_mutable_prompt();
  public:
  void unsafe_arena_set_allocated_prompt(
      ::iterm2::GetPromptResponse* prompt);
  ::iterm2::GetPromptResponse* unsafe_arena_release_prompt();

  // @@protoc_insertion_point(class_scope:iterm2.PromptNotificationPrompt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_;
  ::iterm2::GetPromptResponse* prompt_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PromptNotificationCommandStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PromptNotificationCommandStart) */ {
 public:
  inline PromptNotificationCommandStart() : PromptNotificationCommandStart(nullptr) {}
  ~PromptNotificationCommandStart() override;
  explicit constexpr PromptNotificationCommandStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptNotificationCommandStart(const PromptNotificationCommandStart& from);
  PromptNotificationCommandStart(PromptNotificationCommandStart&& from) noexcept
    : PromptNotificationCommandStart() {
    *this = ::std::move(from);
  }

  inline PromptNotificationCommandStart& operator=(const PromptNotificationCommandStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptNotificationCommandStart& operator=(PromptNotificationCommandStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptNotificationCommandStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromptNotificationCommandStart* internal_default_instance() {
    return reinterpret_cast<const PromptNotificationCommandStart*>(
               &_PromptNotificationCommandStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(PromptNotificationCommandStart& a, PromptNotificationCommandStart& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptNotificationCommandStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptNotificationCommandStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptNotificationCommandStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptNotificationCommandStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptNotificationCommandStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PromptNotificationCommandStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptNotificationCommandStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PromptNotificationCommandStart";
  }
  protected:
  explicit PromptNotificationCommandStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // optional string command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PromptNotificationCommandStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PromptNotificationCommandEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PromptNotificationCommandEnd) */ {
 public:
  inline PromptNotificationCommandEnd() : PromptNotificationCommandEnd(nullptr) {}
  ~PromptNotificationCommandEnd() override;
  explicit constexpr PromptNotificationCommandEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptNotificationCommandEnd(const PromptNotificationCommandEnd& from);
  PromptNotificationCommandEnd(PromptNotificationCommandEnd&& from) noexcept
    : PromptNotificationCommandEnd() {
    *this = ::std::move(from);
  }

  inline PromptNotificationCommandEnd& operator=(const PromptNotificationCommandEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptNotificationCommandEnd& operator=(PromptNotificationCommandEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptNotificationCommandEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromptNotificationCommandEnd* internal_default_instance() {
    return reinterpret_cast<const PromptNotificationCommandEnd*>(
               &_PromptNotificationCommandEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(PromptNotificationCommandEnd& a, PromptNotificationCommandEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptNotificationCommandEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptNotificationCommandEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptNotificationCommandEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptNotificationCommandEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptNotificationCommandEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PromptNotificationCommandEnd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptNotificationCommandEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PromptNotificationCommandEnd";
  }
  protected:
  explicit PromptNotificationCommandEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.PromptNotificationCommandEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class PromptNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.PromptNotification) */ {
 public:
  inline PromptNotification() : PromptNotification(nullptr) {}
  ~PromptNotification() override;
  explicit constexpr PromptNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromptNotification(const PromptNotification& from);
  PromptNotification(PromptNotification&& from) noexcept
    : PromptNotification() {
    *this = ::std::move(from);
  }

  inline PromptNotification& operator=(const PromptNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromptNotification& operator=(PromptNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromptNotification& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kPrompt = 2,
    kCommandStart = 3,
    kCommandEnd = 4,
    EVENT_NOT_SET = 0,
  };

  static inline const PromptNotification* internal_default_instance() {
    return reinterpret_cast<const PromptNotification*>(
               &_PromptNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(PromptNotification& a, PromptNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(PromptNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromptNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromptNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromptNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromptNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PromptNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromptNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.PromptNotification";
  }
  protected:
  explicit PromptNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kUniquePromptIdFieldNumber = 5,
    kPromptFieldNumber = 2,
    kCommandStartFieldNumber = 3,
    kCommandEndFieldNumber = 4,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional string unique_prompt_id = 5;
  bool has_unique_prompt_id() const;
  private:
  bool _internal_has_unique_prompt_id() const;
  public:
  void clear_unique_prompt_id();
  const std::string& unique_prompt_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_prompt_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_prompt_id();
  PROTOBUF_NODISCARD std::string* release_unique_prompt_id();
  void set_allocated_unique_prompt_id(std::string* unique_prompt_id);
  private:
  const std::string& _internal_unique_prompt_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_prompt_id(const std::string& value);
  std::string* _internal_mutable_unique_prompt_id();
  public:

  // .iterm2.PromptNotificationPrompt prompt = 2;
  bool has_prompt() const;
  private:
  bool _internal_has_prompt() const;
  public:
  void clear_prompt();
  const ::iterm2::PromptNotificationPrompt& prompt() const;
  PROTOBUF_NODISCARD ::iterm2::PromptNotificationPrompt* release_prompt();
  ::iterm2::PromptNotificationPrompt* mutable_prompt();
  void set_allocated_prompt(::iterm2::PromptNotificationPrompt* prompt);
  private:
  const ::iterm2::PromptNotificationPrompt& _internal_prompt() const;
  ::iterm2::PromptNotificationPrompt* _internal_mutable_prompt();
  public:
  void unsafe_arena_set_allocated_prompt(
      ::iterm2::PromptNotificationPrompt* prompt);
  ::iterm2::PromptNotificationPrompt* unsafe_arena_release_prompt();

  // .iterm2.PromptNotificationCommandStart command_start = 3;
  bool has_command_start() const;
  private:
  bool _internal_has_command_start() const;
  public:
  void clear_command_start();
  const ::iterm2::PromptNotificationCommandStart& command_start() const;
  PROTOBUF_NODISCARD ::iterm2::PromptNotificationCommandStart* release_command_start();
  ::iterm2::PromptNotificationCommandStart* mutable_command_start();
  void set_allocated_command_start(::iterm2::PromptNotificationCommandStart* command_start);
  private:
  const ::iterm2::PromptNotificationCommandStart& _internal_command_start() const;
  ::iterm2::PromptNotificationCommandStart* _internal_mutable_command_start();
  public:
  void unsafe_arena_set_allocated_command_start(
      ::iterm2::PromptNotificationCommandStart* command_start);
  ::iterm2::PromptNotificationCommandStart* unsafe_arena_release_command_start();

  // .iterm2.PromptNotificationCommandEnd command_end = 4;
  bool has_command_end() const;
  private:
  bool _internal_has_command_end() const;
  public:
  void clear_command_end();
  const ::iterm2::PromptNotificationCommandEnd& command_end() const;
  PROTOBUF_NODISCARD ::iterm2::PromptNotificationCommandEnd* release_command_end();
  ::iterm2::PromptNotificationCommandEnd* mutable_command_end();
  void set_allocated_command_end(::iterm2::PromptNotificationCommandEnd* command_end);
  private:
  const ::iterm2::PromptNotificationCommandEnd& _internal_command_end() const;
  ::iterm2::PromptNotificationCommandEnd* _internal_mutable_command_end();
  public:
  void unsafe_arena_set_allocated_command_end(
      ::iterm2::PromptNotificationCommandEnd* command_end);
  ::iterm2::PromptNotificationCommandEnd* unsafe_arena_release_command_end();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.PromptNotification)
 private:
  class _Internal;
  void set_has_prompt();
  void set_has_command_start();
  void set_has_command_end();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_prompt_id_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::PromptNotificationPrompt* prompt_;
    ::iterm2::PromptNotificationCommandStart* command_start_;
    ::iterm2::PromptNotificationCommandEnd* command_end_;
  } event_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class LocationChangeNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.LocationChangeNotification) */ {
 public:
  inline LocationChangeNotification() : LocationChangeNotification(nullptr) {}
  ~LocationChangeNotification() override;
  explicit constexpr LocationChangeNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocationChangeNotification(const LocationChangeNotification& from);
  LocationChangeNotification(LocationChangeNotification&& from) noexcept
    : LocationChangeNotification() {
    *this = ::std::move(from);
  }

  inline LocationChangeNotification& operator=(const LocationChangeNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationChangeNotification& operator=(LocationChangeNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocationChangeNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocationChangeNotification* internal_default_instance() {
    return reinterpret_cast<const LocationChangeNotification*>(
               &_LocationChangeNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(LocationChangeNotification& a, LocationChangeNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationChangeNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationChangeNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocationChangeNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocationChangeNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocationChangeNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocationChangeNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationChangeNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.LocationChangeNotification";
  }
  protected:
  explicit LocationChangeNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 1,
    kUserNameFieldNumber = 2,
    kDirectoryFieldNumber = 3,
    kSessionFieldNumber = 4,
  };
  // optional string host_name = 1;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional string user_name = 2;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string directory = 3;
  bool has_directory() const;
  private:
  bool _internal_has_directory() const;
  public:
  void clear_directory();
  const std::string& directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // optional string session = 4;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.LocationChangeNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CustomEscapeSequenceNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CustomEscapeSequenceNotification) */ {
 public:
  inline CustomEscapeSequenceNotification() : CustomEscapeSequenceNotification(nullptr) {}
  ~CustomEscapeSequenceNotification() override;
  explicit constexpr CustomEscapeSequenceNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomEscapeSequenceNotification(const CustomEscapeSequenceNotification& from);
  CustomEscapeSequenceNotification(CustomEscapeSequenceNotification&& from) noexcept
    : CustomEscapeSequenceNotification() {
    *this = ::std::move(from);
  }

  inline CustomEscapeSequenceNotification& operator=(const CustomEscapeSequenceNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomEscapeSequenceNotification& operator=(CustomEscapeSequenceNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomEscapeSequenceNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomEscapeSequenceNotification* internal_default_instance() {
    return reinterpret_cast<const CustomEscapeSequenceNotification*>(
               &_CustomEscapeSequenceNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CustomEscapeSequenceNotification& a, CustomEscapeSequenceNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomEscapeSequenceNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomEscapeSequenceNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomEscapeSequenceNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomEscapeSequenceNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomEscapeSequenceNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CustomEscapeSequenceNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomEscapeSequenceNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CustomEscapeSequenceNotification";
  }
  protected:
  explicit CustomEscapeSequenceNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kSenderIdentityFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional string sender_identity = 2;
  bool has_sender_identity() const;
  private:
  bool _internal_has_sender_identity() const;
  public:
  void clear_sender_identity();
  const std::string& sender_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_identity();
  PROTOBUF_NODISCARD std::string* release_sender_identity();
  void set_allocated_sender_identity(std::string* sender_identity);
  private:
  const std::string& _internal_sender_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_identity(const std::string& value);
  std::string* _internal_mutable_sender_identity();
  public:

  // optional string payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CustomEscapeSequenceNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class NewSessionNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.NewSessionNotification) */ {
 public:
  inline NewSessionNotification() : NewSessionNotification(nullptr) {}
  ~NewSessionNotification() override;
  explicit constexpr NewSessionNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewSessionNotification(const NewSessionNotification& from);
  NewSessionNotification(NewSessionNotification&& from) noexcept
    : NewSessionNotification() {
    *this = ::std::move(from);
  }

  inline NewSessionNotification& operator=(const NewSessionNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSessionNotification& operator=(NewSessionNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewSessionNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSessionNotification* internal_default_instance() {
    return reinterpret_cast<const NewSessionNotification*>(
               &_NewSessionNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(NewSessionNotification& a, NewSessionNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSessionNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSessionNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewSessionNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewSessionNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewSessionNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewSessionNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSessionNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.NewSessionNotification";
  }
  protected:
  explicit NewSessionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.NewSessionNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class FocusChangedNotification_Window final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.FocusChangedNotification.Window) */ {
 public:
  inline FocusChangedNotification_Window() : FocusChangedNotification_Window(nullptr) {}
  ~FocusChangedNotification_Window() override;
  explicit constexpr FocusChangedNotification_Window(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusChangedNotification_Window(const FocusChangedNotification_Window& from);
  FocusChangedNotification_Window(FocusChangedNotification_Window&& from) noexcept
    : FocusChangedNotification_Window() {
    *this = ::std::move(from);
  }

  inline FocusChangedNotification_Window& operator=(const FocusChangedNotification_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusChangedNotification_Window& operator=(FocusChangedNotification_Window&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusChangedNotification_Window& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusChangedNotification_Window* internal_default_instance() {
    return reinterpret_cast<const FocusChangedNotification_Window*>(
               &_FocusChangedNotification_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(FocusChangedNotification_Window& a, FocusChangedNotification_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusChangedNotification_Window* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusChangedNotification_Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusChangedNotification_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusChangedNotification_Window>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusChangedNotification_Window& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FocusChangedNotification_Window& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusChangedNotification_Window* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.FocusChangedNotification.Window";
  }
  protected:
  explicit FocusChangedNotification_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FocusChangedNotification_Window_WindowStatus WindowStatus;
  static constexpr WindowStatus TERMINAL_WINDOW_BECAME_KEY =
    FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_BECAME_KEY;
  static constexpr WindowStatus TERMINAL_WINDOW_IS_CURRENT =
    FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_IS_CURRENT;
  static constexpr WindowStatus TERMINAL_WINDOW_RESIGNED_KEY =
    FocusChangedNotification_Window_WindowStatus_TERMINAL_WINDOW_RESIGNED_KEY;
  static inline bool WindowStatus_IsValid(int value) {
    return FocusChangedNotification_Window_WindowStatus_IsValid(value);
  }
  static constexpr WindowStatus WindowStatus_MIN =
    FocusChangedNotification_Window_WindowStatus_WindowStatus_MIN;
  static constexpr WindowStatus WindowStatus_MAX =
    FocusChangedNotification_Window_WindowStatus_WindowStatus_MAX;
  static constexpr int WindowStatus_ARRAYSIZE =
    FocusChangedNotification_Window_WindowStatus_WindowStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WindowStatus_descriptor() {
    return FocusChangedNotification_Window_WindowStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& WindowStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindowStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindowStatus_Name.");
    return FocusChangedNotification_Window_WindowStatus_Name(enum_t_value);
  }
  static inline bool WindowStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WindowStatus* value) {
    return FocusChangedNotification_Window_WindowStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWindowIdFieldNumber = 2,
    kWindowStatusFieldNumber = 1,
  };
  // optional string window_id = 2;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // optional .iterm2.FocusChangedNotification.Window.WindowStatus window_status = 1;
  bool has_window_status() const;
  private:
  bool _internal_has_window_status() const;
  public:
  void clear_window_status();
  ::iterm2::FocusChangedNotification_Window_WindowStatus window_status() const;
  void set_window_status(::iterm2::FocusChangedNotification_Window_WindowStatus value);
  private:
  ::iterm2::FocusChangedNotification_Window_WindowStatus _internal_window_status() const;
  void _internal_set_window_status(::iterm2::FocusChangedNotification_Window_WindowStatus value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.FocusChangedNotification.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  int window_status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class FocusChangedNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.FocusChangedNotification) */ {
 public:
  inline FocusChangedNotification() : FocusChangedNotification(nullptr) {}
  ~FocusChangedNotification() override;
  explicit constexpr FocusChangedNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FocusChangedNotification(const FocusChangedNotification& from);
  FocusChangedNotification(FocusChangedNotification&& from) noexcept
    : FocusChangedNotification() {
    *this = ::std::move(from);
  }

  inline FocusChangedNotification& operator=(const FocusChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusChangedNotification& operator=(FocusChangedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusChangedNotification& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kApplicationActive = 1,
    kWindow = 2,
    kSelectedTab = 3,
    kSession = 4,
    EVENT_NOT_SET = 0,
  };

  static inline const FocusChangedNotification* internal_default_instance() {
    return reinterpret_cast<const FocusChangedNotification*>(
               &_FocusChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(FocusChangedNotification& a, FocusChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusChangedNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusChangedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FocusChangedNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FocusChangedNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FocusChangedNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusChangedNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.FocusChangedNotification";
  }
  protected:
  explicit FocusChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FocusChangedNotification_Window Window;

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationActiveFieldNumber = 1,
    kWindowFieldNumber = 2,
    kSelectedTabFieldNumber = 3,
    kSessionFieldNumber = 4,
  };
  // bool application_active = 1;
  bool has_application_active() const;
  private:
  bool _internal_has_application_active() const;
  public:
  void clear_application_active();
  bool application_active() const;
  void set_application_active(bool value);
  private:
  bool _internal_application_active() const;
  void _internal_set_application_active(bool value);
  public:

  // .iterm2.FocusChangedNotification.Window window = 2;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::iterm2::FocusChangedNotification_Window& window() const;
  PROTOBUF_NODISCARD ::iterm2::FocusChangedNotification_Window* release_window();
  ::iterm2::FocusChangedNotification_Window* mutable_window();
  void set_allocated_window(::iterm2::FocusChangedNotification_Window* window);
  private:
  const ::iterm2::FocusChangedNotification_Window& _internal_window() const;
  ::iterm2::FocusChangedNotification_Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::iterm2::FocusChangedNotification_Window* window);
  ::iterm2::FocusChangedNotification_Window* unsafe_arena_release_window();

  // string selected_tab = 3;
  bool has_selected_tab() const;
  private:
  bool _internal_has_selected_tab() const;
  public:
  void clear_selected_tab();
  const std::string& selected_tab() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selected_tab(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selected_tab();
  PROTOBUF_NODISCARD std::string* release_selected_tab();
  void set_allocated_selected_tab(std::string* selected_tab);
  private:
  const std::string& _internal_selected_tab() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selected_tab(const std::string& value);
  std::string* _internal_mutable_selected_tab();
  public:

  // string session = 4;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.FocusChangedNotification)
 private:
  class _Internal;
  void set_has_application_active();
  void set_has_window();
  void set_has_selected_tab();
  void set_has_session();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool application_active_;
    ::iterm2::FocusChangedNotification_Window* window_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_tab_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TerminateSessionNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TerminateSessionNotification) */ {
 public:
  inline TerminateSessionNotification() : TerminateSessionNotification(nullptr) {}
  ~TerminateSessionNotification() override;
  explicit constexpr TerminateSessionNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminateSessionNotification(const TerminateSessionNotification& from);
  TerminateSessionNotification(TerminateSessionNotification&& from) noexcept
    : TerminateSessionNotification() {
    *this = ::std::move(from);
  }

  inline TerminateSessionNotification& operator=(const TerminateSessionNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateSessionNotification& operator=(TerminateSessionNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminateSessionNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminateSessionNotification* internal_default_instance() {
    return reinterpret_cast<const TerminateSessionNotification*>(
               &_TerminateSessionNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(TerminateSessionNotification& a, TerminateSessionNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateSessionNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminateSessionNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminateSessionNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminateSessionNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminateSessionNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TerminateSessionNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminateSessionNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TerminateSessionNotification";
  }
  protected:
  explicit TerminateSessionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // optional string session_id = 1;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TerminateSessionNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class LayoutChangedNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.LayoutChangedNotification) */ {
 public:
  inline LayoutChangedNotification() : LayoutChangedNotification(nullptr) {}
  ~LayoutChangedNotification() override;
  explicit constexpr LayoutChangedNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutChangedNotification(const LayoutChangedNotification& from);
  LayoutChangedNotification(LayoutChangedNotification&& from) noexcept
    : LayoutChangedNotification() {
    *this = ::std::move(from);
  }

  inline LayoutChangedNotification& operator=(const LayoutChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutChangedNotification& operator=(LayoutChangedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutChangedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutChangedNotification* internal_default_instance() {
    return reinterpret_cast<const LayoutChangedNotification*>(
               &_LayoutChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(LayoutChangedNotification& a, LayoutChangedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutChangedNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutChangedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutChangedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutChangedNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutChangedNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutChangedNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutChangedNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.LayoutChangedNotification";
  }
  protected:
  explicit LayoutChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListSessionsResponseFieldNumber = 1,
  };
  // optional .iterm2.ListSessionsResponse list_sessions_response = 1;
  bool has_list_sessions_response() const;
  private:
  bool _internal_has_list_sessions_response() const;
  public:
  void clear_list_sessions_response();
  const ::iterm2::ListSessionsResponse& list_sessions_response() const;
  PROTOBUF_NODISCARD ::iterm2::ListSessionsResponse* release_list_sessions_response();
  ::iterm2::ListSessionsResponse* mutable_list_sessions_response();
  void set_allocated_list_sessions_response(::iterm2::ListSessionsResponse* list_sessions_response);
  private:
  const ::iterm2::ListSessionsResponse& _internal_list_sessions_response() const;
  ::iterm2::ListSessionsResponse* _internal_mutable_list_sessions_response();
  public:
  void unsafe_arena_set_allocated_list_sessions_response(
      ::iterm2::ListSessionsResponse* list_sessions_response);
  ::iterm2::ListSessionsResponse* unsafe_arena_release_list_sessions_response();

  // @@protoc_insertion_point(class_scope:iterm2.LayoutChangedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::ListSessionsResponse* list_sessions_response_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetBufferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetBufferRequest) */ {
 public:
  inline GetBufferRequest() : GetBufferRequest(nullptr) {}
  ~GetBufferRequest() override;
  explicit constexpr GetBufferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBufferRequest(const GetBufferRequest& from);
  GetBufferRequest(GetBufferRequest&& from) noexcept
    : GetBufferRequest() {
    *this = ::std::move(from);
  }

  inline GetBufferRequest& operator=(const GetBufferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBufferRequest& operator=(GetBufferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBufferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBufferRequest* internal_default_instance() {
    return reinterpret_cast<const GetBufferRequest*>(
               &_GetBufferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(GetBufferRequest& a, GetBufferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBufferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBufferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBufferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBufferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBufferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBufferRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBufferRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetBufferRequest";
  }
  protected:
  explicit GetBufferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kLineRangeFieldNumber = 2,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional .iterm2.LineRange line_range = 2;
  bool has_line_range() const;
  private:
  bool _internal_has_line_range() const;
  public:
  void clear_line_range();
  const ::iterm2::LineRange& line_range() const;
  PROTOBUF_NODISCARD ::iterm2::LineRange* release_line_range();
  ::iterm2::LineRange* mutable_line_range();
  void set_allocated_line_range(::iterm2::LineRange* line_range);
  private:
  const ::iterm2::LineRange& _internal_line_range() const;
  ::iterm2::LineRange* _internal_mutable_line_range();
  public:
  void unsafe_arena_set_allocated_line_range(
      ::iterm2::LineRange* line_range);
  ::iterm2::LineRange* unsafe_arena_release_line_range();

  // @@protoc_insertion_point(class_scope:iterm2.GetBufferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::iterm2::LineRange* line_range_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetBufferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetBufferResponse) */ {
 public:
  inline GetBufferResponse() : GetBufferResponse(nullptr) {}
  ~GetBufferResponse() override;
  explicit constexpr GetBufferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBufferResponse(const GetBufferResponse& from);
  GetBufferResponse(GetBufferResponse&& from) noexcept
    : GetBufferResponse() {
    *this = ::std::move(from);
  }

  inline GetBufferResponse& operator=(const GetBufferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBufferResponse& operator=(GetBufferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBufferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBufferResponse* internal_default_instance() {
    return reinterpret_cast<const GetBufferResponse*>(
               &_GetBufferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(GetBufferResponse& a, GetBufferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBufferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBufferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBufferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBufferResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBufferResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBufferResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBufferResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetBufferResponse";
  }
  protected:
  explicit GetBufferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetBufferResponse_Status Status;
  static constexpr Status OK =
    GetBufferResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    GetBufferResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status INVALID_LINE_RANGE =
    GetBufferResponse_Status_INVALID_LINE_RANGE;
  static constexpr Status REQUEST_MALFORMED =
    GetBufferResponse_Status_REQUEST_MALFORMED;
  static inline bool Status_IsValid(int value) {
    return GetBufferResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetBufferResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetBufferResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetBufferResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetBufferResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetBufferResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetBufferResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 3,
    kRangeFieldNumber = 2,
    kCursorFieldNumber = 4,
    kWindowedCoordRangeFieldNumber = 6,
    kNumLinesAboveScreenFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // repeated .iterm2.LineContents contents = 3;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::iterm2::LineContents* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::LineContents >*
      mutable_contents();
  private:
  const ::iterm2::LineContents& _internal_contents(int index) const;
  ::iterm2::LineContents* _internal_add_contents();
  public:
  const ::iterm2::LineContents& contents(int index) const;
  ::iterm2::LineContents* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::LineContents >&
      contents() const;

  // optional .iterm2.Range range = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  PROTOBUF_DEPRECATED void clear_range();
  PROTOBUF_DEPRECATED const ::iterm2::Range& range() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::iterm2::Range* release_range();
  PROTOBUF_DEPRECATED ::iterm2::Range* mutable_range();
  PROTOBUF_DEPRECATED void set_allocated_range(::iterm2::Range* range);
  private:
  const ::iterm2::Range& _internal_range() const;
  ::iterm2::Range* _internal_mutable_range();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_range(
      ::iterm2::Range* range);
  PROTOBUF_DEPRECATED ::iterm2::Range* unsafe_arena_release_range();

  // optional .iterm2.Coord cursor = 4;
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  const ::iterm2::Coord& cursor() const;
  PROTOBUF_NODISCARD ::iterm2::Coord* release_cursor();
  ::iterm2::Coord* mutable_cursor();
  void set_allocated_cursor(::iterm2::Coord* cursor);
  private:
  const ::iterm2::Coord& _internal_cursor() const;
  ::iterm2::Coord* _internal_mutable_cursor();
  public:
  void unsafe_arena_set_allocated_cursor(
      ::iterm2::Coord* cursor);
  ::iterm2::Coord* unsafe_arena_release_cursor();

  // optional .iterm2.WindowedCoordRange windowed_coord_range = 6;
  bool has_windowed_coord_range() const;
  private:
  bool _internal_has_windowed_coord_range() const;
  public:
  void clear_windowed_coord_range();
  const ::iterm2::WindowedCoordRange& windowed_coord_range() const;
  PROTOBUF_NODISCARD ::iterm2::WindowedCoordRange* release_windowed_coord_range();
  ::iterm2::WindowedCoordRange* mutable_windowed_coord_range();
  void set_allocated_windowed_coord_range(::iterm2::WindowedCoordRange* windowed_coord_range);
  private:
  const ::iterm2::WindowedCoordRange& _internal_windowed_coord_range() const;
  ::iterm2::WindowedCoordRange* _internal_mutable_windowed_coord_range();
  public:
  void unsafe_arena_set_allocated_windowed_coord_range(
      ::iterm2::WindowedCoordRange* windowed_coord_range);
  ::iterm2::WindowedCoordRange* unsafe_arena_release_windowed_coord_range();

  // optional int64 num_lines_above_screen = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_num_lines_above_screen() const;
  private:
  bool _internal_has_num_lines_above_screen() const;
  public:
  PROTOBUF_DEPRECATED void clear_num_lines_above_screen();
  PROTOBUF_DEPRECATED int64_t num_lines_above_screen() const;
  PROTOBUF_DEPRECATED void set_num_lines_above_screen(int64_t value);
  private:
  int64_t _internal_num_lines_above_screen() const;
  void _internal_set_num_lines_above_screen(int64_t value);
  public:

  // optional .iterm2.GetBufferResponse.Status status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::GetBufferResponse_Status status() const;
  void set_status(::iterm2::GetBufferResponse_Status value);
  private:
  ::iterm2::GetBufferResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::GetBufferResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.GetBufferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::LineContents > contents_;
  ::iterm2::Range* range_;
  ::iterm2::Coord* cursor_;
  ::iterm2::WindowedCoordRange* windowed_coord_range_;
  int64_t num_lines_above_screen_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetPromptRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetPromptRequest) */ {
 public:
  inline GetPromptRequest() : GetPromptRequest(nullptr) {}
  ~GetPromptRequest() override;
  explicit constexpr GetPromptRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPromptRequest(const GetPromptRequest& from);
  GetPromptRequest(GetPromptRequest&& from) noexcept
    : GetPromptRequest() {
    *this = ::std::move(from);
  }

  inline GetPromptRequest& operator=(const GetPromptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPromptRequest& operator=(GetPromptRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPromptRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPromptRequest* internal_default_instance() {
    return reinterpret_cast<const GetPromptRequest*>(
               &_GetPromptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(GetPromptRequest& a, GetPromptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPromptRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPromptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPromptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPromptRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPromptRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPromptRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPromptRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetPromptRequest";
  }
  protected:
  explicit GetPromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kUniquePromptIdFieldNumber = 2,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional string unique_prompt_id = 2;
  bool has_unique_prompt_id() const;
  private:
  bool _internal_has_unique_prompt_id() const;
  public:
  void clear_unique_prompt_id();
  const std::string& unique_prompt_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_prompt_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_prompt_id();
  PROTOBUF_NODISCARD std::string* release_unique_prompt_id();
  void set_allocated_unique_prompt_id(std::string* unique_prompt_id);
  private:
  const std::string& _internal_unique_prompt_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_prompt_id(const std::string& value);
  std::string* _internal_mutable_unique_prompt_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.GetPromptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_prompt_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetPromptResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetPromptResponse) */ {
 public:
  inline GetPromptResponse() : GetPromptResponse(nullptr) {}
  ~GetPromptResponse() override;
  explicit constexpr GetPromptResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPromptResponse(const GetPromptResponse& from);
  GetPromptResponse(GetPromptResponse&& from) noexcept
    : GetPromptResponse() {
    *this = ::std::move(from);
  }

  inline GetPromptResponse& operator=(const GetPromptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPromptResponse& operator=(GetPromptResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPromptResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPromptResponse* internal_default_instance() {
    return reinterpret_cast<const GetPromptResponse*>(
               &_GetPromptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(GetPromptResponse& a, GetPromptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPromptResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPromptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPromptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPromptResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPromptResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPromptResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPromptResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetPromptResponse";
  }
  protected:
  explicit GetPromptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetPromptResponse_Status Status;
  static constexpr Status OK =
    GetPromptResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    GetPromptResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    GetPromptResponse_Status_REQUEST_MALFORMED;
  static constexpr Status PROMPT_UNAVAILABLE =
    GetPromptResponse_Status_PROMPT_UNAVAILABLE;
  static inline bool Status_IsValid(int value) {
    return GetPromptResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetPromptResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetPromptResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetPromptResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetPromptResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetPromptResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetPromptResponse_Status_Parse(name, value);
  }

  typedef GetPromptResponse_State State;
  static constexpr State EDITING =
    GetPromptResponse_State_EDITING;
  static constexpr State RUNNING =
    GetPromptResponse_State_RUNNING;
  static constexpr State FINISHED =
    GetPromptResponse_State_FINISHED;
  static inline bool State_IsValid(int value) {
    return GetPromptResponse_State_IsValid(value);
  }
  static constexpr State State_MIN =
    GetPromptResponse_State_State_MIN;
  static constexpr State State_MAX =
    GetPromptResponse_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    GetPromptResponse_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return GetPromptResponse_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return GetPromptResponse_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return GetPromptResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWorkingDirectoryFieldNumber = 5,
    kCommandFieldNumber = 6,
    kUniquePromptIdFieldNumber = 10,
    kPromptRangeFieldNumber = 2,
    kCommandRangeFieldNumber = 3,
    kOutputRangeFieldNumber = 4,
    kStatusFieldNumber = 1,
    kPromptStateFieldNumber = 7,
    kExitStatusFieldNumber = 9,
  };
  // optional string working_directory = 5;
  bool has_working_directory() const;
  private:
  bool _internal_has_working_directory() const;
  public:
  void clear_working_directory();
  const std::string& working_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_directory();
  PROTOBUF_NODISCARD std::string* release_working_directory();
  void set_allocated_working_directory(std::string* working_directory);
  private:
  const std::string& _internal_working_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_directory(const std::string& value);
  std::string* _internal_mutable_working_directory();
  public:

  // optional string command = 6;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // optional string unique_prompt_id = 10;
  bool has_unique_prompt_id() const;
  private:
  bool _internal_has_unique_prompt_id() const;
  public:
  void clear_unique_prompt_id();
  const std::string& unique_prompt_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_prompt_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_prompt_id();
  PROTOBUF_NODISCARD std::string* release_unique_prompt_id();
  void set_allocated_unique_prompt_id(std::string* unique_prompt_id);
  private:
  const std::string& _internal_unique_prompt_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_prompt_id(const std::string& value);
  std::string* _internal_mutable_unique_prompt_id();
  public:

  // optional .iterm2.CoordRange prompt_range = 2;
  bool has_prompt_range() const;
  private:
  bool _internal_has_prompt_range() const;
  public:
  void clear_prompt_range();
  const ::iterm2::CoordRange& prompt_range() const;
  PROTOBUF_NODISCARD ::iterm2::CoordRange* release_prompt_range();
  ::iterm2::CoordRange* mutable_prompt_range();
  void set_allocated_prompt_range(::iterm2::CoordRange* prompt_range);
  private:
  const ::iterm2::CoordRange& _internal_prompt_range() const;
  ::iterm2::CoordRange* _internal_mutable_prompt_range();
  public:
  void unsafe_arena_set_allocated_prompt_range(
      ::iterm2::CoordRange* prompt_range);
  ::iterm2::CoordRange* unsafe_arena_release_prompt_range();

  // optional .iterm2.CoordRange command_range = 3;
  bool has_command_range() const;
  private:
  bool _internal_has_command_range() const;
  public:
  void clear_command_range();
  const ::iterm2::CoordRange& command_range() const;
  PROTOBUF_NODISCARD ::iterm2::CoordRange* release_command_range();
  ::iterm2::CoordRange* mutable_command_range();
  void set_allocated_command_range(::iterm2::CoordRange* command_range);
  private:
  const ::iterm2::CoordRange& _internal_command_range() const;
  ::iterm2::CoordRange* _internal_mutable_command_range();
  public:
  void unsafe_arena_set_allocated_command_range(
      ::iterm2::CoordRange* command_range);
  ::iterm2::CoordRange* unsafe_arena_release_command_range();

  // optional .iterm2.CoordRange output_range = 4;
  bool has_output_range() const;
  private:
  bool _internal_has_output_range() const;
  public:
  void clear_output_range();
  const ::iterm2::CoordRange& output_range() const;
  PROTOBUF_NODISCARD ::iterm2::CoordRange* release_output_range();
  ::iterm2::CoordRange* mutable_output_range();
  void set_allocated_output_range(::iterm2::CoordRange* output_range);
  private:
  const ::iterm2::CoordRange& _internal_output_range() const;
  ::iterm2::CoordRange* _internal_mutable_output_range();
  public:
  void unsafe_arena_set_allocated_output_range(
      ::iterm2::CoordRange* output_range);
  ::iterm2::CoordRange* unsafe_arena_release_output_range();

  // optional .iterm2.GetPromptResponse.Status status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::GetPromptResponse_Status status() const;
  void set_status(::iterm2::GetPromptResponse_Status value);
  private:
  ::iterm2::GetPromptResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::GetPromptResponse_Status value);
  public:

  // optional .iterm2.GetPromptResponse.State prompt_state = 7;
  bool has_prompt_state() const;
  private:
  bool _internal_has_prompt_state() const;
  public:
  void clear_prompt_state();
  ::iterm2::GetPromptResponse_State prompt_state() const;
  void set_prompt_state(::iterm2::GetPromptResponse_State value);
  private:
  ::iterm2::GetPromptResponse_State _internal_prompt_state() const;
  void _internal_set_prompt_state(::iterm2::GetPromptResponse_State value);
  public:

  // optional uint32 exit_status = 9;
  bool has_exit_status() const;
  private:
  bool _internal_has_exit_status() const;
  public:
  void clear_exit_status();
  uint32_t exit_status() const;
  void set_exit_status(uint32_t value);
  private:
  uint32_t _internal_exit_status() const;
  void _internal_set_exit_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.GetPromptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_prompt_id_;
  ::iterm2::CoordRange* prompt_range_;
  ::iterm2::CoordRange* command_range_;
  ::iterm2::CoordRange* output_range_;
  int status_;
  int prompt_state_;
  uint32_t exit_status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListPromptsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListPromptsRequest) */ {
 public:
  inline ListPromptsRequest() : ListPromptsRequest(nullptr) {}
  ~ListPromptsRequest() override;
  explicit constexpr ListPromptsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPromptsRequest(const ListPromptsRequest& from);
  ListPromptsRequest(ListPromptsRequest&& from) noexcept
    : ListPromptsRequest() {
    *this = ::std::move(from);
  }

  inline ListPromptsRequest& operator=(const ListPromptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPromptsRequest& operator=(ListPromptsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPromptsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPromptsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPromptsRequest*>(
               &_ListPromptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(ListPromptsRequest& a, ListPromptsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPromptsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPromptsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPromptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPromptsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPromptsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPromptsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPromptsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListPromptsRequest";
  }
  protected:
  explicit ListPromptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kFirstUniqueIdFieldNumber = 2,
    kLastUniqueIdFieldNumber = 3,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional string first_unique_id = 2;
  bool has_first_unique_id() const;
  private:
  bool _internal_has_first_unique_id() const;
  public:
  void clear_first_unique_id();
  const std::string& first_unique_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_unique_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_unique_id();
  PROTOBUF_NODISCARD std::string* release_first_unique_id();
  void set_allocated_first_unique_id(std::string* first_unique_id);
  private:
  const std::string& _internal_first_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_unique_id(const std::string& value);
  std::string* _internal_mutable_first_unique_id();
  public:

  // optional string last_unique_id = 3;
  bool has_last_unique_id() const;
  private:
  bool _internal_has_last_unique_id() const;
  public:
  void clear_last_unique_id();
  const std::string& last_unique_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_unique_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_unique_id();
  PROTOBUF_NODISCARD std::string* release_last_unique_id();
  void set_allocated_last_unique_id(std::string* last_unique_id);
  private:
  const std::string& _internal_last_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_unique_id(const std::string& value);
  std::string* _internal_mutable_last_unique_id();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ListPromptsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_unique_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_unique_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListPromptsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListPromptsResponse) */ {
 public:
  inline ListPromptsResponse() : ListPromptsResponse(nullptr) {}
  ~ListPromptsResponse() override;
  explicit constexpr ListPromptsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPromptsResponse(const ListPromptsResponse& from);
  ListPromptsResponse(ListPromptsResponse&& from) noexcept
    : ListPromptsResponse() {
    *this = ::std::move(from);
  }

  inline ListPromptsResponse& operator=(const ListPromptsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPromptsResponse& operator=(ListPromptsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPromptsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPromptsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPromptsResponse*>(
               &_ListPromptsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(ListPromptsResponse& a, ListPromptsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPromptsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPromptsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPromptsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPromptsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPromptsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPromptsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPromptsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListPromptsResponse";
  }
  protected:
  explicit ListPromptsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListPromptsResponse_Status Status;
  static constexpr Status OK =
    ListPromptsResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    ListPromptsResponse_Status_SESSION_NOT_FOUND;
  static inline bool Status_IsValid(int value) {
    return ListPromptsResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ListPromptsResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ListPromptsResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ListPromptsResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ListPromptsResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ListPromptsResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ListPromptsResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUniquePromptIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string unique_prompt_id = 2;
  int unique_prompt_id_size() const;
  private:
  int _internal_unique_prompt_id_size() const;
  public:
  void clear_unique_prompt_id();
  const std::string& unique_prompt_id(int index) const;
  std::string* mutable_unique_prompt_id(int index);
  void set_unique_prompt_id(int index, const std::string& value);
  void set_unique_prompt_id(int index, std::string&& value);
  void set_unique_prompt_id(int index, const char* value);
  void set_unique_prompt_id(int index, const char* value, size_t size);
  std::string* add_unique_prompt_id();
  void add_unique_prompt_id(const std::string& value);
  void add_unique_prompt_id(std::string&& value);
  void add_unique_prompt_id(const char* value);
  void add_unique_prompt_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unique_prompt_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unique_prompt_id();
  private:
  const std::string& _internal_unique_prompt_id(int index) const;
  std::string* _internal_add_unique_prompt_id();
  public:

  // optional .iterm2.ListPromptsResponse.Status status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::ListPromptsResponse_Status status() const;
  void set_status(::iterm2::ListPromptsResponse_Status value);
  private:
  ::iterm2::ListPromptsResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::ListPromptsResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ListPromptsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unique_prompt_id_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetProfilePropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetProfilePropertyRequest) */ {
 public:
  inline GetProfilePropertyRequest() : GetProfilePropertyRequest(nullptr) {}
  ~GetProfilePropertyRequest() override;
  explicit constexpr GetProfilePropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProfilePropertyRequest(const GetProfilePropertyRequest& from);
  GetProfilePropertyRequest(GetProfilePropertyRequest&& from) noexcept
    : GetProfilePropertyRequest() {
    *this = ::std::move(from);
  }

  inline GetProfilePropertyRequest& operator=(const GetProfilePropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProfilePropertyRequest& operator=(GetProfilePropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProfilePropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProfilePropertyRequest* internal_default_instance() {
    return reinterpret_cast<const GetProfilePropertyRequest*>(
               &_GetProfilePropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(GetProfilePropertyRequest& a, GetProfilePropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProfilePropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProfilePropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProfilePropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProfilePropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProfilePropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProfilePropertyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProfilePropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetProfilePropertyRequest";
  }
  protected:
  explicit GetProfilePropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kSessionFieldNumber = 1,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.GetProfilePropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ProfileProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ProfileProperty) */ {
 public:
  inline ProfileProperty() : ProfileProperty(nullptr) {}
  ~ProfileProperty() override;
  explicit constexpr ProfileProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileProperty(const ProfileProperty& from);
  ProfileProperty(ProfileProperty&& from) noexcept
    : ProfileProperty() {
    *this = ::std::move(from);
  }

  inline ProfileProperty& operator=(const ProfileProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileProperty& operator=(ProfileProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileProperty* internal_default_instance() {
    return reinterpret_cast<const ProfileProperty*>(
               &_ProfileProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(ProfileProperty& a, ProfileProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfileProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProfileProperty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ProfileProperty";
  }
  protected:
  explicit ProfileProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kJsonValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string json_value = 2;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ProfileProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class GetProfilePropertyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.GetProfilePropertyResponse) */ {
 public:
  inline GetProfilePropertyResponse() : GetProfilePropertyResponse(nullptr) {}
  ~GetProfilePropertyResponse() override;
  explicit constexpr GetProfilePropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProfilePropertyResponse(const GetProfilePropertyResponse& from);
  GetProfilePropertyResponse(GetProfilePropertyResponse&& from) noexcept
    : GetProfilePropertyResponse() {
    *this = ::std::move(from);
  }

  inline GetProfilePropertyResponse& operator=(const GetProfilePropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProfilePropertyResponse& operator=(GetProfilePropertyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProfilePropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProfilePropertyResponse* internal_default_instance() {
    return reinterpret_cast<const GetProfilePropertyResponse*>(
               &_GetProfilePropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(GetProfilePropertyResponse& a, GetProfilePropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProfilePropertyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProfilePropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProfilePropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProfilePropertyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProfilePropertyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProfilePropertyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProfilePropertyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.GetProfilePropertyResponse";
  }
  protected:
  explicit GetProfilePropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetProfilePropertyResponse_Status Status;
  static constexpr Status OK =
    GetProfilePropertyResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    GetProfilePropertyResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    GetProfilePropertyResponse_Status_REQUEST_MALFORMED;
  static constexpr Status ERROR =
    GetProfilePropertyResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return GetProfilePropertyResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetProfilePropertyResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetProfilePropertyResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetProfilePropertyResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetProfilePropertyResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetProfilePropertyResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetProfilePropertyResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated .iterm2.ProfileProperty properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::iterm2::ProfileProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
      mutable_properties();
  private:
  const ::iterm2::ProfileProperty& _internal_properties(int index) const;
  ::iterm2::ProfileProperty* _internal_add_properties();
  public:
  const ::iterm2::ProfileProperty& properties(int index) const;
  ::iterm2::ProfileProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
      properties() const;

  // optional .iterm2.GetProfilePropertyResponse.Status status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::GetProfilePropertyResponse_Status status() const;
  void set_status(::iterm2::GetProfilePropertyResponse_Status value);
  private:
  ::iterm2::GetProfilePropertyResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::GetProfilePropertyResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.GetProfilePropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty > properties_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetProfilePropertyRequest_GuidList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetProfilePropertyRequest.GuidList) */ {
 public:
  inline SetProfilePropertyRequest_GuidList() : SetProfilePropertyRequest_GuidList(nullptr) {}
  ~SetProfilePropertyRequest_GuidList() override;
  explicit constexpr SetProfilePropertyRequest_GuidList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProfilePropertyRequest_GuidList(const SetProfilePropertyRequest_GuidList& from);
  SetProfilePropertyRequest_GuidList(SetProfilePropertyRequest_GuidList&& from) noexcept
    : SetProfilePropertyRequest_GuidList() {
    *this = ::std::move(from);
  }

  inline SetProfilePropertyRequest_GuidList& operator=(const SetProfilePropertyRequest_GuidList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProfilePropertyRequest_GuidList& operator=(SetProfilePropertyRequest_GuidList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProfilePropertyRequest_GuidList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProfilePropertyRequest_GuidList* internal_default_instance() {
    return reinterpret_cast<const SetProfilePropertyRequest_GuidList*>(
               &_SetProfilePropertyRequest_GuidList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(SetProfilePropertyRequest_GuidList& a, SetProfilePropertyRequest_GuidList& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProfilePropertyRequest_GuidList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProfilePropertyRequest_GuidList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProfilePropertyRequest_GuidList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetProfilePropertyRequest_GuidList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetProfilePropertyRequest_GuidList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetProfilePropertyRequest_GuidList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProfilePropertyRequest_GuidList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetProfilePropertyRequest.GuidList";
  }
  protected:
  explicit SetProfilePropertyRequest_GuidList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidsFieldNumber = 1,
  };
  // repeated string guids = 1;
  int guids_size() const;
  private:
  int _internal_guids_size() const;
  public:
  void clear_guids();
  const std::string& guids(int index) const;
  std::string* mutable_guids(int index);
  void set_guids(int index, const std::string& value);
  void set_guids(int index, std::string&& value);
  void set_guids(int index, const char* value);
  void set_guids(int index, const char* value, size_t size);
  std::string* add_guids();
  void add_guids(const std::string& value);
  void add_guids(std::string&& value);
  void add_guids(const char* value);
  void add_guids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& guids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_guids();
  private:
  const std::string& _internal_guids(int index) const;
  std::string* _internal_add_guids();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SetProfilePropertyRequest.GuidList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> guids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetProfilePropertyRequest_Assignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetProfilePropertyRequest.Assignment) */ {
 public:
  inline SetProfilePropertyRequest_Assignment() : SetProfilePropertyRequest_Assignment(nullptr) {}
  ~SetProfilePropertyRequest_Assignment() override;
  explicit constexpr SetProfilePropertyRequest_Assignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProfilePropertyRequest_Assignment(const SetProfilePropertyRequest_Assignment& from);
  SetProfilePropertyRequest_Assignment(SetProfilePropertyRequest_Assignment&& from) noexcept
    : SetProfilePropertyRequest_Assignment() {
    *this = ::std::move(from);
  }

  inline SetProfilePropertyRequest_Assignment& operator=(const SetProfilePropertyRequest_Assignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProfilePropertyRequest_Assignment& operator=(SetProfilePropertyRequest_Assignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProfilePropertyRequest_Assignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProfilePropertyRequest_Assignment* internal_default_instance() {
    return reinterpret_cast<const SetProfilePropertyRequest_Assignment*>(
               &_SetProfilePropertyRequest_Assignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(SetProfilePropertyRequest_Assignment& a, SetProfilePropertyRequest_Assignment& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProfilePropertyRequest_Assignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProfilePropertyRequest_Assignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProfilePropertyRequest_Assignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetProfilePropertyRequest_Assignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetProfilePropertyRequest_Assignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetProfilePropertyRequest_Assignment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProfilePropertyRequest_Assignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetProfilePropertyRequest.Assignment";
  }
  protected:
  explicit SetProfilePropertyRequest_Assignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kJsonValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string json_value = 2;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SetProfilePropertyRequest.Assignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetProfilePropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetProfilePropertyRequest) */ {
 public:
  inline SetProfilePropertyRequest() : SetProfilePropertyRequest(nullptr) {}
  ~SetProfilePropertyRequest() override;
  explicit constexpr SetProfilePropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProfilePropertyRequest(const SetProfilePropertyRequest& from);
  SetProfilePropertyRequest(SetProfilePropertyRequest&& from) noexcept
    : SetProfilePropertyRequest() {
    *this = ::std::move(from);
  }

  inline SetProfilePropertyRequest& operator=(const SetProfilePropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProfilePropertyRequest& operator=(SetProfilePropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProfilePropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kSession = 1,
    kGuidList = 2,
    TARGET_NOT_SET = 0,
  };

  static inline const SetProfilePropertyRequest* internal_default_instance() {
    return reinterpret_cast<const SetProfilePropertyRequest*>(
               &_SetProfilePropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(SetProfilePropertyRequest& a, SetProfilePropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProfilePropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProfilePropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProfilePropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetProfilePropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetProfilePropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetProfilePropertyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProfilePropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetProfilePropertyRequest";
  }
  protected:
  explicit SetProfilePropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetProfilePropertyRequest_GuidList GuidList;
  typedef SetProfilePropertyRequest_Assignment Assignment;

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 5,
    kKeyFieldNumber = 3,
    kJsonValueFieldNumber = 4,
    kSessionFieldNumber = 1,
    kGuidListFieldNumber = 2,
  };
  // repeated .iterm2.SetProfilePropertyRequest.Assignment assignments = 5;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::iterm2::SetProfilePropertyRequest_Assignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SetProfilePropertyRequest_Assignment >*
      mutable_assignments();
  private:
  const ::iterm2::SetProfilePropertyRequest_Assignment& _internal_assignments(int index) const;
  ::iterm2::SetProfilePropertyRequest_Assignment* _internal_add_assignments();
  public:
  const ::iterm2::SetProfilePropertyRequest_Assignment& assignments(int index) const;
  ::iterm2::SetProfilePropertyRequest_Assignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SetProfilePropertyRequest_Assignment >&
      assignments() const;

  // optional string key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string json_value = 4;
  bool has_json_value() const;
  private:
  bool _internal_has_json_value() const;
  public:
  void clear_json_value();
  const std::string& json_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* json_value);
  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(const std::string& value);
  std::string* _internal_mutable_json_value();
  public:

  // string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // .iterm2.SetProfilePropertyRequest.GuidList guid_list = 2;
  bool has_guid_list() const;
  private:
  bool _internal_has_guid_list() const;
  public:
  void clear_guid_list();
  const ::iterm2::SetProfilePropertyRequest_GuidList& guid_list() const;
  PROTOBUF_NODISCARD ::iterm2::SetProfilePropertyRequest_GuidList* release_guid_list();
  ::iterm2::SetProfilePropertyRequest_GuidList* mutable_guid_list();
  void set_allocated_guid_list(::iterm2::SetProfilePropertyRequest_GuidList* guid_list);
  private:
  const ::iterm2::SetProfilePropertyRequest_GuidList& _internal_guid_list() const;
  ::iterm2::SetProfilePropertyRequest_GuidList* _internal_mutable_guid_list();
  public:
  void unsafe_arena_set_allocated_guid_list(
      ::iterm2::SetProfilePropertyRequest_GuidList* guid_list);
  ::iterm2::SetProfilePropertyRequest_GuidList* unsafe_arena_release_guid_list();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.SetProfilePropertyRequest)
 private:
  class _Internal;
  void set_has_session();
  void set_has_guid_list();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SetProfilePropertyRequest_Assignment > assignments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
    ::iterm2::SetProfilePropertyRequest_GuidList* guid_list_;
  } target_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SetProfilePropertyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SetProfilePropertyResponse) */ {
 public:
  inline SetProfilePropertyResponse() : SetProfilePropertyResponse(nullptr) {}
  ~SetProfilePropertyResponse() override;
  explicit constexpr SetProfilePropertyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProfilePropertyResponse(const SetProfilePropertyResponse& from);
  SetProfilePropertyResponse(SetProfilePropertyResponse&& from) noexcept
    : SetProfilePropertyResponse() {
    *this = ::std::move(from);
  }

  inline SetProfilePropertyResponse& operator=(const SetProfilePropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProfilePropertyResponse& operator=(SetProfilePropertyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProfilePropertyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProfilePropertyResponse* internal_default_instance() {
    return reinterpret_cast<const SetProfilePropertyResponse*>(
               &_SetProfilePropertyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(SetProfilePropertyResponse& a, SetProfilePropertyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProfilePropertyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProfilePropertyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProfilePropertyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetProfilePropertyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetProfilePropertyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetProfilePropertyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProfilePropertyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SetProfilePropertyResponse";
  }
  protected:
  explicit SetProfilePropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetProfilePropertyResponse_Status Status;
  static constexpr Status OK =
    SetProfilePropertyResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    SetProfilePropertyResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status REQUEST_MALFORMED =
    SetProfilePropertyResponse_Status_REQUEST_MALFORMED;
  static constexpr Status BAD_GUID =
    SetProfilePropertyResponse_Status_BAD_GUID;
  static inline bool Status_IsValid(int value) {
    return SetProfilePropertyResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SetProfilePropertyResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SetProfilePropertyResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SetProfilePropertyResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SetProfilePropertyResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SetProfilePropertyResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SetProfilePropertyResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.SetProfilePropertyResponse.Status status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SetProfilePropertyResponse_Status status() const;
  void set_status(::iterm2::SetProfilePropertyResponse_Status value);
  private:
  ::iterm2::SetProfilePropertyResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SetProfilePropertyResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SetProfilePropertyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TransactionRequest) */ {
 public:
  inline TransactionRequest() : TransactionRequest(nullptr) {}
  ~TransactionRequest() override;
  explicit constexpr TransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionRequest(const TransactionRequest& from);
  TransactionRequest(TransactionRequest&& from) noexcept
    : TransactionRequest() {
    *this = ::std::move(from);
  }

  inline TransactionRequest& operator=(const TransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRequest& operator=(TransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionRequest*>(
               &_TransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(TransactionRequest& a, TransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TransactionRequest";
  }
  protected:
  explicit TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
  };
  // optional bool begin = 1;
  bool has_begin() const;
  private:
  bool _internal_has_begin() const;
  public:
  void clear_begin();
  bool begin() const;
  void set_begin(bool value);
  private:
  bool _internal_begin() const;
  void _internal_set_begin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool begin_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class TransactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.TransactionResponse) */ {
 public:
  inline TransactionResponse() : TransactionResponse(nullptr) {}
  ~TransactionResponse() override;
  explicit constexpr TransactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionResponse(const TransactionResponse& from);
  TransactionResponse(TransactionResponse&& from) noexcept
    : TransactionResponse() {
    *this = ::std::move(from);
  }

  inline TransactionResponse& operator=(const TransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionResponse& operator=(TransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionResponse* internal_default_instance() {
    return reinterpret_cast<const TransactionResponse*>(
               &_TransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(TransactionResponse& a, TransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.TransactionResponse";
  }
  protected:
  explicit TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransactionResponse_Status Status;
  static constexpr Status OK =
    TransactionResponse_Status_OK;
  static constexpr Status NO_TRANSACTION =
    TransactionResponse_Status_NO_TRANSACTION;
  static constexpr Status ALREADY_IN_TRANSACTION =
    TransactionResponse_Status_ALREADY_IN_TRANSACTION;
  static inline bool Status_IsValid(int value) {
    return TransactionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TransactionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TransactionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TransactionResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TransactionResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TransactionResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return TransactionResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.TransactionResponse.Status status = 1 [default = OK];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::TransactionResponse_Status status() const;
  void set_status(::iterm2::TransactionResponse_Status value);
  private:
  ::iterm2::TransactionResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::TransactionResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.TransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class LineRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.LineRange) */ {
 public:
  inline LineRange() : LineRange(nullptr) {}
  ~LineRange() override;
  explicit constexpr LineRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineRange(const LineRange& from);
  LineRange(LineRange&& from) noexcept
    : LineRange() {
    *this = ::std::move(from);
  }

  inline LineRange& operator=(const LineRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineRange& operator=(LineRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineRange* internal_default_instance() {
    return reinterpret_cast<const LineRange*>(
               &_LineRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(LineRange& a, LineRange& b) {
    a.Swap(&b);
  }
  inline void Swap(LineRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LineRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LineRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.LineRange";
  }
  protected:
  explicit LineRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowedCoordRangeFieldNumber = 3,
    kScreenContentsOnlyFieldNumber = 1,
    kTrailingLinesFieldNumber = 2,
  };
  // optional .iterm2.WindowedCoordRange windowed_coord_range = 3;
  bool has_windowed_coord_range() const;
  private:
  bool _internal_has_windowed_coord_range() const;
  public:
  void clear_windowed_coord_range();
  const ::iterm2::WindowedCoordRange& windowed_coord_range() const;
  PROTOBUF_NODISCARD ::iterm2::WindowedCoordRange* release_windowed_coord_range();
  ::iterm2::WindowedCoordRange* mutable_windowed_coord_range();
  void set_allocated_windowed_coord_range(::iterm2::WindowedCoordRange* windowed_coord_range);
  private:
  const ::iterm2::WindowedCoordRange& _internal_windowed_coord_range() const;
  ::iterm2::WindowedCoordRange* _internal_mutable_windowed_coord_range();
  public:
  void unsafe_arena_set_allocated_windowed_coord_range(
      ::iterm2::WindowedCoordRange* windowed_coord_range);
  ::iterm2::WindowedCoordRange* unsafe_arena_release_windowed_coord_range();

  // optional bool screen_contents_only = 1;
  bool has_screen_contents_only() const;
  private:
  bool _internal_has_screen_contents_only() const;
  public:
  void clear_screen_contents_only();
  bool screen_contents_only() const;
  void set_screen_contents_only(bool value);
  private:
  bool _internal_screen_contents_only() const;
  void _internal_set_screen_contents_only(bool value);
  public:

  // optional int32 trailing_lines = 2;
  bool has_trailing_lines() const;
  private:
  bool _internal_has_trailing_lines() const;
  public:
  void clear_trailing_lines();
  int32_t trailing_lines() const;
  void set_trailing_lines(int32_t value);
  private:
  int32_t _internal_trailing_lines() const;
  void _internal_set_trailing_lines(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.LineRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::WindowedCoordRange* windowed_coord_range_;
  bool screen_contents_only_;
  int32_t trailing_lines_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit constexpr Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Range& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // optional int64 location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  int64_t location() const;
  void set_location(int64_t value);
  private:
  int64_t _internal_location() const;
  void _internal_set_location(int64_t value);
  public:

  // optional int64 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int64_t length() const;
  void set_length(int64_t value);
  private:
  int64_t _internal_length() const;
  void _internal_set_length(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t location_;
  int64_t length_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CoordRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CoordRange) */ {
 public:
  inline CoordRange() : CoordRange(nullptr) {}
  ~CoordRange() override;
  explicit constexpr CoordRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordRange(const CoordRange& from);
  CoordRange(CoordRange&& from) noexcept
    : CoordRange() {
    *this = ::std::move(from);
  }

  inline CoordRange& operator=(const CoordRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordRange& operator=(CoordRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordRange* internal_default_instance() {
    return reinterpret_cast<const CoordRange*>(
               &_CoordRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(CoordRange& a, CoordRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoordRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoordRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoordRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CoordRange";
  }
  protected:
  explicit CoordRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional .iterm2.Coord start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::iterm2::Coord& start() const;
  PROTOBUF_NODISCARD ::iterm2::Coord* release_start();
  ::iterm2::Coord* mutable_start();
  void set_allocated_start(::iterm2::Coord* start);
  private:
  const ::iterm2::Coord& _internal_start() const;
  ::iterm2::Coord* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::iterm2::Coord* start);
  ::iterm2::Coord* unsafe_arena_release_start();

  // optional .iterm2.Coord end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::iterm2::Coord& end() const;
  PROTOBUF_NODISCARD ::iterm2::Coord* release_end();
  ::iterm2::Coord* mutable_end();
  void set_allocated_end(::iterm2::Coord* end);
  private:
  const ::iterm2::Coord& _internal_end() const;
  ::iterm2::Coord* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::iterm2::Coord* end);
  ::iterm2::Coord* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:iterm2.CoordRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::Coord* start_;
  ::iterm2::Coord* end_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Coord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Coord) */ {
 public:
  inline Coord() : Coord(nullptr) {}
  ~Coord() override;
  explicit constexpr Coord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coord(const Coord& from);
  Coord(Coord&& from) noexcept
    : Coord() {
    *this = ::std::move(from);
  }

  inline Coord& operator=(const Coord& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coord& operator=(Coord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coord& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coord* internal_default_instance() {
    return reinterpret_cast<const Coord*>(
               &_Coord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(Coord& a, Coord& b) {
    a.Swap(&b);
  }
  inline void Swap(Coord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Coord";
  }
  protected:
  explicit Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYFieldNumber = 2,
    kXFieldNumber = 1,
  };
  // optional int64 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.Coord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t y_;
  int32_t x_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class LineContents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.LineContents) */ {
 public:
  inline LineContents() : LineContents(nullptr) {}
  ~LineContents() override;
  explicit constexpr LineContents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineContents(const LineContents& from);
  LineContents(LineContents&& from) noexcept
    : LineContents() {
    *this = ::std::move(from);
  }

  inline LineContents& operator=(const LineContents& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineContents& operator=(LineContents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineContents& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineContents* internal_default_instance() {
    return reinterpret_cast<const LineContents*>(
               &_LineContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(LineContents& a, LineContents& b) {
    a.Swap(&b);
  }
  inline void Swap(LineContents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineContents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineContents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineContents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LineContents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LineContents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineContents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.LineContents";
  }
  protected:
  explicit LineContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LineContents_Continuation Continuation;
  static constexpr Continuation CONTINUATION_HARD_EOL =
    LineContents_Continuation_CONTINUATION_HARD_EOL;
  static constexpr Continuation CONTINUATION_SOFT_EOL =
    LineContents_Continuation_CONTINUATION_SOFT_EOL;
  static inline bool Continuation_IsValid(int value) {
    return LineContents_Continuation_IsValid(value);
  }
  static constexpr Continuation Continuation_MIN =
    LineContents_Continuation_Continuation_MIN;
  static constexpr Continuation Continuation_MAX =
    LineContents_Continuation_Continuation_MAX;
  static constexpr int Continuation_ARRAYSIZE =
    LineContents_Continuation_Continuation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Continuation_descriptor() {
    return LineContents_Continuation_descriptor();
  }
  template<typename T>
  static inline const std::string& Continuation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Continuation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Continuation_Name.");
    return LineContents_Continuation_Name(enum_t_value);
  }
  static inline bool Continuation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Continuation* value) {
    return LineContents_Continuation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodePointsPerCellFieldNumber = 2,
    kTextFieldNumber = 1,
    kContinuationFieldNumber = 3,
  };
  // repeated .iterm2.CodePointsPerCell code_points_per_cell = 2;
  int code_points_per_cell_size() const;
  private:
  int _internal_code_points_per_cell_size() const;
  public:
  void clear_code_points_per_cell();
  ::iterm2::CodePointsPerCell* mutable_code_points_per_cell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::CodePointsPerCell >*
      mutable_code_points_per_cell();
  private:
  const ::iterm2::CodePointsPerCell& _internal_code_points_per_cell(int index) const;
  ::iterm2::CodePointsPerCell* _internal_add_code_points_per_cell();
  public:
  const ::iterm2::CodePointsPerCell& code_points_per_cell(int index) const;
  ::iterm2::CodePointsPerCell* add_code_points_per_cell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::CodePointsPerCell >&
      code_points_per_cell() const;

  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional .iterm2.LineContents.Continuation continuation = 3 [default = CONTINUATION_HARD_EOL];
  bool has_continuation() const;
  private:
  bool _internal_has_continuation() const;
  public:
  void clear_continuation();
  ::iterm2::LineContents_Continuation continuation() const;
  void set_continuation(::iterm2::LineContents_Continuation value);
  private:
  ::iterm2::LineContents_Continuation _internal_continuation() const;
  void _internal_set_continuation(::iterm2::LineContents_Continuation value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.LineContents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::CodePointsPerCell > code_points_per_cell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int continuation_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CodePointsPerCell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CodePointsPerCell) */ {
 public:
  inline CodePointsPerCell() : CodePointsPerCell(nullptr) {}
  ~CodePointsPerCell() override;
  explicit constexpr CodePointsPerCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CodePointsPerCell(const CodePointsPerCell& from);
  CodePointsPerCell(CodePointsPerCell&& from) noexcept
    : CodePointsPerCell() {
    *this = ::std::move(from);
  }

  inline CodePointsPerCell& operator=(const CodePointsPerCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodePointsPerCell& operator=(CodePointsPerCell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodePointsPerCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodePointsPerCell* internal_default_instance() {
    return reinterpret_cast<const CodePointsPerCell*>(
               &_CodePointsPerCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(CodePointsPerCell& a, CodePointsPerCell& b) {
    a.Swap(&b);
  }
  inline void Swap(CodePointsPerCell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodePointsPerCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodePointsPerCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodePointsPerCell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CodePointsPerCell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CodePointsPerCell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodePointsPerCell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CodePointsPerCell";
  }
  protected:
  explicit CodePointsPerCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatsFieldNumber = 2,
    kNumCodePointsFieldNumber = 1,
  };
  // optional int32 repeats = 2;
  bool has_repeats() const;
  private:
  bool _internal_has_repeats() const;
  public:
  void clear_repeats();
  int32_t repeats() const;
  void set_repeats(int32_t value);
  private:
  int32_t _internal_repeats() const;
  void _internal_set_repeats(int32_t value);
  public:

  // optional int32 num_code_points = 1 [default = 1];
  bool has_num_code_points() const;
  private:
  bool _internal_has_num_code_points() const;
  public:
  void clear_num_code_points();
  int32_t num_code_points() const;
  void set_num_code_points(int32_t value);
  private:
  int32_t _internal_num_code_points() const;
  void _internal_set_num_code_points(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CodePointsPerCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t repeats_;
  int32_t num_code_points_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListSessionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:iterm2.ListSessionsRequest) */ {
 public:
  inline ListSessionsRequest() : ListSessionsRequest(nullptr) {}
  explicit constexpr ListSessionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSessionsRequest(const ListSessionsRequest& from);
  ListSessionsRequest(ListSessionsRequest&& from) noexcept
    : ListSessionsRequest() {
    *this = ::std::move(from);
  }

  inline ListSessionsRequest& operator=(const ListSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSessionsRequest& operator=(ListSessionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSessionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSessionsRequest*>(
               &_ListSessionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(ListSessionsRequest& a, ListSessionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSessionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSessionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSessionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSessionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListSessionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListSessionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListSessionsRequest";
  }
  protected:
  explicit ListSessionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:iterm2.ListSessionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SendTextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SendTextRequest) */ {
 public:
  inline SendTextRequest() : SendTextRequest(nullptr) {}
  ~SendTextRequest() override;
  explicit constexpr SendTextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendTextRequest(const SendTextRequest& from);
  SendTextRequest(SendTextRequest&& from) noexcept
    : SendTextRequest() {
    *this = ::std::move(from);
  }

  inline SendTextRequest& operator=(const SendTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendTextRequest& operator=(SendTextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendTextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendTextRequest* internal_default_instance() {
    return reinterpret_cast<const SendTextRequest*>(
               &_SendTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(SendTextRequest& a, SendTextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendTextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendTextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendTextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendTextRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendTextRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendTextRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SendTextRequest";
  }
  protected:
  explicit SendTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kTextFieldNumber = 2,
    kSuppressBroadcastFieldNumber = 3,
  };
  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional bool suppress_broadcast = 3;
  bool has_suppress_broadcast() const;
  private:
  bool _internal_has_suppress_broadcast() const;
  public:
  void clear_suppress_broadcast();
  bool suppress_broadcast() const;
  void set_suppress_broadcast(bool value);
  private:
  bool _internal_suppress_broadcast() const;
  void _internal_set_suppress_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SendTextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  bool suppress_broadcast_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SendTextResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SendTextResponse) */ {
 public:
  inline SendTextResponse() : SendTextResponse(nullptr) {}
  ~SendTextResponse() override;
  explicit constexpr SendTextResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendTextResponse(const SendTextResponse& from);
  SendTextResponse(SendTextResponse&& from) noexcept
    : SendTextResponse() {
    *this = ::std::move(from);
  }

  inline SendTextResponse& operator=(const SendTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendTextResponse& operator=(SendTextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendTextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendTextResponse* internal_default_instance() {
    return reinterpret_cast<const SendTextResponse*>(
               &_SendTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(SendTextResponse& a, SendTextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendTextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendTextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendTextResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendTextResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendTextResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendTextResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SendTextResponse";
  }
  protected:
  explicit SendTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendTextResponse_Status Status;
  static constexpr Status OK =
    SendTextResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    SendTextResponse_Status_SESSION_NOT_FOUND;
  static inline bool Status_IsValid(int value) {
    return SendTextResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SendTextResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SendTextResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SendTextResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SendTextResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SendTextResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SendTextResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .iterm2.SendTextResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SendTextResponse_Status status() const;
  void set_status(::iterm2::SendTextResponse_Status value);
  private:
  ::iterm2::SendTextResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SendTextResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SendTextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Size final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Size) */ {
 public:
  inline Size() : Size(nullptr) {}
  ~Size() override;
  explicit constexpr Size(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Size(const Size& from);
  Size(Size&& from) noexcept
    : Size() {
    *this = ::std::move(from);
  }

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size& operator=(Size&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Size& default_instance() {
    return *internal_default_instance();
  }
  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(Size& a, Size& b) {
    a.Swap(&b);
  }
  inline void Swap(Size* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Size>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Size& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Size& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Size";
  }
  protected:
  explicit Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.Size)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // optional .iterm2.Point origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::iterm2::Point& origin() const;
  PROTOBUF_NODISCARD ::iterm2::Point* release_origin();
  ::iterm2::Point* mutable_origin();
  void set_allocated_origin(::iterm2::Point* origin);
  private:
  const ::iterm2::Point& _internal_origin() const;
  ::iterm2::Point* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::iterm2::Point* origin);
  ::iterm2::Point* unsafe_arena_release_origin();

  // optional .iterm2.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::iterm2::Size& size() const;
  PROTOBUF_NODISCARD ::iterm2::Size* release_size();
  ::iterm2::Size* mutable_size();
  void set_allocated_size(::iterm2::Size* size);
  private:
  const ::iterm2::Size& _internal_size() const;
  ::iterm2::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::iterm2::Size* size);
  ::iterm2::Size* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:iterm2.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iterm2::Point* origin_;
  ::iterm2::Size* size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SessionSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SessionSummary) */ {
 public:
  inline SessionSummary() : SessionSummary(nullptr) {}
  ~SessionSummary() override;
  explicit constexpr SessionSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionSummary(const SessionSummary& from);
  SessionSummary(SessionSummary&& from) noexcept
    : SessionSummary() {
    *this = ::std::move(from);
  }

  inline SessionSummary& operator=(const SessionSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionSummary& operator=(SessionSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionSummary* internal_default_instance() {
    return reinterpret_cast<const SessionSummary*>(
               &_SessionSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(SessionSummary& a, SessionSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SessionSummary";
  }
  protected:
  explicit SessionSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdentifierFieldNumber = 1,
    kTitleFieldNumber = 4,
    kFrameFieldNumber = 2,
    kGridSizeFieldNumber = 3,
  };
  // optional string unique_identifier = 1;
  bool has_unique_identifier() const;
  private:
  bool _internal_has_unique_identifier() const;
  public:
  void clear_unique_identifier();
  const std::string& unique_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_identifier();
  PROTOBUF_NODISCARD std::string* release_unique_identifier();
  void set_allocated_unique_identifier(std::string* unique_identifier);
  private:
  const std::string& _internal_unique_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_identifier(const std::string& value);
  std::string* _internal_mutable_unique_identifier();
  public:

  // optional string title = 4;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional .iterm2.Frame frame = 2;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::iterm2::Frame& frame() const;
  PROTOBUF_NODISCARD ::iterm2::Frame* release_frame();
  ::iterm2::Frame* mutable_frame();
  void set_allocated_frame(::iterm2::Frame* frame);
  private:
  const ::iterm2::Frame& _internal_frame() const;
  ::iterm2::Frame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::iterm2::Frame* frame);
  ::iterm2::Frame* unsafe_arena_release_frame();

  // optional .iterm2.Size grid_size = 3;
  bool has_grid_size() const;
  private:
  bool _internal_has_grid_size() const;
  public:
  void clear_grid_size();
  const ::iterm2::Size& grid_size() const;
  PROTOBUF_NODISCARD ::iterm2::Size* release_grid_size();
  ::iterm2::Size* mutable_grid_size();
  void set_allocated_grid_size(::iterm2::Size* grid_size);
  private:
  const ::iterm2::Size& _internal_grid_size() const;
  ::iterm2::Size* _internal_mutable_grid_size();
  public:
  void unsafe_arena_set_allocated_grid_size(
      ::iterm2::Size* grid_size);
  ::iterm2::Size* unsafe_arena_release_grid_size();

  // @@protoc_insertion_point(class_scope:iterm2.SessionSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::iterm2::Frame* frame_;
  ::iterm2::Size* grid_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SplitTreeNode_SplitTreeLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SplitTreeNode.SplitTreeLink) */ {
 public:
  inline SplitTreeNode_SplitTreeLink() : SplitTreeNode_SplitTreeLink(nullptr) {}
  ~SplitTreeNode_SplitTreeLink() override;
  explicit constexpr SplitTreeNode_SplitTreeLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitTreeNode_SplitTreeLink(const SplitTreeNode_SplitTreeLink& from);
  SplitTreeNode_SplitTreeLink(SplitTreeNode_SplitTreeLink&& from) noexcept
    : SplitTreeNode_SplitTreeLink() {
    *this = ::std::move(from);
  }

  inline SplitTreeNode_SplitTreeLink& operator=(const SplitTreeNode_SplitTreeLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitTreeNode_SplitTreeLink& operator=(SplitTreeNode_SplitTreeLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitTreeNode_SplitTreeLink& default_instance() {
    return *internal_default_instance();
  }
  enum ChildCase {
    kSession = 1,
    kNode = 2,
    CHILD_NOT_SET = 0,
  };

  static inline const SplitTreeNode_SplitTreeLink* internal_default_instance() {
    return reinterpret_cast<const SplitTreeNode_SplitTreeLink*>(
               &_SplitTreeNode_SplitTreeLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(SplitTreeNode_SplitTreeLink& a, SplitTreeNode_SplitTreeLink& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitTreeNode_SplitTreeLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitTreeNode_SplitTreeLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitTreeNode_SplitTreeLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitTreeNode_SplitTreeLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitTreeNode_SplitTreeLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SplitTreeNode_SplitTreeLink& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitTreeNode_SplitTreeLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SplitTreeNode.SplitTreeLink";
  }
  protected:
  explicit SplitTreeNode_SplitTreeLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kNodeFieldNumber = 2,
  };
  // .iterm2.SessionSummary session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::iterm2::SessionSummary& session() const;
  PROTOBUF_NODISCARD ::iterm2::SessionSummary* release_session();
  ::iterm2::SessionSummary* mutable_session();
  void set_allocated_session(::iterm2::SessionSummary* session);
  private:
  const ::iterm2::SessionSummary& _internal_session() const;
  ::iterm2::SessionSummary* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::iterm2::SessionSummary* session);
  ::iterm2::SessionSummary* unsafe_arena_release_session();

  // .iterm2.SplitTreeNode node = 2;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::iterm2::SplitTreeNode& node() const;
  PROTOBUF_NODISCARD ::iterm2::SplitTreeNode* release_node();
  ::iterm2::SplitTreeNode* mutable_node();
  void set_allocated_node(::iterm2::SplitTreeNode* node);
  private:
  const ::iterm2::SplitTreeNode& _internal_node() const;
  ::iterm2::SplitTreeNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::iterm2::SplitTreeNode* node);
  ::iterm2::SplitTreeNode* unsafe_arena_release_node();

  void clear_child();
  ChildCase child_case() const;
  // @@protoc_insertion_point(class_scope:iterm2.SplitTreeNode.SplitTreeLink)
 private:
  class _Internal;
  void set_has_session();
  void set_has_node();

  inline bool has_child() const;
  inline void clear_has_child();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ChildUnion {
    constexpr ChildUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iterm2::SessionSummary* session_;
    ::iterm2::SplitTreeNode* node_;
  } child_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SplitTreeNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SplitTreeNode) */ {
 public:
  inline SplitTreeNode() : SplitTreeNode(nullptr) {}
  ~SplitTreeNode() override;
  explicit constexpr SplitTreeNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitTreeNode(const SplitTreeNode& from);
  SplitTreeNode(SplitTreeNode&& from) noexcept
    : SplitTreeNode() {
    *this = ::std::move(from);
  }

  inline SplitTreeNode& operator=(const SplitTreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitTreeNode& operator=(SplitTreeNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitTreeNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitTreeNode* internal_default_instance() {
    return reinterpret_cast<const SplitTreeNode*>(
               &_SplitTreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(SplitTreeNode& a, SplitTreeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitTreeNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitTreeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitTreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitTreeNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitTreeNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SplitTreeNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitTreeNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SplitTreeNode";
  }
  protected:
  explicit SplitTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SplitTreeNode_SplitTreeLink SplitTreeLink;

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 2,
    kVerticalFieldNumber = 1,
  };
  // repeated .iterm2.SplitTreeNode.SplitTreeLink links = 2;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::iterm2::SplitTreeNode_SplitTreeLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SplitTreeNode_SplitTreeLink >*
      mutable_links();
  private:
  const ::iterm2::SplitTreeNode_SplitTreeLink& _internal_links(int index) const;
  ::iterm2::SplitTreeNode_SplitTreeLink* _internal_add_links();
  public:
  const ::iterm2::SplitTreeNode_SplitTreeLink& links(int index) const;
  ::iterm2::SplitTreeNode_SplitTreeLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SplitTreeNode_SplitTreeLink >&
      links() const;

  // optional bool vertical = 1;
  bool has_vertical() const;
  private:
  bool _internal_has_vertical() const;
  public:
  void clear_vertical();
  bool vertical() const;
  void set_vertical(bool value);
  private:
  bool _internal_vertical() const;
  void _internal_set_vertical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SplitTreeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SplitTreeNode_SplitTreeLink > links_;
  bool vertical_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListSessionsResponse_Window final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListSessionsResponse.Window) */ {
 public:
  inline ListSessionsResponse_Window() : ListSessionsResponse_Window(nullptr) {}
  ~ListSessionsResponse_Window() override;
  explicit constexpr ListSessionsResponse_Window(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSessionsResponse_Window(const ListSessionsResponse_Window& from);
  ListSessionsResponse_Window(ListSessionsResponse_Window&& from) noexcept
    : ListSessionsResponse_Window() {
    *this = ::std::move(from);
  }

  inline ListSessionsResponse_Window& operator=(const ListSessionsResponse_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSessionsResponse_Window& operator=(ListSessionsResponse_Window&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSessionsResponse_Window& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSessionsResponse_Window* internal_default_instance() {
    return reinterpret_cast<const ListSessionsResponse_Window*>(
               &_ListSessionsResponse_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(ListSessionsResponse_Window& a, ListSessionsResponse_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSessionsResponse_Window* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSessionsResponse_Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSessionsResponse_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSessionsResponse_Window>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSessionsResponse_Window& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSessionsResponse_Window& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSessionsResponse_Window* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListSessionsResponse.Window";
  }
  protected:
  explicit ListSessionsResponse_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabsFieldNumber = 1,
    kWindowIdFieldNumber = 2,
    kFrameFieldNumber = 3,
    kNumberFieldNumber = 4,
  };
  // repeated .iterm2.ListSessionsResponse.Tab tabs = 1;
  int tabs_size() const;
  private:
  int _internal_tabs_size() const;
  public:
  void clear_tabs();
  ::iterm2::ListSessionsResponse_Tab* mutable_tabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Tab >*
      mutable_tabs();
  private:
  const ::iterm2::ListSessionsResponse_Tab& _internal_tabs(int index) const;
  ::iterm2::ListSessionsResponse_Tab* _internal_add_tabs();
  public:
  const ::iterm2::ListSessionsResponse_Tab& tabs(int index) const;
  ::iterm2::ListSessionsResponse_Tab* add_tabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Tab >&
      tabs() const;

  // optional string window_id = 2;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // optional .iterm2.Frame frame = 3;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::iterm2::Frame& frame() const;
  PROTOBUF_NODISCARD ::iterm2::Frame* release_frame();
  ::iterm2::Frame* mutable_frame();
  void set_allocated_frame(::iterm2::Frame* frame);
  private:
  const ::iterm2::Frame& _internal_frame() const;
  ::iterm2::Frame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::iterm2::Frame* frame);
  ::iterm2::Frame* unsafe_arena_release_frame();

  // optional int32 number = 4;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  int32_t number() const;
  void set_number(int32_t value);
  private:
  int32_t _internal_number() const;
  void _internal_set_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.ListSessionsResponse.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Tab > tabs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  ::iterm2::Frame* frame_;
  int32_t number_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListSessionsResponse_Tab final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListSessionsResponse.Tab) */ {
 public:
  inline ListSessionsResponse_Tab() : ListSessionsResponse_Tab(nullptr) {}
  ~ListSessionsResponse_Tab() override;
  explicit constexpr ListSessionsResponse_Tab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSessionsResponse_Tab(const ListSessionsResponse_Tab& from);
  ListSessionsResponse_Tab(ListSessionsResponse_Tab&& from) noexcept
    : ListSessionsResponse_Tab() {
    *this = ::std::move(from);
  }

  inline ListSessionsResponse_Tab& operator=(const ListSessionsResponse_Tab& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSessionsResponse_Tab& operator=(ListSessionsResponse_Tab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSessionsResponse_Tab& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSessionsResponse_Tab* internal_default_instance() {
    return reinterpret_cast<const ListSessionsResponse_Tab*>(
               &_ListSessionsResponse_Tab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(ListSessionsResponse_Tab& a, ListSessionsResponse_Tab& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSessionsResponse_Tab* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSessionsResponse_Tab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSessionsResponse_Tab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSessionsResponse_Tab>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSessionsResponse_Tab& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSessionsResponse_Tab& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSessionsResponse_Tab* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListSessionsResponse.Tab";
  }
  protected:
  explicit ListSessionsResponse_Tab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinimizedSessionsFieldNumber = 6,
    kTabIdFieldNumber = 2,
    kTmuxWindowIdFieldNumber = 4,
    kTmuxConnectionIdFieldNumber = 5,
    kRootFieldNumber = 3,
  };
  // repeated .iterm2.SessionSummary minimized_sessions = 6;
  int minimized_sessions_size() const;
  private:
  int _internal_minimized_sessions_size() const;
  public:
  void clear_minimized_sessions();
  ::iterm2::SessionSummary* mutable_minimized_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >*
      mutable_minimized_sessions();
  private:
  const ::iterm2::SessionSummary& _internal_minimized_sessions(int index) const;
  ::iterm2::SessionSummary* _internal_add_minimized_sessions();
  public:
  const ::iterm2::SessionSummary& minimized_sessions(int index) const;
  ::iterm2::SessionSummary* add_minimized_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >&
      minimized_sessions() const;

  // optional string tab_id = 2;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  const std::string& tab_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tab_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tab_id();
  PROTOBUF_NODISCARD std::string* release_tab_id();
  void set_allocated_tab_id(std::string* tab_id);
  private:
  const std::string& _internal_tab_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tab_id(const std::string& value);
  std::string* _internal_mutable_tab_id();
  public:

  // optional string tmux_window_id = 4;
  bool has_tmux_window_id() const;
  private:
  bool _internal_has_tmux_window_id() const;
  public:
  void clear_tmux_window_id();
  const std::string& tmux_window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tmux_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tmux_window_id();
  PROTOBUF_NODISCARD std::string* release_tmux_window_id();
  void set_allocated_tmux_window_id(std::string* tmux_window_id);
  private:
  const std::string& _internal_tmux_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tmux_window_id(const std::string& value);
  std::string* _internal_mutable_tmux_window_id();
  public:

  // optional string tmux_connection_id = 5;
  bool has_tmux_connection_id() const;
  private:
  bool _internal_has_tmux_connection_id() const;
  public:
  void clear_tmux_connection_id();
  const std::string& tmux_connection_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tmux_connection_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tmux_connection_id();
  PROTOBUF_NODISCARD std::string* release_tmux_connection_id();
  void set_allocated_tmux_connection_id(std::string* tmux_connection_id);
  private:
  const std::string& _internal_tmux_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tmux_connection_id(const std::string& value);
  std::string* _internal_mutable_tmux_connection_id();
  public:

  // optional .iterm2.SplitTreeNode root = 3;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::iterm2::SplitTreeNode& root() const;
  PROTOBUF_NODISCARD ::iterm2::SplitTreeNode* release_root();
  ::iterm2::SplitTreeNode* mutable_root();
  void set_allocated_root(::iterm2::SplitTreeNode* root);
  private:
  const ::iterm2::SplitTreeNode& _internal_root() const;
  ::iterm2::SplitTreeNode* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::iterm2::SplitTreeNode* root);
  ::iterm2::SplitTreeNode* unsafe_arena_release_root();

  // @@protoc_insertion_point(class_scope:iterm2.ListSessionsResponse.Tab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary > minimized_sessions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tab_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tmux_window_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tmux_connection_id_;
  ::iterm2::SplitTreeNode* root_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class ListSessionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.ListSessionsResponse) */ {
 public:
  inline ListSessionsResponse() : ListSessionsResponse(nullptr) {}
  ~ListSessionsResponse() override;
  explicit constexpr ListSessionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSessionsResponse(const ListSessionsResponse& from);
  ListSessionsResponse(ListSessionsResponse&& from) noexcept
    : ListSessionsResponse() {
    *this = ::std::move(from);
  }

  inline ListSessionsResponse& operator=(const ListSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSessionsResponse& operator=(ListSessionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSessionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSessionsResponse*>(
               &_ListSessionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(ListSessionsResponse& a, ListSessionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSessionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSessionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSessionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSessionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSessionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSessionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSessionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.ListSessionsResponse";
  }
  protected:
  explicit ListSessionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListSessionsResponse_Window Window;
  typedef ListSessionsResponse_Tab Tab;

  // accessors -------------------------------------------------------

  enum : int {
    kWindowsFieldNumber = 1,
    kBuriedSessionsFieldNumber = 2,
  };
  // repeated .iterm2.ListSessionsResponse.Window windows = 1;
  int windows_size() const;
  private:
  int _internal_windows_size() const;
  public:
  void clear_windows();
  ::iterm2::ListSessionsResponse_Window* mutable_windows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Window >*
      mutable_windows();
  private:
  const ::iterm2::ListSessionsResponse_Window& _internal_windows(int index) const;
  ::iterm2::ListSessionsResponse_Window* _internal_add_windows();
  public:
  const ::iterm2::ListSessionsResponse_Window& windows(int index) const;
  ::iterm2::ListSessionsResponse_Window* add_windows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Window >&
      windows() const;

  // repeated .iterm2.SessionSummary buried_sessions = 2;
  int buried_sessions_size() const;
  private:
  int _internal_buried_sessions_size() const;
  public:
  void clear_buried_sessions();
  ::iterm2::SessionSummary* mutable_buried_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >*
      mutable_buried_sessions();
  private:
  const ::iterm2::SessionSummary& _internal_buried_sessions(int index) const;
  ::iterm2::SessionSummary* _internal_add_buried_sessions();
  public:
  const ::iterm2::SessionSummary& buried_sessions(int index) const;
  ::iterm2::SessionSummary* add_buried_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >&
      buried_sessions() const;

  // @@protoc_insertion_point(class_scope:iterm2.ListSessionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Window > windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary > buried_sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CreateTabRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CreateTabRequest) */ {
 public:
  inline CreateTabRequest() : CreateTabRequest(nullptr) {}
  ~CreateTabRequest() override;
  explicit constexpr CreateTabRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTabRequest(const CreateTabRequest& from);
  CreateTabRequest(CreateTabRequest&& from) noexcept
    : CreateTabRequest() {
    *this = ::std::move(from);
  }

  inline CreateTabRequest& operator=(const CreateTabRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTabRequest& operator=(CreateTabRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTabRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTabRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTabRequest*>(
               &_CreateTabRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(CreateTabRequest& a, CreateTabRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTabRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTabRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTabRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTabRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTabRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTabRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTabRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CreateTabRequest";
  }
  protected:
  explicit CreateTabRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomProfilePropertiesFieldNumber = 5,
    kProfileNameFieldNumber = 1,
    kWindowIdFieldNumber = 2,
    kCommandFieldNumber = 4,
    kTabIndexFieldNumber = 3,
  };
  // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
  int custom_profile_properties_size() const;
  private:
  int _internal_custom_profile_properties_size() const;
  public:
  void clear_custom_profile_properties();
  ::iterm2::ProfileProperty* mutable_custom_profile_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
      mutable_custom_profile_properties();
  private:
  const ::iterm2::ProfileProperty& _internal_custom_profile_properties(int index) const;
  ::iterm2::ProfileProperty* _internal_add_custom_profile_properties();
  public:
  const ::iterm2::ProfileProperty& custom_profile_properties(int index) const;
  ::iterm2::ProfileProperty* add_custom_profile_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
      custom_profile_properties() const;

  // optional string profile_name = 1;
  bool has_profile_name() const;
  private:
  bool _internal_has_profile_name() const;
  public:
  void clear_profile_name();
  const std::string& profile_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_name();
  PROTOBUF_NODISCARD std::string* release_profile_name();
  void set_allocated_profile_name(std::string* profile_name);
  private:
  const std::string& _internal_profile_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_name(const std::string& value);
  std::string* _internal_mutable_profile_name();
  public:

  // optional string window_id = 2;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // optional string command = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  PROTOBUF_DEPRECATED void clear_command();
  PROTOBUF_DEPRECATED const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_command(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_command();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_command();
  PROTOBUF_DEPRECATED void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // optional uint32 tab_index = 3;
  bool has_tab_index() const;
  private:
  bool _internal_has_tab_index() const;
  public:
  void clear_tab_index();
  uint32_t tab_index() const;
  void set_tab_index(uint32_t value);
  private:
  uint32_t _internal_tab_index() const;
  void _internal_set_tab_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CreateTabRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty > custom_profile_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  uint32_t tab_index_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class CreateTabResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.CreateTabResponse) */ {
 public:
  inline CreateTabResponse() : CreateTabResponse(nullptr) {}
  ~CreateTabResponse() override;
  explicit constexpr CreateTabResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTabResponse(const CreateTabResponse& from);
  CreateTabResponse(CreateTabResponse&& from) noexcept
    : CreateTabResponse() {
    *this = ::std::move(from);
  }

  inline CreateTabResponse& operator=(const CreateTabResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTabResponse& operator=(CreateTabResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTabResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTabResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTabResponse*>(
               &_CreateTabResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(CreateTabResponse& a, CreateTabResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTabResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTabResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTabResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTabResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTabResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTabResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTabResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.CreateTabResponse";
  }
  protected:
  explicit CreateTabResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateTabResponse_Status Status;
  static constexpr Status OK =
    CreateTabResponse_Status_OK;
  static constexpr Status INVALID_PROFILE_NAME =
    CreateTabResponse_Status_INVALID_PROFILE_NAME;
  static constexpr Status INVALID_WINDOW_ID =
    CreateTabResponse_Status_INVALID_WINDOW_ID;
  static constexpr Status INVALID_TAB_INDEX =
    CreateTabResponse_Status_INVALID_TAB_INDEX;
  static constexpr Status MISSING_SUBSTITUTION =
    CreateTabResponse_Status_MISSING_SUBSTITUTION;
  static inline bool Status_IsValid(int value) {
    return CreateTabResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CreateTabResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CreateTabResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CreateTabResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CreateTabResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CreateTabResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return CreateTabResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWindowIdFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kStatusFieldNumber = 1,
    kTabIdFieldNumber = 3,
  };
  // optional string window_id = 2;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  const std::string& window_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_id();
  PROTOBUF_NODISCARD std::string* release_window_id();
  void set_allocated_window_id(std::string* window_id);
  private:
  const std::string& _internal_window_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_id(const std::string& value);
  std::string* _internal_mutable_window_id();
  public:

  // optional string session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional .iterm2.CreateTabResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::CreateTabResponse_Status status() const;
  void set_status(::iterm2::CreateTabResponse_Status value);
  private:
  ::iterm2::CreateTabResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::CreateTabResponse_Status value);
  public:

  // optional int32 tab_id = 3;
  bool has_tab_id() const;
  private:
  bool _internal_has_tab_id() const;
  public:
  void clear_tab_id();
  int32_t tab_id() const;
  void set_tab_id(int32_t value);
  private:
  int32_t _internal_tab_id() const;
  void _internal_set_tab_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.CreateTabResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  int status_;
  int32_t tab_id_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SplitPaneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SplitPaneRequest) */ {
 public:
  inline SplitPaneRequest() : SplitPaneRequest(nullptr) {}
  ~SplitPaneRequest() override;
  explicit constexpr SplitPaneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitPaneRequest(const SplitPaneRequest& from);
  SplitPaneRequest(SplitPaneRequest&& from) noexcept
    : SplitPaneRequest() {
    *this = ::std::move(from);
  }

  inline SplitPaneRequest& operator=(const SplitPaneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitPaneRequest& operator=(SplitPaneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitPaneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitPaneRequest* internal_default_instance() {
    return reinterpret_cast<const SplitPaneRequest*>(
               &_SplitPaneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(SplitPaneRequest& a, SplitPaneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitPaneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitPaneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitPaneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitPaneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitPaneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SplitPaneRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitPaneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SplitPaneRequest";
  }
  protected:
  explicit SplitPaneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SplitPaneRequest_SplitDirection SplitDirection;
  static constexpr SplitDirection VERTICAL =
    SplitPaneRequest_SplitDirection_VERTICAL;
  static constexpr SplitDirection HORIZONTAL =
    SplitPaneRequest_SplitDirection_HORIZONTAL;
  static inline bool SplitDirection_IsValid(int value) {
    return SplitPaneRequest_SplitDirection_IsValid(value);
  }
  static constexpr SplitDirection SplitDirection_MIN =
    SplitPaneRequest_SplitDirection_SplitDirection_MIN;
  static constexpr SplitDirection SplitDirection_MAX =
    SplitPaneRequest_SplitDirection_SplitDirection_MAX;
  static constexpr int SplitDirection_ARRAYSIZE =
    SplitPaneRequest_SplitDirection_SplitDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SplitDirection_descriptor() {
    return SplitPaneRequest_SplitDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& SplitDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SplitDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SplitDirection_Name.");
    return SplitPaneRequest_SplitDirection_Name(enum_t_value);
  }
  static inline bool SplitDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SplitDirection* value) {
    return SplitPaneRequest_SplitDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomProfilePropertiesFieldNumber = 5,
    kSessionFieldNumber = 1,
    kProfileNameFieldNumber = 4,
    kSplitDirectionFieldNumber = 2,
    kBeforeFieldNumber = 3,
  };
  // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
  int custom_profile_properties_size() const;
  private:
  int _internal_custom_profile_properties_size() const;
  public:
  void clear_custom_profile_properties();
  ::iterm2::ProfileProperty* mutable_custom_profile_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
      mutable_custom_profile_properties();
  private:
  const ::iterm2::ProfileProperty& _internal_custom_profile_properties(int index) const;
  ::iterm2::ProfileProperty* _internal_add_custom_profile_properties();
  public:
  const ::iterm2::ProfileProperty& custom_profile_properties(int index) const;
  ::iterm2::ProfileProperty* add_custom_profile_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
      custom_profile_properties() const;

  // optional string session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // optional string profile_name = 4;
  bool has_profile_name() const;
  private:
  bool _internal_has_profile_name() const;
  public:
  void clear_profile_name();
  const std::string& profile_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_name();
  PROTOBUF_NODISCARD std::string* release_profile_name();
  void set_allocated_profile_name(std::string* profile_name);
  private:
  const std::string& _internal_profile_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_name(const std::string& value);
  std::string* _internal_mutable_profile_name();
  public:

  // optional .iterm2.SplitPaneRequest.SplitDirection split_direction = 2;
  bool has_split_direction() const;
  private:
  bool _internal_has_split_direction() const;
  public:
  void clear_split_direction();
  ::iterm2::SplitPaneRequest_SplitDirection split_direction() const;
  void set_split_direction(::iterm2::SplitPaneRequest_SplitDirection value);
  private:
  ::iterm2::SplitPaneRequest_SplitDirection _internal_split_direction() const;
  void _internal_set_split_direction(::iterm2::SplitPaneRequest_SplitDirection value);
  public:

  // optional bool before = 3 [default = false];
  bool has_before() const;
  private:
  bool _internal_has_before() const;
  public:
  void clear_before();
  bool before() const;
  void set_before(bool value);
  private:
  bool _internal_before() const;
  void _internal_set_before(bool value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SplitPaneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty > custom_profile_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_name_;
  int split_direction_;
  bool before_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// -------------------------------------------------------------------

class SplitPaneResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iterm2.SplitPaneResponse) */ {
 public:
  inline SplitPaneResponse() : SplitPaneResponse(nullptr) {}
  ~SplitPaneResponse() override;
  explicit constexpr SplitPaneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SplitPaneResponse(const SplitPaneResponse& from);
  SplitPaneResponse(SplitPaneResponse&& from) noexcept
    : SplitPaneResponse() {
    *this = ::std::move(from);
  }

  inline SplitPaneResponse& operator=(const SplitPaneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitPaneResponse& operator=(SplitPaneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SplitPaneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SplitPaneResponse* internal_default_instance() {
    return reinterpret_cast<const SplitPaneResponse*>(
               &_SplitPaneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(SplitPaneResponse& a, SplitPaneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitPaneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitPaneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SplitPaneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SplitPaneResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SplitPaneResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SplitPaneResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitPaneResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iterm2.SplitPaneResponse";
  }
  protected:
  explicit SplitPaneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SplitPaneResponse_Status Status;
  static constexpr Status OK =
    SplitPaneResponse_Status_OK;
  static constexpr Status SESSION_NOT_FOUND =
    SplitPaneResponse_Status_SESSION_NOT_FOUND;
  static constexpr Status INVALID_PROFILE_NAME =
    SplitPaneResponse_Status_INVALID_PROFILE_NAME;
  static constexpr Status CANNOT_SPLIT =
    SplitPaneResponse_Status_CANNOT_SPLIT;
  static constexpr Status MALFORMED_CUSTOM_PROFILE_PROPERTY =
    SplitPaneResponse_Status_MALFORMED_CUSTOM_PROFILE_PROPERTY;
  static inline bool Status_IsValid(int value) {
    return SplitPaneResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SplitPaneResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SplitPaneResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SplitPaneResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SplitPaneResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SplitPaneResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SplitPaneResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string session_id = 2;
  int session_id_size() const;
  private:
  int _internal_session_id_size() const;
  public:
  void clear_session_id();
  const std::string& session_id(int index) const;
  std::string* mutable_session_id(int index);
  void set_session_id(int index, const std::string& value);
  void set_session_id(int index, std::string&& value);
  void set_session_id(int index, const char* value);
  void set_session_id(int index, const char* value, size_t size);
  std::string* add_session_id();
  void add_session_id(const std::string& value);
  void add_session_id(std::string&& value);
  void add_session_id(const char* value);
  void add_session_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_id();
  private:
  const std::string& _internal_session_id(int index) const;
  std::string* _internal_add_session_id();
  public:

  // optional .iterm2.SplitPaneResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::iterm2::SplitPaneResponse_Status status() const;
  void set_status(::iterm2::SplitPaneResponse_Status value);
  private:
  ::iterm2::SplitPaneResponse_Status _internal_status() const;
  void _internal_set_status(::iterm2::SplitPaneResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:iterm2.SplitPaneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_id_;
  int status_;
  friend struct ::TableStruct_iterm_2dapi_2epb;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientOriginatedMessage

// optional int64 id = 1;
inline bool ClientOriginatedMessage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientOriginatedMessage::has_id() const {
  return _internal_has_id();
}
inline void ClientOriginatedMessage::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ClientOriginatedMessage::_internal_id() const {
  return id_;
}
inline int64_t ClientOriginatedMessage::id() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.id)
  return _internal_id();
}
inline void ClientOriginatedMessage::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ClientOriginatedMessage::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:iterm2.ClientOriginatedMessage.id)
}

// .iterm2.GetBufferRequest get_buffer_request = 100;
inline bool ClientOriginatedMessage::_internal_has_get_buffer_request() const {
  return submessage_case() == kGetBufferRequest;
}
inline bool ClientOriginatedMessage::has_get_buffer_request() const {
  return _internal_has_get_buffer_request();
}
inline void ClientOriginatedMessage::set_has_get_buffer_request() {
  _oneof_case_[0] = kGetBufferRequest;
}
inline void ClientOriginatedMessage::clear_get_buffer_request() {
  if (_internal_has_get_buffer_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_buffer_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetBufferRequest* ClientOriginatedMessage::release_get_buffer_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.get_buffer_request)
  if (_internal_has_get_buffer_request()) {
    clear_has_submessage();
      ::iterm2::GetBufferRequest* temp = submessage_.get_buffer_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_buffer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetBufferRequest& ClientOriginatedMessage::_internal_get_buffer_request() const {
  return _internal_has_get_buffer_request()
      ? *submessage_.get_buffer_request_
      : reinterpret_cast< ::iterm2::GetBufferRequest&>(::iterm2::_GetBufferRequest_default_instance_);
}
inline const ::iterm2::GetBufferRequest& ClientOriginatedMessage::get_buffer_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.get_buffer_request)
  return _internal_get_buffer_request();
}
inline ::iterm2::GetBufferRequest* ClientOriginatedMessage::unsafe_arena_release_get_buffer_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.get_buffer_request)
  if (_internal_has_get_buffer_request()) {
    clear_has_submessage();
    ::iterm2::GetBufferRequest* temp = submessage_.get_buffer_request_;
    submessage_.get_buffer_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_get_buffer_request(::iterm2::GetBufferRequest* get_buffer_request) {
  clear_submessage();
  if (get_buffer_request) {
    set_has_get_buffer_request();
    submessage_.get_buffer_request_ = get_buffer_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.get_buffer_request)
}
inline ::iterm2::GetBufferRequest* ClientOriginatedMessage::_internal_mutable_get_buffer_request() {
  if (!_internal_has_get_buffer_request()) {
    clear_submessage();
    set_has_get_buffer_request();
    submessage_.get_buffer_request_ = CreateMaybeMessage< ::iterm2::GetBufferRequest >(GetArenaForAllocation());
  }
  return submessage_.get_buffer_request_;
}
inline ::iterm2::GetBufferRequest* ClientOriginatedMessage::mutable_get_buffer_request() {
  ::iterm2::GetBufferRequest* _msg = _internal_mutable_get_buffer_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.get_buffer_request)
  return _msg;
}

// .iterm2.GetPromptRequest get_prompt_request = 101;
inline bool ClientOriginatedMessage::_internal_has_get_prompt_request() const {
  return submessage_case() == kGetPromptRequest;
}
inline bool ClientOriginatedMessage::has_get_prompt_request() const {
  return _internal_has_get_prompt_request();
}
inline void ClientOriginatedMessage::set_has_get_prompt_request() {
  _oneof_case_[0] = kGetPromptRequest;
}
inline void ClientOriginatedMessage::clear_get_prompt_request() {
  if (_internal_has_get_prompt_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_prompt_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetPromptRequest* ClientOriginatedMessage::release_get_prompt_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.get_prompt_request)
  if (_internal_has_get_prompt_request()) {
    clear_has_submessage();
      ::iterm2::GetPromptRequest* temp = submessage_.get_prompt_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_prompt_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetPromptRequest& ClientOriginatedMessage::_internal_get_prompt_request() const {
  return _internal_has_get_prompt_request()
      ? *submessage_.get_prompt_request_
      : reinterpret_cast< ::iterm2::GetPromptRequest&>(::iterm2::_GetPromptRequest_default_instance_);
}
inline const ::iterm2::GetPromptRequest& ClientOriginatedMessage::get_prompt_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.get_prompt_request)
  return _internal_get_prompt_request();
}
inline ::iterm2::GetPromptRequest* ClientOriginatedMessage::unsafe_arena_release_get_prompt_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.get_prompt_request)
  if (_internal_has_get_prompt_request()) {
    clear_has_submessage();
    ::iterm2::GetPromptRequest* temp = submessage_.get_prompt_request_;
    submessage_.get_prompt_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_get_prompt_request(::iterm2::GetPromptRequest* get_prompt_request) {
  clear_submessage();
  if (get_prompt_request) {
    set_has_get_prompt_request();
    submessage_.get_prompt_request_ = get_prompt_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.get_prompt_request)
}
inline ::iterm2::GetPromptRequest* ClientOriginatedMessage::_internal_mutable_get_prompt_request() {
  if (!_internal_has_get_prompt_request()) {
    clear_submessage();
    set_has_get_prompt_request();
    submessage_.get_prompt_request_ = CreateMaybeMessage< ::iterm2::GetPromptRequest >(GetArenaForAllocation());
  }
  return submessage_.get_prompt_request_;
}
inline ::iterm2::GetPromptRequest* ClientOriginatedMessage::mutable_get_prompt_request() {
  ::iterm2::GetPromptRequest* _msg = _internal_mutable_get_prompt_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.get_prompt_request)
  return _msg;
}

// .iterm2.TransactionRequest transaction_request = 102;
inline bool ClientOriginatedMessage::_internal_has_transaction_request() const {
  return submessage_case() == kTransactionRequest;
}
inline bool ClientOriginatedMessage::has_transaction_request() const {
  return _internal_has_transaction_request();
}
inline void ClientOriginatedMessage::set_has_transaction_request() {
  _oneof_case_[0] = kTransactionRequest;
}
inline void ClientOriginatedMessage::clear_transaction_request() {
  if (_internal_has_transaction_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.transaction_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::TransactionRequest* ClientOriginatedMessage::release_transaction_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.transaction_request)
  if (_internal_has_transaction_request()) {
    clear_has_submessage();
      ::iterm2::TransactionRequest* temp = submessage_.transaction_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.transaction_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TransactionRequest& ClientOriginatedMessage::_internal_transaction_request() const {
  return _internal_has_transaction_request()
      ? *submessage_.transaction_request_
      : reinterpret_cast< ::iterm2::TransactionRequest&>(::iterm2::_TransactionRequest_default_instance_);
}
inline const ::iterm2::TransactionRequest& ClientOriginatedMessage::transaction_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.transaction_request)
  return _internal_transaction_request();
}
inline ::iterm2::TransactionRequest* ClientOriginatedMessage::unsafe_arena_release_transaction_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.transaction_request)
  if (_internal_has_transaction_request()) {
    clear_has_submessage();
    ::iterm2::TransactionRequest* temp = submessage_.transaction_request_;
    submessage_.transaction_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_transaction_request(::iterm2::TransactionRequest* transaction_request) {
  clear_submessage();
  if (transaction_request) {
    set_has_transaction_request();
    submessage_.transaction_request_ = transaction_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.transaction_request)
}
inline ::iterm2::TransactionRequest* ClientOriginatedMessage::_internal_mutable_transaction_request() {
  if (!_internal_has_transaction_request()) {
    clear_submessage();
    set_has_transaction_request();
    submessage_.transaction_request_ = CreateMaybeMessage< ::iterm2::TransactionRequest >(GetArenaForAllocation());
  }
  return submessage_.transaction_request_;
}
inline ::iterm2::TransactionRequest* ClientOriginatedMessage::mutable_transaction_request() {
  ::iterm2::TransactionRequest* _msg = _internal_mutable_transaction_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.transaction_request)
  return _msg;
}

// .iterm2.NotificationRequest notification_request = 103;
inline bool ClientOriginatedMessage::_internal_has_notification_request() const {
  return submessage_case() == kNotificationRequest;
}
inline bool ClientOriginatedMessage::has_notification_request() const {
  return _internal_has_notification_request();
}
inline void ClientOriginatedMessage::set_has_notification_request() {
  _oneof_case_[0] = kNotificationRequest;
}
inline void ClientOriginatedMessage::clear_notification_request() {
  if (_internal_has_notification_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.notification_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::NotificationRequest* ClientOriginatedMessage::release_notification_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.notification_request)
  if (_internal_has_notification_request()) {
    clear_has_submessage();
      ::iterm2::NotificationRequest* temp = submessage_.notification_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.notification_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::NotificationRequest& ClientOriginatedMessage::_internal_notification_request() const {
  return _internal_has_notification_request()
      ? *submessage_.notification_request_
      : reinterpret_cast< ::iterm2::NotificationRequest&>(::iterm2::_NotificationRequest_default_instance_);
}
inline const ::iterm2::NotificationRequest& ClientOriginatedMessage::notification_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.notification_request)
  return _internal_notification_request();
}
inline ::iterm2::NotificationRequest* ClientOriginatedMessage::unsafe_arena_release_notification_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.notification_request)
  if (_internal_has_notification_request()) {
    clear_has_submessage();
    ::iterm2::NotificationRequest* temp = submessage_.notification_request_;
    submessage_.notification_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_notification_request(::iterm2::NotificationRequest* notification_request) {
  clear_submessage();
  if (notification_request) {
    set_has_notification_request();
    submessage_.notification_request_ = notification_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.notification_request)
}
inline ::iterm2::NotificationRequest* ClientOriginatedMessage::_internal_mutable_notification_request() {
  if (!_internal_has_notification_request()) {
    clear_submessage();
    set_has_notification_request();
    submessage_.notification_request_ = CreateMaybeMessage< ::iterm2::NotificationRequest >(GetArenaForAllocation());
  }
  return submessage_.notification_request_;
}
inline ::iterm2::NotificationRequest* ClientOriginatedMessage::mutable_notification_request() {
  ::iterm2::NotificationRequest* _msg = _internal_mutable_notification_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.notification_request)
  return _msg;
}

// .iterm2.RegisterToolRequest register_tool_request = 104;
inline bool ClientOriginatedMessage::_internal_has_register_tool_request() const {
  return submessage_case() == kRegisterToolRequest;
}
inline bool ClientOriginatedMessage::has_register_tool_request() const {
  return _internal_has_register_tool_request();
}
inline void ClientOriginatedMessage::set_has_register_tool_request() {
  _oneof_case_[0] = kRegisterToolRequest;
}
inline void ClientOriginatedMessage::clear_register_tool_request() {
  if (_internal_has_register_tool_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.register_tool_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::RegisterToolRequest* ClientOriginatedMessage::release_register_tool_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.register_tool_request)
  if (_internal_has_register_tool_request()) {
    clear_has_submessage();
      ::iterm2::RegisterToolRequest* temp = submessage_.register_tool_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.register_tool_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RegisterToolRequest& ClientOriginatedMessage::_internal_register_tool_request() const {
  return _internal_has_register_tool_request()
      ? *submessage_.register_tool_request_
      : reinterpret_cast< ::iterm2::RegisterToolRequest&>(::iterm2::_RegisterToolRequest_default_instance_);
}
inline const ::iterm2::RegisterToolRequest& ClientOriginatedMessage::register_tool_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.register_tool_request)
  return _internal_register_tool_request();
}
inline ::iterm2::RegisterToolRequest* ClientOriginatedMessage::unsafe_arena_release_register_tool_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.register_tool_request)
  if (_internal_has_register_tool_request()) {
    clear_has_submessage();
    ::iterm2::RegisterToolRequest* temp = submessage_.register_tool_request_;
    submessage_.register_tool_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_register_tool_request(::iterm2::RegisterToolRequest* register_tool_request) {
  clear_submessage();
  if (register_tool_request) {
    set_has_register_tool_request();
    submessage_.register_tool_request_ = register_tool_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.register_tool_request)
}
inline ::iterm2::RegisterToolRequest* ClientOriginatedMessage::_internal_mutable_register_tool_request() {
  if (!_internal_has_register_tool_request()) {
    clear_submessage();
    set_has_register_tool_request();
    submessage_.register_tool_request_ = CreateMaybeMessage< ::iterm2::RegisterToolRequest >(GetArenaForAllocation());
  }
  return submessage_.register_tool_request_;
}
inline ::iterm2::RegisterToolRequest* ClientOriginatedMessage::mutable_register_tool_request() {
  ::iterm2::RegisterToolRequest* _msg = _internal_mutable_register_tool_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.register_tool_request)
  return _msg;
}

// .iterm2.SetProfilePropertyRequest set_profile_property_request = 105;
inline bool ClientOriginatedMessage::_internal_has_set_profile_property_request() const {
  return submessage_case() == kSetProfilePropertyRequest;
}
inline bool ClientOriginatedMessage::has_set_profile_property_request() const {
  return _internal_has_set_profile_property_request();
}
inline void ClientOriginatedMessage::set_has_set_profile_property_request() {
  _oneof_case_[0] = kSetProfilePropertyRequest;
}
inline void ClientOriginatedMessage::clear_set_profile_property_request() {
  if (_internal_has_set_profile_property_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_profile_property_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetProfilePropertyRequest* ClientOriginatedMessage::release_set_profile_property_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.set_profile_property_request)
  if (_internal_has_set_profile_property_request()) {
    clear_has_submessage();
      ::iterm2::SetProfilePropertyRequest* temp = submessage_.set_profile_property_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_profile_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetProfilePropertyRequest& ClientOriginatedMessage::_internal_set_profile_property_request() const {
  return _internal_has_set_profile_property_request()
      ? *submessage_.set_profile_property_request_
      : reinterpret_cast< ::iterm2::SetProfilePropertyRequest&>(::iterm2::_SetProfilePropertyRequest_default_instance_);
}
inline const ::iterm2::SetProfilePropertyRequest& ClientOriginatedMessage::set_profile_property_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.set_profile_property_request)
  return _internal_set_profile_property_request();
}
inline ::iterm2::SetProfilePropertyRequest* ClientOriginatedMessage::unsafe_arena_release_set_profile_property_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.set_profile_property_request)
  if (_internal_has_set_profile_property_request()) {
    clear_has_submessage();
    ::iterm2::SetProfilePropertyRequest* temp = submessage_.set_profile_property_request_;
    submessage_.set_profile_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_set_profile_property_request(::iterm2::SetProfilePropertyRequest* set_profile_property_request) {
  clear_submessage();
  if (set_profile_property_request) {
    set_has_set_profile_property_request();
    submessage_.set_profile_property_request_ = set_profile_property_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.set_profile_property_request)
}
inline ::iterm2::SetProfilePropertyRequest* ClientOriginatedMessage::_internal_mutable_set_profile_property_request() {
  if (!_internal_has_set_profile_property_request()) {
    clear_submessage();
    set_has_set_profile_property_request();
    submessage_.set_profile_property_request_ = CreateMaybeMessage< ::iterm2::SetProfilePropertyRequest >(GetArenaForAllocation());
  }
  return submessage_.set_profile_property_request_;
}
inline ::iterm2::SetProfilePropertyRequest* ClientOriginatedMessage::mutable_set_profile_property_request() {
  ::iterm2::SetProfilePropertyRequest* _msg = _internal_mutable_set_profile_property_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.set_profile_property_request)
  return _msg;
}

// .iterm2.ListSessionsRequest list_sessions_request = 106;
inline bool ClientOriginatedMessage::_internal_has_list_sessions_request() const {
  return submessage_case() == kListSessionsRequest;
}
inline bool ClientOriginatedMessage::has_list_sessions_request() const {
  return _internal_has_list_sessions_request();
}
inline void ClientOriginatedMessage::set_has_list_sessions_request() {
  _oneof_case_[0] = kListSessionsRequest;
}
inline void ClientOriginatedMessage::clear_list_sessions_request() {
  if (_internal_has_list_sessions_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.list_sessions_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ListSessionsRequest* ClientOriginatedMessage::release_list_sessions_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.list_sessions_request)
  if (_internal_has_list_sessions_request()) {
    clear_has_submessage();
      ::iterm2::ListSessionsRequest* temp = submessage_.list_sessions_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.list_sessions_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ListSessionsRequest& ClientOriginatedMessage::_internal_list_sessions_request() const {
  return _internal_has_list_sessions_request()
      ? *submessage_.list_sessions_request_
      : reinterpret_cast< ::iterm2::ListSessionsRequest&>(::iterm2::_ListSessionsRequest_default_instance_);
}
inline const ::iterm2::ListSessionsRequest& ClientOriginatedMessage::list_sessions_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.list_sessions_request)
  return _internal_list_sessions_request();
}
inline ::iterm2::ListSessionsRequest* ClientOriginatedMessage::unsafe_arena_release_list_sessions_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.list_sessions_request)
  if (_internal_has_list_sessions_request()) {
    clear_has_submessage();
    ::iterm2::ListSessionsRequest* temp = submessage_.list_sessions_request_;
    submessage_.list_sessions_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_list_sessions_request(::iterm2::ListSessionsRequest* list_sessions_request) {
  clear_submessage();
  if (list_sessions_request) {
    set_has_list_sessions_request();
    submessage_.list_sessions_request_ = list_sessions_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.list_sessions_request)
}
inline ::iterm2::ListSessionsRequest* ClientOriginatedMessage::_internal_mutable_list_sessions_request() {
  if (!_internal_has_list_sessions_request()) {
    clear_submessage();
    set_has_list_sessions_request();
    submessage_.list_sessions_request_ = CreateMaybeMessage< ::iterm2::ListSessionsRequest >(GetArenaForAllocation());
  }
  return submessage_.list_sessions_request_;
}
inline ::iterm2::ListSessionsRequest* ClientOriginatedMessage::mutable_list_sessions_request() {
  ::iterm2::ListSessionsRequest* _msg = _internal_mutable_list_sessions_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.list_sessions_request)
  return _msg;
}

// .iterm2.SendTextRequest send_text_request = 107;
inline bool ClientOriginatedMessage::_internal_has_send_text_request() const {
  return submessage_case() == kSendTextRequest;
}
inline bool ClientOriginatedMessage::has_send_text_request() const {
  return _internal_has_send_text_request();
}
inline void ClientOriginatedMessage::set_has_send_text_request() {
  _oneof_case_[0] = kSendTextRequest;
}
inline void ClientOriginatedMessage::clear_send_text_request() {
  if (_internal_has_send_text_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.send_text_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SendTextRequest* ClientOriginatedMessage::release_send_text_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.send_text_request)
  if (_internal_has_send_text_request()) {
    clear_has_submessage();
      ::iterm2::SendTextRequest* temp = submessage_.send_text_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.send_text_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SendTextRequest& ClientOriginatedMessage::_internal_send_text_request() const {
  return _internal_has_send_text_request()
      ? *submessage_.send_text_request_
      : reinterpret_cast< ::iterm2::SendTextRequest&>(::iterm2::_SendTextRequest_default_instance_);
}
inline const ::iterm2::SendTextRequest& ClientOriginatedMessage::send_text_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.send_text_request)
  return _internal_send_text_request();
}
inline ::iterm2::SendTextRequest* ClientOriginatedMessage::unsafe_arena_release_send_text_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.send_text_request)
  if (_internal_has_send_text_request()) {
    clear_has_submessage();
    ::iterm2::SendTextRequest* temp = submessage_.send_text_request_;
    submessage_.send_text_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_send_text_request(::iterm2::SendTextRequest* send_text_request) {
  clear_submessage();
  if (send_text_request) {
    set_has_send_text_request();
    submessage_.send_text_request_ = send_text_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.send_text_request)
}
inline ::iterm2::SendTextRequest* ClientOriginatedMessage::_internal_mutable_send_text_request() {
  if (!_internal_has_send_text_request()) {
    clear_submessage();
    set_has_send_text_request();
    submessage_.send_text_request_ = CreateMaybeMessage< ::iterm2::SendTextRequest >(GetArenaForAllocation());
  }
  return submessage_.send_text_request_;
}
inline ::iterm2::SendTextRequest* ClientOriginatedMessage::mutable_send_text_request() {
  ::iterm2::SendTextRequest* _msg = _internal_mutable_send_text_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.send_text_request)
  return _msg;
}

// .iterm2.CreateTabRequest create_tab_request = 108;
inline bool ClientOriginatedMessage::_internal_has_create_tab_request() const {
  return submessage_case() == kCreateTabRequest;
}
inline bool ClientOriginatedMessage::has_create_tab_request() const {
  return _internal_has_create_tab_request();
}
inline void ClientOriginatedMessage::set_has_create_tab_request() {
  _oneof_case_[0] = kCreateTabRequest;
}
inline void ClientOriginatedMessage::clear_create_tab_request() {
  if (_internal_has_create_tab_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.create_tab_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::CreateTabRequest* ClientOriginatedMessage::release_create_tab_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.create_tab_request)
  if (_internal_has_create_tab_request()) {
    clear_has_submessage();
      ::iterm2::CreateTabRequest* temp = submessage_.create_tab_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.create_tab_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CreateTabRequest& ClientOriginatedMessage::_internal_create_tab_request() const {
  return _internal_has_create_tab_request()
      ? *submessage_.create_tab_request_
      : reinterpret_cast< ::iterm2::CreateTabRequest&>(::iterm2::_CreateTabRequest_default_instance_);
}
inline const ::iterm2::CreateTabRequest& ClientOriginatedMessage::create_tab_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.create_tab_request)
  return _internal_create_tab_request();
}
inline ::iterm2::CreateTabRequest* ClientOriginatedMessage::unsafe_arena_release_create_tab_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.create_tab_request)
  if (_internal_has_create_tab_request()) {
    clear_has_submessage();
    ::iterm2::CreateTabRequest* temp = submessage_.create_tab_request_;
    submessage_.create_tab_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_create_tab_request(::iterm2::CreateTabRequest* create_tab_request) {
  clear_submessage();
  if (create_tab_request) {
    set_has_create_tab_request();
    submessage_.create_tab_request_ = create_tab_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.create_tab_request)
}
inline ::iterm2::CreateTabRequest* ClientOriginatedMessage::_internal_mutable_create_tab_request() {
  if (!_internal_has_create_tab_request()) {
    clear_submessage();
    set_has_create_tab_request();
    submessage_.create_tab_request_ = CreateMaybeMessage< ::iterm2::CreateTabRequest >(GetArenaForAllocation());
  }
  return submessage_.create_tab_request_;
}
inline ::iterm2::CreateTabRequest* ClientOriginatedMessage::mutable_create_tab_request() {
  ::iterm2::CreateTabRequest* _msg = _internal_mutable_create_tab_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.create_tab_request)
  return _msg;
}

// .iterm2.SplitPaneRequest split_pane_request = 109;
inline bool ClientOriginatedMessage::_internal_has_split_pane_request() const {
  return submessage_case() == kSplitPaneRequest;
}
inline bool ClientOriginatedMessage::has_split_pane_request() const {
  return _internal_has_split_pane_request();
}
inline void ClientOriginatedMessage::set_has_split_pane_request() {
  _oneof_case_[0] = kSplitPaneRequest;
}
inline void ClientOriginatedMessage::clear_split_pane_request() {
  if (_internal_has_split_pane_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.split_pane_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SplitPaneRequest* ClientOriginatedMessage::release_split_pane_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.split_pane_request)
  if (_internal_has_split_pane_request()) {
    clear_has_submessage();
      ::iterm2::SplitPaneRequest* temp = submessage_.split_pane_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.split_pane_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SplitPaneRequest& ClientOriginatedMessage::_internal_split_pane_request() const {
  return _internal_has_split_pane_request()
      ? *submessage_.split_pane_request_
      : reinterpret_cast< ::iterm2::SplitPaneRequest&>(::iterm2::_SplitPaneRequest_default_instance_);
}
inline const ::iterm2::SplitPaneRequest& ClientOriginatedMessage::split_pane_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.split_pane_request)
  return _internal_split_pane_request();
}
inline ::iterm2::SplitPaneRequest* ClientOriginatedMessage::unsafe_arena_release_split_pane_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.split_pane_request)
  if (_internal_has_split_pane_request()) {
    clear_has_submessage();
    ::iterm2::SplitPaneRequest* temp = submessage_.split_pane_request_;
    submessage_.split_pane_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_split_pane_request(::iterm2::SplitPaneRequest* split_pane_request) {
  clear_submessage();
  if (split_pane_request) {
    set_has_split_pane_request();
    submessage_.split_pane_request_ = split_pane_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.split_pane_request)
}
inline ::iterm2::SplitPaneRequest* ClientOriginatedMessage::_internal_mutable_split_pane_request() {
  if (!_internal_has_split_pane_request()) {
    clear_submessage();
    set_has_split_pane_request();
    submessage_.split_pane_request_ = CreateMaybeMessage< ::iterm2::SplitPaneRequest >(GetArenaForAllocation());
  }
  return submessage_.split_pane_request_;
}
inline ::iterm2::SplitPaneRequest* ClientOriginatedMessage::mutable_split_pane_request() {
  ::iterm2::SplitPaneRequest* _msg = _internal_mutable_split_pane_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.split_pane_request)
  return _msg;
}

// .iterm2.GetProfilePropertyRequest get_profile_property_request = 110;
inline bool ClientOriginatedMessage::_internal_has_get_profile_property_request() const {
  return submessage_case() == kGetProfilePropertyRequest;
}
inline bool ClientOriginatedMessage::has_get_profile_property_request() const {
  return _internal_has_get_profile_property_request();
}
inline void ClientOriginatedMessage::set_has_get_profile_property_request() {
  _oneof_case_[0] = kGetProfilePropertyRequest;
}
inline void ClientOriginatedMessage::clear_get_profile_property_request() {
  if (_internal_has_get_profile_property_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_profile_property_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetProfilePropertyRequest* ClientOriginatedMessage::release_get_profile_property_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.get_profile_property_request)
  if (_internal_has_get_profile_property_request()) {
    clear_has_submessage();
      ::iterm2::GetProfilePropertyRequest* temp = submessage_.get_profile_property_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_profile_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetProfilePropertyRequest& ClientOriginatedMessage::_internal_get_profile_property_request() const {
  return _internal_has_get_profile_property_request()
      ? *submessage_.get_profile_property_request_
      : reinterpret_cast< ::iterm2::GetProfilePropertyRequest&>(::iterm2::_GetProfilePropertyRequest_default_instance_);
}
inline const ::iterm2::GetProfilePropertyRequest& ClientOriginatedMessage::get_profile_property_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.get_profile_property_request)
  return _internal_get_profile_property_request();
}
inline ::iterm2::GetProfilePropertyRequest* ClientOriginatedMessage::unsafe_arena_release_get_profile_property_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.get_profile_property_request)
  if (_internal_has_get_profile_property_request()) {
    clear_has_submessage();
    ::iterm2::GetProfilePropertyRequest* temp = submessage_.get_profile_property_request_;
    submessage_.get_profile_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_get_profile_property_request(::iterm2::GetProfilePropertyRequest* get_profile_property_request) {
  clear_submessage();
  if (get_profile_property_request) {
    set_has_get_profile_property_request();
    submessage_.get_profile_property_request_ = get_profile_property_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.get_profile_property_request)
}
inline ::iterm2::GetProfilePropertyRequest* ClientOriginatedMessage::_internal_mutable_get_profile_property_request() {
  if (!_internal_has_get_profile_property_request()) {
    clear_submessage();
    set_has_get_profile_property_request();
    submessage_.get_profile_property_request_ = CreateMaybeMessage< ::iterm2::GetProfilePropertyRequest >(GetArenaForAllocation());
  }
  return submessage_.get_profile_property_request_;
}
inline ::iterm2::GetProfilePropertyRequest* ClientOriginatedMessage::mutable_get_profile_property_request() {
  ::iterm2::GetProfilePropertyRequest* _msg = _internal_mutable_get_profile_property_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.get_profile_property_request)
  return _msg;
}

// .iterm2.SetPropertyRequest set_property_request = 111;
inline bool ClientOriginatedMessage::_internal_has_set_property_request() const {
  return submessage_case() == kSetPropertyRequest;
}
inline bool ClientOriginatedMessage::has_set_property_request() const {
  return _internal_has_set_property_request();
}
inline void ClientOriginatedMessage::set_has_set_property_request() {
  _oneof_case_[0] = kSetPropertyRequest;
}
inline void ClientOriginatedMessage::clear_set_property_request() {
  if (_internal_has_set_property_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_property_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetPropertyRequest* ClientOriginatedMessage::release_set_property_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.set_property_request)
  if (_internal_has_set_property_request()) {
    clear_has_submessage();
      ::iterm2::SetPropertyRequest* temp = submessage_.set_property_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetPropertyRequest& ClientOriginatedMessage::_internal_set_property_request() const {
  return _internal_has_set_property_request()
      ? *submessage_.set_property_request_
      : reinterpret_cast< ::iterm2::SetPropertyRequest&>(::iterm2::_SetPropertyRequest_default_instance_);
}
inline const ::iterm2::SetPropertyRequest& ClientOriginatedMessage::set_property_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.set_property_request)
  return _internal_set_property_request();
}
inline ::iterm2::SetPropertyRequest* ClientOriginatedMessage::unsafe_arena_release_set_property_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.set_property_request)
  if (_internal_has_set_property_request()) {
    clear_has_submessage();
    ::iterm2::SetPropertyRequest* temp = submessage_.set_property_request_;
    submessage_.set_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_set_property_request(::iterm2::SetPropertyRequest* set_property_request) {
  clear_submessage();
  if (set_property_request) {
    set_has_set_property_request();
    submessage_.set_property_request_ = set_property_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.set_property_request)
}
inline ::iterm2::SetPropertyRequest* ClientOriginatedMessage::_internal_mutable_set_property_request() {
  if (!_internal_has_set_property_request()) {
    clear_submessage();
    set_has_set_property_request();
    submessage_.set_property_request_ = CreateMaybeMessage< ::iterm2::SetPropertyRequest >(GetArenaForAllocation());
  }
  return submessage_.set_property_request_;
}
inline ::iterm2::SetPropertyRequest* ClientOriginatedMessage::mutable_set_property_request() {
  ::iterm2::SetPropertyRequest* _msg = _internal_mutable_set_property_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.set_property_request)
  return _msg;
}

// .iterm2.GetPropertyRequest get_property_request = 112;
inline bool ClientOriginatedMessage::_internal_has_get_property_request() const {
  return submessage_case() == kGetPropertyRequest;
}
inline bool ClientOriginatedMessage::has_get_property_request() const {
  return _internal_has_get_property_request();
}
inline void ClientOriginatedMessage::set_has_get_property_request() {
  _oneof_case_[0] = kGetPropertyRequest;
}
inline void ClientOriginatedMessage::clear_get_property_request() {
  if (_internal_has_get_property_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_property_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetPropertyRequest* ClientOriginatedMessage::release_get_property_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.get_property_request)
  if (_internal_has_get_property_request()) {
    clear_has_submessage();
      ::iterm2::GetPropertyRequest* temp = submessage_.get_property_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetPropertyRequest& ClientOriginatedMessage::_internal_get_property_request() const {
  return _internal_has_get_property_request()
      ? *submessage_.get_property_request_
      : reinterpret_cast< ::iterm2::GetPropertyRequest&>(::iterm2::_GetPropertyRequest_default_instance_);
}
inline const ::iterm2::GetPropertyRequest& ClientOriginatedMessage::get_property_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.get_property_request)
  return _internal_get_property_request();
}
inline ::iterm2::GetPropertyRequest* ClientOriginatedMessage::unsafe_arena_release_get_property_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.get_property_request)
  if (_internal_has_get_property_request()) {
    clear_has_submessage();
    ::iterm2::GetPropertyRequest* temp = submessage_.get_property_request_;
    submessage_.get_property_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_get_property_request(::iterm2::GetPropertyRequest* get_property_request) {
  clear_submessage();
  if (get_property_request) {
    set_has_get_property_request();
    submessage_.get_property_request_ = get_property_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.get_property_request)
}
inline ::iterm2::GetPropertyRequest* ClientOriginatedMessage::_internal_mutable_get_property_request() {
  if (!_internal_has_get_property_request()) {
    clear_submessage();
    set_has_get_property_request();
    submessage_.get_property_request_ = CreateMaybeMessage< ::iterm2::GetPropertyRequest >(GetArenaForAllocation());
  }
  return submessage_.get_property_request_;
}
inline ::iterm2::GetPropertyRequest* ClientOriginatedMessage::mutable_get_property_request() {
  ::iterm2::GetPropertyRequest* _msg = _internal_mutable_get_property_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.get_property_request)
  return _msg;
}

// .iterm2.InjectRequest inject_request = 113;
inline bool ClientOriginatedMessage::_internal_has_inject_request() const {
  return submessage_case() == kInjectRequest;
}
inline bool ClientOriginatedMessage::has_inject_request() const {
  return _internal_has_inject_request();
}
inline void ClientOriginatedMessage::set_has_inject_request() {
  _oneof_case_[0] = kInjectRequest;
}
inline void ClientOriginatedMessage::clear_inject_request() {
  if (_internal_has_inject_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.inject_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::InjectRequest* ClientOriginatedMessage::release_inject_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.inject_request)
  if (_internal_has_inject_request()) {
    clear_has_submessage();
      ::iterm2::InjectRequest* temp = submessage_.inject_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.inject_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InjectRequest& ClientOriginatedMessage::_internal_inject_request() const {
  return _internal_has_inject_request()
      ? *submessage_.inject_request_
      : reinterpret_cast< ::iterm2::InjectRequest&>(::iterm2::_InjectRequest_default_instance_);
}
inline const ::iterm2::InjectRequest& ClientOriginatedMessage::inject_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.inject_request)
  return _internal_inject_request();
}
inline ::iterm2::InjectRequest* ClientOriginatedMessage::unsafe_arena_release_inject_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.inject_request)
  if (_internal_has_inject_request()) {
    clear_has_submessage();
    ::iterm2::InjectRequest* temp = submessage_.inject_request_;
    submessage_.inject_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_inject_request(::iterm2::InjectRequest* inject_request) {
  clear_submessage();
  if (inject_request) {
    set_has_inject_request();
    submessage_.inject_request_ = inject_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.inject_request)
}
inline ::iterm2::InjectRequest* ClientOriginatedMessage::_internal_mutable_inject_request() {
  if (!_internal_has_inject_request()) {
    clear_submessage();
    set_has_inject_request();
    submessage_.inject_request_ = CreateMaybeMessage< ::iterm2::InjectRequest >(GetArenaForAllocation());
  }
  return submessage_.inject_request_;
}
inline ::iterm2::InjectRequest* ClientOriginatedMessage::mutable_inject_request() {
  ::iterm2::InjectRequest* _msg = _internal_mutable_inject_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.inject_request)
  return _msg;
}

// .iterm2.ActivateRequest activate_request = 114;
inline bool ClientOriginatedMessage::_internal_has_activate_request() const {
  return submessage_case() == kActivateRequest;
}
inline bool ClientOriginatedMessage::has_activate_request() const {
  return _internal_has_activate_request();
}
inline void ClientOriginatedMessage::set_has_activate_request() {
  _oneof_case_[0] = kActivateRequest;
}
inline void ClientOriginatedMessage::clear_activate_request() {
  if (_internal_has_activate_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.activate_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ActivateRequest* ClientOriginatedMessage::release_activate_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.activate_request)
  if (_internal_has_activate_request()) {
    clear_has_submessage();
      ::iterm2::ActivateRequest* temp = submessage_.activate_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.activate_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ActivateRequest& ClientOriginatedMessage::_internal_activate_request() const {
  return _internal_has_activate_request()
      ? *submessage_.activate_request_
      : reinterpret_cast< ::iterm2::ActivateRequest&>(::iterm2::_ActivateRequest_default_instance_);
}
inline const ::iterm2::ActivateRequest& ClientOriginatedMessage::activate_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.activate_request)
  return _internal_activate_request();
}
inline ::iterm2::ActivateRequest* ClientOriginatedMessage::unsafe_arena_release_activate_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.activate_request)
  if (_internal_has_activate_request()) {
    clear_has_submessage();
    ::iterm2::ActivateRequest* temp = submessage_.activate_request_;
    submessage_.activate_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_activate_request(::iterm2::ActivateRequest* activate_request) {
  clear_submessage();
  if (activate_request) {
    set_has_activate_request();
    submessage_.activate_request_ = activate_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.activate_request)
}
inline ::iterm2::ActivateRequest* ClientOriginatedMessage::_internal_mutable_activate_request() {
  if (!_internal_has_activate_request()) {
    clear_submessage();
    set_has_activate_request();
    submessage_.activate_request_ = CreateMaybeMessage< ::iterm2::ActivateRequest >(GetArenaForAllocation());
  }
  return submessage_.activate_request_;
}
inline ::iterm2::ActivateRequest* ClientOriginatedMessage::mutable_activate_request() {
  ::iterm2::ActivateRequest* _msg = _internal_mutable_activate_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.activate_request)
  return _msg;
}

// .iterm2.VariableRequest variable_request = 115;
inline bool ClientOriginatedMessage::_internal_has_variable_request() const {
  return submessage_case() == kVariableRequest;
}
inline bool ClientOriginatedMessage::has_variable_request() const {
  return _internal_has_variable_request();
}
inline void ClientOriginatedMessage::set_has_variable_request() {
  _oneof_case_[0] = kVariableRequest;
}
inline void ClientOriginatedMessage::clear_variable_request() {
  if (_internal_has_variable_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.variable_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::VariableRequest* ClientOriginatedMessage::release_variable_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.variable_request)
  if (_internal_has_variable_request()) {
    clear_has_submessage();
      ::iterm2::VariableRequest* temp = submessage_.variable_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.variable_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::VariableRequest& ClientOriginatedMessage::_internal_variable_request() const {
  return _internal_has_variable_request()
      ? *submessage_.variable_request_
      : reinterpret_cast< ::iterm2::VariableRequest&>(::iterm2::_VariableRequest_default_instance_);
}
inline const ::iterm2::VariableRequest& ClientOriginatedMessage::variable_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.variable_request)
  return _internal_variable_request();
}
inline ::iterm2::VariableRequest* ClientOriginatedMessage::unsafe_arena_release_variable_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.variable_request)
  if (_internal_has_variable_request()) {
    clear_has_submessage();
    ::iterm2::VariableRequest* temp = submessage_.variable_request_;
    submessage_.variable_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_variable_request(::iterm2::VariableRequest* variable_request) {
  clear_submessage();
  if (variable_request) {
    set_has_variable_request();
    submessage_.variable_request_ = variable_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.variable_request)
}
inline ::iterm2::VariableRequest* ClientOriginatedMessage::_internal_mutable_variable_request() {
  if (!_internal_has_variable_request()) {
    clear_submessage();
    set_has_variable_request();
    submessage_.variable_request_ = CreateMaybeMessage< ::iterm2::VariableRequest >(GetArenaForAllocation());
  }
  return submessage_.variable_request_;
}
inline ::iterm2::VariableRequest* ClientOriginatedMessage::mutable_variable_request() {
  ::iterm2::VariableRequest* _msg = _internal_mutable_variable_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.variable_request)
  return _msg;
}

// .iterm2.SavedArrangementRequest saved_arrangement_request = 116;
inline bool ClientOriginatedMessage::_internal_has_saved_arrangement_request() const {
  return submessage_case() == kSavedArrangementRequest;
}
inline bool ClientOriginatedMessage::has_saved_arrangement_request() const {
  return _internal_has_saved_arrangement_request();
}
inline void ClientOriginatedMessage::set_has_saved_arrangement_request() {
  _oneof_case_[0] = kSavedArrangementRequest;
}
inline void ClientOriginatedMessage::clear_saved_arrangement_request() {
  if (_internal_has_saved_arrangement_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.saved_arrangement_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SavedArrangementRequest* ClientOriginatedMessage::release_saved_arrangement_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.saved_arrangement_request)
  if (_internal_has_saved_arrangement_request()) {
    clear_has_submessage();
      ::iterm2::SavedArrangementRequest* temp = submessage_.saved_arrangement_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.saved_arrangement_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SavedArrangementRequest& ClientOriginatedMessage::_internal_saved_arrangement_request() const {
  return _internal_has_saved_arrangement_request()
      ? *submessage_.saved_arrangement_request_
      : reinterpret_cast< ::iterm2::SavedArrangementRequest&>(::iterm2::_SavedArrangementRequest_default_instance_);
}
inline const ::iterm2::SavedArrangementRequest& ClientOriginatedMessage::saved_arrangement_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.saved_arrangement_request)
  return _internal_saved_arrangement_request();
}
inline ::iterm2::SavedArrangementRequest* ClientOriginatedMessage::unsafe_arena_release_saved_arrangement_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.saved_arrangement_request)
  if (_internal_has_saved_arrangement_request()) {
    clear_has_submessage();
    ::iterm2::SavedArrangementRequest* temp = submessage_.saved_arrangement_request_;
    submessage_.saved_arrangement_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_saved_arrangement_request(::iterm2::SavedArrangementRequest* saved_arrangement_request) {
  clear_submessage();
  if (saved_arrangement_request) {
    set_has_saved_arrangement_request();
    submessage_.saved_arrangement_request_ = saved_arrangement_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.saved_arrangement_request)
}
inline ::iterm2::SavedArrangementRequest* ClientOriginatedMessage::_internal_mutable_saved_arrangement_request() {
  if (!_internal_has_saved_arrangement_request()) {
    clear_submessage();
    set_has_saved_arrangement_request();
    submessage_.saved_arrangement_request_ = CreateMaybeMessage< ::iterm2::SavedArrangementRequest >(GetArenaForAllocation());
  }
  return submessage_.saved_arrangement_request_;
}
inline ::iterm2::SavedArrangementRequest* ClientOriginatedMessage::mutable_saved_arrangement_request() {
  ::iterm2::SavedArrangementRequest* _msg = _internal_mutable_saved_arrangement_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.saved_arrangement_request)
  return _msg;
}

// .iterm2.FocusRequest focus_request = 117;
inline bool ClientOriginatedMessage::_internal_has_focus_request() const {
  return submessage_case() == kFocusRequest;
}
inline bool ClientOriginatedMessage::has_focus_request() const {
  return _internal_has_focus_request();
}
inline void ClientOriginatedMessage::set_has_focus_request() {
  _oneof_case_[0] = kFocusRequest;
}
inline void ClientOriginatedMessage::clear_focus_request() {
  if (_internal_has_focus_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.focus_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::FocusRequest* ClientOriginatedMessage::release_focus_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.focus_request)
  if (_internal_has_focus_request()) {
    clear_has_submessage();
      ::iterm2::FocusRequest* temp = submessage_.focus_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.focus_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::FocusRequest& ClientOriginatedMessage::_internal_focus_request() const {
  return _internal_has_focus_request()
      ? *submessage_.focus_request_
      : reinterpret_cast< ::iterm2::FocusRequest&>(::iterm2::_FocusRequest_default_instance_);
}
inline const ::iterm2::FocusRequest& ClientOriginatedMessage::focus_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.focus_request)
  return _internal_focus_request();
}
inline ::iterm2::FocusRequest* ClientOriginatedMessage::unsafe_arena_release_focus_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.focus_request)
  if (_internal_has_focus_request()) {
    clear_has_submessage();
    ::iterm2::FocusRequest* temp = submessage_.focus_request_;
    submessage_.focus_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_focus_request(::iterm2::FocusRequest* focus_request) {
  clear_submessage();
  if (focus_request) {
    set_has_focus_request();
    submessage_.focus_request_ = focus_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.focus_request)
}
inline ::iterm2::FocusRequest* ClientOriginatedMessage::_internal_mutable_focus_request() {
  if (!_internal_has_focus_request()) {
    clear_submessage();
    set_has_focus_request();
    submessage_.focus_request_ = CreateMaybeMessage< ::iterm2::FocusRequest >(GetArenaForAllocation());
  }
  return submessage_.focus_request_;
}
inline ::iterm2::FocusRequest* ClientOriginatedMessage::mutable_focus_request() {
  ::iterm2::FocusRequest* _msg = _internal_mutable_focus_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.focus_request)
  return _msg;
}

// .iterm2.ListProfilesRequest list_profiles_request = 118;
inline bool ClientOriginatedMessage::_internal_has_list_profiles_request() const {
  return submessage_case() == kListProfilesRequest;
}
inline bool ClientOriginatedMessage::has_list_profiles_request() const {
  return _internal_has_list_profiles_request();
}
inline void ClientOriginatedMessage::set_has_list_profiles_request() {
  _oneof_case_[0] = kListProfilesRequest;
}
inline void ClientOriginatedMessage::clear_list_profiles_request() {
  if (_internal_has_list_profiles_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.list_profiles_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ListProfilesRequest* ClientOriginatedMessage::release_list_profiles_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.list_profiles_request)
  if (_internal_has_list_profiles_request()) {
    clear_has_submessage();
      ::iterm2::ListProfilesRequest* temp = submessage_.list_profiles_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.list_profiles_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ListProfilesRequest& ClientOriginatedMessage::_internal_list_profiles_request() const {
  return _internal_has_list_profiles_request()
      ? *submessage_.list_profiles_request_
      : reinterpret_cast< ::iterm2::ListProfilesRequest&>(::iterm2::_ListProfilesRequest_default_instance_);
}
inline const ::iterm2::ListProfilesRequest& ClientOriginatedMessage::list_profiles_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.list_profiles_request)
  return _internal_list_profiles_request();
}
inline ::iterm2::ListProfilesRequest* ClientOriginatedMessage::unsafe_arena_release_list_profiles_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.list_profiles_request)
  if (_internal_has_list_profiles_request()) {
    clear_has_submessage();
    ::iterm2::ListProfilesRequest* temp = submessage_.list_profiles_request_;
    submessage_.list_profiles_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_list_profiles_request(::iterm2::ListProfilesRequest* list_profiles_request) {
  clear_submessage();
  if (list_profiles_request) {
    set_has_list_profiles_request();
    submessage_.list_profiles_request_ = list_profiles_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.list_profiles_request)
}
inline ::iterm2::ListProfilesRequest* ClientOriginatedMessage::_internal_mutable_list_profiles_request() {
  if (!_internal_has_list_profiles_request()) {
    clear_submessage();
    set_has_list_profiles_request();
    submessage_.list_profiles_request_ = CreateMaybeMessage< ::iterm2::ListProfilesRequest >(GetArenaForAllocation());
  }
  return submessage_.list_profiles_request_;
}
inline ::iterm2::ListProfilesRequest* ClientOriginatedMessage::mutable_list_profiles_request() {
  ::iterm2::ListProfilesRequest* _msg = _internal_mutable_list_profiles_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.list_profiles_request)
  return _msg;
}

// .iterm2.ServerOriginatedRPCResultRequest server_originated_rpc_result_request = 119;
inline bool ClientOriginatedMessage::_internal_has_server_originated_rpc_result_request() const {
  return submessage_case() == kServerOriginatedRpcResultRequest;
}
inline bool ClientOriginatedMessage::has_server_originated_rpc_result_request() const {
  return _internal_has_server_originated_rpc_result_request();
}
inline void ClientOriginatedMessage::set_has_server_originated_rpc_result_request() {
  _oneof_case_[0] = kServerOriginatedRpcResultRequest;
}
inline void ClientOriginatedMessage::clear_server_originated_rpc_result_request() {
  if (_internal_has_server_originated_rpc_result_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.server_originated_rpc_result_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ServerOriginatedRPCResultRequest* ClientOriginatedMessage::release_server_originated_rpc_result_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.server_originated_rpc_result_request)
  if (_internal_has_server_originated_rpc_result_request()) {
    clear_has_submessage();
      ::iterm2::ServerOriginatedRPCResultRequest* temp = submessage_.server_originated_rpc_result_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.server_originated_rpc_result_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ServerOriginatedRPCResultRequest& ClientOriginatedMessage::_internal_server_originated_rpc_result_request() const {
  return _internal_has_server_originated_rpc_result_request()
      ? *submessage_.server_originated_rpc_result_request_
      : reinterpret_cast< ::iterm2::ServerOriginatedRPCResultRequest&>(::iterm2::_ServerOriginatedRPCResultRequest_default_instance_);
}
inline const ::iterm2::ServerOriginatedRPCResultRequest& ClientOriginatedMessage::server_originated_rpc_result_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.server_originated_rpc_result_request)
  return _internal_server_originated_rpc_result_request();
}
inline ::iterm2::ServerOriginatedRPCResultRequest* ClientOriginatedMessage::unsafe_arena_release_server_originated_rpc_result_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.server_originated_rpc_result_request)
  if (_internal_has_server_originated_rpc_result_request()) {
    clear_has_submessage();
    ::iterm2::ServerOriginatedRPCResultRequest* temp = submessage_.server_originated_rpc_result_request_;
    submessage_.server_originated_rpc_result_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_server_originated_rpc_result_request(::iterm2::ServerOriginatedRPCResultRequest* server_originated_rpc_result_request) {
  clear_submessage();
  if (server_originated_rpc_result_request) {
    set_has_server_originated_rpc_result_request();
    submessage_.server_originated_rpc_result_request_ = server_originated_rpc_result_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.server_originated_rpc_result_request)
}
inline ::iterm2::ServerOriginatedRPCResultRequest* ClientOriginatedMessage::_internal_mutable_server_originated_rpc_result_request() {
  if (!_internal_has_server_originated_rpc_result_request()) {
    clear_submessage();
    set_has_server_originated_rpc_result_request();
    submessage_.server_originated_rpc_result_request_ = CreateMaybeMessage< ::iterm2::ServerOriginatedRPCResultRequest >(GetArenaForAllocation());
  }
  return submessage_.server_originated_rpc_result_request_;
}
inline ::iterm2::ServerOriginatedRPCResultRequest* ClientOriginatedMessage::mutable_server_originated_rpc_result_request() {
  ::iterm2::ServerOriginatedRPCResultRequest* _msg = _internal_mutable_server_originated_rpc_result_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.server_originated_rpc_result_request)
  return _msg;
}

// .iterm2.RestartSessionRequest restart_session_request = 120;
inline bool ClientOriginatedMessage::_internal_has_restart_session_request() const {
  return submessage_case() == kRestartSessionRequest;
}
inline bool ClientOriginatedMessage::has_restart_session_request() const {
  return _internal_has_restart_session_request();
}
inline void ClientOriginatedMessage::set_has_restart_session_request() {
  _oneof_case_[0] = kRestartSessionRequest;
}
inline void ClientOriginatedMessage::clear_restart_session_request() {
  if (_internal_has_restart_session_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.restart_session_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::RestartSessionRequest* ClientOriginatedMessage::release_restart_session_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.restart_session_request)
  if (_internal_has_restart_session_request()) {
    clear_has_submessage();
      ::iterm2::RestartSessionRequest* temp = submessage_.restart_session_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.restart_session_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RestartSessionRequest& ClientOriginatedMessage::_internal_restart_session_request() const {
  return _internal_has_restart_session_request()
      ? *submessage_.restart_session_request_
      : reinterpret_cast< ::iterm2::RestartSessionRequest&>(::iterm2::_RestartSessionRequest_default_instance_);
}
inline const ::iterm2::RestartSessionRequest& ClientOriginatedMessage::restart_session_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.restart_session_request)
  return _internal_restart_session_request();
}
inline ::iterm2::RestartSessionRequest* ClientOriginatedMessage::unsafe_arena_release_restart_session_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.restart_session_request)
  if (_internal_has_restart_session_request()) {
    clear_has_submessage();
    ::iterm2::RestartSessionRequest* temp = submessage_.restart_session_request_;
    submessage_.restart_session_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_restart_session_request(::iterm2::RestartSessionRequest* restart_session_request) {
  clear_submessage();
  if (restart_session_request) {
    set_has_restart_session_request();
    submessage_.restart_session_request_ = restart_session_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.restart_session_request)
}
inline ::iterm2::RestartSessionRequest* ClientOriginatedMessage::_internal_mutable_restart_session_request() {
  if (!_internal_has_restart_session_request()) {
    clear_submessage();
    set_has_restart_session_request();
    submessage_.restart_session_request_ = CreateMaybeMessage< ::iterm2::RestartSessionRequest >(GetArenaForAllocation());
  }
  return submessage_.restart_session_request_;
}
inline ::iterm2::RestartSessionRequest* ClientOriginatedMessage::mutable_restart_session_request() {
  ::iterm2::RestartSessionRequest* _msg = _internal_mutable_restart_session_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.restart_session_request)
  return _msg;
}

// .iterm2.MenuItemRequest menu_item_request = 121;
inline bool ClientOriginatedMessage::_internal_has_menu_item_request() const {
  return submessage_case() == kMenuItemRequest;
}
inline bool ClientOriginatedMessage::has_menu_item_request() const {
  return _internal_has_menu_item_request();
}
inline void ClientOriginatedMessage::set_has_menu_item_request() {
  _oneof_case_[0] = kMenuItemRequest;
}
inline void ClientOriginatedMessage::clear_menu_item_request() {
  if (_internal_has_menu_item_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.menu_item_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::MenuItemRequest* ClientOriginatedMessage::release_menu_item_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.menu_item_request)
  if (_internal_has_menu_item_request()) {
    clear_has_submessage();
      ::iterm2::MenuItemRequest* temp = submessage_.menu_item_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.menu_item_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::MenuItemRequest& ClientOriginatedMessage::_internal_menu_item_request() const {
  return _internal_has_menu_item_request()
      ? *submessage_.menu_item_request_
      : reinterpret_cast< ::iterm2::MenuItemRequest&>(::iterm2::_MenuItemRequest_default_instance_);
}
inline const ::iterm2::MenuItemRequest& ClientOriginatedMessage::menu_item_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.menu_item_request)
  return _internal_menu_item_request();
}
inline ::iterm2::MenuItemRequest* ClientOriginatedMessage::unsafe_arena_release_menu_item_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.menu_item_request)
  if (_internal_has_menu_item_request()) {
    clear_has_submessage();
    ::iterm2::MenuItemRequest* temp = submessage_.menu_item_request_;
    submessage_.menu_item_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_menu_item_request(::iterm2::MenuItemRequest* menu_item_request) {
  clear_submessage();
  if (menu_item_request) {
    set_has_menu_item_request();
    submessage_.menu_item_request_ = menu_item_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.menu_item_request)
}
inline ::iterm2::MenuItemRequest* ClientOriginatedMessage::_internal_mutable_menu_item_request() {
  if (!_internal_has_menu_item_request()) {
    clear_submessage();
    set_has_menu_item_request();
    submessage_.menu_item_request_ = CreateMaybeMessage< ::iterm2::MenuItemRequest >(GetArenaForAllocation());
  }
  return submessage_.menu_item_request_;
}
inline ::iterm2::MenuItemRequest* ClientOriginatedMessage::mutable_menu_item_request() {
  ::iterm2::MenuItemRequest* _msg = _internal_mutable_menu_item_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.menu_item_request)
  return _msg;
}

// .iterm2.SetTabLayoutRequest set_tab_layout_request = 122;
inline bool ClientOriginatedMessage::_internal_has_set_tab_layout_request() const {
  return submessage_case() == kSetTabLayoutRequest;
}
inline bool ClientOriginatedMessage::has_set_tab_layout_request() const {
  return _internal_has_set_tab_layout_request();
}
inline void ClientOriginatedMessage::set_has_set_tab_layout_request() {
  _oneof_case_[0] = kSetTabLayoutRequest;
}
inline void ClientOriginatedMessage::clear_set_tab_layout_request() {
  if (_internal_has_set_tab_layout_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_tab_layout_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetTabLayoutRequest* ClientOriginatedMessage::release_set_tab_layout_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.set_tab_layout_request)
  if (_internal_has_set_tab_layout_request()) {
    clear_has_submessage();
      ::iterm2::SetTabLayoutRequest* temp = submessage_.set_tab_layout_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_tab_layout_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetTabLayoutRequest& ClientOriginatedMessage::_internal_set_tab_layout_request() const {
  return _internal_has_set_tab_layout_request()
      ? *submessage_.set_tab_layout_request_
      : reinterpret_cast< ::iterm2::SetTabLayoutRequest&>(::iterm2::_SetTabLayoutRequest_default_instance_);
}
inline const ::iterm2::SetTabLayoutRequest& ClientOriginatedMessage::set_tab_layout_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.set_tab_layout_request)
  return _internal_set_tab_layout_request();
}
inline ::iterm2::SetTabLayoutRequest* ClientOriginatedMessage::unsafe_arena_release_set_tab_layout_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.set_tab_layout_request)
  if (_internal_has_set_tab_layout_request()) {
    clear_has_submessage();
    ::iterm2::SetTabLayoutRequest* temp = submessage_.set_tab_layout_request_;
    submessage_.set_tab_layout_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_set_tab_layout_request(::iterm2::SetTabLayoutRequest* set_tab_layout_request) {
  clear_submessage();
  if (set_tab_layout_request) {
    set_has_set_tab_layout_request();
    submessage_.set_tab_layout_request_ = set_tab_layout_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.set_tab_layout_request)
}
inline ::iterm2::SetTabLayoutRequest* ClientOriginatedMessage::_internal_mutable_set_tab_layout_request() {
  if (!_internal_has_set_tab_layout_request()) {
    clear_submessage();
    set_has_set_tab_layout_request();
    submessage_.set_tab_layout_request_ = CreateMaybeMessage< ::iterm2::SetTabLayoutRequest >(GetArenaForAllocation());
  }
  return submessage_.set_tab_layout_request_;
}
inline ::iterm2::SetTabLayoutRequest* ClientOriginatedMessage::mutable_set_tab_layout_request() {
  ::iterm2::SetTabLayoutRequest* _msg = _internal_mutable_set_tab_layout_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.set_tab_layout_request)
  return _msg;
}

// .iterm2.GetBroadcastDomainsRequest get_broadcast_domains_request = 123;
inline bool ClientOriginatedMessage::_internal_has_get_broadcast_domains_request() const {
  return submessage_case() == kGetBroadcastDomainsRequest;
}
inline bool ClientOriginatedMessage::has_get_broadcast_domains_request() const {
  return _internal_has_get_broadcast_domains_request();
}
inline void ClientOriginatedMessage::set_has_get_broadcast_domains_request() {
  _oneof_case_[0] = kGetBroadcastDomainsRequest;
}
inline void ClientOriginatedMessage::clear_get_broadcast_domains_request() {
  if (_internal_has_get_broadcast_domains_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_broadcast_domains_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetBroadcastDomainsRequest* ClientOriginatedMessage::release_get_broadcast_domains_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.get_broadcast_domains_request)
  if (_internal_has_get_broadcast_domains_request()) {
    clear_has_submessage();
      ::iterm2::GetBroadcastDomainsRequest* temp = submessage_.get_broadcast_domains_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_broadcast_domains_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetBroadcastDomainsRequest& ClientOriginatedMessage::_internal_get_broadcast_domains_request() const {
  return _internal_has_get_broadcast_domains_request()
      ? *submessage_.get_broadcast_domains_request_
      : reinterpret_cast< ::iterm2::GetBroadcastDomainsRequest&>(::iterm2::_GetBroadcastDomainsRequest_default_instance_);
}
inline const ::iterm2::GetBroadcastDomainsRequest& ClientOriginatedMessage::get_broadcast_domains_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.get_broadcast_domains_request)
  return _internal_get_broadcast_domains_request();
}
inline ::iterm2::GetBroadcastDomainsRequest* ClientOriginatedMessage::unsafe_arena_release_get_broadcast_domains_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.get_broadcast_domains_request)
  if (_internal_has_get_broadcast_domains_request()) {
    clear_has_submessage();
    ::iterm2::GetBroadcastDomainsRequest* temp = submessage_.get_broadcast_domains_request_;
    submessage_.get_broadcast_domains_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_get_broadcast_domains_request(::iterm2::GetBroadcastDomainsRequest* get_broadcast_domains_request) {
  clear_submessage();
  if (get_broadcast_domains_request) {
    set_has_get_broadcast_domains_request();
    submessage_.get_broadcast_domains_request_ = get_broadcast_domains_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.get_broadcast_domains_request)
}
inline ::iterm2::GetBroadcastDomainsRequest* ClientOriginatedMessage::_internal_mutable_get_broadcast_domains_request() {
  if (!_internal_has_get_broadcast_domains_request()) {
    clear_submessage();
    set_has_get_broadcast_domains_request();
    submessage_.get_broadcast_domains_request_ = CreateMaybeMessage< ::iterm2::GetBroadcastDomainsRequest >(GetArenaForAllocation());
  }
  return submessage_.get_broadcast_domains_request_;
}
inline ::iterm2::GetBroadcastDomainsRequest* ClientOriginatedMessage::mutable_get_broadcast_domains_request() {
  ::iterm2::GetBroadcastDomainsRequest* _msg = _internal_mutable_get_broadcast_domains_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.get_broadcast_domains_request)
  return _msg;
}

// .iterm2.TmuxRequest tmux_request = 124;
inline bool ClientOriginatedMessage::_internal_has_tmux_request() const {
  return submessage_case() == kTmuxRequest;
}
inline bool ClientOriginatedMessage::has_tmux_request() const {
  return _internal_has_tmux_request();
}
inline void ClientOriginatedMessage::set_has_tmux_request() {
  _oneof_case_[0] = kTmuxRequest;
}
inline void ClientOriginatedMessage::clear_tmux_request() {
  if (_internal_has_tmux_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.tmux_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::TmuxRequest* ClientOriginatedMessage::release_tmux_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.tmux_request)
  if (_internal_has_tmux_request()) {
    clear_has_submessage();
      ::iterm2::TmuxRequest* temp = submessage_.tmux_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.tmux_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxRequest& ClientOriginatedMessage::_internal_tmux_request() const {
  return _internal_has_tmux_request()
      ? *submessage_.tmux_request_
      : reinterpret_cast< ::iterm2::TmuxRequest&>(::iterm2::_TmuxRequest_default_instance_);
}
inline const ::iterm2::TmuxRequest& ClientOriginatedMessage::tmux_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.tmux_request)
  return _internal_tmux_request();
}
inline ::iterm2::TmuxRequest* ClientOriginatedMessage::unsafe_arena_release_tmux_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.tmux_request)
  if (_internal_has_tmux_request()) {
    clear_has_submessage();
    ::iterm2::TmuxRequest* temp = submessage_.tmux_request_;
    submessage_.tmux_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_tmux_request(::iterm2::TmuxRequest* tmux_request) {
  clear_submessage();
  if (tmux_request) {
    set_has_tmux_request();
    submessage_.tmux_request_ = tmux_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.tmux_request)
}
inline ::iterm2::TmuxRequest* ClientOriginatedMessage::_internal_mutable_tmux_request() {
  if (!_internal_has_tmux_request()) {
    clear_submessage();
    set_has_tmux_request();
    submessage_.tmux_request_ = CreateMaybeMessage< ::iterm2::TmuxRequest >(GetArenaForAllocation());
  }
  return submessage_.tmux_request_;
}
inline ::iterm2::TmuxRequest* ClientOriginatedMessage::mutable_tmux_request() {
  ::iterm2::TmuxRequest* _msg = _internal_mutable_tmux_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.tmux_request)
  return _msg;
}

// .iterm2.ReorderTabsRequest reorder_tabs_request = 125;
inline bool ClientOriginatedMessage::_internal_has_reorder_tabs_request() const {
  return submessage_case() == kReorderTabsRequest;
}
inline bool ClientOriginatedMessage::has_reorder_tabs_request() const {
  return _internal_has_reorder_tabs_request();
}
inline void ClientOriginatedMessage::set_has_reorder_tabs_request() {
  _oneof_case_[0] = kReorderTabsRequest;
}
inline void ClientOriginatedMessage::clear_reorder_tabs_request() {
  if (_internal_has_reorder_tabs_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.reorder_tabs_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ReorderTabsRequest* ClientOriginatedMessage::release_reorder_tabs_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.reorder_tabs_request)
  if (_internal_has_reorder_tabs_request()) {
    clear_has_submessage();
      ::iterm2::ReorderTabsRequest* temp = submessage_.reorder_tabs_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.reorder_tabs_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ReorderTabsRequest& ClientOriginatedMessage::_internal_reorder_tabs_request() const {
  return _internal_has_reorder_tabs_request()
      ? *submessage_.reorder_tabs_request_
      : reinterpret_cast< ::iterm2::ReorderTabsRequest&>(::iterm2::_ReorderTabsRequest_default_instance_);
}
inline const ::iterm2::ReorderTabsRequest& ClientOriginatedMessage::reorder_tabs_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.reorder_tabs_request)
  return _internal_reorder_tabs_request();
}
inline ::iterm2::ReorderTabsRequest* ClientOriginatedMessage::unsafe_arena_release_reorder_tabs_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.reorder_tabs_request)
  if (_internal_has_reorder_tabs_request()) {
    clear_has_submessage();
    ::iterm2::ReorderTabsRequest* temp = submessage_.reorder_tabs_request_;
    submessage_.reorder_tabs_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_reorder_tabs_request(::iterm2::ReorderTabsRequest* reorder_tabs_request) {
  clear_submessage();
  if (reorder_tabs_request) {
    set_has_reorder_tabs_request();
    submessage_.reorder_tabs_request_ = reorder_tabs_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.reorder_tabs_request)
}
inline ::iterm2::ReorderTabsRequest* ClientOriginatedMessage::_internal_mutable_reorder_tabs_request() {
  if (!_internal_has_reorder_tabs_request()) {
    clear_submessage();
    set_has_reorder_tabs_request();
    submessage_.reorder_tabs_request_ = CreateMaybeMessage< ::iterm2::ReorderTabsRequest >(GetArenaForAllocation());
  }
  return submessage_.reorder_tabs_request_;
}
inline ::iterm2::ReorderTabsRequest* ClientOriginatedMessage::mutable_reorder_tabs_request() {
  ::iterm2::ReorderTabsRequest* _msg = _internal_mutable_reorder_tabs_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.reorder_tabs_request)
  return _msg;
}

// .iterm2.PreferencesRequest preferences_request = 126;
inline bool ClientOriginatedMessage::_internal_has_preferences_request() const {
  return submessage_case() == kPreferencesRequest;
}
inline bool ClientOriginatedMessage::has_preferences_request() const {
  return _internal_has_preferences_request();
}
inline void ClientOriginatedMessage::set_has_preferences_request() {
  _oneof_case_[0] = kPreferencesRequest;
}
inline void ClientOriginatedMessage::clear_preferences_request() {
  if (_internal_has_preferences_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.preferences_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::PreferencesRequest* ClientOriginatedMessage::release_preferences_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.preferences_request)
  if (_internal_has_preferences_request()) {
    clear_has_submessage();
      ::iterm2::PreferencesRequest* temp = submessage_.preferences_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.preferences_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesRequest& ClientOriginatedMessage::_internal_preferences_request() const {
  return _internal_has_preferences_request()
      ? *submessage_.preferences_request_
      : reinterpret_cast< ::iterm2::PreferencesRequest&>(::iterm2::_PreferencesRequest_default_instance_);
}
inline const ::iterm2::PreferencesRequest& ClientOriginatedMessage::preferences_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.preferences_request)
  return _internal_preferences_request();
}
inline ::iterm2::PreferencesRequest* ClientOriginatedMessage::unsafe_arena_release_preferences_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.preferences_request)
  if (_internal_has_preferences_request()) {
    clear_has_submessage();
    ::iterm2::PreferencesRequest* temp = submessage_.preferences_request_;
    submessage_.preferences_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_preferences_request(::iterm2::PreferencesRequest* preferences_request) {
  clear_submessage();
  if (preferences_request) {
    set_has_preferences_request();
    submessage_.preferences_request_ = preferences_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.preferences_request)
}
inline ::iterm2::PreferencesRequest* ClientOriginatedMessage::_internal_mutable_preferences_request() {
  if (!_internal_has_preferences_request()) {
    clear_submessage();
    set_has_preferences_request();
    submessage_.preferences_request_ = CreateMaybeMessage< ::iterm2::PreferencesRequest >(GetArenaForAllocation());
  }
  return submessage_.preferences_request_;
}
inline ::iterm2::PreferencesRequest* ClientOriginatedMessage::mutable_preferences_request() {
  ::iterm2::PreferencesRequest* _msg = _internal_mutable_preferences_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.preferences_request)
  return _msg;
}

// .iterm2.ColorPresetRequest color_preset_request = 127;
inline bool ClientOriginatedMessage::_internal_has_color_preset_request() const {
  return submessage_case() == kColorPresetRequest;
}
inline bool ClientOriginatedMessage::has_color_preset_request() const {
  return _internal_has_color_preset_request();
}
inline void ClientOriginatedMessage::set_has_color_preset_request() {
  _oneof_case_[0] = kColorPresetRequest;
}
inline void ClientOriginatedMessage::clear_color_preset_request() {
  if (_internal_has_color_preset_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.color_preset_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ColorPresetRequest* ClientOriginatedMessage::release_color_preset_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.color_preset_request)
  if (_internal_has_color_preset_request()) {
    clear_has_submessage();
      ::iterm2::ColorPresetRequest* temp = submessage_.color_preset_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.color_preset_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ColorPresetRequest& ClientOriginatedMessage::_internal_color_preset_request() const {
  return _internal_has_color_preset_request()
      ? *submessage_.color_preset_request_
      : reinterpret_cast< ::iterm2::ColorPresetRequest&>(::iterm2::_ColorPresetRequest_default_instance_);
}
inline const ::iterm2::ColorPresetRequest& ClientOriginatedMessage::color_preset_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.color_preset_request)
  return _internal_color_preset_request();
}
inline ::iterm2::ColorPresetRequest* ClientOriginatedMessage::unsafe_arena_release_color_preset_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.color_preset_request)
  if (_internal_has_color_preset_request()) {
    clear_has_submessage();
    ::iterm2::ColorPresetRequest* temp = submessage_.color_preset_request_;
    submessage_.color_preset_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_color_preset_request(::iterm2::ColorPresetRequest* color_preset_request) {
  clear_submessage();
  if (color_preset_request) {
    set_has_color_preset_request();
    submessage_.color_preset_request_ = color_preset_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.color_preset_request)
}
inline ::iterm2::ColorPresetRequest* ClientOriginatedMessage::_internal_mutable_color_preset_request() {
  if (!_internal_has_color_preset_request()) {
    clear_submessage();
    set_has_color_preset_request();
    submessage_.color_preset_request_ = CreateMaybeMessage< ::iterm2::ColorPresetRequest >(GetArenaForAllocation());
  }
  return submessage_.color_preset_request_;
}
inline ::iterm2::ColorPresetRequest* ClientOriginatedMessage::mutable_color_preset_request() {
  ::iterm2::ColorPresetRequest* _msg = _internal_mutable_color_preset_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.color_preset_request)
  return _msg;
}

// .iterm2.SelectionRequest selection_request = 128;
inline bool ClientOriginatedMessage::_internal_has_selection_request() const {
  return submessage_case() == kSelectionRequest;
}
inline bool ClientOriginatedMessage::has_selection_request() const {
  return _internal_has_selection_request();
}
inline void ClientOriginatedMessage::set_has_selection_request() {
  _oneof_case_[0] = kSelectionRequest;
}
inline void ClientOriginatedMessage::clear_selection_request() {
  if (_internal_has_selection_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.selection_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SelectionRequest* ClientOriginatedMessage::release_selection_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.selection_request)
  if (_internal_has_selection_request()) {
    clear_has_submessage();
      ::iterm2::SelectionRequest* temp = submessage_.selection_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SelectionRequest& ClientOriginatedMessage::_internal_selection_request() const {
  return _internal_has_selection_request()
      ? *submessage_.selection_request_
      : reinterpret_cast< ::iterm2::SelectionRequest&>(::iterm2::_SelectionRequest_default_instance_);
}
inline const ::iterm2::SelectionRequest& ClientOriginatedMessage::selection_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.selection_request)
  return _internal_selection_request();
}
inline ::iterm2::SelectionRequest* ClientOriginatedMessage::unsafe_arena_release_selection_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.selection_request)
  if (_internal_has_selection_request()) {
    clear_has_submessage();
    ::iterm2::SelectionRequest* temp = submessage_.selection_request_;
    submessage_.selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_selection_request(::iterm2::SelectionRequest* selection_request) {
  clear_submessage();
  if (selection_request) {
    set_has_selection_request();
    submessage_.selection_request_ = selection_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.selection_request)
}
inline ::iterm2::SelectionRequest* ClientOriginatedMessage::_internal_mutable_selection_request() {
  if (!_internal_has_selection_request()) {
    clear_submessage();
    set_has_selection_request();
    submessage_.selection_request_ = CreateMaybeMessage< ::iterm2::SelectionRequest >(GetArenaForAllocation());
  }
  return submessage_.selection_request_;
}
inline ::iterm2::SelectionRequest* ClientOriginatedMessage::mutable_selection_request() {
  ::iterm2::SelectionRequest* _msg = _internal_mutable_selection_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.selection_request)
  return _msg;
}

// .iterm2.StatusBarComponentRequest status_bar_component_request = 129;
inline bool ClientOriginatedMessage::_internal_has_status_bar_component_request() const {
  return submessage_case() == kStatusBarComponentRequest;
}
inline bool ClientOriginatedMessage::has_status_bar_component_request() const {
  return _internal_has_status_bar_component_request();
}
inline void ClientOriginatedMessage::set_has_status_bar_component_request() {
  _oneof_case_[0] = kStatusBarComponentRequest;
}
inline void ClientOriginatedMessage::clear_status_bar_component_request() {
  if (_internal_has_status_bar_component_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.status_bar_component_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::StatusBarComponentRequest* ClientOriginatedMessage::release_status_bar_component_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.status_bar_component_request)
  if (_internal_has_status_bar_component_request()) {
    clear_has_submessage();
      ::iterm2::StatusBarComponentRequest* temp = submessage_.status_bar_component_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.status_bar_component_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::StatusBarComponentRequest& ClientOriginatedMessage::_internal_status_bar_component_request() const {
  return _internal_has_status_bar_component_request()
      ? *submessage_.status_bar_component_request_
      : reinterpret_cast< ::iterm2::StatusBarComponentRequest&>(::iterm2::_StatusBarComponentRequest_default_instance_);
}
inline const ::iterm2::StatusBarComponentRequest& ClientOriginatedMessage::status_bar_component_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.status_bar_component_request)
  return _internal_status_bar_component_request();
}
inline ::iterm2::StatusBarComponentRequest* ClientOriginatedMessage::unsafe_arena_release_status_bar_component_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.status_bar_component_request)
  if (_internal_has_status_bar_component_request()) {
    clear_has_submessage();
    ::iterm2::StatusBarComponentRequest* temp = submessage_.status_bar_component_request_;
    submessage_.status_bar_component_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_status_bar_component_request(::iterm2::StatusBarComponentRequest* status_bar_component_request) {
  clear_submessage();
  if (status_bar_component_request) {
    set_has_status_bar_component_request();
    submessage_.status_bar_component_request_ = status_bar_component_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.status_bar_component_request)
}
inline ::iterm2::StatusBarComponentRequest* ClientOriginatedMessage::_internal_mutable_status_bar_component_request() {
  if (!_internal_has_status_bar_component_request()) {
    clear_submessage();
    set_has_status_bar_component_request();
    submessage_.status_bar_component_request_ = CreateMaybeMessage< ::iterm2::StatusBarComponentRequest >(GetArenaForAllocation());
  }
  return submessage_.status_bar_component_request_;
}
inline ::iterm2::StatusBarComponentRequest* ClientOriginatedMessage::mutable_status_bar_component_request() {
  ::iterm2::StatusBarComponentRequest* _msg = _internal_mutable_status_bar_component_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.status_bar_component_request)
  return _msg;
}

// .iterm2.SetBroadcastDomainsRequest set_broadcast_domains_request = 130;
inline bool ClientOriginatedMessage::_internal_has_set_broadcast_domains_request() const {
  return submessage_case() == kSetBroadcastDomainsRequest;
}
inline bool ClientOriginatedMessage::has_set_broadcast_domains_request() const {
  return _internal_has_set_broadcast_domains_request();
}
inline void ClientOriginatedMessage::set_has_set_broadcast_domains_request() {
  _oneof_case_[0] = kSetBroadcastDomainsRequest;
}
inline void ClientOriginatedMessage::clear_set_broadcast_domains_request() {
  if (_internal_has_set_broadcast_domains_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_broadcast_domains_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetBroadcastDomainsRequest* ClientOriginatedMessage::release_set_broadcast_domains_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.set_broadcast_domains_request)
  if (_internal_has_set_broadcast_domains_request()) {
    clear_has_submessage();
      ::iterm2::SetBroadcastDomainsRequest* temp = submessage_.set_broadcast_domains_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_broadcast_domains_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetBroadcastDomainsRequest& ClientOriginatedMessage::_internal_set_broadcast_domains_request() const {
  return _internal_has_set_broadcast_domains_request()
      ? *submessage_.set_broadcast_domains_request_
      : reinterpret_cast< ::iterm2::SetBroadcastDomainsRequest&>(::iterm2::_SetBroadcastDomainsRequest_default_instance_);
}
inline const ::iterm2::SetBroadcastDomainsRequest& ClientOriginatedMessage::set_broadcast_domains_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.set_broadcast_domains_request)
  return _internal_set_broadcast_domains_request();
}
inline ::iterm2::SetBroadcastDomainsRequest* ClientOriginatedMessage::unsafe_arena_release_set_broadcast_domains_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.set_broadcast_domains_request)
  if (_internal_has_set_broadcast_domains_request()) {
    clear_has_submessage();
    ::iterm2::SetBroadcastDomainsRequest* temp = submessage_.set_broadcast_domains_request_;
    submessage_.set_broadcast_domains_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_set_broadcast_domains_request(::iterm2::SetBroadcastDomainsRequest* set_broadcast_domains_request) {
  clear_submessage();
  if (set_broadcast_domains_request) {
    set_has_set_broadcast_domains_request();
    submessage_.set_broadcast_domains_request_ = set_broadcast_domains_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.set_broadcast_domains_request)
}
inline ::iterm2::SetBroadcastDomainsRequest* ClientOriginatedMessage::_internal_mutable_set_broadcast_domains_request() {
  if (!_internal_has_set_broadcast_domains_request()) {
    clear_submessage();
    set_has_set_broadcast_domains_request();
    submessage_.set_broadcast_domains_request_ = CreateMaybeMessage< ::iterm2::SetBroadcastDomainsRequest >(GetArenaForAllocation());
  }
  return submessage_.set_broadcast_domains_request_;
}
inline ::iterm2::SetBroadcastDomainsRequest* ClientOriginatedMessage::mutable_set_broadcast_domains_request() {
  ::iterm2::SetBroadcastDomainsRequest* _msg = _internal_mutable_set_broadcast_domains_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.set_broadcast_domains_request)
  return _msg;
}

// .iterm2.CloseRequest close_request = 131;
inline bool ClientOriginatedMessage::_internal_has_close_request() const {
  return submessage_case() == kCloseRequest;
}
inline bool ClientOriginatedMessage::has_close_request() const {
  return _internal_has_close_request();
}
inline void ClientOriginatedMessage::set_has_close_request() {
  _oneof_case_[0] = kCloseRequest;
}
inline void ClientOriginatedMessage::clear_close_request() {
  if (_internal_has_close_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.close_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::CloseRequest* ClientOriginatedMessage::release_close_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.close_request)
  if (_internal_has_close_request()) {
    clear_has_submessage();
      ::iterm2::CloseRequest* temp = submessage_.close_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.close_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CloseRequest& ClientOriginatedMessage::_internal_close_request() const {
  return _internal_has_close_request()
      ? *submessage_.close_request_
      : reinterpret_cast< ::iterm2::CloseRequest&>(::iterm2::_CloseRequest_default_instance_);
}
inline const ::iterm2::CloseRequest& ClientOriginatedMessage::close_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.close_request)
  return _internal_close_request();
}
inline ::iterm2::CloseRequest* ClientOriginatedMessage::unsafe_arena_release_close_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.close_request)
  if (_internal_has_close_request()) {
    clear_has_submessage();
    ::iterm2::CloseRequest* temp = submessage_.close_request_;
    submessage_.close_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_close_request(::iterm2::CloseRequest* close_request) {
  clear_submessage();
  if (close_request) {
    set_has_close_request();
    submessage_.close_request_ = close_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.close_request)
}
inline ::iterm2::CloseRequest* ClientOriginatedMessage::_internal_mutable_close_request() {
  if (!_internal_has_close_request()) {
    clear_submessage();
    set_has_close_request();
    submessage_.close_request_ = CreateMaybeMessage< ::iterm2::CloseRequest >(GetArenaForAllocation());
  }
  return submessage_.close_request_;
}
inline ::iterm2::CloseRequest* ClientOriginatedMessage::mutable_close_request() {
  ::iterm2::CloseRequest* _msg = _internal_mutable_close_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.close_request)
  return _msg;
}

// .iterm2.InvokeFunctionRequest invoke_function_request = 132;
inline bool ClientOriginatedMessage::_internal_has_invoke_function_request() const {
  return submessage_case() == kInvokeFunctionRequest;
}
inline bool ClientOriginatedMessage::has_invoke_function_request() const {
  return _internal_has_invoke_function_request();
}
inline void ClientOriginatedMessage::set_has_invoke_function_request() {
  _oneof_case_[0] = kInvokeFunctionRequest;
}
inline void ClientOriginatedMessage::clear_invoke_function_request() {
  if (_internal_has_invoke_function_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.invoke_function_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::InvokeFunctionRequest* ClientOriginatedMessage::release_invoke_function_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.invoke_function_request)
  if (_internal_has_invoke_function_request()) {
    clear_has_submessage();
      ::iterm2::InvokeFunctionRequest* temp = submessage_.invoke_function_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.invoke_function_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionRequest& ClientOriginatedMessage::_internal_invoke_function_request() const {
  return _internal_has_invoke_function_request()
      ? *submessage_.invoke_function_request_
      : reinterpret_cast< ::iterm2::InvokeFunctionRequest&>(::iterm2::_InvokeFunctionRequest_default_instance_);
}
inline const ::iterm2::InvokeFunctionRequest& ClientOriginatedMessage::invoke_function_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.invoke_function_request)
  return _internal_invoke_function_request();
}
inline ::iterm2::InvokeFunctionRequest* ClientOriginatedMessage::unsafe_arena_release_invoke_function_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.invoke_function_request)
  if (_internal_has_invoke_function_request()) {
    clear_has_submessage();
    ::iterm2::InvokeFunctionRequest* temp = submessage_.invoke_function_request_;
    submessage_.invoke_function_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_invoke_function_request(::iterm2::InvokeFunctionRequest* invoke_function_request) {
  clear_submessage();
  if (invoke_function_request) {
    set_has_invoke_function_request();
    submessage_.invoke_function_request_ = invoke_function_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.invoke_function_request)
}
inline ::iterm2::InvokeFunctionRequest* ClientOriginatedMessage::_internal_mutable_invoke_function_request() {
  if (!_internal_has_invoke_function_request()) {
    clear_submessage();
    set_has_invoke_function_request();
    submessage_.invoke_function_request_ = CreateMaybeMessage< ::iterm2::InvokeFunctionRequest >(GetArenaForAllocation());
  }
  return submessage_.invoke_function_request_;
}
inline ::iterm2::InvokeFunctionRequest* ClientOriginatedMessage::mutable_invoke_function_request() {
  ::iterm2::InvokeFunctionRequest* _msg = _internal_mutable_invoke_function_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.invoke_function_request)
  return _msg;
}

// .iterm2.ListPromptsRequest list_prompts_request = 133;
inline bool ClientOriginatedMessage::_internal_has_list_prompts_request() const {
  return submessage_case() == kListPromptsRequest;
}
inline bool ClientOriginatedMessage::has_list_prompts_request() const {
  return _internal_has_list_prompts_request();
}
inline void ClientOriginatedMessage::set_has_list_prompts_request() {
  _oneof_case_[0] = kListPromptsRequest;
}
inline void ClientOriginatedMessage::clear_list_prompts_request() {
  if (_internal_has_list_prompts_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.list_prompts_request_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ListPromptsRequest* ClientOriginatedMessage::release_list_prompts_request() {
  // @@protoc_insertion_point(field_release:iterm2.ClientOriginatedMessage.list_prompts_request)
  if (_internal_has_list_prompts_request()) {
    clear_has_submessage();
      ::iterm2::ListPromptsRequest* temp = submessage_.list_prompts_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.list_prompts_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ListPromptsRequest& ClientOriginatedMessage::_internal_list_prompts_request() const {
  return _internal_has_list_prompts_request()
      ? *submessage_.list_prompts_request_
      : reinterpret_cast< ::iterm2::ListPromptsRequest&>(::iterm2::_ListPromptsRequest_default_instance_);
}
inline const ::iterm2::ListPromptsRequest& ClientOriginatedMessage::list_prompts_request() const {
  // @@protoc_insertion_point(field_get:iterm2.ClientOriginatedMessage.list_prompts_request)
  return _internal_list_prompts_request();
}
inline ::iterm2::ListPromptsRequest* ClientOriginatedMessage::unsafe_arena_release_list_prompts_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ClientOriginatedMessage.list_prompts_request)
  if (_internal_has_list_prompts_request()) {
    clear_has_submessage();
    ::iterm2::ListPromptsRequest* temp = submessage_.list_prompts_request_;
    submessage_.list_prompts_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientOriginatedMessage::unsafe_arena_set_allocated_list_prompts_request(::iterm2::ListPromptsRequest* list_prompts_request) {
  clear_submessage();
  if (list_prompts_request) {
    set_has_list_prompts_request();
    submessage_.list_prompts_request_ = list_prompts_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ClientOriginatedMessage.list_prompts_request)
}
inline ::iterm2::ListPromptsRequest* ClientOriginatedMessage::_internal_mutable_list_prompts_request() {
  if (!_internal_has_list_prompts_request()) {
    clear_submessage();
    set_has_list_prompts_request();
    submessage_.list_prompts_request_ = CreateMaybeMessage< ::iterm2::ListPromptsRequest >(GetArenaForAllocation());
  }
  return submessage_.list_prompts_request_;
}
inline ::iterm2::ListPromptsRequest* ClientOriginatedMessage::mutable_list_prompts_request() {
  ::iterm2::ListPromptsRequest* _msg = _internal_mutable_list_prompts_request();
  // @@protoc_insertion_point(field_mutable:iterm2.ClientOriginatedMessage.list_prompts_request)
  return _msg;
}

inline bool ClientOriginatedMessage::has_submessage() const {
  return submessage_case() != SUBMESSAGE_NOT_SET;
}
inline void ClientOriginatedMessage::clear_has_submessage() {
  _oneof_case_[0] = SUBMESSAGE_NOT_SET;
}
inline ClientOriginatedMessage::SubmessageCase ClientOriginatedMessage::submessage_case() const {
  return ClientOriginatedMessage::SubmessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerOriginatedMessage

// optional int64 id = 1;
inline bool ServerOriginatedMessage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerOriginatedMessage::has_id() const {
  return _internal_has_id();
}
inline void ServerOriginatedMessage::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ServerOriginatedMessage::_internal_id() const {
  return id_;
}
inline int64_t ServerOriginatedMessage::id() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.id)
  return _internal_id();
}
inline void ServerOriginatedMessage::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ServerOriginatedMessage::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedMessage.id)
}

// string error = 2;
inline bool ServerOriginatedMessage::_internal_has_error() const {
  return submessage_case() == kError;
}
inline bool ServerOriginatedMessage::has_error() const {
  return _internal_has_error();
}
inline void ServerOriginatedMessage::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void ServerOriginatedMessage::clear_error() {
  if (_internal_has_error()) {
    submessage_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_submessage();
  }
}
inline const std::string& ServerOriginatedMessage::error() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline void ServerOriginatedMessage::set_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_error()) {
    clear_submessage();
    set_has_error();
    submessage_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  submessage_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedMessage.error)
}
inline std::string* ServerOriginatedMessage::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.error)
  return _s;
}
inline const std::string& ServerOriginatedMessage::_internal_error() const {
  if (_internal_has_error()) {
    return submessage_.error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ServerOriginatedMessage::_internal_set_error(const std::string& value) {
  if (!_internal_has_error()) {
    clear_submessage();
    set_has_error();
    submessage_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  submessage_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedMessage::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_submessage();
    set_has_error();
    submessage_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return submessage_.error_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedMessage::release_error() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.error)
  if (_internal_has_error()) {
    clear_has_submessage();
    return submessage_.error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::set_allocated_error(std::string* error) {
  if (has_submessage()) {
    clear_submessage();
  }
  if (error != nullptr) {
    set_has_error();
    submessage_.error_.UnsafeSetDefault(error);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(error);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.error)
}

// .iterm2.GetBufferResponse get_buffer_response = 100;
inline bool ServerOriginatedMessage::_internal_has_get_buffer_response() const {
  return submessage_case() == kGetBufferResponse;
}
inline bool ServerOriginatedMessage::has_get_buffer_response() const {
  return _internal_has_get_buffer_response();
}
inline void ServerOriginatedMessage::set_has_get_buffer_response() {
  _oneof_case_[0] = kGetBufferResponse;
}
inline void ServerOriginatedMessage::clear_get_buffer_response() {
  if (_internal_has_get_buffer_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_buffer_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetBufferResponse* ServerOriginatedMessage::release_get_buffer_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.get_buffer_response)
  if (_internal_has_get_buffer_response()) {
    clear_has_submessage();
      ::iterm2::GetBufferResponse* temp = submessage_.get_buffer_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_buffer_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetBufferResponse& ServerOriginatedMessage::_internal_get_buffer_response() const {
  return _internal_has_get_buffer_response()
      ? *submessage_.get_buffer_response_
      : reinterpret_cast< ::iterm2::GetBufferResponse&>(::iterm2::_GetBufferResponse_default_instance_);
}
inline const ::iterm2::GetBufferResponse& ServerOriginatedMessage::get_buffer_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.get_buffer_response)
  return _internal_get_buffer_response();
}
inline ::iterm2::GetBufferResponse* ServerOriginatedMessage::unsafe_arena_release_get_buffer_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.get_buffer_response)
  if (_internal_has_get_buffer_response()) {
    clear_has_submessage();
    ::iterm2::GetBufferResponse* temp = submessage_.get_buffer_response_;
    submessage_.get_buffer_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_get_buffer_response(::iterm2::GetBufferResponse* get_buffer_response) {
  clear_submessage();
  if (get_buffer_response) {
    set_has_get_buffer_response();
    submessage_.get_buffer_response_ = get_buffer_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.get_buffer_response)
}
inline ::iterm2::GetBufferResponse* ServerOriginatedMessage::_internal_mutable_get_buffer_response() {
  if (!_internal_has_get_buffer_response()) {
    clear_submessage();
    set_has_get_buffer_response();
    submessage_.get_buffer_response_ = CreateMaybeMessage< ::iterm2::GetBufferResponse >(GetArenaForAllocation());
  }
  return submessage_.get_buffer_response_;
}
inline ::iterm2::GetBufferResponse* ServerOriginatedMessage::mutable_get_buffer_response() {
  ::iterm2::GetBufferResponse* _msg = _internal_mutable_get_buffer_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.get_buffer_response)
  return _msg;
}

// .iterm2.GetPromptResponse get_prompt_response = 101;
inline bool ServerOriginatedMessage::_internal_has_get_prompt_response() const {
  return submessage_case() == kGetPromptResponse;
}
inline bool ServerOriginatedMessage::has_get_prompt_response() const {
  return _internal_has_get_prompt_response();
}
inline void ServerOriginatedMessage::set_has_get_prompt_response() {
  _oneof_case_[0] = kGetPromptResponse;
}
inline void ServerOriginatedMessage::clear_get_prompt_response() {
  if (_internal_has_get_prompt_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_prompt_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetPromptResponse* ServerOriginatedMessage::release_get_prompt_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.get_prompt_response)
  if (_internal_has_get_prompt_response()) {
    clear_has_submessage();
      ::iterm2::GetPromptResponse* temp = submessage_.get_prompt_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_prompt_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetPromptResponse& ServerOriginatedMessage::_internal_get_prompt_response() const {
  return _internal_has_get_prompt_response()
      ? *submessage_.get_prompt_response_
      : reinterpret_cast< ::iterm2::GetPromptResponse&>(::iterm2::_GetPromptResponse_default_instance_);
}
inline const ::iterm2::GetPromptResponse& ServerOriginatedMessage::get_prompt_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.get_prompt_response)
  return _internal_get_prompt_response();
}
inline ::iterm2::GetPromptResponse* ServerOriginatedMessage::unsafe_arena_release_get_prompt_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.get_prompt_response)
  if (_internal_has_get_prompt_response()) {
    clear_has_submessage();
    ::iterm2::GetPromptResponse* temp = submessage_.get_prompt_response_;
    submessage_.get_prompt_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_get_prompt_response(::iterm2::GetPromptResponse* get_prompt_response) {
  clear_submessage();
  if (get_prompt_response) {
    set_has_get_prompt_response();
    submessage_.get_prompt_response_ = get_prompt_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.get_prompt_response)
}
inline ::iterm2::GetPromptResponse* ServerOriginatedMessage::_internal_mutable_get_prompt_response() {
  if (!_internal_has_get_prompt_response()) {
    clear_submessage();
    set_has_get_prompt_response();
    submessage_.get_prompt_response_ = CreateMaybeMessage< ::iterm2::GetPromptResponse >(GetArenaForAllocation());
  }
  return submessage_.get_prompt_response_;
}
inline ::iterm2::GetPromptResponse* ServerOriginatedMessage::mutable_get_prompt_response() {
  ::iterm2::GetPromptResponse* _msg = _internal_mutable_get_prompt_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.get_prompt_response)
  return _msg;
}

// .iterm2.TransactionResponse transaction_response = 102;
inline bool ServerOriginatedMessage::_internal_has_transaction_response() const {
  return submessage_case() == kTransactionResponse;
}
inline bool ServerOriginatedMessage::has_transaction_response() const {
  return _internal_has_transaction_response();
}
inline void ServerOriginatedMessage::set_has_transaction_response() {
  _oneof_case_[0] = kTransactionResponse;
}
inline void ServerOriginatedMessage::clear_transaction_response() {
  if (_internal_has_transaction_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.transaction_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::TransactionResponse* ServerOriginatedMessage::release_transaction_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.transaction_response)
  if (_internal_has_transaction_response()) {
    clear_has_submessage();
      ::iterm2::TransactionResponse* temp = submessage_.transaction_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.transaction_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TransactionResponse& ServerOriginatedMessage::_internal_transaction_response() const {
  return _internal_has_transaction_response()
      ? *submessage_.transaction_response_
      : reinterpret_cast< ::iterm2::TransactionResponse&>(::iterm2::_TransactionResponse_default_instance_);
}
inline const ::iterm2::TransactionResponse& ServerOriginatedMessage::transaction_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.transaction_response)
  return _internal_transaction_response();
}
inline ::iterm2::TransactionResponse* ServerOriginatedMessage::unsafe_arena_release_transaction_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.transaction_response)
  if (_internal_has_transaction_response()) {
    clear_has_submessage();
    ::iterm2::TransactionResponse* temp = submessage_.transaction_response_;
    submessage_.transaction_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_transaction_response(::iterm2::TransactionResponse* transaction_response) {
  clear_submessage();
  if (transaction_response) {
    set_has_transaction_response();
    submessage_.transaction_response_ = transaction_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.transaction_response)
}
inline ::iterm2::TransactionResponse* ServerOriginatedMessage::_internal_mutable_transaction_response() {
  if (!_internal_has_transaction_response()) {
    clear_submessage();
    set_has_transaction_response();
    submessage_.transaction_response_ = CreateMaybeMessage< ::iterm2::TransactionResponse >(GetArenaForAllocation());
  }
  return submessage_.transaction_response_;
}
inline ::iterm2::TransactionResponse* ServerOriginatedMessage::mutable_transaction_response() {
  ::iterm2::TransactionResponse* _msg = _internal_mutable_transaction_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.transaction_response)
  return _msg;
}

// .iterm2.NotificationResponse notification_response = 103;
inline bool ServerOriginatedMessage::_internal_has_notification_response() const {
  return submessage_case() == kNotificationResponse;
}
inline bool ServerOriginatedMessage::has_notification_response() const {
  return _internal_has_notification_response();
}
inline void ServerOriginatedMessage::set_has_notification_response() {
  _oneof_case_[0] = kNotificationResponse;
}
inline void ServerOriginatedMessage::clear_notification_response() {
  if (_internal_has_notification_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.notification_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::NotificationResponse* ServerOriginatedMessage::release_notification_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.notification_response)
  if (_internal_has_notification_response()) {
    clear_has_submessage();
      ::iterm2::NotificationResponse* temp = submessage_.notification_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.notification_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::NotificationResponse& ServerOriginatedMessage::_internal_notification_response() const {
  return _internal_has_notification_response()
      ? *submessage_.notification_response_
      : reinterpret_cast< ::iterm2::NotificationResponse&>(::iterm2::_NotificationResponse_default_instance_);
}
inline const ::iterm2::NotificationResponse& ServerOriginatedMessage::notification_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.notification_response)
  return _internal_notification_response();
}
inline ::iterm2::NotificationResponse* ServerOriginatedMessage::unsafe_arena_release_notification_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.notification_response)
  if (_internal_has_notification_response()) {
    clear_has_submessage();
    ::iterm2::NotificationResponse* temp = submessage_.notification_response_;
    submessage_.notification_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_notification_response(::iterm2::NotificationResponse* notification_response) {
  clear_submessage();
  if (notification_response) {
    set_has_notification_response();
    submessage_.notification_response_ = notification_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.notification_response)
}
inline ::iterm2::NotificationResponse* ServerOriginatedMessage::_internal_mutable_notification_response() {
  if (!_internal_has_notification_response()) {
    clear_submessage();
    set_has_notification_response();
    submessage_.notification_response_ = CreateMaybeMessage< ::iterm2::NotificationResponse >(GetArenaForAllocation());
  }
  return submessage_.notification_response_;
}
inline ::iterm2::NotificationResponse* ServerOriginatedMessage::mutable_notification_response() {
  ::iterm2::NotificationResponse* _msg = _internal_mutable_notification_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.notification_response)
  return _msg;
}

// .iterm2.RegisterToolResponse register_tool_response = 104;
inline bool ServerOriginatedMessage::_internal_has_register_tool_response() const {
  return submessage_case() == kRegisterToolResponse;
}
inline bool ServerOriginatedMessage::has_register_tool_response() const {
  return _internal_has_register_tool_response();
}
inline void ServerOriginatedMessage::set_has_register_tool_response() {
  _oneof_case_[0] = kRegisterToolResponse;
}
inline void ServerOriginatedMessage::clear_register_tool_response() {
  if (_internal_has_register_tool_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.register_tool_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::RegisterToolResponse* ServerOriginatedMessage::release_register_tool_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.register_tool_response)
  if (_internal_has_register_tool_response()) {
    clear_has_submessage();
      ::iterm2::RegisterToolResponse* temp = submessage_.register_tool_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.register_tool_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RegisterToolResponse& ServerOriginatedMessage::_internal_register_tool_response() const {
  return _internal_has_register_tool_response()
      ? *submessage_.register_tool_response_
      : reinterpret_cast< ::iterm2::RegisterToolResponse&>(::iterm2::_RegisterToolResponse_default_instance_);
}
inline const ::iterm2::RegisterToolResponse& ServerOriginatedMessage::register_tool_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.register_tool_response)
  return _internal_register_tool_response();
}
inline ::iterm2::RegisterToolResponse* ServerOriginatedMessage::unsafe_arena_release_register_tool_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.register_tool_response)
  if (_internal_has_register_tool_response()) {
    clear_has_submessage();
    ::iterm2::RegisterToolResponse* temp = submessage_.register_tool_response_;
    submessage_.register_tool_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_register_tool_response(::iterm2::RegisterToolResponse* register_tool_response) {
  clear_submessage();
  if (register_tool_response) {
    set_has_register_tool_response();
    submessage_.register_tool_response_ = register_tool_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.register_tool_response)
}
inline ::iterm2::RegisterToolResponse* ServerOriginatedMessage::_internal_mutable_register_tool_response() {
  if (!_internal_has_register_tool_response()) {
    clear_submessage();
    set_has_register_tool_response();
    submessage_.register_tool_response_ = CreateMaybeMessage< ::iterm2::RegisterToolResponse >(GetArenaForAllocation());
  }
  return submessage_.register_tool_response_;
}
inline ::iterm2::RegisterToolResponse* ServerOriginatedMessage::mutable_register_tool_response() {
  ::iterm2::RegisterToolResponse* _msg = _internal_mutable_register_tool_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.register_tool_response)
  return _msg;
}

// .iterm2.SetProfilePropertyResponse set_profile_property_response = 105;
inline bool ServerOriginatedMessage::_internal_has_set_profile_property_response() const {
  return submessage_case() == kSetProfilePropertyResponse;
}
inline bool ServerOriginatedMessage::has_set_profile_property_response() const {
  return _internal_has_set_profile_property_response();
}
inline void ServerOriginatedMessage::set_has_set_profile_property_response() {
  _oneof_case_[0] = kSetProfilePropertyResponse;
}
inline void ServerOriginatedMessage::clear_set_profile_property_response() {
  if (_internal_has_set_profile_property_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_profile_property_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetProfilePropertyResponse* ServerOriginatedMessage::release_set_profile_property_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.set_profile_property_response)
  if (_internal_has_set_profile_property_response()) {
    clear_has_submessage();
      ::iterm2::SetProfilePropertyResponse* temp = submessage_.set_profile_property_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_profile_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetProfilePropertyResponse& ServerOriginatedMessage::_internal_set_profile_property_response() const {
  return _internal_has_set_profile_property_response()
      ? *submessage_.set_profile_property_response_
      : reinterpret_cast< ::iterm2::SetProfilePropertyResponse&>(::iterm2::_SetProfilePropertyResponse_default_instance_);
}
inline const ::iterm2::SetProfilePropertyResponse& ServerOriginatedMessage::set_profile_property_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.set_profile_property_response)
  return _internal_set_profile_property_response();
}
inline ::iterm2::SetProfilePropertyResponse* ServerOriginatedMessage::unsafe_arena_release_set_profile_property_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.set_profile_property_response)
  if (_internal_has_set_profile_property_response()) {
    clear_has_submessage();
    ::iterm2::SetProfilePropertyResponse* temp = submessage_.set_profile_property_response_;
    submessage_.set_profile_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_set_profile_property_response(::iterm2::SetProfilePropertyResponse* set_profile_property_response) {
  clear_submessage();
  if (set_profile_property_response) {
    set_has_set_profile_property_response();
    submessage_.set_profile_property_response_ = set_profile_property_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.set_profile_property_response)
}
inline ::iterm2::SetProfilePropertyResponse* ServerOriginatedMessage::_internal_mutable_set_profile_property_response() {
  if (!_internal_has_set_profile_property_response()) {
    clear_submessage();
    set_has_set_profile_property_response();
    submessage_.set_profile_property_response_ = CreateMaybeMessage< ::iterm2::SetProfilePropertyResponse >(GetArenaForAllocation());
  }
  return submessage_.set_profile_property_response_;
}
inline ::iterm2::SetProfilePropertyResponse* ServerOriginatedMessage::mutable_set_profile_property_response() {
  ::iterm2::SetProfilePropertyResponse* _msg = _internal_mutable_set_profile_property_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.set_profile_property_response)
  return _msg;
}

// .iterm2.ListSessionsResponse list_sessions_response = 106;
inline bool ServerOriginatedMessage::_internal_has_list_sessions_response() const {
  return submessage_case() == kListSessionsResponse;
}
inline bool ServerOriginatedMessage::has_list_sessions_response() const {
  return _internal_has_list_sessions_response();
}
inline void ServerOriginatedMessage::set_has_list_sessions_response() {
  _oneof_case_[0] = kListSessionsResponse;
}
inline void ServerOriginatedMessage::clear_list_sessions_response() {
  if (_internal_has_list_sessions_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.list_sessions_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ListSessionsResponse* ServerOriginatedMessage::release_list_sessions_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.list_sessions_response)
  if (_internal_has_list_sessions_response()) {
    clear_has_submessage();
      ::iterm2::ListSessionsResponse* temp = submessage_.list_sessions_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.list_sessions_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ListSessionsResponse& ServerOriginatedMessage::_internal_list_sessions_response() const {
  return _internal_has_list_sessions_response()
      ? *submessage_.list_sessions_response_
      : reinterpret_cast< ::iterm2::ListSessionsResponse&>(::iterm2::_ListSessionsResponse_default_instance_);
}
inline const ::iterm2::ListSessionsResponse& ServerOriginatedMessage::list_sessions_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.list_sessions_response)
  return _internal_list_sessions_response();
}
inline ::iterm2::ListSessionsResponse* ServerOriginatedMessage::unsafe_arena_release_list_sessions_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.list_sessions_response)
  if (_internal_has_list_sessions_response()) {
    clear_has_submessage();
    ::iterm2::ListSessionsResponse* temp = submessage_.list_sessions_response_;
    submessage_.list_sessions_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_list_sessions_response(::iterm2::ListSessionsResponse* list_sessions_response) {
  clear_submessage();
  if (list_sessions_response) {
    set_has_list_sessions_response();
    submessage_.list_sessions_response_ = list_sessions_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.list_sessions_response)
}
inline ::iterm2::ListSessionsResponse* ServerOriginatedMessage::_internal_mutable_list_sessions_response() {
  if (!_internal_has_list_sessions_response()) {
    clear_submessage();
    set_has_list_sessions_response();
    submessage_.list_sessions_response_ = CreateMaybeMessage< ::iterm2::ListSessionsResponse >(GetArenaForAllocation());
  }
  return submessage_.list_sessions_response_;
}
inline ::iterm2::ListSessionsResponse* ServerOriginatedMessage::mutable_list_sessions_response() {
  ::iterm2::ListSessionsResponse* _msg = _internal_mutable_list_sessions_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.list_sessions_response)
  return _msg;
}

// .iterm2.SendTextResponse send_text_response = 107;
inline bool ServerOriginatedMessage::_internal_has_send_text_response() const {
  return submessage_case() == kSendTextResponse;
}
inline bool ServerOriginatedMessage::has_send_text_response() const {
  return _internal_has_send_text_response();
}
inline void ServerOriginatedMessage::set_has_send_text_response() {
  _oneof_case_[0] = kSendTextResponse;
}
inline void ServerOriginatedMessage::clear_send_text_response() {
  if (_internal_has_send_text_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.send_text_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SendTextResponse* ServerOriginatedMessage::release_send_text_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.send_text_response)
  if (_internal_has_send_text_response()) {
    clear_has_submessage();
      ::iterm2::SendTextResponse* temp = submessage_.send_text_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.send_text_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SendTextResponse& ServerOriginatedMessage::_internal_send_text_response() const {
  return _internal_has_send_text_response()
      ? *submessage_.send_text_response_
      : reinterpret_cast< ::iterm2::SendTextResponse&>(::iterm2::_SendTextResponse_default_instance_);
}
inline const ::iterm2::SendTextResponse& ServerOriginatedMessage::send_text_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.send_text_response)
  return _internal_send_text_response();
}
inline ::iterm2::SendTextResponse* ServerOriginatedMessage::unsafe_arena_release_send_text_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.send_text_response)
  if (_internal_has_send_text_response()) {
    clear_has_submessage();
    ::iterm2::SendTextResponse* temp = submessage_.send_text_response_;
    submessage_.send_text_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_send_text_response(::iterm2::SendTextResponse* send_text_response) {
  clear_submessage();
  if (send_text_response) {
    set_has_send_text_response();
    submessage_.send_text_response_ = send_text_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.send_text_response)
}
inline ::iterm2::SendTextResponse* ServerOriginatedMessage::_internal_mutable_send_text_response() {
  if (!_internal_has_send_text_response()) {
    clear_submessage();
    set_has_send_text_response();
    submessage_.send_text_response_ = CreateMaybeMessage< ::iterm2::SendTextResponse >(GetArenaForAllocation());
  }
  return submessage_.send_text_response_;
}
inline ::iterm2::SendTextResponse* ServerOriginatedMessage::mutable_send_text_response() {
  ::iterm2::SendTextResponse* _msg = _internal_mutable_send_text_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.send_text_response)
  return _msg;
}

// .iterm2.CreateTabResponse create_tab_response = 108;
inline bool ServerOriginatedMessage::_internal_has_create_tab_response() const {
  return submessage_case() == kCreateTabResponse;
}
inline bool ServerOriginatedMessage::has_create_tab_response() const {
  return _internal_has_create_tab_response();
}
inline void ServerOriginatedMessage::set_has_create_tab_response() {
  _oneof_case_[0] = kCreateTabResponse;
}
inline void ServerOriginatedMessage::clear_create_tab_response() {
  if (_internal_has_create_tab_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.create_tab_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::CreateTabResponse* ServerOriginatedMessage::release_create_tab_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.create_tab_response)
  if (_internal_has_create_tab_response()) {
    clear_has_submessage();
      ::iterm2::CreateTabResponse* temp = submessage_.create_tab_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.create_tab_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CreateTabResponse& ServerOriginatedMessage::_internal_create_tab_response() const {
  return _internal_has_create_tab_response()
      ? *submessage_.create_tab_response_
      : reinterpret_cast< ::iterm2::CreateTabResponse&>(::iterm2::_CreateTabResponse_default_instance_);
}
inline const ::iterm2::CreateTabResponse& ServerOriginatedMessage::create_tab_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.create_tab_response)
  return _internal_create_tab_response();
}
inline ::iterm2::CreateTabResponse* ServerOriginatedMessage::unsafe_arena_release_create_tab_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.create_tab_response)
  if (_internal_has_create_tab_response()) {
    clear_has_submessage();
    ::iterm2::CreateTabResponse* temp = submessage_.create_tab_response_;
    submessage_.create_tab_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_create_tab_response(::iterm2::CreateTabResponse* create_tab_response) {
  clear_submessage();
  if (create_tab_response) {
    set_has_create_tab_response();
    submessage_.create_tab_response_ = create_tab_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.create_tab_response)
}
inline ::iterm2::CreateTabResponse* ServerOriginatedMessage::_internal_mutable_create_tab_response() {
  if (!_internal_has_create_tab_response()) {
    clear_submessage();
    set_has_create_tab_response();
    submessage_.create_tab_response_ = CreateMaybeMessage< ::iterm2::CreateTabResponse >(GetArenaForAllocation());
  }
  return submessage_.create_tab_response_;
}
inline ::iterm2::CreateTabResponse* ServerOriginatedMessage::mutable_create_tab_response() {
  ::iterm2::CreateTabResponse* _msg = _internal_mutable_create_tab_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.create_tab_response)
  return _msg;
}

// .iterm2.SplitPaneResponse split_pane_response = 109;
inline bool ServerOriginatedMessage::_internal_has_split_pane_response() const {
  return submessage_case() == kSplitPaneResponse;
}
inline bool ServerOriginatedMessage::has_split_pane_response() const {
  return _internal_has_split_pane_response();
}
inline void ServerOriginatedMessage::set_has_split_pane_response() {
  _oneof_case_[0] = kSplitPaneResponse;
}
inline void ServerOriginatedMessage::clear_split_pane_response() {
  if (_internal_has_split_pane_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.split_pane_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SplitPaneResponse* ServerOriginatedMessage::release_split_pane_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.split_pane_response)
  if (_internal_has_split_pane_response()) {
    clear_has_submessage();
      ::iterm2::SplitPaneResponse* temp = submessage_.split_pane_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.split_pane_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SplitPaneResponse& ServerOriginatedMessage::_internal_split_pane_response() const {
  return _internal_has_split_pane_response()
      ? *submessage_.split_pane_response_
      : reinterpret_cast< ::iterm2::SplitPaneResponse&>(::iterm2::_SplitPaneResponse_default_instance_);
}
inline const ::iterm2::SplitPaneResponse& ServerOriginatedMessage::split_pane_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.split_pane_response)
  return _internal_split_pane_response();
}
inline ::iterm2::SplitPaneResponse* ServerOriginatedMessage::unsafe_arena_release_split_pane_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.split_pane_response)
  if (_internal_has_split_pane_response()) {
    clear_has_submessage();
    ::iterm2::SplitPaneResponse* temp = submessage_.split_pane_response_;
    submessage_.split_pane_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_split_pane_response(::iterm2::SplitPaneResponse* split_pane_response) {
  clear_submessage();
  if (split_pane_response) {
    set_has_split_pane_response();
    submessage_.split_pane_response_ = split_pane_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.split_pane_response)
}
inline ::iterm2::SplitPaneResponse* ServerOriginatedMessage::_internal_mutable_split_pane_response() {
  if (!_internal_has_split_pane_response()) {
    clear_submessage();
    set_has_split_pane_response();
    submessage_.split_pane_response_ = CreateMaybeMessage< ::iterm2::SplitPaneResponse >(GetArenaForAllocation());
  }
  return submessage_.split_pane_response_;
}
inline ::iterm2::SplitPaneResponse* ServerOriginatedMessage::mutable_split_pane_response() {
  ::iterm2::SplitPaneResponse* _msg = _internal_mutable_split_pane_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.split_pane_response)
  return _msg;
}

// .iterm2.GetProfilePropertyResponse get_profile_property_response = 110;
inline bool ServerOriginatedMessage::_internal_has_get_profile_property_response() const {
  return submessage_case() == kGetProfilePropertyResponse;
}
inline bool ServerOriginatedMessage::has_get_profile_property_response() const {
  return _internal_has_get_profile_property_response();
}
inline void ServerOriginatedMessage::set_has_get_profile_property_response() {
  _oneof_case_[0] = kGetProfilePropertyResponse;
}
inline void ServerOriginatedMessage::clear_get_profile_property_response() {
  if (_internal_has_get_profile_property_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_profile_property_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetProfilePropertyResponse* ServerOriginatedMessage::release_get_profile_property_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.get_profile_property_response)
  if (_internal_has_get_profile_property_response()) {
    clear_has_submessage();
      ::iterm2::GetProfilePropertyResponse* temp = submessage_.get_profile_property_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_profile_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetProfilePropertyResponse& ServerOriginatedMessage::_internal_get_profile_property_response() const {
  return _internal_has_get_profile_property_response()
      ? *submessage_.get_profile_property_response_
      : reinterpret_cast< ::iterm2::GetProfilePropertyResponse&>(::iterm2::_GetProfilePropertyResponse_default_instance_);
}
inline const ::iterm2::GetProfilePropertyResponse& ServerOriginatedMessage::get_profile_property_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.get_profile_property_response)
  return _internal_get_profile_property_response();
}
inline ::iterm2::GetProfilePropertyResponse* ServerOriginatedMessage::unsafe_arena_release_get_profile_property_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.get_profile_property_response)
  if (_internal_has_get_profile_property_response()) {
    clear_has_submessage();
    ::iterm2::GetProfilePropertyResponse* temp = submessage_.get_profile_property_response_;
    submessage_.get_profile_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_get_profile_property_response(::iterm2::GetProfilePropertyResponse* get_profile_property_response) {
  clear_submessage();
  if (get_profile_property_response) {
    set_has_get_profile_property_response();
    submessage_.get_profile_property_response_ = get_profile_property_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.get_profile_property_response)
}
inline ::iterm2::GetProfilePropertyResponse* ServerOriginatedMessage::_internal_mutable_get_profile_property_response() {
  if (!_internal_has_get_profile_property_response()) {
    clear_submessage();
    set_has_get_profile_property_response();
    submessage_.get_profile_property_response_ = CreateMaybeMessage< ::iterm2::GetProfilePropertyResponse >(GetArenaForAllocation());
  }
  return submessage_.get_profile_property_response_;
}
inline ::iterm2::GetProfilePropertyResponse* ServerOriginatedMessage::mutable_get_profile_property_response() {
  ::iterm2::GetProfilePropertyResponse* _msg = _internal_mutable_get_profile_property_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.get_profile_property_response)
  return _msg;
}

// .iterm2.SetPropertyResponse set_property_response = 111;
inline bool ServerOriginatedMessage::_internal_has_set_property_response() const {
  return submessage_case() == kSetPropertyResponse;
}
inline bool ServerOriginatedMessage::has_set_property_response() const {
  return _internal_has_set_property_response();
}
inline void ServerOriginatedMessage::set_has_set_property_response() {
  _oneof_case_[0] = kSetPropertyResponse;
}
inline void ServerOriginatedMessage::clear_set_property_response() {
  if (_internal_has_set_property_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_property_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetPropertyResponse* ServerOriginatedMessage::release_set_property_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.set_property_response)
  if (_internal_has_set_property_response()) {
    clear_has_submessage();
      ::iterm2::SetPropertyResponse* temp = submessage_.set_property_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetPropertyResponse& ServerOriginatedMessage::_internal_set_property_response() const {
  return _internal_has_set_property_response()
      ? *submessage_.set_property_response_
      : reinterpret_cast< ::iterm2::SetPropertyResponse&>(::iterm2::_SetPropertyResponse_default_instance_);
}
inline const ::iterm2::SetPropertyResponse& ServerOriginatedMessage::set_property_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.set_property_response)
  return _internal_set_property_response();
}
inline ::iterm2::SetPropertyResponse* ServerOriginatedMessage::unsafe_arena_release_set_property_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.set_property_response)
  if (_internal_has_set_property_response()) {
    clear_has_submessage();
    ::iterm2::SetPropertyResponse* temp = submessage_.set_property_response_;
    submessage_.set_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_set_property_response(::iterm2::SetPropertyResponse* set_property_response) {
  clear_submessage();
  if (set_property_response) {
    set_has_set_property_response();
    submessage_.set_property_response_ = set_property_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.set_property_response)
}
inline ::iterm2::SetPropertyResponse* ServerOriginatedMessage::_internal_mutable_set_property_response() {
  if (!_internal_has_set_property_response()) {
    clear_submessage();
    set_has_set_property_response();
    submessage_.set_property_response_ = CreateMaybeMessage< ::iterm2::SetPropertyResponse >(GetArenaForAllocation());
  }
  return submessage_.set_property_response_;
}
inline ::iterm2::SetPropertyResponse* ServerOriginatedMessage::mutable_set_property_response() {
  ::iterm2::SetPropertyResponse* _msg = _internal_mutable_set_property_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.set_property_response)
  return _msg;
}

// .iterm2.GetPropertyResponse get_property_response = 112;
inline bool ServerOriginatedMessage::_internal_has_get_property_response() const {
  return submessage_case() == kGetPropertyResponse;
}
inline bool ServerOriginatedMessage::has_get_property_response() const {
  return _internal_has_get_property_response();
}
inline void ServerOriginatedMessage::set_has_get_property_response() {
  _oneof_case_[0] = kGetPropertyResponse;
}
inline void ServerOriginatedMessage::clear_get_property_response() {
  if (_internal_has_get_property_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_property_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetPropertyResponse* ServerOriginatedMessage::release_get_property_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.get_property_response)
  if (_internal_has_get_property_response()) {
    clear_has_submessage();
      ::iterm2::GetPropertyResponse* temp = submessage_.get_property_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetPropertyResponse& ServerOriginatedMessage::_internal_get_property_response() const {
  return _internal_has_get_property_response()
      ? *submessage_.get_property_response_
      : reinterpret_cast< ::iterm2::GetPropertyResponse&>(::iterm2::_GetPropertyResponse_default_instance_);
}
inline const ::iterm2::GetPropertyResponse& ServerOriginatedMessage::get_property_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.get_property_response)
  return _internal_get_property_response();
}
inline ::iterm2::GetPropertyResponse* ServerOriginatedMessage::unsafe_arena_release_get_property_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.get_property_response)
  if (_internal_has_get_property_response()) {
    clear_has_submessage();
    ::iterm2::GetPropertyResponse* temp = submessage_.get_property_response_;
    submessage_.get_property_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_get_property_response(::iterm2::GetPropertyResponse* get_property_response) {
  clear_submessage();
  if (get_property_response) {
    set_has_get_property_response();
    submessage_.get_property_response_ = get_property_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.get_property_response)
}
inline ::iterm2::GetPropertyResponse* ServerOriginatedMessage::_internal_mutable_get_property_response() {
  if (!_internal_has_get_property_response()) {
    clear_submessage();
    set_has_get_property_response();
    submessage_.get_property_response_ = CreateMaybeMessage< ::iterm2::GetPropertyResponse >(GetArenaForAllocation());
  }
  return submessage_.get_property_response_;
}
inline ::iterm2::GetPropertyResponse* ServerOriginatedMessage::mutable_get_property_response() {
  ::iterm2::GetPropertyResponse* _msg = _internal_mutable_get_property_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.get_property_response)
  return _msg;
}

// .iterm2.InjectResponse inject_response = 113;
inline bool ServerOriginatedMessage::_internal_has_inject_response() const {
  return submessage_case() == kInjectResponse;
}
inline bool ServerOriginatedMessage::has_inject_response() const {
  return _internal_has_inject_response();
}
inline void ServerOriginatedMessage::set_has_inject_response() {
  _oneof_case_[0] = kInjectResponse;
}
inline void ServerOriginatedMessage::clear_inject_response() {
  if (_internal_has_inject_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.inject_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::InjectResponse* ServerOriginatedMessage::release_inject_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.inject_response)
  if (_internal_has_inject_response()) {
    clear_has_submessage();
      ::iterm2::InjectResponse* temp = submessage_.inject_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.inject_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InjectResponse& ServerOriginatedMessage::_internal_inject_response() const {
  return _internal_has_inject_response()
      ? *submessage_.inject_response_
      : reinterpret_cast< ::iterm2::InjectResponse&>(::iterm2::_InjectResponse_default_instance_);
}
inline const ::iterm2::InjectResponse& ServerOriginatedMessage::inject_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.inject_response)
  return _internal_inject_response();
}
inline ::iterm2::InjectResponse* ServerOriginatedMessage::unsafe_arena_release_inject_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.inject_response)
  if (_internal_has_inject_response()) {
    clear_has_submessage();
    ::iterm2::InjectResponse* temp = submessage_.inject_response_;
    submessage_.inject_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_inject_response(::iterm2::InjectResponse* inject_response) {
  clear_submessage();
  if (inject_response) {
    set_has_inject_response();
    submessage_.inject_response_ = inject_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.inject_response)
}
inline ::iterm2::InjectResponse* ServerOriginatedMessage::_internal_mutable_inject_response() {
  if (!_internal_has_inject_response()) {
    clear_submessage();
    set_has_inject_response();
    submessage_.inject_response_ = CreateMaybeMessage< ::iterm2::InjectResponse >(GetArenaForAllocation());
  }
  return submessage_.inject_response_;
}
inline ::iterm2::InjectResponse* ServerOriginatedMessage::mutable_inject_response() {
  ::iterm2::InjectResponse* _msg = _internal_mutable_inject_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.inject_response)
  return _msg;
}

// .iterm2.ActivateResponse activate_response = 114;
inline bool ServerOriginatedMessage::_internal_has_activate_response() const {
  return submessage_case() == kActivateResponse;
}
inline bool ServerOriginatedMessage::has_activate_response() const {
  return _internal_has_activate_response();
}
inline void ServerOriginatedMessage::set_has_activate_response() {
  _oneof_case_[0] = kActivateResponse;
}
inline void ServerOriginatedMessage::clear_activate_response() {
  if (_internal_has_activate_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.activate_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ActivateResponse* ServerOriginatedMessage::release_activate_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.activate_response)
  if (_internal_has_activate_response()) {
    clear_has_submessage();
      ::iterm2::ActivateResponse* temp = submessage_.activate_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.activate_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ActivateResponse& ServerOriginatedMessage::_internal_activate_response() const {
  return _internal_has_activate_response()
      ? *submessage_.activate_response_
      : reinterpret_cast< ::iterm2::ActivateResponse&>(::iterm2::_ActivateResponse_default_instance_);
}
inline const ::iterm2::ActivateResponse& ServerOriginatedMessage::activate_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.activate_response)
  return _internal_activate_response();
}
inline ::iterm2::ActivateResponse* ServerOriginatedMessage::unsafe_arena_release_activate_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.activate_response)
  if (_internal_has_activate_response()) {
    clear_has_submessage();
    ::iterm2::ActivateResponse* temp = submessage_.activate_response_;
    submessage_.activate_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_activate_response(::iterm2::ActivateResponse* activate_response) {
  clear_submessage();
  if (activate_response) {
    set_has_activate_response();
    submessage_.activate_response_ = activate_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.activate_response)
}
inline ::iterm2::ActivateResponse* ServerOriginatedMessage::_internal_mutable_activate_response() {
  if (!_internal_has_activate_response()) {
    clear_submessage();
    set_has_activate_response();
    submessage_.activate_response_ = CreateMaybeMessage< ::iterm2::ActivateResponse >(GetArenaForAllocation());
  }
  return submessage_.activate_response_;
}
inline ::iterm2::ActivateResponse* ServerOriginatedMessage::mutable_activate_response() {
  ::iterm2::ActivateResponse* _msg = _internal_mutable_activate_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.activate_response)
  return _msg;
}

// .iterm2.VariableResponse variable_response = 115;
inline bool ServerOriginatedMessage::_internal_has_variable_response() const {
  return submessage_case() == kVariableResponse;
}
inline bool ServerOriginatedMessage::has_variable_response() const {
  return _internal_has_variable_response();
}
inline void ServerOriginatedMessage::set_has_variable_response() {
  _oneof_case_[0] = kVariableResponse;
}
inline void ServerOriginatedMessage::clear_variable_response() {
  if (_internal_has_variable_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.variable_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::VariableResponse* ServerOriginatedMessage::release_variable_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.variable_response)
  if (_internal_has_variable_response()) {
    clear_has_submessage();
      ::iterm2::VariableResponse* temp = submessage_.variable_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.variable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::VariableResponse& ServerOriginatedMessage::_internal_variable_response() const {
  return _internal_has_variable_response()
      ? *submessage_.variable_response_
      : reinterpret_cast< ::iterm2::VariableResponse&>(::iterm2::_VariableResponse_default_instance_);
}
inline const ::iterm2::VariableResponse& ServerOriginatedMessage::variable_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.variable_response)
  return _internal_variable_response();
}
inline ::iterm2::VariableResponse* ServerOriginatedMessage::unsafe_arena_release_variable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.variable_response)
  if (_internal_has_variable_response()) {
    clear_has_submessage();
    ::iterm2::VariableResponse* temp = submessage_.variable_response_;
    submessage_.variable_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_variable_response(::iterm2::VariableResponse* variable_response) {
  clear_submessage();
  if (variable_response) {
    set_has_variable_response();
    submessage_.variable_response_ = variable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.variable_response)
}
inline ::iterm2::VariableResponse* ServerOriginatedMessage::_internal_mutable_variable_response() {
  if (!_internal_has_variable_response()) {
    clear_submessage();
    set_has_variable_response();
    submessage_.variable_response_ = CreateMaybeMessage< ::iterm2::VariableResponse >(GetArenaForAllocation());
  }
  return submessage_.variable_response_;
}
inline ::iterm2::VariableResponse* ServerOriginatedMessage::mutable_variable_response() {
  ::iterm2::VariableResponse* _msg = _internal_mutable_variable_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.variable_response)
  return _msg;
}

// .iterm2.SavedArrangementResponse saved_arrangement_response = 116;
inline bool ServerOriginatedMessage::_internal_has_saved_arrangement_response() const {
  return submessage_case() == kSavedArrangementResponse;
}
inline bool ServerOriginatedMessage::has_saved_arrangement_response() const {
  return _internal_has_saved_arrangement_response();
}
inline void ServerOriginatedMessage::set_has_saved_arrangement_response() {
  _oneof_case_[0] = kSavedArrangementResponse;
}
inline void ServerOriginatedMessage::clear_saved_arrangement_response() {
  if (_internal_has_saved_arrangement_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.saved_arrangement_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SavedArrangementResponse* ServerOriginatedMessage::release_saved_arrangement_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.saved_arrangement_response)
  if (_internal_has_saved_arrangement_response()) {
    clear_has_submessage();
      ::iterm2::SavedArrangementResponse* temp = submessage_.saved_arrangement_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.saved_arrangement_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SavedArrangementResponse& ServerOriginatedMessage::_internal_saved_arrangement_response() const {
  return _internal_has_saved_arrangement_response()
      ? *submessage_.saved_arrangement_response_
      : reinterpret_cast< ::iterm2::SavedArrangementResponse&>(::iterm2::_SavedArrangementResponse_default_instance_);
}
inline const ::iterm2::SavedArrangementResponse& ServerOriginatedMessage::saved_arrangement_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.saved_arrangement_response)
  return _internal_saved_arrangement_response();
}
inline ::iterm2::SavedArrangementResponse* ServerOriginatedMessage::unsafe_arena_release_saved_arrangement_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.saved_arrangement_response)
  if (_internal_has_saved_arrangement_response()) {
    clear_has_submessage();
    ::iterm2::SavedArrangementResponse* temp = submessage_.saved_arrangement_response_;
    submessage_.saved_arrangement_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_saved_arrangement_response(::iterm2::SavedArrangementResponse* saved_arrangement_response) {
  clear_submessage();
  if (saved_arrangement_response) {
    set_has_saved_arrangement_response();
    submessage_.saved_arrangement_response_ = saved_arrangement_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.saved_arrangement_response)
}
inline ::iterm2::SavedArrangementResponse* ServerOriginatedMessage::_internal_mutable_saved_arrangement_response() {
  if (!_internal_has_saved_arrangement_response()) {
    clear_submessage();
    set_has_saved_arrangement_response();
    submessage_.saved_arrangement_response_ = CreateMaybeMessage< ::iterm2::SavedArrangementResponse >(GetArenaForAllocation());
  }
  return submessage_.saved_arrangement_response_;
}
inline ::iterm2::SavedArrangementResponse* ServerOriginatedMessage::mutable_saved_arrangement_response() {
  ::iterm2::SavedArrangementResponse* _msg = _internal_mutable_saved_arrangement_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.saved_arrangement_response)
  return _msg;
}

// .iterm2.FocusResponse focus_response = 117;
inline bool ServerOriginatedMessage::_internal_has_focus_response() const {
  return submessage_case() == kFocusResponse;
}
inline bool ServerOriginatedMessage::has_focus_response() const {
  return _internal_has_focus_response();
}
inline void ServerOriginatedMessage::set_has_focus_response() {
  _oneof_case_[0] = kFocusResponse;
}
inline void ServerOriginatedMessage::clear_focus_response() {
  if (_internal_has_focus_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.focus_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::FocusResponse* ServerOriginatedMessage::release_focus_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.focus_response)
  if (_internal_has_focus_response()) {
    clear_has_submessage();
      ::iterm2::FocusResponse* temp = submessage_.focus_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.focus_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::FocusResponse& ServerOriginatedMessage::_internal_focus_response() const {
  return _internal_has_focus_response()
      ? *submessage_.focus_response_
      : reinterpret_cast< ::iterm2::FocusResponse&>(::iterm2::_FocusResponse_default_instance_);
}
inline const ::iterm2::FocusResponse& ServerOriginatedMessage::focus_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.focus_response)
  return _internal_focus_response();
}
inline ::iterm2::FocusResponse* ServerOriginatedMessage::unsafe_arena_release_focus_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.focus_response)
  if (_internal_has_focus_response()) {
    clear_has_submessage();
    ::iterm2::FocusResponse* temp = submessage_.focus_response_;
    submessage_.focus_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_focus_response(::iterm2::FocusResponse* focus_response) {
  clear_submessage();
  if (focus_response) {
    set_has_focus_response();
    submessage_.focus_response_ = focus_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.focus_response)
}
inline ::iterm2::FocusResponse* ServerOriginatedMessage::_internal_mutable_focus_response() {
  if (!_internal_has_focus_response()) {
    clear_submessage();
    set_has_focus_response();
    submessage_.focus_response_ = CreateMaybeMessage< ::iterm2::FocusResponse >(GetArenaForAllocation());
  }
  return submessage_.focus_response_;
}
inline ::iterm2::FocusResponse* ServerOriginatedMessage::mutable_focus_response() {
  ::iterm2::FocusResponse* _msg = _internal_mutable_focus_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.focus_response)
  return _msg;
}

// .iterm2.ListProfilesResponse list_profiles_response = 118;
inline bool ServerOriginatedMessage::_internal_has_list_profiles_response() const {
  return submessage_case() == kListProfilesResponse;
}
inline bool ServerOriginatedMessage::has_list_profiles_response() const {
  return _internal_has_list_profiles_response();
}
inline void ServerOriginatedMessage::set_has_list_profiles_response() {
  _oneof_case_[0] = kListProfilesResponse;
}
inline void ServerOriginatedMessage::clear_list_profiles_response() {
  if (_internal_has_list_profiles_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.list_profiles_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ListProfilesResponse* ServerOriginatedMessage::release_list_profiles_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.list_profiles_response)
  if (_internal_has_list_profiles_response()) {
    clear_has_submessage();
      ::iterm2::ListProfilesResponse* temp = submessage_.list_profiles_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.list_profiles_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ListProfilesResponse& ServerOriginatedMessage::_internal_list_profiles_response() const {
  return _internal_has_list_profiles_response()
      ? *submessage_.list_profiles_response_
      : reinterpret_cast< ::iterm2::ListProfilesResponse&>(::iterm2::_ListProfilesResponse_default_instance_);
}
inline const ::iterm2::ListProfilesResponse& ServerOriginatedMessage::list_profiles_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.list_profiles_response)
  return _internal_list_profiles_response();
}
inline ::iterm2::ListProfilesResponse* ServerOriginatedMessage::unsafe_arena_release_list_profiles_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.list_profiles_response)
  if (_internal_has_list_profiles_response()) {
    clear_has_submessage();
    ::iterm2::ListProfilesResponse* temp = submessage_.list_profiles_response_;
    submessage_.list_profiles_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_list_profiles_response(::iterm2::ListProfilesResponse* list_profiles_response) {
  clear_submessage();
  if (list_profiles_response) {
    set_has_list_profiles_response();
    submessage_.list_profiles_response_ = list_profiles_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.list_profiles_response)
}
inline ::iterm2::ListProfilesResponse* ServerOriginatedMessage::_internal_mutable_list_profiles_response() {
  if (!_internal_has_list_profiles_response()) {
    clear_submessage();
    set_has_list_profiles_response();
    submessage_.list_profiles_response_ = CreateMaybeMessage< ::iterm2::ListProfilesResponse >(GetArenaForAllocation());
  }
  return submessage_.list_profiles_response_;
}
inline ::iterm2::ListProfilesResponse* ServerOriginatedMessage::mutable_list_profiles_response() {
  ::iterm2::ListProfilesResponse* _msg = _internal_mutable_list_profiles_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.list_profiles_response)
  return _msg;
}

// .iterm2.ServerOriginatedRPCResultResponse server_originated_rpc_result_response = 119;
inline bool ServerOriginatedMessage::_internal_has_server_originated_rpc_result_response() const {
  return submessage_case() == kServerOriginatedRpcResultResponse;
}
inline bool ServerOriginatedMessage::has_server_originated_rpc_result_response() const {
  return _internal_has_server_originated_rpc_result_response();
}
inline void ServerOriginatedMessage::set_has_server_originated_rpc_result_response() {
  _oneof_case_[0] = kServerOriginatedRpcResultResponse;
}
inline void ServerOriginatedMessage::clear_server_originated_rpc_result_response() {
  if (_internal_has_server_originated_rpc_result_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.server_originated_rpc_result_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ServerOriginatedRPCResultResponse* ServerOriginatedMessage::release_server_originated_rpc_result_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.server_originated_rpc_result_response)
  if (_internal_has_server_originated_rpc_result_response()) {
    clear_has_submessage();
      ::iterm2::ServerOriginatedRPCResultResponse* temp = submessage_.server_originated_rpc_result_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.server_originated_rpc_result_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ServerOriginatedRPCResultResponse& ServerOriginatedMessage::_internal_server_originated_rpc_result_response() const {
  return _internal_has_server_originated_rpc_result_response()
      ? *submessage_.server_originated_rpc_result_response_
      : reinterpret_cast< ::iterm2::ServerOriginatedRPCResultResponse&>(::iterm2::_ServerOriginatedRPCResultResponse_default_instance_);
}
inline const ::iterm2::ServerOriginatedRPCResultResponse& ServerOriginatedMessage::server_originated_rpc_result_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.server_originated_rpc_result_response)
  return _internal_server_originated_rpc_result_response();
}
inline ::iterm2::ServerOriginatedRPCResultResponse* ServerOriginatedMessage::unsafe_arena_release_server_originated_rpc_result_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.server_originated_rpc_result_response)
  if (_internal_has_server_originated_rpc_result_response()) {
    clear_has_submessage();
    ::iterm2::ServerOriginatedRPCResultResponse* temp = submessage_.server_originated_rpc_result_response_;
    submessage_.server_originated_rpc_result_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_server_originated_rpc_result_response(::iterm2::ServerOriginatedRPCResultResponse* server_originated_rpc_result_response) {
  clear_submessage();
  if (server_originated_rpc_result_response) {
    set_has_server_originated_rpc_result_response();
    submessage_.server_originated_rpc_result_response_ = server_originated_rpc_result_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.server_originated_rpc_result_response)
}
inline ::iterm2::ServerOriginatedRPCResultResponse* ServerOriginatedMessage::_internal_mutable_server_originated_rpc_result_response() {
  if (!_internal_has_server_originated_rpc_result_response()) {
    clear_submessage();
    set_has_server_originated_rpc_result_response();
    submessage_.server_originated_rpc_result_response_ = CreateMaybeMessage< ::iterm2::ServerOriginatedRPCResultResponse >(GetArenaForAllocation());
  }
  return submessage_.server_originated_rpc_result_response_;
}
inline ::iterm2::ServerOriginatedRPCResultResponse* ServerOriginatedMessage::mutable_server_originated_rpc_result_response() {
  ::iterm2::ServerOriginatedRPCResultResponse* _msg = _internal_mutable_server_originated_rpc_result_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.server_originated_rpc_result_response)
  return _msg;
}

// .iterm2.RestartSessionResponse restart_session_response = 120;
inline bool ServerOriginatedMessage::_internal_has_restart_session_response() const {
  return submessage_case() == kRestartSessionResponse;
}
inline bool ServerOriginatedMessage::has_restart_session_response() const {
  return _internal_has_restart_session_response();
}
inline void ServerOriginatedMessage::set_has_restart_session_response() {
  _oneof_case_[0] = kRestartSessionResponse;
}
inline void ServerOriginatedMessage::clear_restart_session_response() {
  if (_internal_has_restart_session_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.restart_session_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::RestartSessionResponse* ServerOriginatedMessage::release_restart_session_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.restart_session_response)
  if (_internal_has_restart_session_response()) {
    clear_has_submessage();
      ::iterm2::RestartSessionResponse* temp = submessage_.restart_session_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.restart_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RestartSessionResponse& ServerOriginatedMessage::_internal_restart_session_response() const {
  return _internal_has_restart_session_response()
      ? *submessage_.restart_session_response_
      : reinterpret_cast< ::iterm2::RestartSessionResponse&>(::iterm2::_RestartSessionResponse_default_instance_);
}
inline const ::iterm2::RestartSessionResponse& ServerOriginatedMessage::restart_session_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.restart_session_response)
  return _internal_restart_session_response();
}
inline ::iterm2::RestartSessionResponse* ServerOriginatedMessage::unsafe_arena_release_restart_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.restart_session_response)
  if (_internal_has_restart_session_response()) {
    clear_has_submessage();
    ::iterm2::RestartSessionResponse* temp = submessage_.restart_session_response_;
    submessage_.restart_session_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_restart_session_response(::iterm2::RestartSessionResponse* restart_session_response) {
  clear_submessage();
  if (restart_session_response) {
    set_has_restart_session_response();
    submessage_.restart_session_response_ = restart_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.restart_session_response)
}
inline ::iterm2::RestartSessionResponse* ServerOriginatedMessage::_internal_mutable_restart_session_response() {
  if (!_internal_has_restart_session_response()) {
    clear_submessage();
    set_has_restart_session_response();
    submessage_.restart_session_response_ = CreateMaybeMessage< ::iterm2::RestartSessionResponse >(GetArenaForAllocation());
  }
  return submessage_.restart_session_response_;
}
inline ::iterm2::RestartSessionResponse* ServerOriginatedMessage::mutable_restart_session_response() {
  ::iterm2::RestartSessionResponse* _msg = _internal_mutable_restart_session_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.restart_session_response)
  return _msg;
}

// .iterm2.MenuItemResponse menu_item_response = 121;
inline bool ServerOriginatedMessage::_internal_has_menu_item_response() const {
  return submessage_case() == kMenuItemResponse;
}
inline bool ServerOriginatedMessage::has_menu_item_response() const {
  return _internal_has_menu_item_response();
}
inline void ServerOriginatedMessage::set_has_menu_item_response() {
  _oneof_case_[0] = kMenuItemResponse;
}
inline void ServerOriginatedMessage::clear_menu_item_response() {
  if (_internal_has_menu_item_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.menu_item_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::MenuItemResponse* ServerOriginatedMessage::release_menu_item_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.menu_item_response)
  if (_internal_has_menu_item_response()) {
    clear_has_submessage();
      ::iterm2::MenuItemResponse* temp = submessage_.menu_item_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.menu_item_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::MenuItemResponse& ServerOriginatedMessage::_internal_menu_item_response() const {
  return _internal_has_menu_item_response()
      ? *submessage_.menu_item_response_
      : reinterpret_cast< ::iterm2::MenuItemResponse&>(::iterm2::_MenuItemResponse_default_instance_);
}
inline const ::iterm2::MenuItemResponse& ServerOriginatedMessage::menu_item_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.menu_item_response)
  return _internal_menu_item_response();
}
inline ::iterm2::MenuItemResponse* ServerOriginatedMessage::unsafe_arena_release_menu_item_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.menu_item_response)
  if (_internal_has_menu_item_response()) {
    clear_has_submessage();
    ::iterm2::MenuItemResponse* temp = submessage_.menu_item_response_;
    submessage_.menu_item_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_menu_item_response(::iterm2::MenuItemResponse* menu_item_response) {
  clear_submessage();
  if (menu_item_response) {
    set_has_menu_item_response();
    submessage_.menu_item_response_ = menu_item_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.menu_item_response)
}
inline ::iterm2::MenuItemResponse* ServerOriginatedMessage::_internal_mutable_menu_item_response() {
  if (!_internal_has_menu_item_response()) {
    clear_submessage();
    set_has_menu_item_response();
    submessage_.menu_item_response_ = CreateMaybeMessage< ::iterm2::MenuItemResponse >(GetArenaForAllocation());
  }
  return submessage_.menu_item_response_;
}
inline ::iterm2::MenuItemResponse* ServerOriginatedMessage::mutable_menu_item_response() {
  ::iterm2::MenuItemResponse* _msg = _internal_mutable_menu_item_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.menu_item_response)
  return _msg;
}

// .iterm2.SetTabLayoutResponse set_tab_layout_response = 122;
inline bool ServerOriginatedMessage::_internal_has_set_tab_layout_response() const {
  return submessage_case() == kSetTabLayoutResponse;
}
inline bool ServerOriginatedMessage::has_set_tab_layout_response() const {
  return _internal_has_set_tab_layout_response();
}
inline void ServerOriginatedMessage::set_has_set_tab_layout_response() {
  _oneof_case_[0] = kSetTabLayoutResponse;
}
inline void ServerOriginatedMessage::clear_set_tab_layout_response() {
  if (_internal_has_set_tab_layout_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_tab_layout_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetTabLayoutResponse* ServerOriginatedMessage::release_set_tab_layout_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.set_tab_layout_response)
  if (_internal_has_set_tab_layout_response()) {
    clear_has_submessage();
      ::iterm2::SetTabLayoutResponse* temp = submessage_.set_tab_layout_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_tab_layout_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetTabLayoutResponse& ServerOriginatedMessage::_internal_set_tab_layout_response() const {
  return _internal_has_set_tab_layout_response()
      ? *submessage_.set_tab_layout_response_
      : reinterpret_cast< ::iterm2::SetTabLayoutResponse&>(::iterm2::_SetTabLayoutResponse_default_instance_);
}
inline const ::iterm2::SetTabLayoutResponse& ServerOriginatedMessage::set_tab_layout_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.set_tab_layout_response)
  return _internal_set_tab_layout_response();
}
inline ::iterm2::SetTabLayoutResponse* ServerOriginatedMessage::unsafe_arena_release_set_tab_layout_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.set_tab_layout_response)
  if (_internal_has_set_tab_layout_response()) {
    clear_has_submessage();
    ::iterm2::SetTabLayoutResponse* temp = submessage_.set_tab_layout_response_;
    submessage_.set_tab_layout_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_set_tab_layout_response(::iterm2::SetTabLayoutResponse* set_tab_layout_response) {
  clear_submessage();
  if (set_tab_layout_response) {
    set_has_set_tab_layout_response();
    submessage_.set_tab_layout_response_ = set_tab_layout_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.set_tab_layout_response)
}
inline ::iterm2::SetTabLayoutResponse* ServerOriginatedMessage::_internal_mutable_set_tab_layout_response() {
  if (!_internal_has_set_tab_layout_response()) {
    clear_submessage();
    set_has_set_tab_layout_response();
    submessage_.set_tab_layout_response_ = CreateMaybeMessage< ::iterm2::SetTabLayoutResponse >(GetArenaForAllocation());
  }
  return submessage_.set_tab_layout_response_;
}
inline ::iterm2::SetTabLayoutResponse* ServerOriginatedMessage::mutable_set_tab_layout_response() {
  ::iterm2::SetTabLayoutResponse* _msg = _internal_mutable_set_tab_layout_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.set_tab_layout_response)
  return _msg;
}

// .iterm2.GetBroadcastDomainsResponse get_broadcast_domains_response = 123;
inline bool ServerOriginatedMessage::_internal_has_get_broadcast_domains_response() const {
  return submessage_case() == kGetBroadcastDomainsResponse;
}
inline bool ServerOriginatedMessage::has_get_broadcast_domains_response() const {
  return _internal_has_get_broadcast_domains_response();
}
inline void ServerOriginatedMessage::set_has_get_broadcast_domains_response() {
  _oneof_case_[0] = kGetBroadcastDomainsResponse;
}
inline void ServerOriginatedMessage::clear_get_broadcast_domains_response() {
  if (_internal_has_get_broadcast_domains_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.get_broadcast_domains_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::GetBroadcastDomainsResponse* ServerOriginatedMessage::release_get_broadcast_domains_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.get_broadcast_domains_response)
  if (_internal_has_get_broadcast_domains_response()) {
    clear_has_submessage();
      ::iterm2::GetBroadcastDomainsResponse* temp = submessage_.get_broadcast_domains_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.get_broadcast_domains_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::GetBroadcastDomainsResponse& ServerOriginatedMessage::_internal_get_broadcast_domains_response() const {
  return _internal_has_get_broadcast_domains_response()
      ? *submessage_.get_broadcast_domains_response_
      : reinterpret_cast< ::iterm2::GetBroadcastDomainsResponse&>(::iterm2::_GetBroadcastDomainsResponse_default_instance_);
}
inline const ::iterm2::GetBroadcastDomainsResponse& ServerOriginatedMessage::get_broadcast_domains_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.get_broadcast_domains_response)
  return _internal_get_broadcast_domains_response();
}
inline ::iterm2::GetBroadcastDomainsResponse* ServerOriginatedMessage::unsafe_arena_release_get_broadcast_domains_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.get_broadcast_domains_response)
  if (_internal_has_get_broadcast_domains_response()) {
    clear_has_submessage();
    ::iterm2::GetBroadcastDomainsResponse* temp = submessage_.get_broadcast_domains_response_;
    submessage_.get_broadcast_domains_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_get_broadcast_domains_response(::iterm2::GetBroadcastDomainsResponse* get_broadcast_domains_response) {
  clear_submessage();
  if (get_broadcast_domains_response) {
    set_has_get_broadcast_domains_response();
    submessage_.get_broadcast_domains_response_ = get_broadcast_domains_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.get_broadcast_domains_response)
}
inline ::iterm2::GetBroadcastDomainsResponse* ServerOriginatedMessage::_internal_mutable_get_broadcast_domains_response() {
  if (!_internal_has_get_broadcast_domains_response()) {
    clear_submessage();
    set_has_get_broadcast_domains_response();
    submessage_.get_broadcast_domains_response_ = CreateMaybeMessage< ::iterm2::GetBroadcastDomainsResponse >(GetArenaForAllocation());
  }
  return submessage_.get_broadcast_domains_response_;
}
inline ::iterm2::GetBroadcastDomainsResponse* ServerOriginatedMessage::mutable_get_broadcast_domains_response() {
  ::iterm2::GetBroadcastDomainsResponse* _msg = _internal_mutable_get_broadcast_domains_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.get_broadcast_domains_response)
  return _msg;
}

// .iterm2.TmuxResponse tmux_response = 124;
inline bool ServerOriginatedMessage::_internal_has_tmux_response() const {
  return submessage_case() == kTmuxResponse;
}
inline bool ServerOriginatedMessage::has_tmux_response() const {
  return _internal_has_tmux_response();
}
inline void ServerOriginatedMessage::set_has_tmux_response() {
  _oneof_case_[0] = kTmuxResponse;
}
inline void ServerOriginatedMessage::clear_tmux_response() {
  if (_internal_has_tmux_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.tmux_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::TmuxResponse* ServerOriginatedMessage::release_tmux_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.tmux_response)
  if (_internal_has_tmux_response()) {
    clear_has_submessage();
      ::iterm2::TmuxResponse* temp = submessage_.tmux_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.tmux_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxResponse& ServerOriginatedMessage::_internal_tmux_response() const {
  return _internal_has_tmux_response()
      ? *submessage_.tmux_response_
      : reinterpret_cast< ::iterm2::TmuxResponse&>(::iterm2::_TmuxResponse_default_instance_);
}
inline const ::iterm2::TmuxResponse& ServerOriginatedMessage::tmux_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.tmux_response)
  return _internal_tmux_response();
}
inline ::iterm2::TmuxResponse* ServerOriginatedMessage::unsafe_arena_release_tmux_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.tmux_response)
  if (_internal_has_tmux_response()) {
    clear_has_submessage();
    ::iterm2::TmuxResponse* temp = submessage_.tmux_response_;
    submessage_.tmux_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_tmux_response(::iterm2::TmuxResponse* tmux_response) {
  clear_submessage();
  if (tmux_response) {
    set_has_tmux_response();
    submessage_.tmux_response_ = tmux_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.tmux_response)
}
inline ::iterm2::TmuxResponse* ServerOriginatedMessage::_internal_mutable_tmux_response() {
  if (!_internal_has_tmux_response()) {
    clear_submessage();
    set_has_tmux_response();
    submessage_.tmux_response_ = CreateMaybeMessage< ::iterm2::TmuxResponse >(GetArenaForAllocation());
  }
  return submessage_.tmux_response_;
}
inline ::iterm2::TmuxResponse* ServerOriginatedMessage::mutable_tmux_response() {
  ::iterm2::TmuxResponse* _msg = _internal_mutable_tmux_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.tmux_response)
  return _msg;
}

// .iterm2.ReorderTabsResponse reorder_tabs_response = 125;
inline bool ServerOriginatedMessage::_internal_has_reorder_tabs_response() const {
  return submessage_case() == kReorderTabsResponse;
}
inline bool ServerOriginatedMessage::has_reorder_tabs_response() const {
  return _internal_has_reorder_tabs_response();
}
inline void ServerOriginatedMessage::set_has_reorder_tabs_response() {
  _oneof_case_[0] = kReorderTabsResponse;
}
inline void ServerOriginatedMessage::clear_reorder_tabs_response() {
  if (_internal_has_reorder_tabs_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.reorder_tabs_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ReorderTabsResponse* ServerOriginatedMessage::release_reorder_tabs_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.reorder_tabs_response)
  if (_internal_has_reorder_tabs_response()) {
    clear_has_submessage();
      ::iterm2::ReorderTabsResponse* temp = submessage_.reorder_tabs_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.reorder_tabs_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ReorderTabsResponse& ServerOriginatedMessage::_internal_reorder_tabs_response() const {
  return _internal_has_reorder_tabs_response()
      ? *submessage_.reorder_tabs_response_
      : reinterpret_cast< ::iterm2::ReorderTabsResponse&>(::iterm2::_ReorderTabsResponse_default_instance_);
}
inline const ::iterm2::ReorderTabsResponse& ServerOriginatedMessage::reorder_tabs_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.reorder_tabs_response)
  return _internal_reorder_tabs_response();
}
inline ::iterm2::ReorderTabsResponse* ServerOriginatedMessage::unsafe_arena_release_reorder_tabs_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.reorder_tabs_response)
  if (_internal_has_reorder_tabs_response()) {
    clear_has_submessage();
    ::iterm2::ReorderTabsResponse* temp = submessage_.reorder_tabs_response_;
    submessage_.reorder_tabs_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_reorder_tabs_response(::iterm2::ReorderTabsResponse* reorder_tabs_response) {
  clear_submessage();
  if (reorder_tabs_response) {
    set_has_reorder_tabs_response();
    submessage_.reorder_tabs_response_ = reorder_tabs_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.reorder_tabs_response)
}
inline ::iterm2::ReorderTabsResponse* ServerOriginatedMessage::_internal_mutable_reorder_tabs_response() {
  if (!_internal_has_reorder_tabs_response()) {
    clear_submessage();
    set_has_reorder_tabs_response();
    submessage_.reorder_tabs_response_ = CreateMaybeMessage< ::iterm2::ReorderTabsResponse >(GetArenaForAllocation());
  }
  return submessage_.reorder_tabs_response_;
}
inline ::iterm2::ReorderTabsResponse* ServerOriginatedMessage::mutable_reorder_tabs_response() {
  ::iterm2::ReorderTabsResponse* _msg = _internal_mutable_reorder_tabs_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.reorder_tabs_response)
  return _msg;
}

// .iterm2.PreferencesResponse preferences_response = 126;
inline bool ServerOriginatedMessage::_internal_has_preferences_response() const {
  return submessage_case() == kPreferencesResponse;
}
inline bool ServerOriginatedMessage::has_preferences_response() const {
  return _internal_has_preferences_response();
}
inline void ServerOriginatedMessage::set_has_preferences_response() {
  _oneof_case_[0] = kPreferencesResponse;
}
inline void ServerOriginatedMessage::clear_preferences_response() {
  if (_internal_has_preferences_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.preferences_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::PreferencesResponse* ServerOriginatedMessage::release_preferences_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.preferences_response)
  if (_internal_has_preferences_response()) {
    clear_has_submessage();
      ::iterm2::PreferencesResponse* temp = submessage_.preferences_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.preferences_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesResponse& ServerOriginatedMessage::_internal_preferences_response() const {
  return _internal_has_preferences_response()
      ? *submessage_.preferences_response_
      : reinterpret_cast< ::iterm2::PreferencesResponse&>(::iterm2::_PreferencesResponse_default_instance_);
}
inline const ::iterm2::PreferencesResponse& ServerOriginatedMessage::preferences_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.preferences_response)
  return _internal_preferences_response();
}
inline ::iterm2::PreferencesResponse* ServerOriginatedMessage::unsafe_arena_release_preferences_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.preferences_response)
  if (_internal_has_preferences_response()) {
    clear_has_submessage();
    ::iterm2::PreferencesResponse* temp = submessage_.preferences_response_;
    submessage_.preferences_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_preferences_response(::iterm2::PreferencesResponse* preferences_response) {
  clear_submessage();
  if (preferences_response) {
    set_has_preferences_response();
    submessage_.preferences_response_ = preferences_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.preferences_response)
}
inline ::iterm2::PreferencesResponse* ServerOriginatedMessage::_internal_mutable_preferences_response() {
  if (!_internal_has_preferences_response()) {
    clear_submessage();
    set_has_preferences_response();
    submessage_.preferences_response_ = CreateMaybeMessage< ::iterm2::PreferencesResponse >(GetArenaForAllocation());
  }
  return submessage_.preferences_response_;
}
inline ::iterm2::PreferencesResponse* ServerOriginatedMessage::mutable_preferences_response() {
  ::iterm2::PreferencesResponse* _msg = _internal_mutable_preferences_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.preferences_response)
  return _msg;
}

// .iterm2.ColorPresetResponse color_preset_response = 127;
inline bool ServerOriginatedMessage::_internal_has_color_preset_response() const {
  return submessage_case() == kColorPresetResponse;
}
inline bool ServerOriginatedMessage::has_color_preset_response() const {
  return _internal_has_color_preset_response();
}
inline void ServerOriginatedMessage::set_has_color_preset_response() {
  _oneof_case_[0] = kColorPresetResponse;
}
inline void ServerOriginatedMessage::clear_color_preset_response() {
  if (_internal_has_color_preset_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.color_preset_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ColorPresetResponse* ServerOriginatedMessage::release_color_preset_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.color_preset_response)
  if (_internal_has_color_preset_response()) {
    clear_has_submessage();
      ::iterm2::ColorPresetResponse* temp = submessage_.color_preset_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.color_preset_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ColorPresetResponse& ServerOriginatedMessage::_internal_color_preset_response() const {
  return _internal_has_color_preset_response()
      ? *submessage_.color_preset_response_
      : reinterpret_cast< ::iterm2::ColorPresetResponse&>(::iterm2::_ColorPresetResponse_default_instance_);
}
inline const ::iterm2::ColorPresetResponse& ServerOriginatedMessage::color_preset_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.color_preset_response)
  return _internal_color_preset_response();
}
inline ::iterm2::ColorPresetResponse* ServerOriginatedMessage::unsafe_arena_release_color_preset_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.color_preset_response)
  if (_internal_has_color_preset_response()) {
    clear_has_submessage();
    ::iterm2::ColorPresetResponse* temp = submessage_.color_preset_response_;
    submessage_.color_preset_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_color_preset_response(::iterm2::ColorPresetResponse* color_preset_response) {
  clear_submessage();
  if (color_preset_response) {
    set_has_color_preset_response();
    submessage_.color_preset_response_ = color_preset_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.color_preset_response)
}
inline ::iterm2::ColorPresetResponse* ServerOriginatedMessage::_internal_mutable_color_preset_response() {
  if (!_internal_has_color_preset_response()) {
    clear_submessage();
    set_has_color_preset_response();
    submessage_.color_preset_response_ = CreateMaybeMessage< ::iterm2::ColorPresetResponse >(GetArenaForAllocation());
  }
  return submessage_.color_preset_response_;
}
inline ::iterm2::ColorPresetResponse* ServerOriginatedMessage::mutable_color_preset_response() {
  ::iterm2::ColorPresetResponse* _msg = _internal_mutable_color_preset_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.color_preset_response)
  return _msg;
}

// .iterm2.SelectionResponse selection_response = 128;
inline bool ServerOriginatedMessage::_internal_has_selection_response() const {
  return submessage_case() == kSelectionResponse;
}
inline bool ServerOriginatedMessage::has_selection_response() const {
  return _internal_has_selection_response();
}
inline void ServerOriginatedMessage::set_has_selection_response() {
  _oneof_case_[0] = kSelectionResponse;
}
inline void ServerOriginatedMessage::clear_selection_response() {
  if (_internal_has_selection_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.selection_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SelectionResponse* ServerOriginatedMessage::release_selection_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.selection_response)
  if (_internal_has_selection_response()) {
    clear_has_submessage();
      ::iterm2::SelectionResponse* temp = submessage_.selection_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SelectionResponse& ServerOriginatedMessage::_internal_selection_response() const {
  return _internal_has_selection_response()
      ? *submessage_.selection_response_
      : reinterpret_cast< ::iterm2::SelectionResponse&>(::iterm2::_SelectionResponse_default_instance_);
}
inline const ::iterm2::SelectionResponse& ServerOriginatedMessage::selection_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.selection_response)
  return _internal_selection_response();
}
inline ::iterm2::SelectionResponse* ServerOriginatedMessage::unsafe_arena_release_selection_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.selection_response)
  if (_internal_has_selection_response()) {
    clear_has_submessage();
    ::iterm2::SelectionResponse* temp = submessage_.selection_response_;
    submessage_.selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_selection_response(::iterm2::SelectionResponse* selection_response) {
  clear_submessage();
  if (selection_response) {
    set_has_selection_response();
    submessage_.selection_response_ = selection_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.selection_response)
}
inline ::iterm2::SelectionResponse* ServerOriginatedMessage::_internal_mutable_selection_response() {
  if (!_internal_has_selection_response()) {
    clear_submessage();
    set_has_selection_response();
    submessage_.selection_response_ = CreateMaybeMessage< ::iterm2::SelectionResponse >(GetArenaForAllocation());
  }
  return submessage_.selection_response_;
}
inline ::iterm2::SelectionResponse* ServerOriginatedMessage::mutable_selection_response() {
  ::iterm2::SelectionResponse* _msg = _internal_mutable_selection_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.selection_response)
  return _msg;
}

// .iterm2.StatusBarComponentResponse status_bar_component_response = 129;
inline bool ServerOriginatedMessage::_internal_has_status_bar_component_response() const {
  return submessage_case() == kStatusBarComponentResponse;
}
inline bool ServerOriginatedMessage::has_status_bar_component_response() const {
  return _internal_has_status_bar_component_response();
}
inline void ServerOriginatedMessage::set_has_status_bar_component_response() {
  _oneof_case_[0] = kStatusBarComponentResponse;
}
inline void ServerOriginatedMessage::clear_status_bar_component_response() {
  if (_internal_has_status_bar_component_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.status_bar_component_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::StatusBarComponentResponse* ServerOriginatedMessage::release_status_bar_component_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.status_bar_component_response)
  if (_internal_has_status_bar_component_response()) {
    clear_has_submessage();
      ::iterm2::StatusBarComponentResponse* temp = submessage_.status_bar_component_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.status_bar_component_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::StatusBarComponentResponse& ServerOriginatedMessage::_internal_status_bar_component_response() const {
  return _internal_has_status_bar_component_response()
      ? *submessage_.status_bar_component_response_
      : reinterpret_cast< ::iterm2::StatusBarComponentResponse&>(::iterm2::_StatusBarComponentResponse_default_instance_);
}
inline const ::iterm2::StatusBarComponentResponse& ServerOriginatedMessage::status_bar_component_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.status_bar_component_response)
  return _internal_status_bar_component_response();
}
inline ::iterm2::StatusBarComponentResponse* ServerOriginatedMessage::unsafe_arena_release_status_bar_component_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.status_bar_component_response)
  if (_internal_has_status_bar_component_response()) {
    clear_has_submessage();
    ::iterm2::StatusBarComponentResponse* temp = submessage_.status_bar_component_response_;
    submessage_.status_bar_component_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_status_bar_component_response(::iterm2::StatusBarComponentResponse* status_bar_component_response) {
  clear_submessage();
  if (status_bar_component_response) {
    set_has_status_bar_component_response();
    submessage_.status_bar_component_response_ = status_bar_component_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.status_bar_component_response)
}
inline ::iterm2::StatusBarComponentResponse* ServerOriginatedMessage::_internal_mutable_status_bar_component_response() {
  if (!_internal_has_status_bar_component_response()) {
    clear_submessage();
    set_has_status_bar_component_response();
    submessage_.status_bar_component_response_ = CreateMaybeMessage< ::iterm2::StatusBarComponentResponse >(GetArenaForAllocation());
  }
  return submessage_.status_bar_component_response_;
}
inline ::iterm2::StatusBarComponentResponse* ServerOriginatedMessage::mutable_status_bar_component_response() {
  ::iterm2::StatusBarComponentResponse* _msg = _internal_mutable_status_bar_component_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.status_bar_component_response)
  return _msg;
}

// .iterm2.SetBroadcastDomainsResponse set_broadcast_domains_response = 130;
inline bool ServerOriginatedMessage::_internal_has_set_broadcast_domains_response() const {
  return submessage_case() == kSetBroadcastDomainsResponse;
}
inline bool ServerOriginatedMessage::has_set_broadcast_domains_response() const {
  return _internal_has_set_broadcast_domains_response();
}
inline void ServerOriginatedMessage::set_has_set_broadcast_domains_response() {
  _oneof_case_[0] = kSetBroadcastDomainsResponse;
}
inline void ServerOriginatedMessage::clear_set_broadcast_domains_response() {
  if (_internal_has_set_broadcast_domains_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.set_broadcast_domains_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::SetBroadcastDomainsResponse* ServerOriginatedMessage::release_set_broadcast_domains_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.set_broadcast_domains_response)
  if (_internal_has_set_broadcast_domains_response()) {
    clear_has_submessage();
      ::iterm2::SetBroadcastDomainsResponse* temp = submessage_.set_broadcast_domains_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.set_broadcast_domains_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetBroadcastDomainsResponse& ServerOriginatedMessage::_internal_set_broadcast_domains_response() const {
  return _internal_has_set_broadcast_domains_response()
      ? *submessage_.set_broadcast_domains_response_
      : reinterpret_cast< ::iterm2::SetBroadcastDomainsResponse&>(::iterm2::_SetBroadcastDomainsResponse_default_instance_);
}
inline const ::iterm2::SetBroadcastDomainsResponse& ServerOriginatedMessage::set_broadcast_domains_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.set_broadcast_domains_response)
  return _internal_set_broadcast_domains_response();
}
inline ::iterm2::SetBroadcastDomainsResponse* ServerOriginatedMessage::unsafe_arena_release_set_broadcast_domains_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.set_broadcast_domains_response)
  if (_internal_has_set_broadcast_domains_response()) {
    clear_has_submessage();
    ::iterm2::SetBroadcastDomainsResponse* temp = submessage_.set_broadcast_domains_response_;
    submessage_.set_broadcast_domains_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_set_broadcast_domains_response(::iterm2::SetBroadcastDomainsResponse* set_broadcast_domains_response) {
  clear_submessage();
  if (set_broadcast_domains_response) {
    set_has_set_broadcast_domains_response();
    submessage_.set_broadcast_domains_response_ = set_broadcast_domains_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.set_broadcast_domains_response)
}
inline ::iterm2::SetBroadcastDomainsResponse* ServerOriginatedMessage::_internal_mutable_set_broadcast_domains_response() {
  if (!_internal_has_set_broadcast_domains_response()) {
    clear_submessage();
    set_has_set_broadcast_domains_response();
    submessage_.set_broadcast_domains_response_ = CreateMaybeMessage< ::iterm2::SetBroadcastDomainsResponse >(GetArenaForAllocation());
  }
  return submessage_.set_broadcast_domains_response_;
}
inline ::iterm2::SetBroadcastDomainsResponse* ServerOriginatedMessage::mutable_set_broadcast_domains_response() {
  ::iterm2::SetBroadcastDomainsResponse* _msg = _internal_mutable_set_broadcast_domains_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.set_broadcast_domains_response)
  return _msg;
}

// .iterm2.CloseResponse close_response = 131;
inline bool ServerOriginatedMessage::_internal_has_close_response() const {
  return submessage_case() == kCloseResponse;
}
inline bool ServerOriginatedMessage::has_close_response() const {
  return _internal_has_close_response();
}
inline void ServerOriginatedMessage::set_has_close_response() {
  _oneof_case_[0] = kCloseResponse;
}
inline void ServerOriginatedMessage::clear_close_response() {
  if (_internal_has_close_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.close_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::CloseResponse* ServerOriginatedMessage::release_close_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.close_response)
  if (_internal_has_close_response()) {
    clear_has_submessage();
      ::iterm2::CloseResponse* temp = submessage_.close_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.close_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CloseResponse& ServerOriginatedMessage::_internal_close_response() const {
  return _internal_has_close_response()
      ? *submessage_.close_response_
      : reinterpret_cast< ::iterm2::CloseResponse&>(::iterm2::_CloseResponse_default_instance_);
}
inline const ::iterm2::CloseResponse& ServerOriginatedMessage::close_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.close_response)
  return _internal_close_response();
}
inline ::iterm2::CloseResponse* ServerOriginatedMessage::unsafe_arena_release_close_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.close_response)
  if (_internal_has_close_response()) {
    clear_has_submessage();
    ::iterm2::CloseResponse* temp = submessage_.close_response_;
    submessage_.close_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_close_response(::iterm2::CloseResponse* close_response) {
  clear_submessage();
  if (close_response) {
    set_has_close_response();
    submessage_.close_response_ = close_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.close_response)
}
inline ::iterm2::CloseResponse* ServerOriginatedMessage::_internal_mutable_close_response() {
  if (!_internal_has_close_response()) {
    clear_submessage();
    set_has_close_response();
    submessage_.close_response_ = CreateMaybeMessage< ::iterm2::CloseResponse >(GetArenaForAllocation());
  }
  return submessage_.close_response_;
}
inline ::iterm2::CloseResponse* ServerOriginatedMessage::mutable_close_response() {
  ::iterm2::CloseResponse* _msg = _internal_mutable_close_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.close_response)
  return _msg;
}

// .iterm2.InvokeFunctionResponse invoke_function_response = 132;
inline bool ServerOriginatedMessage::_internal_has_invoke_function_response() const {
  return submessage_case() == kInvokeFunctionResponse;
}
inline bool ServerOriginatedMessage::has_invoke_function_response() const {
  return _internal_has_invoke_function_response();
}
inline void ServerOriginatedMessage::set_has_invoke_function_response() {
  _oneof_case_[0] = kInvokeFunctionResponse;
}
inline void ServerOriginatedMessage::clear_invoke_function_response() {
  if (_internal_has_invoke_function_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.invoke_function_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::InvokeFunctionResponse* ServerOriginatedMessage::release_invoke_function_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.invoke_function_response)
  if (_internal_has_invoke_function_response()) {
    clear_has_submessage();
      ::iterm2::InvokeFunctionResponse* temp = submessage_.invoke_function_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.invoke_function_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionResponse& ServerOriginatedMessage::_internal_invoke_function_response() const {
  return _internal_has_invoke_function_response()
      ? *submessage_.invoke_function_response_
      : reinterpret_cast< ::iterm2::InvokeFunctionResponse&>(::iterm2::_InvokeFunctionResponse_default_instance_);
}
inline const ::iterm2::InvokeFunctionResponse& ServerOriginatedMessage::invoke_function_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.invoke_function_response)
  return _internal_invoke_function_response();
}
inline ::iterm2::InvokeFunctionResponse* ServerOriginatedMessage::unsafe_arena_release_invoke_function_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.invoke_function_response)
  if (_internal_has_invoke_function_response()) {
    clear_has_submessage();
    ::iterm2::InvokeFunctionResponse* temp = submessage_.invoke_function_response_;
    submessage_.invoke_function_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_invoke_function_response(::iterm2::InvokeFunctionResponse* invoke_function_response) {
  clear_submessage();
  if (invoke_function_response) {
    set_has_invoke_function_response();
    submessage_.invoke_function_response_ = invoke_function_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.invoke_function_response)
}
inline ::iterm2::InvokeFunctionResponse* ServerOriginatedMessage::_internal_mutable_invoke_function_response() {
  if (!_internal_has_invoke_function_response()) {
    clear_submessage();
    set_has_invoke_function_response();
    submessage_.invoke_function_response_ = CreateMaybeMessage< ::iterm2::InvokeFunctionResponse >(GetArenaForAllocation());
  }
  return submessage_.invoke_function_response_;
}
inline ::iterm2::InvokeFunctionResponse* ServerOriginatedMessage::mutable_invoke_function_response() {
  ::iterm2::InvokeFunctionResponse* _msg = _internal_mutable_invoke_function_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.invoke_function_response)
  return _msg;
}

// .iterm2.ListPromptsResponse list_prompts_response = 133;
inline bool ServerOriginatedMessage::_internal_has_list_prompts_response() const {
  return submessage_case() == kListPromptsResponse;
}
inline bool ServerOriginatedMessage::has_list_prompts_response() const {
  return _internal_has_list_prompts_response();
}
inline void ServerOriginatedMessage::set_has_list_prompts_response() {
  _oneof_case_[0] = kListPromptsResponse;
}
inline void ServerOriginatedMessage::clear_list_prompts_response() {
  if (_internal_has_list_prompts_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.list_prompts_response_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::ListPromptsResponse* ServerOriginatedMessage::release_list_prompts_response() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.list_prompts_response)
  if (_internal_has_list_prompts_response()) {
    clear_has_submessage();
      ::iterm2::ListPromptsResponse* temp = submessage_.list_prompts_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.list_prompts_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ListPromptsResponse& ServerOriginatedMessage::_internal_list_prompts_response() const {
  return _internal_has_list_prompts_response()
      ? *submessage_.list_prompts_response_
      : reinterpret_cast< ::iterm2::ListPromptsResponse&>(::iterm2::_ListPromptsResponse_default_instance_);
}
inline const ::iterm2::ListPromptsResponse& ServerOriginatedMessage::list_prompts_response() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.list_prompts_response)
  return _internal_list_prompts_response();
}
inline ::iterm2::ListPromptsResponse* ServerOriginatedMessage::unsafe_arena_release_list_prompts_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.list_prompts_response)
  if (_internal_has_list_prompts_response()) {
    clear_has_submessage();
    ::iterm2::ListPromptsResponse* temp = submessage_.list_prompts_response_;
    submessage_.list_prompts_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_list_prompts_response(::iterm2::ListPromptsResponse* list_prompts_response) {
  clear_submessage();
  if (list_prompts_response) {
    set_has_list_prompts_response();
    submessage_.list_prompts_response_ = list_prompts_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.list_prompts_response)
}
inline ::iterm2::ListPromptsResponse* ServerOriginatedMessage::_internal_mutable_list_prompts_response() {
  if (!_internal_has_list_prompts_response()) {
    clear_submessage();
    set_has_list_prompts_response();
    submessage_.list_prompts_response_ = CreateMaybeMessage< ::iterm2::ListPromptsResponse >(GetArenaForAllocation());
  }
  return submessage_.list_prompts_response_;
}
inline ::iterm2::ListPromptsResponse* ServerOriginatedMessage::mutable_list_prompts_response() {
  ::iterm2::ListPromptsResponse* _msg = _internal_mutable_list_prompts_response();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.list_prompts_response)
  return _msg;
}

// .iterm2.Notification notification = 1000;
inline bool ServerOriginatedMessage::_internal_has_notification() const {
  return submessage_case() == kNotification;
}
inline bool ServerOriginatedMessage::has_notification() const {
  return _internal_has_notification();
}
inline void ServerOriginatedMessage::set_has_notification() {
  _oneof_case_[0] = kNotification;
}
inline void ServerOriginatedMessage::clear_notification() {
  if (_internal_has_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete submessage_.notification_;
    }
    clear_has_submessage();
  }
}
inline ::iterm2::Notification* ServerOriginatedMessage::release_notification() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedMessage.notification)
  if (_internal_has_notification()) {
    clear_has_submessage();
      ::iterm2::Notification* temp = submessage_.notification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    submessage_.notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::Notification& ServerOriginatedMessage::_internal_notification() const {
  return _internal_has_notification()
      ? *submessage_.notification_
      : reinterpret_cast< ::iterm2::Notification&>(::iterm2::_Notification_default_instance_);
}
inline const ::iterm2::Notification& ServerOriginatedMessage::notification() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedMessage.notification)
  return _internal_notification();
}
inline ::iterm2::Notification* ServerOriginatedMessage::unsafe_arena_release_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ServerOriginatedMessage.notification)
  if (_internal_has_notification()) {
    clear_has_submessage();
    ::iterm2::Notification* temp = submessage_.notification_;
    submessage_.notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedMessage::unsafe_arena_set_allocated_notification(::iterm2::Notification* notification) {
  clear_submessage();
  if (notification) {
    set_has_notification();
    submessage_.notification_ = notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedMessage.notification)
}
inline ::iterm2::Notification* ServerOriginatedMessage::_internal_mutable_notification() {
  if (!_internal_has_notification()) {
    clear_submessage();
    set_has_notification();
    submessage_.notification_ = CreateMaybeMessage< ::iterm2::Notification >(GetArenaForAllocation());
  }
  return submessage_.notification_;
}
inline ::iterm2::Notification* ServerOriginatedMessage::mutable_notification() {
  ::iterm2::Notification* _msg = _internal_mutable_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedMessage.notification)
  return _msg;
}

inline bool ServerOriginatedMessage::has_submessage() const {
  return submessage_case() != SUBMESSAGE_NOT_SET;
}
inline void ServerOriginatedMessage::clear_has_submessage() {
  _oneof_case_[0] = SUBMESSAGE_NOT_SET;
}
inline ServerOriginatedMessage::SubmessageCase ServerOriginatedMessage::submessage_case() const {
  return ServerOriginatedMessage::SubmessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InvokeFunctionRequest_Tab

// optional string tab_id = 1;
inline bool InvokeFunctionRequest_Tab::_internal_has_tab_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionRequest_Tab::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void InvokeFunctionRequest_Tab::clear_tab_id() {
  tab_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionRequest_Tab::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.Tab.tab_id)
  return _internal_tab_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionRequest_Tab::set_tab_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionRequest.Tab.tab_id)
}
inline std::string* InvokeFunctionRequest_Tab::mutable_tab_id() {
  std::string* _s = _internal_mutable_tab_id();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.Tab.tab_id)
  return _s;
}
inline const std::string& InvokeFunctionRequest_Tab::_internal_tab_id() const {
  return tab_id_.Get();
}
inline void InvokeFunctionRequest_Tab::_internal_set_tab_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Tab::_internal_mutable_tab_id() {
  _has_bits_[0] |= 0x00000001u;
  return tab_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Tab::release_tab_id() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.Tab.tab_id)
  if (!_internal_has_tab_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tab_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionRequest_Tab::set_allocated_tab_id(std::string* tab_id) {
  if (tab_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tab_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tab_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.Tab.tab_id)
}

// -------------------------------------------------------------------

// InvokeFunctionRequest_Session

// optional string session_id = 1;
inline bool InvokeFunctionRequest_Session::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionRequest_Session::has_session_id() const {
  return _internal_has_session_id();
}
inline void InvokeFunctionRequest_Session::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionRequest_Session::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.Session.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionRequest_Session::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionRequest.Session.session_id)
}
inline std::string* InvokeFunctionRequest_Session::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.Session.session_id)
  return _s;
}
inline const std::string& InvokeFunctionRequest_Session::_internal_session_id() const {
  return session_id_.Get();
}
inline void InvokeFunctionRequest_Session::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Session::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Session::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.Session.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionRequest_Session::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.Session.session_id)
}

// -------------------------------------------------------------------

// InvokeFunctionRequest_Window

// optional string window_id = 1;
inline bool InvokeFunctionRequest_Window::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionRequest_Window::has_window_id() const {
  return _internal_has_window_id();
}
inline void InvokeFunctionRequest_Window::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionRequest_Window::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.Window.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionRequest_Window::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionRequest.Window.window_id)
}
inline std::string* InvokeFunctionRequest_Window::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.Window.window_id)
  return _s;
}
inline const std::string& InvokeFunctionRequest_Window::_internal_window_id() const {
  return window_id_.Get();
}
inline void InvokeFunctionRequest_Window::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Window::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000001u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Window::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.Window.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionRequest_Window::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.Window.window_id)
}

// -------------------------------------------------------------------

// InvokeFunctionRequest_App

// -------------------------------------------------------------------

// InvokeFunctionRequest_Method

// optional string receiver = 1;
inline bool InvokeFunctionRequest_Method::_internal_has_receiver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionRequest_Method::has_receiver() const {
  return _internal_has_receiver();
}
inline void InvokeFunctionRequest_Method::clear_receiver() {
  receiver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionRequest_Method::receiver() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.Method.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionRequest_Method::set_receiver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionRequest.Method.receiver)
}
inline std::string* InvokeFunctionRequest_Method::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.Method.receiver)
  return _s;
}
inline const std::string& InvokeFunctionRequest_Method::_internal_receiver() const {
  return receiver_.Get();
}
inline void InvokeFunctionRequest_Method::_internal_set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Method::_internal_mutable_receiver() {
  _has_bits_[0] |= 0x00000001u;
  return receiver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest_Method::release_receiver() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.Method.receiver)
  if (!_internal_has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = receiver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionRequest_Method::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.Method.receiver)
}

// -------------------------------------------------------------------

// InvokeFunctionRequest

// .iterm2.InvokeFunctionRequest.Tab tab = 1;
inline bool InvokeFunctionRequest::_internal_has_tab() const {
  return context_case() == kTab;
}
inline bool InvokeFunctionRequest::has_tab() const {
  return _internal_has_tab();
}
inline void InvokeFunctionRequest::set_has_tab() {
  _oneof_case_[0] = kTab;
}
inline void InvokeFunctionRequest::clear_tab() {
  if (_internal_has_tab()) {
    if (GetArenaForAllocation() == nullptr) {
      delete context_.tab_;
    }
    clear_has_context();
  }
}
inline ::iterm2::InvokeFunctionRequest_Tab* InvokeFunctionRequest::release_tab() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.tab)
  if (_internal_has_tab()) {
    clear_has_context();
      ::iterm2::InvokeFunctionRequest_Tab* temp = context_.tab_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    context_.tab_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionRequest_Tab& InvokeFunctionRequest::_internal_tab() const {
  return _internal_has_tab()
      ? *context_.tab_
      : reinterpret_cast< ::iterm2::InvokeFunctionRequest_Tab&>(::iterm2::_InvokeFunctionRequest_Tab_default_instance_);
}
inline const ::iterm2::InvokeFunctionRequest_Tab& InvokeFunctionRequest::tab() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.tab)
  return _internal_tab();
}
inline ::iterm2::InvokeFunctionRequest_Tab* InvokeFunctionRequest::unsafe_arena_release_tab() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionRequest.tab)
  if (_internal_has_tab()) {
    clear_has_context();
    ::iterm2::InvokeFunctionRequest_Tab* temp = context_.tab_;
    context_.tab_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionRequest::unsafe_arena_set_allocated_tab(::iterm2::InvokeFunctionRequest_Tab* tab) {
  clear_context();
  if (tab) {
    set_has_tab();
    context_.tab_ = tab;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionRequest.tab)
}
inline ::iterm2::InvokeFunctionRequest_Tab* InvokeFunctionRequest::_internal_mutable_tab() {
  if (!_internal_has_tab()) {
    clear_context();
    set_has_tab();
    context_.tab_ = CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Tab >(GetArenaForAllocation());
  }
  return context_.tab_;
}
inline ::iterm2::InvokeFunctionRequest_Tab* InvokeFunctionRequest::mutable_tab() {
  ::iterm2::InvokeFunctionRequest_Tab* _msg = _internal_mutable_tab();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.tab)
  return _msg;
}

// .iterm2.InvokeFunctionRequest.Session session = 2;
inline bool InvokeFunctionRequest::_internal_has_session() const {
  return context_case() == kSession;
}
inline bool InvokeFunctionRequest::has_session() const {
  return _internal_has_session();
}
inline void InvokeFunctionRequest::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void InvokeFunctionRequest::clear_session() {
  if (_internal_has_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete context_.session_;
    }
    clear_has_context();
  }
}
inline ::iterm2::InvokeFunctionRequest_Session* InvokeFunctionRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.session)
  if (_internal_has_session()) {
    clear_has_context();
      ::iterm2::InvokeFunctionRequest_Session* temp = context_.session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    context_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionRequest_Session& InvokeFunctionRequest::_internal_session() const {
  return _internal_has_session()
      ? *context_.session_
      : reinterpret_cast< ::iterm2::InvokeFunctionRequest_Session&>(::iterm2::_InvokeFunctionRequest_Session_default_instance_);
}
inline const ::iterm2::InvokeFunctionRequest_Session& InvokeFunctionRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.session)
  return _internal_session();
}
inline ::iterm2::InvokeFunctionRequest_Session* InvokeFunctionRequest::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionRequest.session)
  if (_internal_has_session()) {
    clear_has_context();
    ::iterm2::InvokeFunctionRequest_Session* temp = context_.session_;
    context_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionRequest::unsafe_arena_set_allocated_session(::iterm2::InvokeFunctionRequest_Session* session) {
  clear_context();
  if (session) {
    set_has_session();
    context_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionRequest.session)
}
inline ::iterm2::InvokeFunctionRequest_Session* InvokeFunctionRequest::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_context();
    set_has_session();
    context_.session_ = CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Session >(GetArenaForAllocation());
  }
  return context_.session_;
}
inline ::iterm2::InvokeFunctionRequest_Session* InvokeFunctionRequest::mutable_session() {
  ::iterm2::InvokeFunctionRequest_Session* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.session)
  return _msg;
}

// .iterm2.InvokeFunctionRequest.Window window = 3;
inline bool InvokeFunctionRequest::_internal_has_window() const {
  return context_case() == kWindow;
}
inline bool InvokeFunctionRequest::has_window() const {
  return _internal_has_window();
}
inline void InvokeFunctionRequest::set_has_window() {
  _oneof_case_[0] = kWindow;
}
inline void InvokeFunctionRequest::clear_window() {
  if (_internal_has_window()) {
    if (GetArenaForAllocation() == nullptr) {
      delete context_.window_;
    }
    clear_has_context();
  }
}
inline ::iterm2::InvokeFunctionRequest_Window* InvokeFunctionRequest::release_window() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.window)
  if (_internal_has_window()) {
    clear_has_context();
      ::iterm2::InvokeFunctionRequest_Window* temp = context_.window_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    context_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionRequest_Window& InvokeFunctionRequest::_internal_window() const {
  return _internal_has_window()
      ? *context_.window_
      : reinterpret_cast< ::iterm2::InvokeFunctionRequest_Window&>(::iterm2::_InvokeFunctionRequest_Window_default_instance_);
}
inline const ::iterm2::InvokeFunctionRequest_Window& InvokeFunctionRequest::window() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.window)
  return _internal_window();
}
inline ::iterm2::InvokeFunctionRequest_Window* InvokeFunctionRequest::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionRequest.window)
  if (_internal_has_window()) {
    clear_has_context();
    ::iterm2::InvokeFunctionRequest_Window* temp = context_.window_;
    context_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionRequest::unsafe_arena_set_allocated_window(::iterm2::InvokeFunctionRequest_Window* window) {
  clear_context();
  if (window) {
    set_has_window();
    context_.window_ = window;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionRequest.window)
}
inline ::iterm2::InvokeFunctionRequest_Window* InvokeFunctionRequest::_internal_mutable_window() {
  if (!_internal_has_window()) {
    clear_context();
    set_has_window();
    context_.window_ = CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Window >(GetArenaForAllocation());
  }
  return context_.window_;
}
inline ::iterm2::InvokeFunctionRequest_Window* InvokeFunctionRequest::mutable_window() {
  ::iterm2::InvokeFunctionRequest_Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.window)
  return _msg;
}

// .iterm2.InvokeFunctionRequest.App app = 4;
inline bool InvokeFunctionRequest::_internal_has_app() const {
  return context_case() == kApp;
}
inline bool InvokeFunctionRequest::has_app() const {
  return _internal_has_app();
}
inline void InvokeFunctionRequest::set_has_app() {
  _oneof_case_[0] = kApp;
}
inline void InvokeFunctionRequest::clear_app() {
  if (_internal_has_app()) {
    if (GetArenaForAllocation() == nullptr) {
      delete context_.app_;
    }
    clear_has_context();
  }
}
inline ::iterm2::InvokeFunctionRequest_App* InvokeFunctionRequest::release_app() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.app)
  if (_internal_has_app()) {
    clear_has_context();
      ::iterm2::InvokeFunctionRequest_App* temp = context_.app_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    context_.app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionRequest_App& InvokeFunctionRequest::_internal_app() const {
  return _internal_has_app()
      ? *context_.app_
      : reinterpret_cast< ::iterm2::InvokeFunctionRequest_App&>(::iterm2::_InvokeFunctionRequest_App_default_instance_);
}
inline const ::iterm2::InvokeFunctionRequest_App& InvokeFunctionRequest::app() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.app)
  return _internal_app();
}
inline ::iterm2::InvokeFunctionRequest_App* InvokeFunctionRequest::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionRequest.app)
  if (_internal_has_app()) {
    clear_has_context();
    ::iterm2::InvokeFunctionRequest_App* temp = context_.app_;
    context_.app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionRequest::unsafe_arena_set_allocated_app(::iterm2::InvokeFunctionRequest_App* app) {
  clear_context();
  if (app) {
    set_has_app();
    context_.app_ = app;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionRequest.app)
}
inline ::iterm2::InvokeFunctionRequest_App* InvokeFunctionRequest::_internal_mutable_app() {
  if (!_internal_has_app()) {
    clear_context();
    set_has_app();
    context_.app_ = CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_App >(GetArenaForAllocation());
  }
  return context_.app_;
}
inline ::iterm2::InvokeFunctionRequest_App* InvokeFunctionRequest::mutable_app() {
  ::iterm2::InvokeFunctionRequest_App* _msg = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.app)
  return _msg;
}

// .iterm2.InvokeFunctionRequest.Method method = 7;
inline bool InvokeFunctionRequest::_internal_has_method() const {
  return context_case() == kMethod;
}
inline bool InvokeFunctionRequest::has_method() const {
  return _internal_has_method();
}
inline void InvokeFunctionRequest::set_has_method() {
  _oneof_case_[0] = kMethod;
}
inline void InvokeFunctionRequest::clear_method() {
  if (_internal_has_method()) {
    if (GetArenaForAllocation() == nullptr) {
      delete context_.method_;
    }
    clear_has_context();
  }
}
inline ::iterm2::InvokeFunctionRequest_Method* InvokeFunctionRequest::release_method() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.method)
  if (_internal_has_method()) {
    clear_has_context();
      ::iterm2::InvokeFunctionRequest_Method* temp = context_.method_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    context_.method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionRequest_Method& InvokeFunctionRequest::_internal_method() const {
  return _internal_has_method()
      ? *context_.method_
      : reinterpret_cast< ::iterm2::InvokeFunctionRequest_Method&>(::iterm2::_InvokeFunctionRequest_Method_default_instance_);
}
inline const ::iterm2::InvokeFunctionRequest_Method& InvokeFunctionRequest::method() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.method)
  return _internal_method();
}
inline ::iterm2::InvokeFunctionRequest_Method* InvokeFunctionRequest::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionRequest.method)
  if (_internal_has_method()) {
    clear_has_context();
    ::iterm2::InvokeFunctionRequest_Method* temp = context_.method_;
    context_.method_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionRequest::unsafe_arena_set_allocated_method(::iterm2::InvokeFunctionRequest_Method* method) {
  clear_context();
  if (method) {
    set_has_method();
    context_.method_ = method;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionRequest.method)
}
inline ::iterm2::InvokeFunctionRequest_Method* InvokeFunctionRequest::_internal_mutable_method() {
  if (!_internal_has_method()) {
    clear_context();
    set_has_method();
    context_.method_ = CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Method >(GetArenaForAllocation());
  }
  return context_.method_;
}
inline ::iterm2::InvokeFunctionRequest_Method* InvokeFunctionRequest::mutable_method() {
  ::iterm2::InvokeFunctionRequest_Method* _msg = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.method)
  return _msg;
}

// optional string invocation = 5;
inline bool InvokeFunctionRequest::_internal_has_invocation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionRequest::has_invocation() const {
  return _internal_has_invocation();
}
inline void InvokeFunctionRequest::clear_invocation() {
  invocation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionRequest::invocation() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.invocation)
  return _internal_invocation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionRequest::set_invocation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionRequest.invocation)
}
inline std::string* InvokeFunctionRequest::mutable_invocation() {
  std::string* _s = _internal_mutable_invocation();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionRequest.invocation)
  return _s;
}
inline const std::string& InvokeFunctionRequest::_internal_invocation() const {
  return invocation_.Get();
}
inline void InvokeFunctionRequest::_internal_set_invocation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest::_internal_mutable_invocation() {
  _has_bits_[0] |= 0x00000001u;
  return invocation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionRequest::release_invocation() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionRequest.invocation)
  if (!_internal_has_invocation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = invocation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invocation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionRequest::set_allocated_invocation(std::string* invocation) {
  if (invocation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invocation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invocation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invocation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.invocation)
}

// optional double timeout = 6 [default = -1];
inline bool InvokeFunctionRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InvokeFunctionRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void InvokeFunctionRequest::clear_timeout() {
  timeout_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline double InvokeFunctionRequest::_internal_timeout() const {
  return timeout_;
}
inline double InvokeFunctionRequest::timeout() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionRequest.timeout)
  return _internal_timeout();
}
inline void InvokeFunctionRequest::_internal_set_timeout(double value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void InvokeFunctionRequest::set_timeout(double value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionRequest.timeout)
}

inline bool InvokeFunctionRequest::has_context() const {
  return context_case() != CONTEXT_NOT_SET;
}
inline void InvokeFunctionRequest::clear_has_context() {
  _oneof_case_[0] = CONTEXT_NOT_SET;
}
inline InvokeFunctionRequest::ContextCase InvokeFunctionRequest::context_case() const {
  return InvokeFunctionRequest::ContextCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InvokeFunctionResponse_Error

// optional .iterm2.InvokeFunctionResponse.Status status = 1;
inline bool InvokeFunctionResponse_Error::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InvokeFunctionResponse_Error::has_status() const {
  return _internal_has_status();
}
inline void InvokeFunctionResponse_Error::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::iterm2::InvokeFunctionResponse_Status InvokeFunctionResponse_Error::_internal_status() const {
  return static_cast< ::iterm2::InvokeFunctionResponse_Status >(status_);
}
inline ::iterm2::InvokeFunctionResponse_Status InvokeFunctionResponse_Error::status() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionResponse.Error.status)
  return _internal_status();
}
inline void InvokeFunctionResponse_Error::_internal_set_status(::iterm2::InvokeFunctionResponse_Status value) {
  assert(::iterm2::InvokeFunctionResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void InvokeFunctionResponse_Error::set_status(::iterm2::InvokeFunctionResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionResponse.Error.status)
}

// optional string error_reason = 2;
inline bool InvokeFunctionResponse_Error::_internal_has_error_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionResponse_Error::has_error_reason() const {
  return _internal_has_error_reason();
}
inline void InvokeFunctionResponse_Error::clear_error_reason() {
  error_reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionResponse_Error::error_reason() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionResponse.Error.error_reason)
  return _internal_error_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionResponse_Error::set_error_reason(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionResponse.Error.error_reason)
}
inline std::string* InvokeFunctionResponse_Error::mutable_error_reason() {
  std::string* _s = _internal_mutable_error_reason();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionResponse.Error.error_reason)
  return _s;
}
inline const std::string& InvokeFunctionResponse_Error::_internal_error_reason() const {
  return error_reason_.Get();
}
inline void InvokeFunctionResponse_Error::_internal_set_error_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionResponse_Error::_internal_mutable_error_reason() {
  _has_bits_[0] |= 0x00000001u;
  return error_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionResponse_Error::release_error_reason() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionResponse.Error.error_reason)
  if (!_internal_has_error_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = error_reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionResponse_Error::set_allocated_error_reason(std::string* error_reason) {
  if (error_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionResponse.Error.error_reason)
}

// -------------------------------------------------------------------

// InvokeFunctionResponse_Success

// optional string json_result = 1;
inline bool InvokeFunctionResponse_Success::_internal_has_json_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvokeFunctionResponse_Success::has_json_result() const {
  return _internal_has_json_result();
}
inline void InvokeFunctionResponse_Success::clear_json_result() {
  json_result_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvokeFunctionResponse_Success::json_result() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionResponse.Success.json_result)
  return _internal_json_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvokeFunctionResponse_Success::set_json_result(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 json_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InvokeFunctionResponse.Success.json_result)
}
inline std::string* InvokeFunctionResponse_Success::mutable_json_result() {
  std::string* _s = _internal_mutable_json_result();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionResponse.Success.json_result)
  return _s;
}
inline const std::string& InvokeFunctionResponse_Success::_internal_json_result() const {
  return json_result_.Get();
}
inline void InvokeFunctionResponse_Success::_internal_set_json_result(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InvokeFunctionResponse_Success::_internal_mutable_json_result() {
  _has_bits_[0] |= 0x00000001u;
  return json_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InvokeFunctionResponse_Success::release_json_result() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionResponse.Success.json_result)
  if (!_internal_has_json_result()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = json_result_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvokeFunctionResponse_Success::set_allocated_json_result(std::string* json_result) {
  if (json_result != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionResponse.Success.json_result)
}

// -------------------------------------------------------------------

// InvokeFunctionResponse

// .iterm2.InvokeFunctionResponse.Error error = 1;
inline bool InvokeFunctionResponse::_internal_has_error() const {
  return disposition_case() == kError;
}
inline bool InvokeFunctionResponse::has_error() const {
  return _internal_has_error();
}
inline void InvokeFunctionResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void InvokeFunctionResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete disposition_.error_;
    }
    clear_has_disposition();
  }
}
inline ::iterm2::InvokeFunctionResponse_Error* InvokeFunctionResponse::release_error() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionResponse.error)
  if (_internal_has_error()) {
    clear_has_disposition();
      ::iterm2::InvokeFunctionResponse_Error* temp = disposition_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    disposition_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionResponse_Error& InvokeFunctionResponse::_internal_error() const {
  return _internal_has_error()
      ? *disposition_.error_
      : reinterpret_cast< ::iterm2::InvokeFunctionResponse_Error&>(::iterm2::_InvokeFunctionResponse_Error_default_instance_);
}
inline const ::iterm2::InvokeFunctionResponse_Error& InvokeFunctionResponse::error() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionResponse.error)
  return _internal_error();
}
inline ::iterm2::InvokeFunctionResponse_Error* InvokeFunctionResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionResponse.error)
  if (_internal_has_error()) {
    clear_has_disposition();
    ::iterm2::InvokeFunctionResponse_Error* temp = disposition_.error_;
    disposition_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionResponse::unsafe_arena_set_allocated_error(::iterm2::InvokeFunctionResponse_Error* error) {
  clear_disposition();
  if (error) {
    set_has_error();
    disposition_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionResponse.error)
}
inline ::iterm2::InvokeFunctionResponse_Error* InvokeFunctionResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_disposition();
    set_has_error();
    disposition_.error_ = CreateMaybeMessage< ::iterm2::InvokeFunctionResponse_Error >(GetArenaForAllocation());
  }
  return disposition_.error_;
}
inline ::iterm2::InvokeFunctionResponse_Error* InvokeFunctionResponse::mutable_error() {
  ::iterm2::InvokeFunctionResponse_Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionResponse.error)
  return _msg;
}

// .iterm2.InvokeFunctionResponse.Success success = 2;
inline bool InvokeFunctionResponse::_internal_has_success() const {
  return disposition_case() == kSuccess;
}
inline bool InvokeFunctionResponse::has_success() const {
  return _internal_has_success();
}
inline void InvokeFunctionResponse::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline void InvokeFunctionResponse::clear_success() {
  if (_internal_has_success()) {
    if (GetArenaForAllocation() == nullptr) {
      delete disposition_.success_;
    }
    clear_has_disposition();
  }
}
inline ::iterm2::InvokeFunctionResponse_Success* InvokeFunctionResponse::release_success() {
  // @@protoc_insertion_point(field_release:iterm2.InvokeFunctionResponse.success)
  if (_internal_has_success()) {
    clear_has_disposition();
      ::iterm2::InvokeFunctionResponse_Success* temp = disposition_.success_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    disposition_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::InvokeFunctionResponse_Success& InvokeFunctionResponse::_internal_success() const {
  return _internal_has_success()
      ? *disposition_.success_
      : reinterpret_cast< ::iterm2::InvokeFunctionResponse_Success&>(::iterm2::_InvokeFunctionResponse_Success_default_instance_);
}
inline const ::iterm2::InvokeFunctionResponse_Success& InvokeFunctionResponse::success() const {
  // @@protoc_insertion_point(field_get:iterm2.InvokeFunctionResponse.success)
  return _internal_success();
}
inline ::iterm2::InvokeFunctionResponse_Success* InvokeFunctionResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.InvokeFunctionResponse.success)
  if (_internal_has_success()) {
    clear_has_disposition();
    ::iterm2::InvokeFunctionResponse_Success* temp = disposition_.success_;
    disposition_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InvokeFunctionResponse::unsafe_arena_set_allocated_success(::iterm2::InvokeFunctionResponse_Success* success) {
  clear_disposition();
  if (success) {
    set_has_success();
    disposition_.success_ = success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.InvokeFunctionResponse.success)
}
inline ::iterm2::InvokeFunctionResponse_Success* InvokeFunctionResponse::_internal_mutable_success() {
  if (!_internal_has_success()) {
    clear_disposition();
    set_has_success();
    disposition_.success_ = CreateMaybeMessage< ::iterm2::InvokeFunctionResponse_Success >(GetArenaForAllocation());
  }
  return disposition_.success_;
}
inline ::iterm2::InvokeFunctionResponse_Success* InvokeFunctionResponse::mutable_success() {
  ::iterm2::InvokeFunctionResponse_Success* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:iterm2.InvokeFunctionResponse.success)
  return _msg;
}

inline bool InvokeFunctionResponse::has_disposition() const {
  return disposition_case() != DISPOSITION_NOT_SET;
}
inline void InvokeFunctionResponse::clear_has_disposition() {
  _oneof_case_[0] = DISPOSITION_NOT_SET;
}
inline InvokeFunctionResponse::DispositionCase InvokeFunctionResponse::disposition_case() const {
  return InvokeFunctionResponse::DispositionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CloseRequest_CloseTabs

// repeated string tab_ids = 1;
inline int CloseRequest_CloseTabs::_internal_tab_ids_size() const {
  return tab_ids_.size();
}
inline int CloseRequest_CloseTabs::tab_ids_size() const {
  return _internal_tab_ids_size();
}
inline void CloseRequest_CloseTabs::clear_tab_ids() {
  tab_ids_.Clear();
}
inline std::string* CloseRequest_CloseTabs::add_tab_ids() {
  std::string* _s = _internal_add_tab_ids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.CloseRequest.CloseTabs.tab_ids)
  return _s;
}
inline const std::string& CloseRequest_CloseTabs::_internal_tab_ids(int index) const {
  return tab_ids_.Get(index);
}
inline const std::string& CloseRequest_CloseTabs::tab_ids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.CloseTabs.tab_ids)
  return _internal_tab_ids(index);
}
inline std::string* CloseRequest_CloseTabs::mutable_tab_ids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.CloseRequest.CloseTabs.tab_ids)
  return tab_ids_.Mutable(index);
}
inline void CloseRequest_CloseTabs::set_tab_ids(int index, const std::string& value) {
  tab_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline void CloseRequest_CloseTabs::set_tab_ids(int index, std::string&& value) {
  tab_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline void CloseRequest_CloseTabs::set_tab_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tab_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline void CloseRequest_CloseTabs::set_tab_ids(int index, const char* value, size_t size) {
  tab_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline std::string* CloseRequest_CloseTabs::_internal_add_tab_ids() {
  return tab_ids_.Add();
}
inline void CloseRequest_CloseTabs::add_tab_ids(const std::string& value) {
  tab_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline void CloseRequest_CloseTabs::add_tab_ids(std::string&& value) {
  tab_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline void CloseRequest_CloseTabs::add_tab_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tab_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline void CloseRequest_CloseTabs::add_tab_ids(const char* value, size_t size) {
  tab_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.CloseRequest.CloseTabs.tab_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CloseRequest_CloseTabs::tab_ids() const {
  // @@protoc_insertion_point(field_list:iterm2.CloseRequest.CloseTabs.tab_ids)
  return tab_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CloseRequest_CloseTabs::mutable_tab_ids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.CloseRequest.CloseTabs.tab_ids)
  return &tab_ids_;
}

// -------------------------------------------------------------------

// CloseRequest_CloseSessions

// repeated string session_ids = 1;
inline int CloseRequest_CloseSessions::_internal_session_ids_size() const {
  return session_ids_.size();
}
inline int CloseRequest_CloseSessions::session_ids_size() const {
  return _internal_session_ids_size();
}
inline void CloseRequest_CloseSessions::clear_session_ids() {
  session_ids_.Clear();
}
inline std::string* CloseRequest_CloseSessions::add_session_ids() {
  std::string* _s = _internal_add_session_ids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.CloseRequest.CloseSessions.session_ids)
  return _s;
}
inline const std::string& CloseRequest_CloseSessions::_internal_session_ids(int index) const {
  return session_ids_.Get(index);
}
inline const std::string& CloseRequest_CloseSessions::session_ids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.CloseSessions.session_ids)
  return _internal_session_ids(index);
}
inline std::string* CloseRequest_CloseSessions::mutable_session_ids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.CloseRequest.CloseSessions.session_ids)
  return session_ids_.Mutable(index);
}
inline void CloseRequest_CloseSessions::set_session_ids(int index, const std::string& value) {
  session_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline void CloseRequest_CloseSessions::set_session_ids(int index, std::string&& value) {
  session_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline void CloseRequest_CloseSessions::set_session_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline void CloseRequest_CloseSessions::set_session_ids(int index, const char* value, size_t size) {
  session_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline std::string* CloseRequest_CloseSessions::_internal_add_session_ids() {
  return session_ids_.Add();
}
inline void CloseRequest_CloseSessions::add_session_ids(const std::string& value) {
  session_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline void CloseRequest_CloseSessions::add_session_ids(std::string&& value) {
  session_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline void CloseRequest_CloseSessions::add_session_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline void CloseRequest_CloseSessions::add_session_ids(const char* value, size_t size) {
  session_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.CloseRequest.CloseSessions.session_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CloseRequest_CloseSessions::session_ids() const {
  // @@protoc_insertion_point(field_list:iterm2.CloseRequest.CloseSessions.session_ids)
  return session_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CloseRequest_CloseSessions::mutable_session_ids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.CloseRequest.CloseSessions.session_ids)
  return &session_ids_;
}

// -------------------------------------------------------------------

// CloseRequest_CloseWindows

// repeated string window_ids = 1;
inline int CloseRequest_CloseWindows::_internal_window_ids_size() const {
  return window_ids_.size();
}
inline int CloseRequest_CloseWindows::window_ids_size() const {
  return _internal_window_ids_size();
}
inline void CloseRequest_CloseWindows::clear_window_ids() {
  window_ids_.Clear();
}
inline std::string* CloseRequest_CloseWindows::add_window_ids() {
  std::string* _s = _internal_add_window_ids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.CloseRequest.CloseWindows.window_ids)
  return _s;
}
inline const std::string& CloseRequest_CloseWindows::_internal_window_ids(int index) const {
  return window_ids_.Get(index);
}
inline const std::string& CloseRequest_CloseWindows::window_ids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.CloseWindows.window_ids)
  return _internal_window_ids(index);
}
inline std::string* CloseRequest_CloseWindows::mutable_window_ids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.CloseRequest.CloseWindows.window_ids)
  return window_ids_.Mutable(index);
}
inline void CloseRequest_CloseWindows::set_window_ids(int index, const std::string& value) {
  window_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline void CloseRequest_CloseWindows::set_window_ids(int index, std::string&& value) {
  window_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline void CloseRequest_CloseWindows::set_window_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  window_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline void CloseRequest_CloseWindows::set_window_ids(int index, const char* value, size_t size) {
  window_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline std::string* CloseRequest_CloseWindows::_internal_add_window_ids() {
  return window_ids_.Add();
}
inline void CloseRequest_CloseWindows::add_window_ids(const std::string& value) {
  window_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline void CloseRequest_CloseWindows::add_window_ids(std::string&& value) {
  window_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline void CloseRequest_CloseWindows::add_window_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  window_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline void CloseRequest_CloseWindows::add_window_ids(const char* value, size_t size) {
  window_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.CloseRequest.CloseWindows.window_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CloseRequest_CloseWindows::window_ids() const {
  // @@protoc_insertion_point(field_list:iterm2.CloseRequest.CloseWindows.window_ids)
  return window_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CloseRequest_CloseWindows::mutable_window_ids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.CloseRequest.CloseWindows.window_ids)
  return &window_ids_;
}

// -------------------------------------------------------------------

// CloseRequest

// .iterm2.CloseRequest.CloseTabs tabs = 1;
inline bool CloseRequest::_internal_has_tabs() const {
  return target_case() == kTabs;
}
inline bool CloseRequest::has_tabs() const {
  return _internal_has_tabs();
}
inline void CloseRequest::set_has_tabs() {
  _oneof_case_[0] = kTabs;
}
inline void CloseRequest::clear_tabs() {
  if (_internal_has_tabs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.tabs_;
    }
    clear_has_target();
  }
}
inline ::iterm2::CloseRequest_CloseTabs* CloseRequest::release_tabs() {
  // @@protoc_insertion_point(field_release:iterm2.CloseRequest.tabs)
  if (_internal_has_tabs()) {
    clear_has_target();
      ::iterm2::CloseRequest_CloseTabs* temp = target_.tabs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.tabs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CloseRequest_CloseTabs& CloseRequest::_internal_tabs() const {
  return _internal_has_tabs()
      ? *target_.tabs_
      : reinterpret_cast< ::iterm2::CloseRequest_CloseTabs&>(::iterm2::_CloseRequest_CloseTabs_default_instance_);
}
inline const ::iterm2::CloseRequest_CloseTabs& CloseRequest::tabs() const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.tabs)
  return _internal_tabs();
}
inline ::iterm2::CloseRequest_CloseTabs* CloseRequest::unsafe_arena_release_tabs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.CloseRequest.tabs)
  if (_internal_has_tabs()) {
    clear_has_target();
    ::iterm2::CloseRequest_CloseTabs* temp = target_.tabs_;
    target_.tabs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CloseRequest::unsafe_arena_set_allocated_tabs(::iterm2::CloseRequest_CloseTabs* tabs) {
  clear_target();
  if (tabs) {
    set_has_tabs();
    target_.tabs_ = tabs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.CloseRequest.tabs)
}
inline ::iterm2::CloseRequest_CloseTabs* CloseRequest::_internal_mutable_tabs() {
  if (!_internal_has_tabs()) {
    clear_target();
    set_has_tabs();
    target_.tabs_ = CreateMaybeMessage< ::iterm2::CloseRequest_CloseTabs >(GetArenaForAllocation());
  }
  return target_.tabs_;
}
inline ::iterm2::CloseRequest_CloseTabs* CloseRequest::mutable_tabs() {
  ::iterm2::CloseRequest_CloseTabs* _msg = _internal_mutable_tabs();
  // @@protoc_insertion_point(field_mutable:iterm2.CloseRequest.tabs)
  return _msg;
}

// .iterm2.CloseRequest.CloseSessions sessions = 2;
inline bool CloseRequest::_internal_has_sessions() const {
  return target_case() == kSessions;
}
inline bool CloseRequest::has_sessions() const {
  return _internal_has_sessions();
}
inline void CloseRequest::set_has_sessions() {
  _oneof_case_[0] = kSessions;
}
inline void CloseRequest::clear_sessions() {
  if (_internal_has_sessions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.sessions_;
    }
    clear_has_target();
  }
}
inline ::iterm2::CloseRequest_CloseSessions* CloseRequest::release_sessions() {
  // @@protoc_insertion_point(field_release:iterm2.CloseRequest.sessions)
  if (_internal_has_sessions()) {
    clear_has_target();
      ::iterm2::CloseRequest_CloseSessions* temp = target_.sessions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.sessions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CloseRequest_CloseSessions& CloseRequest::_internal_sessions() const {
  return _internal_has_sessions()
      ? *target_.sessions_
      : reinterpret_cast< ::iterm2::CloseRequest_CloseSessions&>(::iterm2::_CloseRequest_CloseSessions_default_instance_);
}
inline const ::iterm2::CloseRequest_CloseSessions& CloseRequest::sessions() const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.sessions)
  return _internal_sessions();
}
inline ::iterm2::CloseRequest_CloseSessions* CloseRequest::unsafe_arena_release_sessions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.CloseRequest.sessions)
  if (_internal_has_sessions()) {
    clear_has_target();
    ::iterm2::CloseRequest_CloseSessions* temp = target_.sessions_;
    target_.sessions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CloseRequest::unsafe_arena_set_allocated_sessions(::iterm2::CloseRequest_CloseSessions* sessions) {
  clear_target();
  if (sessions) {
    set_has_sessions();
    target_.sessions_ = sessions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.CloseRequest.sessions)
}
inline ::iterm2::CloseRequest_CloseSessions* CloseRequest::_internal_mutable_sessions() {
  if (!_internal_has_sessions()) {
    clear_target();
    set_has_sessions();
    target_.sessions_ = CreateMaybeMessage< ::iterm2::CloseRequest_CloseSessions >(GetArenaForAllocation());
  }
  return target_.sessions_;
}
inline ::iterm2::CloseRequest_CloseSessions* CloseRequest::mutable_sessions() {
  ::iterm2::CloseRequest_CloseSessions* _msg = _internal_mutable_sessions();
  // @@protoc_insertion_point(field_mutable:iterm2.CloseRequest.sessions)
  return _msg;
}

// .iterm2.CloseRequest.CloseWindows windows = 3;
inline bool CloseRequest::_internal_has_windows() const {
  return target_case() == kWindows;
}
inline bool CloseRequest::has_windows() const {
  return _internal_has_windows();
}
inline void CloseRequest::set_has_windows() {
  _oneof_case_[0] = kWindows;
}
inline void CloseRequest::clear_windows() {
  if (_internal_has_windows()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.windows_;
    }
    clear_has_target();
  }
}
inline ::iterm2::CloseRequest_CloseWindows* CloseRequest::release_windows() {
  // @@protoc_insertion_point(field_release:iterm2.CloseRequest.windows)
  if (_internal_has_windows()) {
    clear_has_target();
      ::iterm2::CloseRequest_CloseWindows* temp = target_.windows_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.windows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::CloseRequest_CloseWindows& CloseRequest::_internal_windows() const {
  return _internal_has_windows()
      ? *target_.windows_
      : reinterpret_cast< ::iterm2::CloseRequest_CloseWindows&>(::iterm2::_CloseRequest_CloseWindows_default_instance_);
}
inline const ::iterm2::CloseRequest_CloseWindows& CloseRequest::windows() const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.windows)
  return _internal_windows();
}
inline ::iterm2::CloseRequest_CloseWindows* CloseRequest::unsafe_arena_release_windows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.CloseRequest.windows)
  if (_internal_has_windows()) {
    clear_has_target();
    ::iterm2::CloseRequest_CloseWindows* temp = target_.windows_;
    target_.windows_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CloseRequest::unsafe_arena_set_allocated_windows(::iterm2::CloseRequest_CloseWindows* windows) {
  clear_target();
  if (windows) {
    set_has_windows();
    target_.windows_ = windows;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.CloseRequest.windows)
}
inline ::iterm2::CloseRequest_CloseWindows* CloseRequest::_internal_mutable_windows() {
  if (!_internal_has_windows()) {
    clear_target();
    set_has_windows();
    target_.windows_ = CreateMaybeMessage< ::iterm2::CloseRequest_CloseWindows >(GetArenaForAllocation());
  }
  return target_.windows_;
}
inline ::iterm2::CloseRequest_CloseWindows* CloseRequest::mutable_windows() {
  ::iterm2::CloseRequest_CloseWindows* _msg = _internal_mutable_windows();
  // @@protoc_insertion_point(field_mutable:iterm2.CloseRequest.windows)
  return _msg;
}

// optional bool force = 4;
inline bool CloseRequest::_internal_has_force() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseRequest::has_force() const {
  return _internal_has_force();
}
inline void CloseRequest::clear_force() {
  force_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CloseRequest::_internal_force() const {
  return force_;
}
inline bool CloseRequest::force() const {
  // @@protoc_insertion_point(field_get:iterm2.CloseRequest.force)
  return _internal_force();
}
inline void CloseRequest::_internal_set_force(bool value) {
  _has_bits_[0] |= 0x00000001u;
  force_ = value;
}
inline void CloseRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:iterm2.CloseRequest.force)
}

inline bool CloseRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void CloseRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline CloseRequest::TargetCase CloseRequest::target_case() const {
  return CloseRequest::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CloseResponse

// repeated .iterm2.CloseResponse.Status statuses = 1;
inline int CloseResponse::_internal_statuses_size() const {
  return statuses_.size();
}
inline int CloseResponse::statuses_size() const {
  return _internal_statuses_size();
}
inline void CloseResponse::clear_statuses() {
  statuses_.Clear();
}
inline ::iterm2::CloseResponse_Status CloseResponse::_internal_statuses(int index) const {
  return static_cast< ::iterm2::CloseResponse_Status >(statuses_.Get(index));
}
inline ::iterm2::CloseResponse_Status CloseResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.CloseResponse.statuses)
  return _internal_statuses(index);
}
inline void CloseResponse::set_statuses(int index, ::iterm2::CloseResponse_Status value) {
  assert(::iterm2::CloseResponse_Status_IsValid(value));
  statuses_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.CloseResponse.statuses)
}
inline void CloseResponse::_internal_add_statuses(::iterm2::CloseResponse_Status value) {
  assert(::iterm2::CloseResponse_Status_IsValid(value));
  statuses_.Add(value);
}
inline void CloseResponse::add_statuses(::iterm2::CloseResponse_Status value) {
  _internal_add_statuses(value);
  // @@protoc_insertion_point(field_add:iterm2.CloseResponse.statuses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CloseResponse::statuses() const {
  // @@protoc_insertion_point(field_list:iterm2.CloseResponse.statuses)
  return statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CloseResponse::_internal_mutable_statuses() {
  return &statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CloseResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.CloseResponse.statuses)
  return _internal_mutable_statuses();
}

// -------------------------------------------------------------------

// SetBroadcastDomainsRequest

// repeated .iterm2.BroadcastDomain broadcast_domains = 1;
inline int SetBroadcastDomainsRequest::_internal_broadcast_domains_size() const {
  return broadcast_domains_.size();
}
inline int SetBroadcastDomainsRequest::broadcast_domains_size() const {
  return _internal_broadcast_domains_size();
}
inline void SetBroadcastDomainsRequest::clear_broadcast_domains() {
  broadcast_domains_.Clear();
}
inline ::iterm2::BroadcastDomain* SetBroadcastDomainsRequest::mutable_broadcast_domains(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SetBroadcastDomainsRequest.broadcast_domains)
  return broadcast_domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >*
SetBroadcastDomainsRequest::mutable_broadcast_domains() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SetBroadcastDomainsRequest.broadcast_domains)
  return &broadcast_domains_;
}
inline const ::iterm2::BroadcastDomain& SetBroadcastDomainsRequest::_internal_broadcast_domains(int index) const {
  return broadcast_domains_.Get(index);
}
inline const ::iterm2::BroadcastDomain& SetBroadcastDomainsRequest::broadcast_domains(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SetBroadcastDomainsRequest.broadcast_domains)
  return _internal_broadcast_domains(index);
}
inline ::iterm2::BroadcastDomain* SetBroadcastDomainsRequest::_internal_add_broadcast_domains() {
  return broadcast_domains_.Add();
}
inline ::iterm2::BroadcastDomain* SetBroadcastDomainsRequest::add_broadcast_domains() {
  ::iterm2::BroadcastDomain* _add = _internal_add_broadcast_domains();
  // @@protoc_insertion_point(field_add:iterm2.SetBroadcastDomainsRequest.broadcast_domains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >&
SetBroadcastDomainsRequest::broadcast_domains() const {
  // @@protoc_insertion_point(field_list:iterm2.SetBroadcastDomainsRequest.broadcast_domains)
  return broadcast_domains_;
}

// -------------------------------------------------------------------

// SetBroadcastDomainsResponse

// optional .iterm2.SetBroadcastDomainsResponse.Status status = 1;
inline bool SetBroadcastDomainsResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetBroadcastDomainsResponse::has_status() const {
  return _internal_has_status();
}
inline void SetBroadcastDomainsResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::_internal_status() const {
  return static_cast< ::iterm2::SetBroadcastDomainsResponse_Status >(status_);
}
inline ::iterm2::SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SetBroadcastDomainsResponse.status)
  return _internal_status();
}
inline void SetBroadcastDomainsResponse::_internal_set_status(::iterm2::SetBroadcastDomainsResponse_Status value) {
  assert(::iterm2::SetBroadcastDomainsResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SetBroadcastDomainsResponse::set_status(::iterm2::SetBroadcastDomainsResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SetBroadcastDomainsResponse.status)
}

// -------------------------------------------------------------------

// StatusBarComponentRequest_OpenPopover

// optional string session_id = 1;
inline bool StatusBarComponentRequest_OpenPopover::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusBarComponentRequest_OpenPopover::has_session_id() const {
  return _internal_has_session_id();
}
inline void StatusBarComponentRequest_OpenPopover::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusBarComponentRequest_OpenPopover::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.StatusBarComponentRequest.OpenPopover.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusBarComponentRequest_OpenPopover::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.StatusBarComponentRequest.OpenPopover.session_id)
}
inline std::string* StatusBarComponentRequest_OpenPopover::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.StatusBarComponentRequest.OpenPopover.session_id)
  return _s;
}
inline const std::string& StatusBarComponentRequest_OpenPopover::_internal_session_id() const {
  return session_id_.Get();
}
inline void StatusBarComponentRequest_OpenPopover::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusBarComponentRequest_OpenPopover::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusBarComponentRequest_OpenPopover::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.StatusBarComponentRequest.OpenPopover.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StatusBarComponentRequest_OpenPopover::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.StatusBarComponentRequest.OpenPopover.session_id)
}

// optional string html = 2;
inline bool StatusBarComponentRequest_OpenPopover::_internal_has_html() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatusBarComponentRequest_OpenPopover::has_html() const {
  return _internal_has_html();
}
inline void StatusBarComponentRequest_OpenPopover::clear_html() {
  html_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StatusBarComponentRequest_OpenPopover::html() const {
  // @@protoc_insertion_point(field_get:iterm2.StatusBarComponentRequest.OpenPopover.html)
  return _internal_html();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusBarComponentRequest_OpenPopover::set_html(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 html_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.StatusBarComponentRequest.OpenPopover.html)
}
inline std::string* StatusBarComponentRequest_OpenPopover::mutable_html() {
  std::string* _s = _internal_mutable_html();
  // @@protoc_insertion_point(field_mutable:iterm2.StatusBarComponentRequest.OpenPopover.html)
  return _s;
}
inline const std::string& StatusBarComponentRequest_OpenPopover::_internal_html() const {
  return html_.Get();
}
inline void StatusBarComponentRequest_OpenPopover::_internal_set_html(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  html_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusBarComponentRequest_OpenPopover::_internal_mutable_html() {
  _has_bits_[0] |= 0x00000002u;
  return html_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusBarComponentRequest_OpenPopover::release_html() {
  // @@protoc_insertion_point(field_release:iterm2.StatusBarComponentRequest.OpenPopover.html)
  if (!_internal_has_html()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = html_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (html_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StatusBarComponentRequest_OpenPopover::set_allocated_html(std::string* html) {
  if (html != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  html_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), html,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (html_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.StatusBarComponentRequest.OpenPopover.html)
}

// optional .iterm2.Size size = 3;
inline bool StatusBarComponentRequest_OpenPopover::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool StatusBarComponentRequest_OpenPopover::has_size() const {
  return _internal_has_size();
}
inline void StatusBarComponentRequest_OpenPopover::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::iterm2::Size& StatusBarComponentRequest_OpenPopover::_internal_size() const {
  const ::iterm2::Size* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Size&>(
      ::iterm2::_Size_default_instance_);
}
inline const ::iterm2::Size& StatusBarComponentRequest_OpenPopover::size() const {
  // @@protoc_insertion_point(field_get:iterm2.StatusBarComponentRequest.OpenPopover.size)
  return _internal_size();
}
inline void StatusBarComponentRequest_OpenPopover::unsafe_arena_set_allocated_size(
    ::iterm2::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.StatusBarComponentRequest.OpenPopover.size)
}
inline ::iterm2::Size* StatusBarComponentRequest_OpenPopover::release_size() {
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::Size* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Size* StatusBarComponentRequest_OpenPopover::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:iterm2.StatusBarComponentRequest.OpenPopover.size)
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::iterm2::Size* StatusBarComponentRequest_OpenPopover::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000004u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Size>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::iterm2::Size* StatusBarComponentRequest_OpenPopover::mutable_size() {
  ::iterm2::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:iterm2.StatusBarComponentRequest.OpenPopover.size)
  return _msg;
}
inline void StatusBarComponentRequest_OpenPopover::set_allocated_size(::iterm2::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Size>::GetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:iterm2.StatusBarComponentRequest.OpenPopover.size)
}

// -------------------------------------------------------------------

// StatusBarComponentRequest

// .iterm2.StatusBarComponentRequest.OpenPopover open_popover = 1;
inline bool StatusBarComponentRequest::_internal_has_open_popover() const {
  return request_case() == kOpenPopover;
}
inline bool StatusBarComponentRequest::has_open_popover() const {
  return _internal_has_open_popover();
}
inline void StatusBarComponentRequest::set_has_open_popover() {
  _oneof_case_[0] = kOpenPopover;
}
inline void StatusBarComponentRequest::clear_open_popover() {
  if (_internal_has_open_popover()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.open_popover_;
    }
    clear_has_request();
  }
}
inline ::iterm2::StatusBarComponentRequest_OpenPopover* StatusBarComponentRequest::release_open_popover() {
  // @@protoc_insertion_point(field_release:iterm2.StatusBarComponentRequest.open_popover)
  if (_internal_has_open_popover()) {
    clear_has_request();
      ::iterm2::StatusBarComponentRequest_OpenPopover* temp = request_.open_popover_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.open_popover_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::StatusBarComponentRequest_OpenPopover& StatusBarComponentRequest::_internal_open_popover() const {
  return _internal_has_open_popover()
      ? *request_.open_popover_
      : reinterpret_cast< ::iterm2::StatusBarComponentRequest_OpenPopover&>(::iterm2::_StatusBarComponentRequest_OpenPopover_default_instance_);
}
inline const ::iterm2::StatusBarComponentRequest_OpenPopover& StatusBarComponentRequest::open_popover() const {
  // @@protoc_insertion_point(field_get:iterm2.StatusBarComponentRequest.open_popover)
  return _internal_open_popover();
}
inline ::iterm2::StatusBarComponentRequest_OpenPopover* StatusBarComponentRequest::unsafe_arena_release_open_popover() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.StatusBarComponentRequest.open_popover)
  if (_internal_has_open_popover()) {
    clear_has_request();
    ::iterm2::StatusBarComponentRequest_OpenPopover* temp = request_.open_popover_;
    request_.open_popover_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatusBarComponentRequest::unsafe_arena_set_allocated_open_popover(::iterm2::StatusBarComponentRequest_OpenPopover* open_popover) {
  clear_request();
  if (open_popover) {
    set_has_open_popover();
    request_.open_popover_ = open_popover;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.StatusBarComponentRequest.open_popover)
}
inline ::iterm2::StatusBarComponentRequest_OpenPopover* StatusBarComponentRequest::_internal_mutable_open_popover() {
  if (!_internal_has_open_popover()) {
    clear_request();
    set_has_open_popover();
    request_.open_popover_ = CreateMaybeMessage< ::iterm2::StatusBarComponentRequest_OpenPopover >(GetArenaForAllocation());
  }
  return request_.open_popover_;
}
inline ::iterm2::StatusBarComponentRequest_OpenPopover* StatusBarComponentRequest::mutable_open_popover() {
  ::iterm2::StatusBarComponentRequest_OpenPopover* _msg = _internal_mutable_open_popover();
  // @@protoc_insertion_point(field_mutable:iterm2.StatusBarComponentRequest.open_popover)
  return _msg;
}

// optional string identifier = 2;
inline bool StatusBarComponentRequest::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusBarComponentRequest::has_identifier() const {
  return _internal_has_identifier();
}
inline void StatusBarComponentRequest::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusBarComponentRequest::identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.StatusBarComponentRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusBarComponentRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.StatusBarComponentRequest.identifier)
}
inline std::string* StatusBarComponentRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.StatusBarComponentRequest.identifier)
  return _s;
}
inline const std::string& StatusBarComponentRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void StatusBarComponentRequest::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusBarComponentRequest::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusBarComponentRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.StatusBarComponentRequest.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StatusBarComponentRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.StatusBarComponentRequest.identifier)
}

inline bool StatusBarComponentRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void StatusBarComponentRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline StatusBarComponentRequest::RequestCase StatusBarComponentRequest::request_case() const {
  return StatusBarComponentRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StatusBarComponentResponse

// optional .iterm2.StatusBarComponentResponse.Status status = 1;
inline bool StatusBarComponentResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusBarComponentResponse::has_status() const {
  return _internal_has_status();
}
inline void StatusBarComponentResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::StatusBarComponentResponse_Status StatusBarComponentResponse::_internal_status() const {
  return static_cast< ::iterm2::StatusBarComponentResponse_Status >(status_);
}
inline ::iterm2::StatusBarComponentResponse_Status StatusBarComponentResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.StatusBarComponentResponse.status)
  return _internal_status();
}
inline void StatusBarComponentResponse::_internal_set_status(::iterm2::StatusBarComponentResponse_Status value) {
  assert(::iterm2::StatusBarComponentResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void StatusBarComponentResponse::set_status(::iterm2::StatusBarComponentResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.StatusBarComponentResponse.status)
}

// -------------------------------------------------------------------

// WindowedCoordRange

// optional .iterm2.CoordRange coord_range = 1;
inline bool WindowedCoordRange::_internal_has_coord_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || coord_range_ != nullptr);
  return value;
}
inline bool WindowedCoordRange::has_coord_range() const {
  return _internal_has_coord_range();
}
inline void WindowedCoordRange::clear_coord_range() {
  if (coord_range_ != nullptr) coord_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::CoordRange& WindowedCoordRange::_internal_coord_range() const {
  const ::iterm2::CoordRange* p = coord_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::CoordRange&>(
      ::iterm2::_CoordRange_default_instance_);
}
inline const ::iterm2::CoordRange& WindowedCoordRange::coord_range() const {
  // @@protoc_insertion_point(field_get:iterm2.WindowedCoordRange.coord_range)
  return _internal_coord_range();
}
inline void WindowedCoordRange::unsafe_arena_set_allocated_coord_range(
    ::iterm2::CoordRange* coord_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_range_);
  }
  coord_range_ = coord_range;
  if (coord_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.WindowedCoordRange.coord_range)
}
inline ::iterm2::CoordRange* WindowedCoordRange::release_coord_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::CoordRange* temp = coord_range_;
  coord_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::CoordRange* WindowedCoordRange::unsafe_arena_release_coord_range() {
  // @@protoc_insertion_point(field_release:iterm2.WindowedCoordRange.coord_range)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::CoordRange* temp = coord_range_;
  coord_range_ = nullptr;
  return temp;
}
inline ::iterm2::CoordRange* WindowedCoordRange::_internal_mutable_coord_range() {
  _has_bits_[0] |= 0x00000001u;
  if (coord_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::CoordRange>(GetArenaForAllocation());
    coord_range_ = p;
  }
  return coord_range_;
}
inline ::iterm2::CoordRange* WindowedCoordRange::mutable_coord_range() {
  ::iterm2::CoordRange* _msg = _internal_mutable_coord_range();
  // @@protoc_insertion_point(field_mutable:iterm2.WindowedCoordRange.coord_range)
  return _msg;
}
inline void WindowedCoordRange::set_allocated_coord_range(::iterm2::CoordRange* coord_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coord_range_;
  }
  if (coord_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CoordRange>::GetOwningArena(coord_range);
    if (message_arena != submessage_arena) {
      coord_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coord_range_ = coord_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.WindowedCoordRange.coord_range)
}

// optional .iterm2.Range columns = 2;
inline bool WindowedCoordRange::_internal_has_columns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || columns_ != nullptr);
  return value;
}
inline bool WindowedCoordRange::has_columns() const {
  return _internal_has_columns();
}
inline void WindowedCoordRange::clear_columns() {
  if (columns_ != nullptr) columns_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::Range& WindowedCoordRange::_internal_columns() const {
  const ::iterm2::Range* p = columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Range&>(
      ::iterm2::_Range_default_instance_);
}
inline const ::iterm2::Range& WindowedCoordRange::columns() const {
  // @@protoc_insertion_point(field_get:iterm2.WindowedCoordRange.columns)
  return _internal_columns();
}
inline void WindowedCoordRange::unsafe_arena_set_allocated_columns(
    ::iterm2::Range* columns) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columns_);
  }
  columns_ = columns;
  if (columns) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.WindowedCoordRange.columns)
}
inline ::iterm2::Range* WindowedCoordRange::release_columns() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Range* temp = columns_;
  columns_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Range* WindowedCoordRange::unsafe_arena_release_columns() {
  // @@protoc_insertion_point(field_release:iterm2.WindowedCoordRange.columns)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Range* temp = columns_;
  columns_ = nullptr;
  return temp;
}
inline ::iterm2::Range* WindowedCoordRange::_internal_mutable_columns() {
  _has_bits_[0] |= 0x00000002u;
  if (columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Range>(GetArenaForAllocation());
    columns_ = p;
  }
  return columns_;
}
inline ::iterm2::Range* WindowedCoordRange::mutable_columns() {
  ::iterm2::Range* _msg = _internal_mutable_columns();
  // @@protoc_insertion_point(field_mutable:iterm2.WindowedCoordRange.columns)
  return _msg;
}
inline void WindowedCoordRange::set_allocated_columns(::iterm2::Range* columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete columns_;
  }
  if (columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Range>::GetOwningArena(columns);
    if (message_arena != submessage_arena) {
      columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columns, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  columns_ = columns;
  // @@protoc_insertion_point(field_set_allocated:iterm2.WindowedCoordRange.columns)
}

// -------------------------------------------------------------------

// SubSelection

// optional .iterm2.WindowedCoordRange windowed_coord_range = 1;
inline bool SubSelection::_internal_has_windowed_coord_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || windowed_coord_range_ != nullptr);
  return value;
}
inline bool SubSelection::has_windowed_coord_range() const {
  return _internal_has_windowed_coord_range();
}
inline void SubSelection::clear_windowed_coord_range() {
  if (windowed_coord_range_ != nullptr) windowed_coord_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::WindowedCoordRange& SubSelection::_internal_windowed_coord_range() const {
  const ::iterm2::WindowedCoordRange* p = windowed_coord_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::WindowedCoordRange&>(
      ::iterm2::_WindowedCoordRange_default_instance_);
}
inline const ::iterm2::WindowedCoordRange& SubSelection::windowed_coord_range() const {
  // @@protoc_insertion_point(field_get:iterm2.SubSelection.windowed_coord_range)
  return _internal_windowed_coord_range();
}
inline void SubSelection::unsafe_arena_set_allocated_windowed_coord_range(
    ::iterm2::WindowedCoordRange* windowed_coord_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(windowed_coord_range_);
  }
  windowed_coord_range_ = windowed_coord_range;
  if (windowed_coord_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SubSelection.windowed_coord_range)
}
inline ::iterm2::WindowedCoordRange* SubSelection::release_windowed_coord_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::WindowedCoordRange* temp = windowed_coord_range_;
  windowed_coord_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::WindowedCoordRange* SubSelection::unsafe_arena_release_windowed_coord_range() {
  // @@protoc_insertion_point(field_release:iterm2.SubSelection.windowed_coord_range)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::WindowedCoordRange* temp = windowed_coord_range_;
  windowed_coord_range_ = nullptr;
  return temp;
}
inline ::iterm2::WindowedCoordRange* SubSelection::_internal_mutable_windowed_coord_range() {
  _has_bits_[0] |= 0x00000001u;
  if (windowed_coord_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::WindowedCoordRange>(GetArenaForAllocation());
    windowed_coord_range_ = p;
  }
  return windowed_coord_range_;
}
inline ::iterm2::WindowedCoordRange* SubSelection::mutable_windowed_coord_range() {
  ::iterm2::WindowedCoordRange* _msg = _internal_mutable_windowed_coord_range();
  // @@protoc_insertion_point(field_mutable:iterm2.SubSelection.windowed_coord_range)
  return _msg;
}
inline void SubSelection::set_allocated_windowed_coord_range(::iterm2::WindowedCoordRange* windowed_coord_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete windowed_coord_range_;
  }
  if (windowed_coord_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::WindowedCoordRange>::GetOwningArena(windowed_coord_range);
    if (message_arena != submessage_arena) {
      windowed_coord_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, windowed_coord_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  windowed_coord_range_ = windowed_coord_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.SubSelection.windowed_coord_range)
}

// optional .iterm2.SelectionMode selection_mode = 2;
inline bool SubSelection::_internal_has_selection_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubSelection::has_selection_mode() const {
  return _internal_has_selection_mode();
}
inline void SubSelection::clear_selection_mode() {
  selection_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::iterm2::SelectionMode SubSelection::_internal_selection_mode() const {
  return static_cast< ::iterm2::SelectionMode >(selection_mode_);
}
inline ::iterm2::SelectionMode SubSelection::selection_mode() const {
  // @@protoc_insertion_point(field_get:iterm2.SubSelection.selection_mode)
  return _internal_selection_mode();
}
inline void SubSelection::_internal_set_selection_mode(::iterm2::SelectionMode value) {
  assert(::iterm2::SelectionMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  selection_mode_ = value;
}
inline void SubSelection::set_selection_mode(::iterm2::SelectionMode value) {
  _internal_set_selection_mode(value);
  // @@protoc_insertion_point(field_set:iterm2.SubSelection.selection_mode)
}

// optional bool connected = 3;
inline bool SubSelection::_internal_has_connected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubSelection::has_connected() const {
  return _internal_has_connected();
}
inline void SubSelection::clear_connected() {
  connected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SubSelection::_internal_connected() const {
  return connected_;
}
inline bool SubSelection::connected() const {
  // @@protoc_insertion_point(field_get:iterm2.SubSelection.connected)
  return _internal_connected();
}
inline void SubSelection::_internal_set_connected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  connected_ = value;
}
inline void SubSelection::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:iterm2.SubSelection.connected)
}

// -------------------------------------------------------------------

// Selection

// repeated .iterm2.SubSelection sub_selections = 1;
inline int Selection::_internal_sub_selections_size() const {
  return sub_selections_.size();
}
inline int Selection::sub_selections_size() const {
  return _internal_sub_selections_size();
}
inline void Selection::clear_sub_selections() {
  sub_selections_.Clear();
}
inline ::iterm2::SubSelection* Selection::mutable_sub_selections(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.Selection.sub_selections)
  return sub_selections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SubSelection >*
Selection::mutable_sub_selections() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.Selection.sub_selections)
  return &sub_selections_;
}
inline const ::iterm2::SubSelection& Selection::_internal_sub_selections(int index) const {
  return sub_selections_.Get(index);
}
inline const ::iterm2::SubSelection& Selection::sub_selections(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.Selection.sub_selections)
  return _internal_sub_selections(index);
}
inline ::iterm2::SubSelection* Selection::_internal_add_sub_selections() {
  return sub_selections_.Add();
}
inline ::iterm2::SubSelection* Selection::add_sub_selections() {
  ::iterm2::SubSelection* _add = _internal_add_sub_selections();
  // @@protoc_insertion_point(field_add:iterm2.Selection.sub_selections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SubSelection >&
Selection::sub_selections() const {
  // @@protoc_insertion_point(field_list:iterm2.Selection.sub_selections)
  return sub_selections_;
}

// -------------------------------------------------------------------

// SelectionRequest_GetSelectionRequest

// optional string session_id = 1;
inline bool SelectionRequest_GetSelectionRequest::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SelectionRequest_GetSelectionRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void SelectionRequest_GetSelectionRequest::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectionRequest_GetSelectionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionRequest.GetSelectionRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectionRequest_GetSelectionRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SelectionRequest.GetSelectionRequest.session_id)
}
inline std::string* SelectionRequest_GetSelectionRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionRequest.GetSelectionRequest.session_id)
  return _s;
}
inline const std::string& SelectionRequest_GetSelectionRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void SelectionRequest_GetSelectionRequest::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectionRequest_GetSelectionRequest::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectionRequest_GetSelectionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionRequest.GetSelectionRequest.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SelectionRequest_GetSelectionRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionRequest.GetSelectionRequest.session_id)
}

// -------------------------------------------------------------------

// SelectionRequest_SetSelectionRequest

// optional string session_id = 1;
inline bool SelectionRequest_SetSelectionRequest::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SelectionRequest_SetSelectionRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void SelectionRequest_SetSelectionRequest::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectionRequest_SetSelectionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionRequest.SetSelectionRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectionRequest_SetSelectionRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SelectionRequest.SetSelectionRequest.session_id)
}
inline std::string* SelectionRequest_SetSelectionRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionRequest.SetSelectionRequest.session_id)
  return _s;
}
inline const std::string& SelectionRequest_SetSelectionRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void SelectionRequest_SetSelectionRequest::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectionRequest_SetSelectionRequest::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectionRequest_SetSelectionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionRequest.SetSelectionRequest.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SelectionRequest_SetSelectionRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionRequest.SetSelectionRequest.session_id)
}

// optional .iterm2.Selection selection = 2;
inline bool SelectionRequest_SetSelectionRequest::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool SelectionRequest_SetSelectionRequest::has_selection() const {
  return _internal_has_selection();
}
inline void SelectionRequest_SetSelectionRequest::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::Selection& SelectionRequest_SetSelectionRequest::_internal_selection() const {
  const ::iterm2::Selection* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Selection&>(
      ::iterm2::_Selection_default_instance_);
}
inline const ::iterm2::Selection& SelectionRequest_SetSelectionRequest::selection() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionRequest.SetSelectionRequest.selection)
  return _internal_selection();
}
inline void SelectionRequest_SetSelectionRequest::unsafe_arena_set_allocated_selection(
    ::iterm2::Selection* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SelectionRequest.SetSelectionRequest.selection)
}
inline ::iterm2::Selection* SelectionRequest_SetSelectionRequest::release_selection() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Selection* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Selection* SelectionRequest_SetSelectionRequest::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionRequest.SetSelectionRequest.selection)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Selection* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::iterm2::Selection* SelectionRequest_SetSelectionRequest::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000002u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Selection>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::iterm2::Selection* SelectionRequest_SetSelectionRequest::mutable_selection() {
  ::iterm2::Selection* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionRequest.SetSelectionRequest.selection)
  return _msg;
}
inline void SelectionRequest_SetSelectionRequest::set_allocated_selection(::iterm2::Selection* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete selection_;
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Selection>::GetOwningArena(selection);
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionRequest.SetSelectionRequest.selection)
}

// -------------------------------------------------------------------

// SelectionRequest

// .iterm2.SelectionRequest.GetSelectionRequest get_selection_request = 1;
inline bool SelectionRequest::_internal_has_get_selection_request() const {
  return request_case() == kGetSelectionRequest;
}
inline bool SelectionRequest::has_get_selection_request() const {
  return _internal_has_get_selection_request();
}
inline void SelectionRequest::set_has_get_selection_request() {
  _oneof_case_[0] = kGetSelectionRequest;
}
inline void SelectionRequest::clear_get_selection_request() {
  if (_internal_has_get_selection_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_selection_request_;
    }
    clear_has_request();
  }
}
inline ::iterm2::SelectionRequest_GetSelectionRequest* SelectionRequest::release_get_selection_request() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionRequest.get_selection_request)
  if (_internal_has_get_selection_request()) {
    clear_has_request();
      ::iterm2::SelectionRequest_GetSelectionRequest* temp = request_.get_selection_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SelectionRequest_GetSelectionRequest& SelectionRequest::_internal_get_selection_request() const {
  return _internal_has_get_selection_request()
      ? *request_.get_selection_request_
      : reinterpret_cast< ::iterm2::SelectionRequest_GetSelectionRequest&>(::iterm2::_SelectionRequest_GetSelectionRequest_default_instance_);
}
inline const ::iterm2::SelectionRequest_GetSelectionRequest& SelectionRequest::get_selection_request() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionRequest.get_selection_request)
  return _internal_get_selection_request();
}
inline ::iterm2::SelectionRequest_GetSelectionRequest* SelectionRequest::unsafe_arena_release_get_selection_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SelectionRequest.get_selection_request)
  if (_internal_has_get_selection_request()) {
    clear_has_request();
    ::iterm2::SelectionRequest_GetSelectionRequest* temp = request_.get_selection_request_;
    request_.get_selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SelectionRequest::unsafe_arena_set_allocated_get_selection_request(::iterm2::SelectionRequest_GetSelectionRequest* get_selection_request) {
  clear_request();
  if (get_selection_request) {
    set_has_get_selection_request();
    request_.get_selection_request_ = get_selection_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SelectionRequest.get_selection_request)
}
inline ::iterm2::SelectionRequest_GetSelectionRequest* SelectionRequest::_internal_mutable_get_selection_request() {
  if (!_internal_has_get_selection_request()) {
    clear_request();
    set_has_get_selection_request();
    request_.get_selection_request_ = CreateMaybeMessage< ::iterm2::SelectionRequest_GetSelectionRequest >(GetArenaForAllocation());
  }
  return request_.get_selection_request_;
}
inline ::iterm2::SelectionRequest_GetSelectionRequest* SelectionRequest::mutable_get_selection_request() {
  ::iterm2::SelectionRequest_GetSelectionRequest* _msg = _internal_mutable_get_selection_request();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionRequest.get_selection_request)
  return _msg;
}

// .iterm2.SelectionRequest.SetSelectionRequest set_selection_request = 2;
inline bool SelectionRequest::_internal_has_set_selection_request() const {
  return request_case() == kSetSelectionRequest;
}
inline bool SelectionRequest::has_set_selection_request() const {
  return _internal_has_set_selection_request();
}
inline void SelectionRequest::set_has_set_selection_request() {
  _oneof_case_[0] = kSetSelectionRequest;
}
inline void SelectionRequest::clear_set_selection_request() {
  if (_internal_has_set_selection_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.set_selection_request_;
    }
    clear_has_request();
  }
}
inline ::iterm2::SelectionRequest_SetSelectionRequest* SelectionRequest::release_set_selection_request() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionRequest.set_selection_request)
  if (_internal_has_set_selection_request()) {
    clear_has_request();
      ::iterm2::SelectionRequest_SetSelectionRequest* temp = request_.set_selection_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.set_selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SelectionRequest_SetSelectionRequest& SelectionRequest::_internal_set_selection_request() const {
  return _internal_has_set_selection_request()
      ? *request_.set_selection_request_
      : reinterpret_cast< ::iterm2::SelectionRequest_SetSelectionRequest&>(::iterm2::_SelectionRequest_SetSelectionRequest_default_instance_);
}
inline const ::iterm2::SelectionRequest_SetSelectionRequest& SelectionRequest::set_selection_request() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionRequest.set_selection_request)
  return _internal_set_selection_request();
}
inline ::iterm2::SelectionRequest_SetSelectionRequest* SelectionRequest::unsafe_arena_release_set_selection_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SelectionRequest.set_selection_request)
  if (_internal_has_set_selection_request()) {
    clear_has_request();
    ::iterm2::SelectionRequest_SetSelectionRequest* temp = request_.set_selection_request_;
    request_.set_selection_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SelectionRequest::unsafe_arena_set_allocated_set_selection_request(::iterm2::SelectionRequest_SetSelectionRequest* set_selection_request) {
  clear_request();
  if (set_selection_request) {
    set_has_set_selection_request();
    request_.set_selection_request_ = set_selection_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SelectionRequest.set_selection_request)
}
inline ::iterm2::SelectionRequest_SetSelectionRequest* SelectionRequest::_internal_mutable_set_selection_request() {
  if (!_internal_has_set_selection_request()) {
    clear_request();
    set_has_set_selection_request();
    request_.set_selection_request_ = CreateMaybeMessage< ::iterm2::SelectionRequest_SetSelectionRequest >(GetArenaForAllocation());
  }
  return request_.set_selection_request_;
}
inline ::iterm2::SelectionRequest_SetSelectionRequest* SelectionRequest::mutable_set_selection_request() {
  ::iterm2::SelectionRequest_SetSelectionRequest* _msg = _internal_mutable_set_selection_request();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionRequest.set_selection_request)
  return _msg;
}

inline bool SelectionRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void SelectionRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline SelectionRequest::RequestCase SelectionRequest::request_case() const {
  return SelectionRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SelectionResponse_GetSelectionResponse

// optional .iterm2.Selection selection = 2;
inline bool SelectionResponse_GetSelectionResponse::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool SelectionResponse_GetSelectionResponse::has_selection() const {
  return _internal_has_selection();
}
inline void SelectionResponse_GetSelectionResponse::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::Selection& SelectionResponse_GetSelectionResponse::_internal_selection() const {
  const ::iterm2::Selection* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Selection&>(
      ::iterm2::_Selection_default_instance_);
}
inline const ::iterm2::Selection& SelectionResponse_GetSelectionResponse::selection() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionResponse.GetSelectionResponse.selection)
  return _internal_selection();
}
inline void SelectionResponse_GetSelectionResponse::unsafe_arena_set_allocated_selection(
    ::iterm2::Selection* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SelectionResponse.GetSelectionResponse.selection)
}
inline ::iterm2::Selection* SelectionResponse_GetSelectionResponse::release_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Selection* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Selection* SelectionResponse_GetSelectionResponse::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionResponse.GetSelectionResponse.selection)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Selection* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::iterm2::Selection* SelectionResponse_GetSelectionResponse::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Selection>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::iterm2::Selection* SelectionResponse_GetSelectionResponse::mutable_selection() {
  ::iterm2::Selection* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionResponse.GetSelectionResponse.selection)
  return _msg;
}
inline void SelectionResponse_GetSelectionResponse::set_allocated_selection(::iterm2::Selection* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete selection_;
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Selection>::GetOwningArena(selection);
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionResponse.GetSelectionResponse.selection)
}

// -------------------------------------------------------------------

// SelectionResponse_SetSelectionResponse

// -------------------------------------------------------------------

// SelectionResponse

// optional .iterm2.SelectionResponse.Status status = 1;
inline bool SelectionResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SelectionResponse::has_status() const {
  return _internal_has_status();
}
inline void SelectionResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SelectionResponse_Status SelectionResponse::_internal_status() const {
  return static_cast< ::iterm2::SelectionResponse_Status >(status_);
}
inline ::iterm2::SelectionResponse_Status SelectionResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionResponse.status)
  return _internal_status();
}
inline void SelectionResponse::_internal_set_status(::iterm2::SelectionResponse_Status value) {
  assert(::iterm2::SelectionResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SelectionResponse::set_status(::iterm2::SelectionResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SelectionResponse.status)
}

// .iterm2.SelectionResponse.GetSelectionResponse get_selection_response = 2;
inline bool SelectionResponse::_internal_has_get_selection_response() const {
  return response_case() == kGetSelectionResponse;
}
inline bool SelectionResponse::has_get_selection_response() const {
  return _internal_has_get_selection_response();
}
inline void SelectionResponse::set_has_get_selection_response() {
  _oneof_case_[0] = kGetSelectionResponse;
}
inline void SelectionResponse::clear_get_selection_response() {
  if (_internal_has_get_selection_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_selection_response_;
    }
    clear_has_response();
  }
}
inline ::iterm2::SelectionResponse_GetSelectionResponse* SelectionResponse::release_get_selection_response() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionResponse.get_selection_response)
  if (_internal_has_get_selection_response()) {
    clear_has_response();
      ::iterm2::SelectionResponse_GetSelectionResponse* temp = response_.get_selection_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SelectionResponse_GetSelectionResponse& SelectionResponse::_internal_get_selection_response() const {
  return _internal_has_get_selection_response()
      ? *response_.get_selection_response_
      : reinterpret_cast< ::iterm2::SelectionResponse_GetSelectionResponse&>(::iterm2::_SelectionResponse_GetSelectionResponse_default_instance_);
}
inline const ::iterm2::SelectionResponse_GetSelectionResponse& SelectionResponse::get_selection_response() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionResponse.get_selection_response)
  return _internal_get_selection_response();
}
inline ::iterm2::SelectionResponse_GetSelectionResponse* SelectionResponse::unsafe_arena_release_get_selection_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SelectionResponse.get_selection_response)
  if (_internal_has_get_selection_response()) {
    clear_has_response();
    ::iterm2::SelectionResponse_GetSelectionResponse* temp = response_.get_selection_response_;
    response_.get_selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SelectionResponse::unsafe_arena_set_allocated_get_selection_response(::iterm2::SelectionResponse_GetSelectionResponse* get_selection_response) {
  clear_response();
  if (get_selection_response) {
    set_has_get_selection_response();
    response_.get_selection_response_ = get_selection_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SelectionResponse.get_selection_response)
}
inline ::iterm2::SelectionResponse_GetSelectionResponse* SelectionResponse::_internal_mutable_get_selection_response() {
  if (!_internal_has_get_selection_response()) {
    clear_response();
    set_has_get_selection_response();
    response_.get_selection_response_ = CreateMaybeMessage< ::iterm2::SelectionResponse_GetSelectionResponse >(GetArenaForAllocation());
  }
  return response_.get_selection_response_;
}
inline ::iterm2::SelectionResponse_GetSelectionResponse* SelectionResponse::mutable_get_selection_response() {
  ::iterm2::SelectionResponse_GetSelectionResponse* _msg = _internal_mutable_get_selection_response();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionResponse.get_selection_response)
  return _msg;
}

// .iterm2.SelectionResponse.SetSelectionResponse set_selection_response = 3;
inline bool SelectionResponse::_internal_has_set_selection_response() const {
  return response_case() == kSetSelectionResponse;
}
inline bool SelectionResponse::has_set_selection_response() const {
  return _internal_has_set_selection_response();
}
inline void SelectionResponse::set_has_set_selection_response() {
  _oneof_case_[0] = kSetSelectionResponse;
}
inline void SelectionResponse::clear_set_selection_response() {
  if (_internal_has_set_selection_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.set_selection_response_;
    }
    clear_has_response();
  }
}
inline ::iterm2::SelectionResponse_SetSelectionResponse* SelectionResponse::release_set_selection_response() {
  // @@protoc_insertion_point(field_release:iterm2.SelectionResponse.set_selection_response)
  if (_internal_has_set_selection_response()) {
    clear_has_response();
      ::iterm2::SelectionResponse_SetSelectionResponse* temp = response_.set_selection_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.set_selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SelectionResponse_SetSelectionResponse& SelectionResponse::_internal_set_selection_response() const {
  return _internal_has_set_selection_response()
      ? *response_.set_selection_response_
      : reinterpret_cast< ::iterm2::SelectionResponse_SetSelectionResponse&>(::iterm2::_SelectionResponse_SetSelectionResponse_default_instance_);
}
inline const ::iterm2::SelectionResponse_SetSelectionResponse& SelectionResponse::set_selection_response() const {
  // @@protoc_insertion_point(field_get:iterm2.SelectionResponse.set_selection_response)
  return _internal_set_selection_response();
}
inline ::iterm2::SelectionResponse_SetSelectionResponse* SelectionResponse::unsafe_arena_release_set_selection_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SelectionResponse.set_selection_response)
  if (_internal_has_set_selection_response()) {
    clear_has_response();
    ::iterm2::SelectionResponse_SetSelectionResponse* temp = response_.set_selection_response_;
    response_.set_selection_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SelectionResponse::unsafe_arena_set_allocated_set_selection_response(::iterm2::SelectionResponse_SetSelectionResponse* set_selection_response) {
  clear_response();
  if (set_selection_response) {
    set_has_set_selection_response();
    response_.set_selection_response_ = set_selection_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SelectionResponse.set_selection_response)
}
inline ::iterm2::SelectionResponse_SetSelectionResponse* SelectionResponse::_internal_mutable_set_selection_response() {
  if (!_internal_has_set_selection_response()) {
    clear_response();
    set_has_set_selection_response();
    response_.set_selection_response_ = CreateMaybeMessage< ::iterm2::SelectionResponse_SetSelectionResponse >(GetArenaForAllocation());
  }
  return response_.set_selection_response_;
}
inline ::iterm2::SelectionResponse_SetSelectionResponse* SelectionResponse::mutable_set_selection_response() {
  ::iterm2::SelectionResponse_SetSelectionResponse* _msg = _internal_mutable_set_selection_response();
  // @@protoc_insertion_point(field_mutable:iterm2.SelectionResponse.set_selection_response)
  return _msg;
}

inline bool SelectionResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void SelectionResponse::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline SelectionResponse::ResponseCase SelectionResponse::response_case() const {
  return SelectionResponse::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ColorPresetRequest_ListPresets

// -------------------------------------------------------------------

// ColorPresetRequest_GetPreset

// optional string name = 1;
inline bool ColorPresetRequest_GetPreset::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorPresetRequest_GetPreset::has_name() const {
  return _internal_has_name();
}
inline void ColorPresetRequest_GetPreset::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ColorPresetRequest_GetPreset::name() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetRequest.GetPreset.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorPresetRequest_GetPreset::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetRequest.GetPreset.name)
}
inline std::string* ColorPresetRequest_GetPreset::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetRequest.GetPreset.name)
  return _s;
}
inline const std::string& ColorPresetRequest_GetPreset::_internal_name() const {
  return name_.Get();
}
inline void ColorPresetRequest_GetPreset::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColorPresetRequest_GetPreset::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColorPresetRequest_GetPreset::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetRequest.GetPreset.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColorPresetRequest_GetPreset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetRequest.GetPreset.name)
}

// -------------------------------------------------------------------

// ColorPresetRequest

// .iterm2.ColorPresetRequest.ListPresets list_presets = 1;
inline bool ColorPresetRequest::_internal_has_list_presets() const {
  return request_case() == kListPresets;
}
inline bool ColorPresetRequest::has_list_presets() const {
  return _internal_has_list_presets();
}
inline void ColorPresetRequest::set_has_list_presets() {
  _oneof_case_[0] = kListPresets;
}
inline void ColorPresetRequest::clear_list_presets() {
  if (_internal_has_list_presets()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.list_presets_;
    }
    clear_has_request();
  }
}
inline ::iterm2::ColorPresetRequest_ListPresets* ColorPresetRequest::release_list_presets() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetRequest.list_presets)
  if (_internal_has_list_presets()) {
    clear_has_request();
      ::iterm2::ColorPresetRequest_ListPresets* temp = request_.list_presets_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.list_presets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ColorPresetRequest_ListPresets& ColorPresetRequest::_internal_list_presets() const {
  return _internal_has_list_presets()
      ? *request_.list_presets_
      : reinterpret_cast< ::iterm2::ColorPresetRequest_ListPresets&>(::iterm2::_ColorPresetRequest_ListPresets_default_instance_);
}
inline const ::iterm2::ColorPresetRequest_ListPresets& ColorPresetRequest::list_presets() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetRequest.list_presets)
  return _internal_list_presets();
}
inline ::iterm2::ColorPresetRequest_ListPresets* ColorPresetRequest::unsafe_arena_release_list_presets() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ColorPresetRequest.list_presets)
  if (_internal_has_list_presets()) {
    clear_has_request();
    ::iterm2::ColorPresetRequest_ListPresets* temp = request_.list_presets_;
    request_.list_presets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPresetRequest::unsafe_arena_set_allocated_list_presets(::iterm2::ColorPresetRequest_ListPresets* list_presets) {
  clear_request();
  if (list_presets) {
    set_has_list_presets();
    request_.list_presets_ = list_presets;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ColorPresetRequest.list_presets)
}
inline ::iterm2::ColorPresetRequest_ListPresets* ColorPresetRequest::_internal_mutable_list_presets() {
  if (!_internal_has_list_presets()) {
    clear_request();
    set_has_list_presets();
    request_.list_presets_ = CreateMaybeMessage< ::iterm2::ColorPresetRequest_ListPresets >(GetArenaForAllocation());
  }
  return request_.list_presets_;
}
inline ::iterm2::ColorPresetRequest_ListPresets* ColorPresetRequest::mutable_list_presets() {
  ::iterm2::ColorPresetRequest_ListPresets* _msg = _internal_mutable_list_presets();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetRequest.list_presets)
  return _msg;
}

// .iterm2.ColorPresetRequest.GetPreset get_preset = 2;
inline bool ColorPresetRequest::_internal_has_get_preset() const {
  return request_case() == kGetPreset;
}
inline bool ColorPresetRequest::has_get_preset() const {
  return _internal_has_get_preset();
}
inline void ColorPresetRequest::set_has_get_preset() {
  _oneof_case_[0] = kGetPreset;
}
inline void ColorPresetRequest::clear_get_preset() {
  if (_internal_has_get_preset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_preset_;
    }
    clear_has_request();
  }
}
inline ::iterm2::ColorPresetRequest_GetPreset* ColorPresetRequest::release_get_preset() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetRequest.get_preset)
  if (_internal_has_get_preset()) {
    clear_has_request();
      ::iterm2::ColorPresetRequest_GetPreset* temp = request_.get_preset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_preset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ColorPresetRequest_GetPreset& ColorPresetRequest::_internal_get_preset() const {
  return _internal_has_get_preset()
      ? *request_.get_preset_
      : reinterpret_cast< ::iterm2::ColorPresetRequest_GetPreset&>(::iterm2::_ColorPresetRequest_GetPreset_default_instance_);
}
inline const ::iterm2::ColorPresetRequest_GetPreset& ColorPresetRequest::get_preset() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetRequest.get_preset)
  return _internal_get_preset();
}
inline ::iterm2::ColorPresetRequest_GetPreset* ColorPresetRequest::unsafe_arena_release_get_preset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ColorPresetRequest.get_preset)
  if (_internal_has_get_preset()) {
    clear_has_request();
    ::iterm2::ColorPresetRequest_GetPreset* temp = request_.get_preset_;
    request_.get_preset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPresetRequest::unsafe_arena_set_allocated_get_preset(::iterm2::ColorPresetRequest_GetPreset* get_preset) {
  clear_request();
  if (get_preset) {
    set_has_get_preset();
    request_.get_preset_ = get_preset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ColorPresetRequest.get_preset)
}
inline ::iterm2::ColorPresetRequest_GetPreset* ColorPresetRequest::_internal_mutable_get_preset() {
  if (!_internal_has_get_preset()) {
    clear_request();
    set_has_get_preset();
    request_.get_preset_ = CreateMaybeMessage< ::iterm2::ColorPresetRequest_GetPreset >(GetArenaForAllocation());
  }
  return request_.get_preset_;
}
inline ::iterm2::ColorPresetRequest_GetPreset* ColorPresetRequest::mutable_get_preset() {
  ::iterm2::ColorPresetRequest_GetPreset* _msg = _internal_mutable_get_preset();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetRequest.get_preset)
  return _msg;
}

inline bool ColorPresetRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void ColorPresetRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline ColorPresetRequest::RequestCase ColorPresetRequest::request_case() const {
  return ColorPresetRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ColorPresetResponse_ListPresets

// repeated string name = 1;
inline int ColorPresetResponse_ListPresets::_internal_name_size() const {
  return name_.size();
}
inline int ColorPresetResponse_ListPresets::name_size() const {
  return _internal_name_size();
}
inline void ColorPresetResponse_ListPresets::clear_name() {
  name_.Clear();
}
inline std::string* ColorPresetResponse_ListPresets::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:iterm2.ColorPresetResponse.ListPresets.name)
  return _s;
}
inline const std::string& ColorPresetResponse_ListPresets::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& ColorPresetResponse_ListPresets::name(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.ListPresets.name)
  return _internal_name(index);
}
inline std::string* ColorPresetResponse_ListPresets::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetResponse.ListPresets.name)
  return name_.Mutable(index);
}
inline void ColorPresetResponse_ListPresets::set_name(int index, const std::string& value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.ListPresets.name)
}
inline void ColorPresetResponse_ListPresets::set_name(int index, std::string&& value) {
  name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.ListPresets.name)
}
inline void ColorPresetResponse_ListPresets::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.ColorPresetResponse.ListPresets.name)
}
inline void ColorPresetResponse_ListPresets::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.ColorPresetResponse.ListPresets.name)
}
inline std::string* ColorPresetResponse_ListPresets::_internal_add_name() {
  return name_.Add();
}
inline void ColorPresetResponse_ListPresets::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.ColorPresetResponse.ListPresets.name)
}
inline void ColorPresetResponse_ListPresets::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.ColorPresetResponse.ListPresets.name)
}
inline void ColorPresetResponse_ListPresets::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.ColorPresetResponse.ListPresets.name)
}
inline void ColorPresetResponse_ListPresets::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.ColorPresetResponse.ListPresets.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ColorPresetResponse_ListPresets::name() const {
  // @@protoc_insertion_point(field_list:iterm2.ColorPresetResponse.ListPresets.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ColorPresetResponse_ListPresets::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ColorPresetResponse.ListPresets.name)
  return &name_;
}

// -------------------------------------------------------------------

// ColorPresetResponse_GetPreset_ColorSetting

// optional float red = 1;
inline bool ColorPresetResponse_GetPreset_ColorSetting::_internal_has_red() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColorPresetResponse_GetPreset_ColorSetting::has_red() const {
  return _internal_has_red();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::clear_red() {
  red_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::_internal_red() const {
  return red_;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::red() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.ColorSetting.red)
  return _internal_red();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::_internal_set_red(float value) {
  _has_bits_[0] |= 0x00000004u;
  red_ = value;
}
inline void ColorPresetResponse_GetPreset_ColorSetting::set_red(float value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.GetPreset.ColorSetting.red)
}

// optional float green = 2;
inline bool ColorPresetResponse_GetPreset_ColorSetting::_internal_has_green() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColorPresetResponse_GetPreset_ColorSetting::has_green() const {
  return _internal_has_green();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::clear_green() {
  green_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::_internal_green() const {
  return green_;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::green() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.ColorSetting.green)
  return _internal_green();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::_internal_set_green(float value) {
  _has_bits_[0] |= 0x00000008u;
  green_ = value;
}
inline void ColorPresetResponse_GetPreset_ColorSetting::set_green(float value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.GetPreset.ColorSetting.green)
}

// optional float blue = 3;
inline bool ColorPresetResponse_GetPreset_ColorSetting::_internal_has_blue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ColorPresetResponse_GetPreset_ColorSetting::has_blue() const {
  return _internal_has_blue();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::clear_blue() {
  blue_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::_internal_blue() const {
  return blue_;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::blue() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.ColorSetting.blue)
  return _internal_blue();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::_internal_set_blue(float value) {
  _has_bits_[0] |= 0x00000010u;
  blue_ = value;
}
inline void ColorPresetResponse_GetPreset_ColorSetting::set_blue(float value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.GetPreset.ColorSetting.blue)
}

// optional float alpha = 4;
inline bool ColorPresetResponse_GetPreset_ColorSetting::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ColorPresetResponse_GetPreset_ColorSetting::has_alpha() const {
  return _internal_has_alpha();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::_internal_alpha() const {
  return alpha_;
}
inline float ColorPresetResponse_GetPreset_ColorSetting::alpha() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.ColorSetting.alpha)
  return _internal_alpha();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000020u;
  alpha_ = value;
}
inline void ColorPresetResponse_GetPreset_ColorSetting::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.GetPreset.ColorSetting.alpha)
}

// optional string color_space = 5;
inline bool ColorPresetResponse_GetPreset_ColorSetting::_internal_has_color_space() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorPresetResponse_GetPreset_ColorSetting::has_color_space() const {
  return _internal_has_color_space();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::clear_color_space() {
  color_space_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ColorPresetResponse_GetPreset_ColorSetting::color_space() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space)
  return _internal_color_space();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorPresetResponse_GetPreset_ColorSetting::set_color_space(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 color_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space)
}
inline std::string* ColorPresetResponse_GetPreset_ColorSetting::mutable_color_space() {
  std::string* _s = _internal_mutable_color_space();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space)
  return _s;
}
inline const std::string& ColorPresetResponse_GetPreset_ColorSetting::_internal_color_space() const {
  return color_space_.Get();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::_internal_set_color_space(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  color_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColorPresetResponse_GetPreset_ColorSetting::_internal_mutable_color_space() {
  _has_bits_[0] |= 0x00000001u;
  return color_space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColorPresetResponse_GetPreset_ColorSetting::release_color_space() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space)
  if (!_internal_has_color_space()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = color_space_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_space_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_space_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColorPresetResponse_GetPreset_ColorSetting::set_allocated_color_space(std::string* color_space) {
  if (color_space != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_space,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_space_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_space_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space)
}

// optional string key = 6;
inline bool ColorPresetResponse_GetPreset_ColorSetting::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColorPresetResponse_GetPreset_ColorSetting::has_key() const {
  return _internal_has_key();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ColorPresetResponse_GetPreset_ColorSetting::key() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.ColorSetting.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorPresetResponse_GetPreset_ColorSetting::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.GetPreset.ColorSetting.key)
}
inline std::string* ColorPresetResponse_GetPreset_ColorSetting::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetResponse.GetPreset.ColorSetting.key)
  return _s;
}
inline const std::string& ColorPresetResponse_GetPreset_ColorSetting::_internal_key() const {
  return key_.Get();
}
inline void ColorPresetResponse_GetPreset_ColorSetting::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColorPresetResponse_GetPreset_ColorSetting::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColorPresetResponse_GetPreset_ColorSetting::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetResponse.GetPreset.ColorSetting.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ColorPresetResponse_GetPreset_ColorSetting::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetResponse.GetPreset.ColorSetting.key)
}

// -------------------------------------------------------------------

// ColorPresetResponse_GetPreset

// repeated .iterm2.ColorPresetResponse.GetPreset.ColorSetting color_settings = 1;
inline int ColorPresetResponse_GetPreset::_internal_color_settings_size() const {
  return color_settings_.size();
}
inline int ColorPresetResponse_GetPreset::color_settings_size() const {
  return _internal_color_settings_size();
}
inline void ColorPresetResponse_GetPreset::clear_color_settings() {
  color_settings_.Clear();
}
inline ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* ColorPresetResponse_GetPreset::mutable_color_settings(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetResponse.GetPreset.color_settings)
  return color_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting >*
ColorPresetResponse_GetPreset::mutable_color_settings() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ColorPresetResponse.GetPreset.color_settings)
  return &color_settings_;
}
inline const ::iterm2::ColorPresetResponse_GetPreset_ColorSetting& ColorPresetResponse_GetPreset::_internal_color_settings(int index) const {
  return color_settings_.Get(index);
}
inline const ::iterm2::ColorPresetResponse_GetPreset_ColorSetting& ColorPresetResponse_GetPreset::color_settings(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.GetPreset.color_settings)
  return _internal_color_settings(index);
}
inline ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* ColorPresetResponse_GetPreset::_internal_add_color_settings() {
  return color_settings_.Add();
}
inline ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* ColorPresetResponse_GetPreset::add_color_settings() {
  ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* _add = _internal_add_color_settings();
  // @@protoc_insertion_point(field_add:iterm2.ColorPresetResponse.GetPreset.color_settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting >&
ColorPresetResponse_GetPreset::color_settings() const {
  // @@protoc_insertion_point(field_list:iterm2.ColorPresetResponse.GetPreset.color_settings)
  return color_settings_;
}

// -------------------------------------------------------------------

// ColorPresetResponse

// .iterm2.ColorPresetResponse.ListPresets list_presets = 1;
inline bool ColorPresetResponse::_internal_has_list_presets() const {
  return response_case() == kListPresets;
}
inline bool ColorPresetResponse::has_list_presets() const {
  return _internal_has_list_presets();
}
inline void ColorPresetResponse::set_has_list_presets() {
  _oneof_case_[0] = kListPresets;
}
inline void ColorPresetResponse::clear_list_presets() {
  if (_internal_has_list_presets()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.list_presets_;
    }
    clear_has_response();
  }
}
inline ::iterm2::ColorPresetResponse_ListPresets* ColorPresetResponse::release_list_presets() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetResponse.list_presets)
  if (_internal_has_list_presets()) {
    clear_has_response();
      ::iterm2::ColorPresetResponse_ListPresets* temp = response_.list_presets_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.list_presets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ColorPresetResponse_ListPresets& ColorPresetResponse::_internal_list_presets() const {
  return _internal_has_list_presets()
      ? *response_.list_presets_
      : reinterpret_cast< ::iterm2::ColorPresetResponse_ListPresets&>(::iterm2::_ColorPresetResponse_ListPresets_default_instance_);
}
inline const ::iterm2::ColorPresetResponse_ListPresets& ColorPresetResponse::list_presets() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.list_presets)
  return _internal_list_presets();
}
inline ::iterm2::ColorPresetResponse_ListPresets* ColorPresetResponse::unsafe_arena_release_list_presets() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ColorPresetResponse.list_presets)
  if (_internal_has_list_presets()) {
    clear_has_response();
    ::iterm2::ColorPresetResponse_ListPresets* temp = response_.list_presets_;
    response_.list_presets_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPresetResponse::unsafe_arena_set_allocated_list_presets(::iterm2::ColorPresetResponse_ListPresets* list_presets) {
  clear_response();
  if (list_presets) {
    set_has_list_presets();
    response_.list_presets_ = list_presets;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ColorPresetResponse.list_presets)
}
inline ::iterm2::ColorPresetResponse_ListPresets* ColorPresetResponse::_internal_mutable_list_presets() {
  if (!_internal_has_list_presets()) {
    clear_response();
    set_has_list_presets();
    response_.list_presets_ = CreateMaybeMessage< ::iterm2::ColorPresetResponse_ListPresets >(GetArenaForAllocation());
  }
  return response_.list_presets_;
}
inline ::iterm2::ColorPresetResponse_ListPresets* ColorPresetResponse::mutable_list_presets() {
  ::iterm2::ColorPresetResponse_ListPresets* _msg = _internal_mutable_list_presets();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetResponse.list_presets)
  return _msg;
}

// .iterm2.ColorPresetResponse.GetPreset get_preset = 2;
inline bool ColorPresetResponse::_internal_has_get_preset() const {
  return response_case() == kGetPreset;
}
inline bool ColorPresetResponse::has_get_preset() const {
  return _internal_has_get_preset();
}
inline void ColorPresetResponse::set_has_get_preset() {
  _oneof_case_[0] = kGetPreset;
}
inline void ColorPresetResponse::clear_get_preset() {
  if (_internal_has_get_preset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_preset_;
    }
    clear_has_response();
  }
}
inline ::iterm2::ColorPresetResponse_GetPreset* ColorPresetResponse::release_get_preset() {
  // @@protoc_insertion_point(field_release:iterm2.ColorPresetResponse.get_preset)
  if (_internal_has_get_preset()) {
    clear_has_response();
      ::iterm2::ColorPresetResponse_GetPreset* temp = response_.get_preset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_preset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ColorPresetResponse_GetPreset& ColorPresetResponse::_internal_get_preset() const {
  return _internal_has_get_preset()
      ? *response_.get_preset_
      : reinterpret_cast< ::iterm2::ColorPresetResponse_GetPreset&>(::iterm2::_ColorPresetResponse_GetPreset_default_instance_);
}
inline const ::iterm2::ColorPresetResponse_GetPreset& ColorPresetResponse::get_preset() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.get_preset)
  return _internal_get_preset();
}
inline ::iterm2::ColorPresetResponse_GetPreset* ColorPresetResponse::unsafe_arena_release_get_preset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.ColorPresetResponse.get_preset)
  if (_internal_has_get_preset()) {
    clear_has_response();
    ::iterm2::ColorPresetResponse_GetPreset* temp = response_.get_preset_;
    response_.get_preset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPresetResponse::unsafe_arena_set_allocated_get_preset(::iterm2::ColorPresetResponse_GetPreset* get_preset) {
  clear_response();
  if (get_preset) {
    set_has_get_preset();
    response_.get_preset_ = get_preset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ColorPresetResponse.get_preset)
}
inline ::iterm2::ColorPresetResponse_GetPreset* ColorPresetResponse::_internal_mutable_get_preset() {
  if (!_internal_has_get_preset()) {
    clear_response();
    set_has_get_preset();
    response_.get_preset_ = CreateMaybeMessage< ::iterm2::ColorPresetResponse_GetPreset >(GetArenaForAllocation());
  }
  return response_.get_preset_;
}
inline ::iterm2::ColorPresetResponse_GetPreset* ColorPresetResponse::mutable_get_preset() {
  ::iterm2::ColorPresetResponse_GetPreset* _msg = _internal_mutable_get_preset();
  // @@protoc_insertion_point(field_mutable:iterm2.ColorPresetResponse.get_preset)
  return _msg;
}

// optional .iterm2.ColorPresetResponse.Status status = 3;
inline bool ColorPresetResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorPresetResponse::has_status() const {
  return _internal_has_status();
}
inline void ColorPresetResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::ColorPresetResponse_Status ColorPresetResponse::_internal_status() const {
  return static_cast< ::iterm2::ColorPresetResponse_Status >(status_);
}
inline ::iterm2::ColorPresetResponse_Status ColorPresetResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.ColorPresetResponse.status)
  return _internal_status();
}
inline void ColorPresetResponse::_internal_set_status(::iterm2::ColorPresetResponse_Status value) {
  assert(::iterm2::ColorPresetResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void ColorPresetResponse::set_status(::iterm2::ColorPresetResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.ColorPresetResponse.status)
}

inline bool ColorPresetResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ColorPresetResponse::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ColorPresetResponse::ResponseCase ColorPresetResponse::response_case() const {
  return ColorPresetResponse::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PreferencesRequest_Request_SetPreference

// optional string key = 1;
inline bool PreferencesRequest_Request_SetPreference::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesRequest_Request_SetPreference::has_key() const {
  return _internal_has_key();
}
inline void PreferencesRequest_Request_SetPreference::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreferencesRequest_Request_SetPreference::key() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.SetPreference.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreferencesRequest_Request_SetPreference::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PreferencesRequest.Request.SetPreference.key)
}
inline std::string* PreferencesRequest_Request_SetPreference::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.SetPreference.key)
  return _s;
}
inline const std::string& PreferencesRequest_Request_SetPreference::_internal_key() const {
  return key_.Get();
}
inline void PreferencesRequest_Request_SetPreference::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_SetPreference::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_SetPreference::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.SetPreference.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreferencesRequest_Request_SetPreference::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.SetPreference.key)
}

// optional string json_value = 2;
inline bool PreferencesRequest_Request_SetPreference::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PreferencesRequest_Request_SetPreference::has_json_value() const {
  return _internal_has_json_value();
}
inline void PreferencesRequest_Request_SetPreference::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PreferencesRequest_Request_SetPreference::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.SetPreference.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreferencesRequest_Request_SetPreference::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PreferencesRequest.Request.SetPreference.json_value)
}
inline std::string* PreferencesRequest_Request_SetPreference::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.SetPreference.json_value)
  return _s;
}
inline const std::string& PreferencesRequest_Request_SetPreference::_internal_json_value() const {
  return json_value_.Get();
}
inline void PreferencesRequest_Request_SetPreference::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_SetPreference::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000002u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_SetPreference::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.SetPreference.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreferencesRequest_Request_SetPreference::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.SetPreference.json_value)
}

// -------------------------------------------------------------------

// PreferencesRequest_Request_GetPreference

// optional string key = 1;
inline bool PreferencesRequest_Request_GetPreference::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesRequest_Request_GetPreference::has_key() const {
  return _internal_has_key();
}
inline void PreferencesRequest_Request_GetPreference::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreferencesRequest_Request_GetPreference::key() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.GetPreference.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreferencesRequest_Request_GetPreference::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PreferencesRequest.Request.GetPreference.key)
}
inline std::string* PreferencesRequest_Request_GetPreference::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.GetPreference.key)
  return _s;
}
inline const std::string& PreferencesRequest_Request_GetPreference::_internal_key() const {
  return key_.Get();
}
inline void PreferencesRequest_Request_GetPreference::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_GetPreference::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_GetPreference::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.GetPreference.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreferencesRequest_Request_GetPreference::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.GetPreference.key)
}

// -------------------------------------------------------------------

// PreferencesRequest_Request_SetDefaultProfile

// optional string guid = 1;
inline bool PreferencesRequest_Request_SetDefaultProfile::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesRequest_Request_SetDefaultProfile::has_guid() const {
  return _internal_has_guid();
}
inline void PreferencesRequest_Request_SetDefaultProfile::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreferencesRequest_Request_SetDefaultProfile::guid() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.SetDefaultProfile.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreferencesRequest_Request_SetDefaultProfile::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PreferencesRequest.Request.SetDefaultProfile.guid)
}
inline std::string* PreferencesRequest_Request_SetDefaultProfile::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.SetDefaultProfile.guid)
  return _s;
}
inline const std::string& PreferencesRequest_Request_SetDefaultProfile::_internal_guid() const {
  return guid_.Get();
}
inline void PreferencesRequest_Request_SetDefaultProfile::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_SetDefaultProfile::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreferencesRequest_Request_SetDefaultProfile::release_guid() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.SetDefaultProfile.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreferencesRequest_Request_SetDefaultProfile::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.SetDefaultProfile.guid)
}

// -------------------------------------------------------------------

// PreferencesRequest_Request_GetDefaultProfile

// -------------------------------------------------------------------

// PreferencesRequest_Request

// .iterm2.PreferencesRequest.Request.SetPreference set_preference_request = 1;
inline bool PreferencesRequest_Request::_internal_has_set_preference_request() const {
  return request_case() == kSetPreferenceRequest;
}
inline bool PreferencesRequest_Request::has_set_preference_request() const {
  return _internal_has_set_preference_request();
}
inline void PreferencesRequest_Request::set_has_set_preference_request() {
  _oneof_case_[0] = kSetPreferenceRequest;
}
inline void PreferencesRequest_Request::clear_set_preference_request() {
  if (_internal_has_set_preference_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.set_preference_request_;
    }
    clear_has_request();
  }
}
inline ::iterm2::PreferencesRequest_Request_SetPreference* PreferencesRequest_Request::release_set_preference_request() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.set_preference_request)
  if (_internal_has_set_preference_request()) {
    clear_has_request();
      ::iterm2::PreferencesRequest_Request_SetPreference* temp = request_.set_preference_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.set_preference_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesRequest_Request_SetPreference& PreferencesRequest_Request::_internal_set_preference_request() const {
  return _internal_has_set_preference_request()
      ? *request_.set_preference_request_
      : reinterpret_cast< ::iterm2::PreferencesRequest_Request_SetPreference&>(::iterm2::_PreferencesRequest_Request_SetPreference_default_instance_);
}
inline const ::iterm2::PreferencesRequest_Request_SetPreference& PreferencesRequest_Request::set_preference_request() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.set_preference_request)
  return _internal_set_preference_request();
}
inline ::iterm2::PreferencesRequest_Request_SetPreference* PreferencesRequest_Request::unsafe_arena_release_set_preference_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesRequest.Request.set_preference_request)
  if (_internal_has_set_preference_request()) {
    clear_has_request();
    ::iterm2::PreferencesRequest_Request_SetPreference* temp = request_.set_preference_request_;
    request_.set_preference_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesRequest_Request::unsafe_arena_set_allocated_set_preference_request(::iterm2::PreferencesRequest_Request_SetPreference* set_preference_request) {
  clear_request();
  if (set_preference_request) {
    set_has_set_preference_request();
    request_.set_preference_request_ = set_preference_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesRequest.Request.set_preference_request)
}
inline ::iterm2::PreferencesRequest_Request_SetPreference* PreferencesRequest_Request::_internal_mutable_set_preference_request() {
  if (!_internal_has_set_preference_request()) {
    clear_request();
    set_has_set_preference_request();
    request_.set_preference_request_ = CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_SetPreference >(GetArenaForAllocation());
  }
  return request_.set_preference_request_;
}
inline ::iterm2::PreferencesRequest_Request_SetPreference* PreferencesRequest_Request::mutable_set_preference_request() {
  ::iterm2::PreferencesRequest_Request_SetPreference* _msg = _internal_mutable_set_preference_request();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.set_preference_request)
  return _msg;
}

// .iterm2.PreferencesRequest.Request.GetPreference get_preference_request = 2;
inline bool PreferencesRequest_Request::_internal_has_get_preference_request() const {
  return request_case() == kGetPreferenceRequest;
}
inline bool PreferencesRequest_Request::has_get_preference_request() const {
  return _internal_has_get_preference_request();
}
inline void PreferencesRequest_Request::set_has_get_preference_request() {
  _oneof_case_[0] = kGetPreferenceRequest;
}
inline void PreferencesRequest_Request::clear_get_preference_request() {
  if (_internal_has_get_preference_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_preference_request_;
    }
    clear_has_request();
  }
}
inline ::iterm2::PreferencesRequest_Request_GetPreference* PreferencesRequest_Request::release_get_preference_request() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.get_preference_request)
  if (_internal_has_get_preference_request()) {
    clear_has_request();
      ::iterm2::PreferencesRequest_Request_GetPreference* temp = request_.get_preference_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_preference_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesRequest_Request_GetPreference& PreferencesRequest_Request::_internal_get_preference_request() const {
  return _internal_has_get_preference_request()
      ? *request_.get_preference_request_
      : reinterpret_cast< ::iterm2::PreferencesRequest_Request_GetPreference&>(::iterm2::_PreferencesRequest_Request_GetPreference_default_instance_);
}
inline const ::iterm2::PreferencesRequest_Request_GetPreference& PreferencesRequest_Request::get_preference_request() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.get_preference_request)
  return _internal_get_preference_request();
}
inline ::iterm2::PreferencesRequest_Request_GetPreference* PreferencesRequest_Request::unsafe_arena_release_get_preference_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesRequest.Request.get_preference_request)
  if (_internal_has_get_preference_request()) {
    clear_has_request();
    ::iterm2::PreferencesRequest_Request_GetPreference* temp = request_.get_preference_request_;
    request_.get_preference_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesRequest_Request::unsafe_arena_set_allocated_get_preference_request(::iterm2::PreferencesRequest_Request_GetPreference* get_preference_request) {
  clear_request();
  if (get_preference_request) {
    set_has_get_preference_request();
    request_.get_preference_request_ = get_preference_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesRequest.Request.get_preference_request)
}
inline ::iterm2::PreferencesRequest_Request_GetPreference* PreferencesRequest_Request::_internal_mutable_get_preference_request() {
  if (!_internal_has_get_preference_request()) {
    clear_request();
    set_has_get_preference_request();
    request_.get_preference_request_ = CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_GetPreference >(GetArenaForAllocation());
  }
  return request_.get_preference_request_;
}
inline ::iterm2::PreferencesRequest_Request_GetPreference* PreferencesRequest_Request::mutable_get_preference_request() {
  ::iterm2::PreferencesRequest_Request_GetPreference* _msg = _internal_mutable_get_preference_request();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.get_preference_request)
  return _msg;
}

// .iterm2.PreferencesRequest.Request.SetDefaultProfile set_default_profile_request = 3;
inline bool PreferencesRequest_Request::_internal_has_set_default_profile_request() const {
  return request_case() == kSetDefaultProfileRequest;
}
inline bool PreferencesRequest_Request::has_set_default_profile_request() const {
  return _internal_has_set_default_profile_request();
}
inline void PreferencesRequest_Request::set_has_set_default_profile_request() {
  _oneof_case_[0] = kSetDefaultProfileRequest;
}
inline void PreferencesRequest_Request::clear_set_default_profile_request() {
  if (_internal_has_set_default_profile_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.set_default_profile_request_;
    }
    clear_has_request();
  }
}
inline ::iterm2::PreferencesRequest_Request_SetDefaultProfile* PreferencesRequest_Request::release_set_default_profile_request() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.set_default_profile_request)
  if (_internal_has_set_default_profile_request()) {
    clear_has_request();
      ::iterm2::PreferencesRequest_Request_SetDefaultProfile* temp = request_.set_default_profile_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.set_default_profile_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesRequest_Request_SetDefaultProfile& PreferencesRequest_Request::_internal_set_default_profile_request() const {
  return _internal_has_set_default_profile_request()
      ? *request_.set_default_profile_request_
      : reinterpret_cast< ::iterm2::PreferencesRequest_Request_SetDefaultProfile&>(::iterm2::_PreferencesRequest_Request_SetDefaultProfile_default_instance_);
}
inline const ::iterm2::PreferencesRequest_Request_SetDefaultProfile& PreferencesRequest_Request::set_default_profile_request() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.set_default_profile_request)
  return _internal_set_default_profile_request();
}
inline ::iterm2::PreferencesRequest_Request_SetDefaultProfile* PreferencesRequest_Request::unsafe_arena_release_set_default_profile_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesRequest.Request.set_default_profile_request)
  if (_internal_has_set_default_profile_request()) {
    clear_has_request();
    ::iterm2::PreferencesRequest_Request_SetDefaultProfile* temp = request_.set_default_profile_request_;
    request_.set_default_profile_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesRequest_Request::unsafe_arena_set_allocated_set_default_profile_request(::iterm2::PreferencesRequest_Request_SetDefaultProfile* set_default_profile_request) {
  clear_request();
  if (set_default_profile_request) {
    set_has_set_default_profile_request();
    request_.set_default_profile_request_ = set_default_profile_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesRequest.Request.set_default_profile_request)
}
inline ::iterm2::PreferencesRequest_Request_SetDefaultProfile* PreferencesRequest_Request::_internal_mutable_set_default_profile_request() {
  if (!_internal_has_set_default_profile_request()) {
    clear_request();
    set_has_set_default_profile_request();
    request_.set_default_profile_request_ = CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_SetDefaultProfile >(GetArenaForAllocation());
  }
  return request_.set_default_profile_request_;
}
inline ::iterm2::PreferencesRequest_Request_SetDefaultProfile* PreferencesRequest_Request::mutable_set_default_profile_request() {
  ::iterm2::PreferencesRequest_Request_SetDefaultProfile* _msg = _internal_mutable_set_default_profile_request();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.set_default_profile_request)
  return _msg;
}

// .iterm2.PreferencesRequest.Request.GetDefaultProfile get_default_profile_request = 4;
inline bool PreferencesRequest_Request::_internal_has_get_default_profile_request() const {
  return request_case() == kGetDefaultProfileRequest;
}
inline bool PreferencesRequest_Request::has_get_default_profile_request() const {
  return _internal_has_get_default_profile_request();
}
inline void PreferencesRequest_Request::set_has_get_default_profile_request() {
  _oneof_case_[0] = kGetDefaultProfileRequest;
}
inline void PreferencesRequest_Request::clear_get_default_profile_request() {
  if (_internal_has_get_default_profile_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_default_profile_request_;
    }
    clear_has_request();
  }
}
inline ::iterm2::PreferencesRequest_Request_GetDefaultProfile* PreferencesRequest_Request::release_get_default_profile_request() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesRequest.Request.get_default_profile_request)
  if (_internal_has_get_default_profile_request()) {
    clear_has_request();
      ::iterm2::PreferencesRequest_Request_GetDefaultProfile* temp = request_.get_default_profile_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_default_profile_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesRequest_Request_GetDefaultProfile& PreferencesRequest_Request::_internal_get_default_profile_request() const {
  return _internal_has_get_default_profile_request()
      ? *request_.get_default_profile_request_
      : reinterpret_cast< ::iterm2::PreferencesRequest_Request_GetDefaultProfile&>(::iterm2::_PreferencesRequest_Request_GetDefaultProfile_default_instance_);
}
inline const ::iterm2::PreferencesRequest_Request_GetDefaultProfile& PreferencesRequest_Request::get_default_profile_request() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.Request.get_default_profile_request)
  return _internal_get_default_profile_request();
}
inline ::iterm2::PreferencesRequest_Request_GetDefaultProfile* PreferencesRequest_Request::unsafe_arena_release_get_default_profile_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesRequest.Request.get_default_profile_request)
  if (_internal_has_get_default_profile_request()) {
    clear_has_request();
    ::iterm2::PreferencesRequest_Request_GetDefaultProfile* temp = request_.get_default_profile_request_;
    request_.get_default_profile_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesRequest_Request::unsafe_arena_set_allocated_get_default_profile_request(::iterm2::PreferencesRequest_Request_GetDefaultProfile* get_default_profile_request) {
  clear_request();
  if (get_default_profile_request) {
    set_has_get_default_profile_request();
    request_.get_default_profile_request_ = get_default_profile_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesRequest.Request.get_default_profile_request)
}
inline ::iterm2::PreferencesRequest_Request_GetDefaultProfile* PreferencesRequest_Request::_internal_mutable_get_default_profile_request() {
  if (!_internal_has_get_default_profile_request()) {
    clear_request();
    set_has_get_default_profile_request();
    request_.get_default_profile_request_ = CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_GetDefaultProfile >(GetArenaForAllocation());
  }
  return request_.get_default_profile_request_;
}
inline ::iterm2::PreferencesRequest_Request_GetDefaultProfile* PreferencesRequest_Request::mutable_get_default_profile_request() {
  ::iterm2::PreferencesRequest_Request_GetDefaultProfile* _msg = _internal_mutable_get_default_profile_request();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.Request.get_default_profile_request)
  return _msg;
}

inline bool PreferencesRequest_Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void PreferencesRequest_Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline PreferencesRequest_Request::RequestCase PreferencesRequest_Request::request_case() const {
  return PreferencesRequest_Request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PreferencesRequest

// repeated .iterm2.PreferencesRequest.Request requests = 1;
inline int PreferencesRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int PreferencesRequest::requests_size() const {
  return _internal_requests_size();
}
inline void PreferencesRequest::clear_requests() {
  requests_.Clear();
}
inline ::iterm2::PreferencesRequest_Request* PreferencesRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesRequest_Request >*
PreferencesRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.PreferencesRequest.requests)
  return &requests_;
}
inline const ::iterm2::PreferencesRequest_Request& PreferencesRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::iterm2::PreferencesRequest_Request& PreferencesRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesRequest.requests)
  return _internal_requests(index);
}
inline ::iterm2::PreferencesRequest_Request* PreferencesRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::iterm2::PreferencesRequest_Request* PreferencesRequest::add_requests() {
  ::iterm2::PreferencesRequest_Request* _add = _internal_add_requests();
  // @@protoc_insertion_point(field_add:iterm2.PreferencesRequest.requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesRequest_Request >&
PreferencesRequest::requests() const {
  // @@protoc_insertion_point(field_list:iterm2.PreferencesRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// PreferencesResponse_Result_SetPreferenceResult

// optional .iterm2.PreferencesResponse.Result.SetPreferenceResult.Status status = 1;
inline bool PreferencesResponse_Result_SetPreferenceResult::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesResponse_Result_SetPreferenceResult::has_status() const {
  return _internal_has_status();
}
inline void PreferencesResponse_Result_SetPreferenceResult::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::_internal_status() const {
  return static_cast< ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status >(status_);
}
inline ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::status() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.SetPreferenceResult.status)
  return _internal_status();
}
inline void PreferencesResponse_Result_SetPreferenceResult::_internal_set_status(::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status value) {
  assert(::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void PreferencesResponse_Result_SetPreferenceResult::set_status(::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.PreferencesResponse.Result.SetPreferenceResult.status)
}

// -------------------------------------------------------------------

// PreferencesResponse_Result_GetPreferenceResult

// optional string json_value = 1;
inline bool PreferencesResponse_Result_GetPreferenceResult::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesResponse_Result_GetPreferenceResult::has_json_value() const {
  return _internal_has_json_value();
}
inline void PreferencesResponse_Result_GetPreferenceResult::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreferencesResponse_Result_GetPreferenceResult::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreferencesResponse_Result_GetPreferenceResult::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value)
}
inline std::string* PreferencesResponse_Result_GetPreferenceResult::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value)
  return _s;
}
inline const std::string& PreferencesResponse_Result_GetPreferenceResult::_internal_json_value() const {
  return json_value_.Get();
}
inline void PreferencesResponse_Result_GetPreferenceResult::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreferencesResponse_Result_GetPreferenceResult::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000001u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreferencesResponse_Result_GetPreferenceResult::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreferencesResponse_Result_GetPreferenceResult::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value)
}

// -------------------------------------------------------------------

// PreferencesResponse_Result_SetDefaultProfileResult

// optional .iterm2.PreferencesResponse.Result.SetDefaultProfileResult.Status status = 1;
inline bool PreferencesResponse_Result_SetDefaultProfileResult::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesResponse_Result_SetDefaultProfileResult::has_status() const {
  return _internal_has_status();
}
inline void PreferencesResponse_Result_SetDefaultProfileResult::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult::_internal_status() const {
  return static_cast< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status >(status_);
}
inline ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult::status() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.SetDefaultProfileResult.status)
  return _internal_status();
}
inline void PreferencesResponse_Result_SetDefaultProfileResult::_internal_set_status(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status value) {
  assert(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void PreferencesResponse_Result_SetDefaultProfileResult::set_status(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.PreferencesResponse.Result.SetDefaultProfileResult.status)
}

// -------------------------------------------------------------------

// PreferencesResponse_Result_UnrecognizedResult

// -------------------------------------------------------------------

// PreferencesResponse_Result_GetDefaultProfileResult

// optional string guid = 1;
inline bool PreferencesResponse_Result_GetDefaultProfileResult::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreferencesResponse_Result_GetDefaultProfileResult::has_guid() const {
  return _internal_has_guid();
}
inline void PreferencesResponse_Result_GetDefaultProfileResult::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreferencesResponse_Result_GetDefaultProfileResult::guid() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PreferencesResponse_Result_GetDefaultProfileResult::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid)
}
inline std::string* PreferencesResponse_Result_GetDefaultProfileResult::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid)
  return _s;
}
inline const std::string& PreferencesResponse_Result_GetDefaultProfileResult::_internal_guid() const {
  return guid_.Get();
}
inline void PreferencesResponse_Result_GetDefaultProfileResult::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PreferencesResponse_Result_GetDefaultProfileResult::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PreferencesResponse_Result_GetDefaultProfileResult::release_guid() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PreferencesResponse_Result_GetDefaultProfileResult::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid)
}

// -------------------------------------------------------------------

// PreferencesResponse_Result

// .iterm2.PreferencesResponse.Result.UnrecognizedResult unrecognized_request = 1;
inline bool PreferencesResponse_Result::_internal_has_unrecognized_request() const {
  return result_case() == kUnrecognizedRequest;
}
inline bool PreferencesResponse_Result::has_unrecognized_request() const {
  return _internal_has_unrecognized_request();
}
inline void PreferencesResponse_Result::set_has_unrecognized_request() {
  _oneof_case_[0] = kUnrecognizedRequest;
}
inline void PreferencesResponse_Result::clear_unrecognized_request() {
  if (_internal_has_unrecognized_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.unrecognized_request_;
    }
    clear_has_result();
  }
}
inline ::iterm2::PreferencesResponse_Result_UnrecognizedResult* PreferencesResponse_Result::release_unrecognized_request() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.unrecognized_request)
  if (_internal_has_unrecognized_request()) {
    clear_has_result();
      ::iterm2::PreferencesResponse_Result_UnrecognizedResult* temp = result_.unrecognized_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.unrecognized_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesResponse_Result_UnrecognizedResult& PreferencesResponse_Result::_internal_unrecognized_request() const {
  return _internal_has_unrecognized_request()
      ? *result_.unrecognized_request_
      : reinterpret_cast< ::iterm2::PreferencesResponse_Result_UnrecognizedResult&>(::iterm2::_PreferencesResponse_Result_UnrecognizedResult_default_instance_);
}
inline const ::iterm2::PreferencesResponse_Result_UnrecognizedResult& PreferencesResponse_Result::unrecognized_request() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.unrecognized_request)
  return _internal_unrecognized_request();
}
inline ::iterm2::PreferencesResponse_Result_UnrecognizedResult* PreferencesResponse_Result::unsafe_arena_release_unrecognized_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesResponse.Result.unrecognized_request)
  if (_internal_has_unrecognized_request()) {
    clear_has_result();
    ::iterm2::PreferencesResponse_Result_UnrecognizedResult* temp = result_.unrecognized_request_;
    result_.unrecognized_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesResponse_Result::unsafe_arena_set_allocated_unrecognized_request(::iterm2::PreferencesResponse_Result_UnrecognizedResult* unrecognized_request) {
  clear_result();
  if (unrecognized_request) {
    set_has_unrecognized_request();
    result_.unrecognized_request_ = unrecognized_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesResponse.Result.unrecognized_request)
}
inline ::iterm2::PreferencesResponse_Result_UnrecognizedResult* PreferencesResponse_Result::_internal_mutable_unrecognized_request() {
  if (!_internal_has_unrecognized_request()) {
    clear_result();
    set_has_unrecognized_request();
    result_.unrecognized_request_ = CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_UnrecognizedResult >(GetArenaForAllocation());
  }
  return result_.unrecognized_request_;
}
inline ::iterm2::PreferencesResponse_Result_UnrecognizedResult* PreferencesResponse_Result::mutable_unrecognized_request() {
  ::iterm2::PreferencesResponse_Result_UnrecognizedResult* _msg = _internal_mutable_unrecognized_request();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.unrecognized_request)
  return _msg;
}

// .iterm2.PreferencesResponse.Result.SetPreferenceResult set_preference_result = 2;
inline bool PreferencesResponse_Result::_internal_has_set_preference_result() const {
  return result_case() == kSetPreferenceResult;
}
inline bool PreferencesResponse_Result::has_set_preference_result() const {
  return _internal_has_set_preference_result();
}
inline void PreferencesResponse_Result::set_has_set_preference_result() {
  _oneof_case_[0] = kSetPreferenceResult;
}
inline void PreferencesResponse_Result::clear_set_preference_result() {
  if (_internal_has_set_preference_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.set_preference_result_;
    }
    clear_has_result();
  }
}
inline ::iterm2::PreferencesResponse_Result_SetPreferenceResult* PreferencesResponse_Result::release_set_preference_result() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.set_preference_result)
  if (_internal_has_set_preference_result()) {
    clear_has_result();
      ::iterm2::PreferencesResponse_Result_SetPreferenceResult* temp = result_.set_preference_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.set_preference_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesResponse_Result_SetPreferenceResult& PreferencesResponse_Result::_internal_set_preference_result() const {
  return _internal_has_set_preference_result()
      ? *result_.set_preference_result_
      : reinterpret_cast< ::iterm2::PreferencesResponse_Result_SetPreferenceResult&>(::iterm2::_PreferencesResponse_Result_SetPreferenceResult_default_instance_);
}
inline const ::iterm2::PreferencesResponse_Result_SetPreferenceResult& PreferencesResponse_Result::set_preference_result() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.set_preference_result)
  return _internal_set_preference_result();
}
inline ::iterm2::PreferencesResponse_Result_SetPreferenceResult* PreferencesResponse_Result::unsafe_arena_release_set_preference_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesResponse.Result.set_preference_result)
  if (_internal_has_set_preference_result()) {
    clear_has_result();
    ::iterm2::PreferencesResponse_Result_SetPreferenceResult* temp = result_.set_preference_result_;
    result_.set_preference_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesResponse_Result::unsafe_arena_set_allocated_set_preference_result(::iterm2::PreferencesResponse_Result_SetPreferenceResult* set_preference_result) {
  clear_result();
  if (set_preference_result) {
    set_has_set_preference_result();
    result_.set_preference_result_ = set_preference_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesResponse.Result.set_preference_result)
}
inline ::iterm2::PreferencesResponse_Result_SetPreferenceResult* PreferencesResponse_Result::_internal_mutable_set_preference_result() {
  if (!_internal_has_set_preference_result()) {
    clear_result();
    set_has_set_preference_result();
    result_.set_preference_result_ = CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_SetPreferenceResult >(GetArenaForAllocation());
  }
  return result_.set_preference_result_;
}
inline ::iterm2::PreferencesResponse_Result_SetPreferenceResult* PreferencesResponse_Result::mutable_set_preference_result() {
  ::iterm2::PreferencesResponse_Result_SetPreferenceResult* _msg = _internal_mutable_set_preference_result();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.set_preference_result)
  return _msg;
}

// .iterm2.PreferencesResponse.Result.GetPreferenceResult get_preference_result = 3;
inline bool PreferencesResponse_Result::_internal_has_get_preference_result() const {
  return result_case() == kGetPreferenceResult;
}
inline bool PreferencesResponse_Result::has_get_preference_result() const {
  return _internal_has_get_preference_result();
}
inline void PreferencesResponse_Result::set_has_get_preference_result() {
  _oneof_case_[0] = kGetPreferenceResult;
}
inline void PreferencesResponse_Result::clear_get_preference_result() {
  if (_internal_has_get_preference_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.get_preference_result_;
    }
    clear_has_result();
  }
}
inline ::iterm2::PreferencesResponse_Result_GetPreferenceResult* PreferencesResponse_Result::release_get_preference_result() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.get_preference_result)
  if (_internal_has_get_preference_result()) {
    clear_has_result();
      ::iterm2::PreferencesResponse_Result_GetPreferenceResult* temp = result_.get_preference_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.get_preference_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesResponse_Result_GetPreferenceResult& PreferencesResponse_Result::_internal_get_preference_result() const {
  return _internal_has_get_preference_result()
      ? *result_.get_preference_result_
      : reinterpret_cast< ::iterm2::PreferencesResponse_Result_GetPreferenceResult&>(::iterm2::_PreferencesResponse_Result_GetPreferenceResult_default_instance_);
}
inline const ::iterm2::PreferencesResponse_Result_GetPreferenceResult& PreferencesResponse_Result::get_preference_result() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.get_preference_result)
  return _internal_get_preference_result();
}
inline ::iterm2::PreferencesResponse_Result_GetPreferenceResult* PreferencesResponse_Result::unsafe_arena_release_get_preference_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesResponse.Result.get_preference_result)
  if (_internal_has_get_preference_result()) {
    clear_has_result();
    ::iterm2::PreferencesResponse_Result_GetPreferenceResult* temp = result_.get_preference_result_;
    result_.get_preference_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesResponse_Result::unsafe_arena_set_allocated_get_preference_result(::iterm2::PreferencesResponse_Result_GetPreferenceResult* get_preference_result) {
  clear_result();
  if (get_preference_result) {
    set_has_get_preference_result();
    result_.get_preference_result_ = get_preference_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesResponse.Result.get_preference_result)
}
inline ::iterm2::PreferencesResponse_Result_GetPreferenceResult* PreferencesResponse_Result::_internal_mutable_get_preference_result() {
  if (!_internal_has_get_preference_result()) {
    clear_result();
    set_has_get_preference_result();
    result_.get_preference_result_ = CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_GetPreferenceResult >(GetArenaForAllocation());
  }
  return result_.get_preference_result_;
}
inline ::iterm2::PreferencesResponse_Result_GetPreferenceResult* PreferencesResponse_Result::mutable_get_preference_result() {
  ::iterm2::PreferencesResponse_Result_GetPreferenceResult* _msg = _internal_mutable_get_preference_result();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.get_preference_result)
  return _msg;
}

// .iterm2.PreferencesResponse.Result.SetDefaultProfileResult set_default_profile_result = 4;
inline bool PreferencesResponse_Result::_internal_has_set_default_profile_result() const {
  return result_case() == kSetDefaultProfileResult;
}
inline bool PreferencesResponse_Result::has_set_default_profile_result() const {
  return _internal_has_set_default_profile_result();
}
inline void PreferencesResponse_Result::set_has_set_default_profile_result() {
  _oneof_case_[0] = kSetDefaultProfileResult;
}
inline void PreferencesResponse_Result::clear_set_default_profile_result() {
  if (_internal_has_set_default_profile_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.set_default_profile_result_;
    }
    clear_has_result();
  }
}
inline ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* PreferencesResponse_Result::release_set_default_profile_result() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.set_default_profile_result)
  if (_internal_has_set_default_profile_result()) {
    clear_has_result();
      ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* temp = result_.set_default_profile_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.set_default_profile_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult& PreferencesResponse_Result::_internal_set_default_profile_result() const {
  return _internal_has_set_default_profile_result()
      ? *result_.set_default_profile_result_
      : reinterpret_cast< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult&>(::iterm2::_PreferencesResponse_Result_SetDefaultProfileResult_default_instance_);
}
inline const ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult& PreferencesResponse_Result::set_default_profile_result() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.set_default_profile_result)
  return _internal_set_default_profile_result();
}
inline ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* PreferencesResponse_Result::unsafe_arena_release_set_default_profile_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesResponse.Result.set_default_profile_result)
  if (_internal_has_set_default_profile_result()) {
    clear_has_result();
    ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* temp = result_.set_default_profile_result_;
    result_.set_default_profile_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesResponse_Result::unsafe_arena_set_allocated_set_default_profile_result(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* set_default_profile_result) {
  clear_result();
  if (set_default_profile_result) {
    set_has_set_default_profile_result();
    result_.set_default_profile_result_ = set_default_profile_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesResponse.Result.set_default_profile_result)
}
inline ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* PreferencesResponse_Result::_internal_mutable_set_default_profile_result() {
  if (!_internal_has_set_default_profile_result()) {
    clear_result();
    set_has_set_default_profile_result();
    result_.set_default_profile_result_ = CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult >(GetArenaForAllocation());
  }
  return result_.set_default_profile_result_;
}
inline ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* PreferencesResponse_Result::mutable_set_default_profile_result() {
  ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* _msg = _internal_mutable_set_default_profile_result();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.set_default_profile_result)
  return _msg;
}

// .iterm2.PreferencesResponse.Result.GetDefaultProfileResult get_default_profile_result = 5;
inline bool PreferencesResponse_Result::_internal_has_get_default_profile_result() const {
  return result_case() == kGetDefaultProfileResult;
}
inline bool PreferencesResponse_Result::has_get_default_profile_result() const {
  return _internal_has_get_default_profile_result();
}
inline void PreferencesResponse_Result::set_has_get_default_profile_result() {
  _oneof_case_[0] = kGetDefaultProfileResult;
}
inline void PreferencesResponse_Result::clear_get_default_profile_result() {
  if (_internal_has_get_default_profile_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.get_default_profile_result_;
    }
    clear_has_result();
  }
}
inline ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* PreferencesResponse_Result::release_get_default_profile_result() {
  // @@protoc_insertion_point(field_release:iterm2.PreferencesResponse.Result.get_default_profile_result)
  if (_internal_has_get_default_profile_result()) {
    clear_has_result();
      ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* temp = result_.get_default_profile_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.get_default_profile_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult& PreferencesResponse_Result::_internal_get_default_profile_result() const {
  return _internal_has_get_default_profile_result()
      ? *result_.get_default_profile_result_
      : reinterpret_cast< ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult&>(::iterm2::_PreferencesResponse_Result_GetDefaultProfileResult_default_instance_);
}
inline const ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult& PreferencesResponse_Result::get_default_profile_result() const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.Result.get_default_profile_result)
  return _internal_get_default_profile_result();
}
inline ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* PreferencesResponse_Result::unsafe_arena_release_get_default_profile_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PreferencesResponse.Result.get_default_profile_result)
  if (_internal_has_get_default_profile_result()) {
    clear_has_result();
    ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* temp = result_.get_default_profile_result_;
    result_.get_default_profile_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PreferencesResponse_Result::unsafe_arena_set_allocated_get_default_profile_result(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* get_default_profile_result) {
  clear_result();
  if (get_default_profile_result) {
    set_has_get_default_profile_result();
    result_.get_default_profile_result_ = get_default_profile_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PreferencesResponse.Result.get_default_profile_result)
}
inline ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* PreferencesResponse_Result::_internal_mutable_get_default_profile_result() {
  if (!_internal_has_get_default_profile_result()) {
    clear_result();
    set_has_get_default_profile_result();
    result_.get_default_profile_result_ = CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult >(GetArenaForAllocation());
  }
  return result_.get_default_profile_result_;
}
inline ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* PreferencesResponse_Result::mutable_get_default_profile_result() {
  ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* _msg = _internal_mutable_get_default_profile_result();
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.Result.get_default_profile_result)
  return _msg;
}

inline bool PreferencesResponse_Result::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void PreferencesResponse_Result::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline PreferencesResponse_Result::ResultCase PreferencesResponse_Result::result_case() const {
  return PreferencesResponse_Result::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PreferencesResponse

// repeated .iterm2.PreferencesResponse.Result results = 1;
inline int PreferencesResponse::_internal_results_size() const {
  return results_.size();
}
inline int PreferencesResponse::results_size() const {
  return _internal_results_size();
}
inline void PreferencesResponse::clear_results() {
  results_.Clear();
}
inline ::iterm2::PreferencesResponse_Result* PreferencesResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.PreferencesResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesResponse_Result >*
PreferencesResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.PreferencesResponse.results)
  return &results_;
}
inline const ::iterm2::PreferencesResponse_Result& PreferencesResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::iterm2::PreferencesResponse_Result& PreferencesResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.PreferencesResponse.results)
  return _internal_results(index);
}
inline ::iterm2::PreferencesResponse_Result* PreferencesResponse::_internal_add_results() {
  return results_.Add();
}
inline ::iterm2::PreferencesResponse_Result* PreferencesResponse::add_results() {
  ::iterm2::PreferencesResponse_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:iterm2.PreferencesResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::PreferencesResponse_Result >&
PreferencesResponse::results() const {
  // @@protoc_insertion_point(field_list:iterm2.PreferencesResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// ReorderTabsRequest_Assignment

// optional string window_id = 1;
inline bool ReorderTabsRequest_Assignment::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderTabsRequest_Assignment::has_window_id() const {
  return _internal_has_window_id();
}
inline void ReorderTabsRequest_Assignment::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderTabsRequest_Assignment::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ReorderTabsRequest.Assignment.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReorderTabsRequest_Assignment::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ReorderTabsRequest.Assignment.window_id)
}
inline std::string* ReorderTabsRequest_Assignment::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ReorderTabsRequest.Assignment.window_id)
  return _s;
}
inline const std::string& ReorderTabsRequest_Assignment::_internal_window_id() const {
  return window_id_.Get();
}
inline void ReorderTabsRequest_Assignment::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReorderTabsRequest_Assignment::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000001u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReorderTabsRequest_Assignment::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.ReorderTabsRequest.Assignment.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReorderTabsRequest_Assignment::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ReorderTabsRequest.Assignment.window_id)
}

// repeated string tab_ids = 2;
inline int ReorderTabsRequest_Assignment::_internal_tab_ids_size() const {
  return tab_ids_.size();
}
inline int ReorderTabsRequest_Assignment::tab_ids_size() const {
  return _internal_tab_ids_size();
}
inline void ReorderTabsRequest_Assignment::clear_tab_ids() {
  tab_ids_.Clear();
}
inline std::string* ReorderTabsRequest_Assignment::add_tab_ids() {
  std::string* _s = _internal_add_tab_ids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.ReorderTabsRequest.Assignment.tab_ids)
  return _s;
}
inline const std::string& ReorderTabsRequest_Assignment::_internal_tab_ids(int index) const {
  return tab_ids_.Get(index);
}
inline const std::string& ReorderTabsRequest_Assignment::tab_ids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ReorderTabsRequest.Assignment.tab_ids)
  return _internal_tab_ids(index);
}
inline std::string* ReorderTabsRequest_Assignment::mutable_tab_ids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ReorderTabsRequest.Assignment.tab_ids)
  return tab_ids_.Mutable(index);
}
inline void ReorderTabsRequest_Assignment::set_tab_ids(int index, const std::string& value) {
  tab_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline void ReorderTabsRequest_Assignment::set_tab_ids(int index, std::string&& value) {
  tab_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline void ReorderTabsRequest_Assignment::set_tab_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tab_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline void ReorderTabsRequest_Assignment::set_tab_ids(int index, const char* value, size_t size) {
  tab_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline std::string* ReorderTabsRequest_Assignment::_internal_add_tab_ids() {
  return tab_ids_.Add();
}
inline void ReorderTabsRequest_Assignment::add_tab_ids(const std::string& value) {
  tab_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline void ReorderTabsRequest_Assignment::add_tab_ids(std::string&& value) {
  tab_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline void ReorderTabsRequest_Assignment::add_tab_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tab_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline void ReorderTabsRequest_Assignment::add_tab_ids(const char* value, size_t size) {
  tab_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.ReorderTabsRequest.Assignment.tab_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReorderTabsRequest_Assignment::tab_ids() const {
  // @@protoc_insertion_point(field_list:iterm2.ReorderTabsRequest.Assignment.tab_ids)
  return tab_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReorderTabsRequest_Assignment::mutable_tab_ids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ReorderTabsRequest.Assignment.tab_ids)
  return &tab_ids_;
}

// -------------------------------------------------------------------

// ReorderTabsRequest

// repeated .iterm2.ReorderTabsRequest.Assignment assignments = 3;
inline int ReorderTabsRequest::_internal_assignments_size() const {
  return assignments_.size();
}
inline int ReorderTabsRequest::assignments_size() const {
  return _internal_assignments_size();
}
inline void ReorderTabsRequest::clear_assignments() {
  assignments_.Clear();
}
inline ::iterm2::ReorderTabsRequest_Assignment* ReorderTabsRequest::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ReorderTabsRequest.assignments)
  return assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ReorderTabsRequest_Assignment >*
ReorderTabsRequest::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ReorderTabsRequest.assignments)
  return &assignments_;
}
inline const ::iterm2::ReorderTabsRequest_Assignment& ReorderTabsRequest::_internal_assignments(int index) const {
  return assignments_.Get(index);
}
inline const ::iterm2::ReorderTabsRequest_Assignment& ReorderTabsRequest::assignments(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ReorderTabsRequest.assignments)
  return _internal_assignments(index);
}
inline ::iterm2::ReorderTabsRequest_Assignment* ReorderTabsRequest::_internal_add_assignments() {
  return assignments_.Add();
}
inline ::iterm2::ReorderTabsRequest_Assignment* ReorderTabsRequest::add_assignments() {
  ::iterm2::ReorderTabsRequest_Assignment* _add = _internal_add_assignments();
  // @@protoc_insertion_point(field_add:iterm2.ReorderTabsRequest.assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ReorderTabsRequest_Assignment >&
ReorderTabsRequest::assignments() const {
  // @@protoc_insertion_point(field_list:iterm2.ReorderTabsRequest.assignments)
  return assignments_;
}

// -------------------------------------------------------------------

// ReorderTabsResponse

// optional .iterm2.ReorderTabsResponse.Status status = 4;
inline bool ReorderTabsResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderTabsResponse::has_status() const {
  return _internal_has_status();
}
inline void ReorderTabsResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::ReorderTabsResponse_Status ReorderTabsResponse::_internal_status() const {
  return static_cast< ::iterm2::ReorderTabsResponse_Status >(status_);
}
inline ::iterm2::ReorderTabsResponse_Status ReorderTabsResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.ReorderTabsResponse.status)
  return _internal_status();
}
inline void ReorderTabsResponse::_internal_set_status(::iterm2::ReorderTabsResponse_Status value) {
  assert(::iterm2::ReorderTabsResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void ReorderTabsResponse::set_status(::iterm2::ReorderTabsResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.ReorderTabsResponse.status)
}

// -------------------------------------------------------------------

// TmuxRequest_ListConnections

// -------------------------------------------------------------------

// TmuxRequest_SendCommand

// optional string connection_id = 1;
inline bool TmuxRequest_SendCommand::_internal_has_connection_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxRequest_SendCommand::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void TmuxRequest_SendCommand::clear_connection_id() {
  connection_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TmuxRequest_SendCommand::connection_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.SendCommand.connection_id)
  return _internal_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxRequest_SendCommand::set_connection_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.SendCommand.connection_id)
}
inline std::string* TmuxRequest_SendCommand::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.SendCommand.connection_id)
  return _s;
}
inline const std::string& TmuxRequest_SendCommand::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void TmuxRequest_SendCommand::_internal_set_connection_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SendCommand::_internal_mutable_connection_id() {
  _has_bits_[0] |= 0x00000001u;
  return connection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SendCommand::release_connection_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.SendCommand.connection_id)
  if (!_internal_has_connection_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxRequest_SendCommand::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.SendCommand.connection_id)
}

// optional string command = 2;
inline bool TmuxRequest_SendCommand::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TmuxRequest_SendCommand::has_command() const {
  return _internal_has_command();
}
inline void TmuxRequest_SendCommand::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TmuxRequest_SendCommand::command() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.SendCommand.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxRequest_SendCommand::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.SendCommand.command)
}
inline std::string* TmuxRequest_SendCommand::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.SendCommand.command)
  return _s;
}
inline const std::string& TmuxRequest_SendCommand::_internal_command() const {
  return command_.Get();
}
inline void TmuxRequest_SendCommand::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SendCommand::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000002u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SendCommand::release_command() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.SendCommand.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxRequest_SendCommand::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.SendCommand.command)
}

// -------------------------------------------------------------------

// TmuxRequest_SetWindowVisible

// optional string connection_id = 1;
inline bool TmuxRequest_SetWindowVisible::_internal_has_connection_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxRequest_SetWindowVisible::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void TmuxRequest_SetWindowVisible::clear_connection_id() {
  connection_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TmuxRequest_SetWindowVisible::connection_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.SetWindowVisible.connection_id)
  return _internal_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxRequest_SetWindowVisible::set_connection_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.SetWindowVisible.connection_id)
}
inline std::string* TmuxRequest_SetWindowVisible::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.SetWindowVisible.connection_id)
  return _s;
}
inline const std::string& TmuxRequest_SetWindowVisible::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void TmuxRequest_SetWindowVisible::_internal_set_connection_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SetWindowVisible::_internal_mutable_connection_id() {
  _has_bits_[0] |= 0x00000001u;
  return connection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SetWindowVisible::release_connection_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.SetWindowVisible.connection_id)
  if (!_internal_has_connection_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxRequest_SetWindowVisible::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.SetWindowVisible.connection_id)
}

// optional string window_id = 2;
inline bool TmuxRequest_SetWindowVisible::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TmuxRequest_SetWindowVisible::has_window_id() const {
  return _internal_has_window_id();
}
inline void TmuxRequest_SetWindowVisible::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TmuxRequest_SetWindowVisible::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.SetWindowVisible.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxRequest_SetWindowVisible::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.SetWindowVisible.window_id)
}
inline std::string* TmuxRequest_SetWindowVisible::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.SetWindowVisible.window_id)
  return _s;
}
inline const std::string& TmuxRequest_SetWindowVisible::_internal_window_id() const {
  return window_id_.Get();
}
inline void TmuxRequest_SetWindowVisible::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SetWindowVisible::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000002u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxRequest_SetWindowVisible::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.SetWindowVisible.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxRequest_SetWindowVisible::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.SetWindowVisible.window_id)
}

// optional bool visible = 3;
inline bool TmuxRequest_SetWindowVisible::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TmuxRequest_SetWindowVisible::has_visible() const {
  return _internal_has_visible();
}
inline void TmuxRequest_SetWindowVisible::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TmuxRequest_SetWindowVisible::_internal_visible() const {
  return visible_;
}
inline bool TmuxRequest_SetWindowVisible::visible() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.SetWindowVisible.visible)
  return _internal_visible();
}
inline void TmuxRequest_SetWindowVisible::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000004u;
  visible_ = value;
}
inline void TmuxRequest_SetWindowVisible::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.SetWindowVisible.visible)
}

// -------------------------------------------------------------------

// TmuxRequest_CreateWindow

// optional string connection_id = 1;
inline bool TmuxRequest_CreateWindow::_internal_has_connection_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxRequest_CreateWindow::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void TmuxRequest_CreateWindow::clear_connection_id() {
  connection_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TmuxRequest_CreateWindow::connection_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.CreateWindow.connection_id)
  return _internal_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxRequest_CreateWindow::set_connection_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.CreateWindow.connection_id)
}
inline std::string* TmuxRequest_CreateWindow::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.CreateWindow.connection_id)
  return _s;
}
inline const std::string& TmuxRequest_CreateWindow::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void TmuxRequest_CreateWindow::_internal_set_connection_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxRequest_CreateWindow::_internal_mutable_connection_id() {
  _has_bits_[0] |= 0x00000001u;
  return connection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxRequest_CreateWindow::release_connection_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.CreateWindow.connection_id)
  if (!_internal_has_connection_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxRequest_CreateWindow::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.CreateWindow.connection_id)
}

// optional string affinity = 2;
inline bool TmuxRequest_CreateWindow::_internal_has_affinity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TmuxRequest_CreateWindow::has_affinity() const {
  return _internal_has_affinity();
}
inline void TmuxRequest_CreateWindow::clear_affinity() {
  affinity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TmuxRequest_CreateWindow::affinity() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.CreateWindow.affinity)
  return _internal_affinity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxRequest_CreateWindow::set_affinity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxRequest.CreateWindow.affinity)
}
inline std::string* TmuxRequest_CreateWindow::mutable_affinity() {
  std::string* _s = _internal_mutable_affinity();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.CreateWindow.affinity)
  return _s;
}
inline const std::string& TmuxRequest_CreateWindow::_internal_affinity() const {
  return affinity_.Get();
}
inline void TmuxRequest_CreateWindow::_internal_set_affinity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxRequest_CreateWindow::_internal_mutable_affinity() {
  _has_bits_[0] |= 0x00000002u;
  return affinity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxRequest_CreateWindow::release_affinity() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.CreateWindow.affinity)
  if (!_internal_has_affinity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = affinity_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (affinity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    affinity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxRequest_CreateWindow::set_allocated_affinity(std::string* affinity) {
  if (affinity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affinity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affinity,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (affinity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    affinity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.CreateWindow.affinity)
}

// -------------------------------------------------------------------

// TmuxRequest

// .iterm2.TmuxRequest.ListConnections list_connections = 1;
inline bool TmuxRequest::_internal_has_list_connections() const {
  return payload_case() == kListConnections;
}
inline bool TmuxRequest::has_list_connections() const {
  return _internal_has_list_connections();
}
inline void TmuxRequest::set_has_list_connections() {
  _oneof_case_[0] = kListConnections;
}
inline void TmuxRequest::clear_list_connections() {
  if (_internal_has_list_connections()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.list_connections_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxRequest_ListConnections* TmuxRequest::release_list_connections() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.list_connections)
  if (_internal_has_list_connections()) {
    clear_has_payload();
      ::iterm2::TmuxRequest_ListConnections* temp = payload_.list_connections_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.list_connections_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxRequest_ListConnections& TmuxRequest::_internal_list_connections() const {
  return _internal_has_list_connections()
      ? *payload_.list_connections_
      : reinterpret_cast< ::iterm2::TmuxRequest_ListConnections&>(::iterm2::_TmuxRequest_ListConnections_default_instance_);
}
inline const ::iterm2::TmuxRequest_ListConnections& TmuxRequest::list_connections() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.list_connections)
  return _internal_list_connections();
}
inline ::iterm2::TmuxRequest_ListConnections* TmuxRequest::unsafe_arena_release_list_connections() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxRequest.list_connections)
  if (_internal_has_list_connections()) {
    clear_has_payload();
    ::iterm2::TmuxRequest_ListConnections* temp = payload_.list_connections_;
    payload_.list_connections_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxRequest::unsafe_arena_set_allocated_list_connections(::iterm2::TmuxRequest_ListConnections* list_connections) {
  clear_payload();
  if (list_connections) {
    set_has_list_connections();
    payload_.list_connections_ = list_connections;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxRequest.list_connections)
}
inline ::iterm2::TmuxRequest_ListConnections* TmuxRequest::_internal_mutable_list_connections() {
  if (!_internal_has_list_connections()) {
    clear_payload();
    set_has_list_connections();
    payload_.list_connections_ = CreateMaybeMessage< ::iterm2::TmuxRequest_ListConnections >(GetArenaForAllocation());
  }
  return payload_.list_connections_;
}
inline ::iterm2::TmuxRequest_ListConnections* TmuxRequest::mutable_list_connections() {
  ::iterm2::TmuxRequest_ListConnections* _msg = _internal_mutable_list_connections();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.list_connections)
  return _msg;
}

// .iterm2.TmuxRequest.SendCommand send_command = 2;
inline bool TmuxRequest::_internal_has_send_command() const {
  return payload_case() == kSendCommand;
}
inline bool TmuxRequest::has_send_command() const {
  return _internal_has_send_command();
}
inline void TmuxRequest::set_has_send_command() {
  _oneof_case_[0] = kSendCommand;
}
inline void TmuxRequest::clear_send_command() {
  if (_internal_has_send_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.send_command_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxRequest_SendCommand* TmuxRequest::release_send_command() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.send_command)
  if (_internal_has_send_command()) {
    clear_has_payload();
      ::iterm2::TmuxRequest_SendCommand* temp = payload_.send_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.send_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxRequest_SendCommand& TmuxRequest::_internal_send_command() const {
  return _internal_has_send_command()
      ? *payload_.send_command_
      : reinterpret_cast< ::iterm2::TmuxRequest_SendCommand&>(::iterm2::_TmuxRequest_SendCommand_default_instance_);
}
inline const ::iterm2::TmuxRequest_SendCommand& TmuxRequest::send_command() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.send_command)
  return _internal_send_command();
}
inline ::iterm2::TmuxRequest_SendCommand* TmuxRequest::unsafe_arena_release_send_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxRequest.send_command)
  if (_internal_has_send_command()) {
    clear_has_payload();
    ::iterm2::TmuxRequest_SendCommand* temp = payload_.send_command_;
    payload_.send_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxRequest::unsafe_arena_set_allocated_send_command(::iterm2::TmuxRequest_SendCommand* send_command) {
  clear_payload();
  if (send_command) {
    set_has_send_command();
    payload_.send_command_ = send_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxRequest.send_command)
}
inline ::iterm2::TmuxRequest_SendCommand* TmuxRequest::_internal_mutable_send_command() {
  if (!_internal_has_send_command()) {
    clear_payload();
    set_has_send_command();
    payload_.send_command_ = CreateMaybeMessage< ::iterm2::TmuxRequest_SendCommand >(GetArenaForAllocation());
  }
  return payload_.send_command_;
}
inline ::iterm2::TmuxRequest_SendCommand* TmuxRequest::mutable_send_command() {
  ::iterm2::TmuxRequest_SendCommand* _msg = _internal_mutable_send_command();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.send_command)
  return _msg;
}

// .iterm2.TmuxRequest.SetWindowVisible set_window_visible = 3;
inline bool TmuxRequest::_internal_has_set_window_visible() const {
  return payload_case() == kSetWindowVisible;
}
inline bool TmuxRequest::has_set_window_visible() const {
  return _internal_has_set_window_visible();
}
inline void TmuxRequest::set_has_set_window_visible() {
  _oneof_case_[0] = kSetWindowVisible;
}
inline void TmuxRequest::clear_set_window_visible() {
  if (_internal_has_set_window_visible()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.set_window_visible_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxRequest_SetWindowVisible* TmuxRequest::release_set_window_visible() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.set_window_visible)
  if (_internal_has_set_window_visible()) {
    clear_has_payload();
      ::iterm2::TmuxRequest_SetWindowVisible* temp = payload_.set_window_visible_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.set_window_visible_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxRequest_SetWindowVisible& TmuxRequest::_internal_set_window_visible() const {
  return _internal_has_set_window_visible()
      ? *payload_.set_window_visible_
      : reinterpret_cast< ::iterm2::TmuxRequest_SetWindowVisible&>(::iterm2::_TmuxRequest_SetWindowVisible_default_instance_);
}
inline const ::iterm2::TmuxRequest_SetWindowVisible& TmuxRequest::set_window_visible() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.set_window_visible)
  return _internal_set_window_visible();
}
inline ::iterm2::TmuxRequest_SetWindowVisible* TmuxRequest::unsafe_arena_release_set_window_visible() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxRequest.set_window_visible)
  if (_internal_has_set_window_visible()) {
    clear_has_payload();
    ::iterm2::TmuxRequest_SetWindowVisible* temp = payload_.set_window_visible_;
    payload_.set_window_visible_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxRequest::unsafe_arena_set_allocated_set_window_visible(::iterm2::TmuxRequest_SetWindowVisible* set_window_visible) {
  clear_payload();
  if (set_window_visible) {
    set_has_set_window_visible();
    payload_.set_window_visible_ = set_window_visible;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxRequest.set_window_visible)
}
inline ::iterm2::TmuxRequest_SetWindowVisible* TmuxRequest::_internal_mutable_set_window_visible() {
  if (!_internal_has_set_window_visible()) {
    clear_payload();
    set_has_set_window_visible();
    payload_.set_window_visible_ = CreateMaybeMessage< ::iterm2::TmuxRequest_SetWindowVisible >(GetArenaForAllocation());
  }
  return payload_.set_window_visible_;
}
inline ::iterm2::TmuxRequest_SetWindowVisible* TmuxRequest::mutable_set_window_visible() {
  ::iterm2::TmuxRequest_SetWindowVisible* _msg = _internal_mutable_set_window_visible();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.set_window_visible)
  return _msg;
}

// .iterm2.TmuxRequest.CreateWindow create_window = 4;
inline bool TmuxRequest::_internal_has_create_window() const {
  return payload_case() == kCreateWindow;
}
inline bool TmuxRequest::has_create_window() const {
  return _internal_has_create_window();
}
inline void TmuxRequest::set_has_create_window() {
  _oneof_case_[0] = kCreateWindow;
}
inline void TmuxRequest::clear_create_window() {
  if (_internal_has_create_window()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.create_window_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxRequest_CreateWindow* TmuxRequest::release_create_window() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxRequest.create_window)
  if (_internal_has_create_window()) {
    clear_has_payload();
      ::iterm2::TmuxRequest_CreateWindow* temp = payload_.create_window_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.create_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxRequest_CreateWindow& TmuxRequest::_internal_create_window() const {
  return _internal_has_create_window()
      ? *payload_.create_window_
      : reinterpret_cast< ::iterm2::TmuxRequest_CreateWindow&>(::iterm2::_TmuxRequest_CreateWindow_default_instance_);
}
inline const ::iterm2::TmuxRequest_CreateWindow& TmuxRequest::create_window() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxRequest.create_window)
  return _internal_create_window();
}
inline ::iterm2::TmuxRequest_CreateWindow* TmuxRequest::unsafe_arena_release_create_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxRequest.create_window)
  if (_internal_has_create_window()) {
    clear_has_payload();
    ::iterm2::TmuxRequest_CreateWindow* temp = payload_.create_window_;
    payload_.create_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxRequest::unsafe_arena_set_allocated_create_window(::iterm2::TmuxRequest_CreateWindow* create_window) {
  clear_payload();
  if (create_window) {
    set_has_create_window();
    payload_.create_window_ = create_window;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxRequest.create_window)
}
inline ::iterm2::TmuxRequest_CreateWindow* TmuxRequest::_internal_mutable_create_window() {
  if (!_internal_has_create_window()) {
    clear_payload();
    set_has_create_window();
    payload_.create_window_ = CreateMaybeMessage< ::iterm2::TmuxRequest_CreateWindow >(GetArenaForAllocation());
  }
  return payload_.create_window_;
}
inline ::iterm2::TmuxRequest_CreateWindow* TmuxRequest::mutable_create_window() {
  ::iterm2::TmuxRequest_CreateWindow* _msg = _internal_mutable_create_window();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxRequest.create_window)
  return _msg;
}

inline bool TmuxRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void TmuxRequest::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline TmuxRequest::PayloadCase TmuxRequest::payload_case() const {
  return TmuxRequest::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TmuxResponse_ListConnections_Connection

// optional string connection_id = 1;
inline bool TmuxResponse_ListConnections_Connection::_internal_has_connection_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxResponse_ListConnections_Connection::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void TmuxResponse_ListConnections_Connection::clear_connection_id() {
  connection_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TmuxResponse_ListConnections_Connection::connection_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.ListConnections.Connection.connection_id)
  return _internal_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxResponse_ListConnections_Connection::set_connection_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxResponse.ListConnections.Connection.connection_id)
}
inline std::string* TmuxResponse_ListConnections_Connection::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.ListConnections.Connection.connection_id)
  return _s;
}
inline const std::string& TmuxResponse_ListConnections_Connection::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void TmuxResponse_ListConnections_Connection::_internal_set_connection_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxResponse_ListConnections_Connection::_internal_mutable_connection_id() {
  _has_bits_[0] |= 0x00000001u;
  return connection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxResponse_ListConnections_Connection::release_connection_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.ListConnections.Connection.connection_id)
  if (!_internal_has_connection_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxResponse_ListConnections_Connection::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.ListConnections.Connection.connection_id)
}

// optional string owning_session_id = 2;
inline bool TmuxResponse_ListConnections_Connection::_internal_has_owning_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TmuxResponse_ListConnections_Connection::has_owning_session_id() const {
  return _internal_has_owning_session_id();
}
inline void TmuxResponse_ListConnections_Connection::clear_owning_session_id() {
  owning_session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TmuxResponse_ListConnections_Connection::owning_session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.ListConnections.Connection.owning_session_id)
  return _internal_owning_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxResponse_ListConnections_Connection::set_owning_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 owning_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxResponse.ListConnections.Connection.owning_session_id)
}
inline std::string* TmuxResponse_ListConnections_Connection::mutable_owning_session_id() {
  std::string* _s = _internal_mutable_owning_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.ListConnections.Connection.owning_session_id)
  return _s;
}
inline const std::string& TmuxResponse_ListConnections_Connection::_internal_owning_session_id() const {
  return owning_session_id_.Get();
}
inline void TmuxResponse_ListConnections_Connection::_internal_set_owning_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  owning_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxResponse_ListConnections_Connection::_internal_mutable_owning_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return owning_session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxResponse_ListConnections_Connection::release_owning_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.ListConnections.Connection.owning_session_id)
  if (!_internal_has_owning_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = owning_session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owning_session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owning_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxResponse_ListConnections_Connection::set_allocated_owning_session_id(std::string* owning_session_id) {
  if (owning_session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  owning_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owning_session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (owning_session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    owning_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.ListConnections.Connection.owning_session_id)
}

// -------------------------------------------------------------------

// TmuxResponse_ListConnections

// repeated .iterm2.TmuxResponse.ListConnections.Connection connections = 1;
inline int TmuxResponse_ListConnections::_internal_connections_size() const {
  return connections_.size();
}
inline int TmuxResponse_ListConnections::connections_size() const {
  return _internal_connections_size();
}
inline void TmuxResponse_ListConnections::clear_connections() {
  connections_.Clear();
}
inline ::iterm2::TmuxResponse_ListConnections_Connection* TmuxResponse_ListConnections::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.ListConnections.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::TmuxResponse_ListConnections_Connection >*
TmuxResponse_ListConnections::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.TmuxResponse.ListConnections.connections)
  return &connections_;
}
inline const ::iterm2::TmuxResponse_ListConnections_Connection& TmuxResponse_ListConnections::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::iterm2::TmuxResponse_ListConnections_Connection& TmuxResponse_ListConnections::connections(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.ListConnections.connections)
  return _internal_connections(index);
}
inline ::iterm2::TmuxResponse_ListConnections_Connection* TmuxResponse_ListConnections::_internal_add_connections() {
  return connections_.Add();
}
inline ::iterm2::TmuxResponse_ListConnections_Connection* TmuxResponse_ListConnections::add_connections() {
  ::iterm2::TmuxResponse_ListConnections_Connection* _add = _internal_add_connections();
  // @@protoc_insertion_point(field_add:iterm2.TmuxResponse.ListConnections.connections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::TmuxResponse_ListConnections_Connection >&
TmuxResponse_ListConnections::connections() const {
  // @@protoc_insertion_point(field_list:iterm2.TmuxResponse.ListConnections.connections)
  return connections_;
}

// -------------------------------------------------------------------

// TmuxResponse_SendCommand

// optional string output = 1;
inline bool TmuxResponse_SendCommand::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxResponse_SendCommand::has_output() const {
  return _internal_has_output();
}
inline void TmuxResponse_SendCommand::clear_output() {
  output_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TmuxResponse_SendCommand::output() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.SendCommand.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxResponse_SendCommand::set_output(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxResponse.SendCommand.output)
}
inline std::string* TmuxResponse_SendCommand::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.SendCommand.output)
  return _s;
}
inline const std::string& TmuxResponse_SendCommand::_internal_output() const {
  return output_.Get();
}
inline void TmuxResponse_SendCommand::_internal_set_output(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxResponse_SendCommand::_internal_mutable_output() {
  _has_bits_[0] |= 0x00000001u;
  return output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxResponse_SendCommand::release_output() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.SendCommand.output)
  if (!_internal_has_output()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = output_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxResponse_SendCommand::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (output_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.SendCommand.output)
}

// -------------------------------------------------------------------

// TmuxResponse_SetWindowVisible

// -------------------------------------------------------------------

// TmuxResponse_CreateWindow

// optional string tab_id = 1;
inline bool TmuxResponse_CreateWindow::_internal_has_tab_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxResponse_CreateWindow::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void TmuxResponse_CreateWindow::clear_tab_id() {
  tab_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TmuxResponse_CreateWindow::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.CreateWindow.tab_id)
  return _internal_tab_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TmuxResponse_CreateWindow::set_tab_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TmuxResponse.CreateWindow.tab_id)
}
inline std::string* TmuxResponse_CreateWindow::mutable_tab_id() {
  std::string* _s = _internal_mutable_tab_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.CreateWindow.tab_id)
  return _s;
}
inline const std::string& TmuxResponse_CreateWindow::_internal_tab_id() const {
  return tab_id_.Get();
}
inline void TmuxResponse_CreateWindow::_internal_set_tab_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TmuxResponse_CreateWindow::_internal_mutable_tab_id() {
  _has_bits_[0] |= 0x00000001u;
  return tab_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TmuxResponse_CreateWindow::release_tab_id() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.CreateWindow.tab_id)
  if (!_internal_has_tab_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tab_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TmuxResponse_CreateWindow::set_allocated_tab_id(std::string* tab_id) {
  if (tab_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tab_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tab_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.CreateWindow.tab_id)
}

// -------------------------------------------------------------------

// TmuxResponse

// .iterm2.TmuxResponse.ListConnections list_connections = 1;
inline bool TmuxResponse::_internal_has_list_connections() const {
  return payload_case() == kListConnections;
}
inline bool TmuxResponse::has_list_connections() const {
  return _internal_has_list_connections();
}
inline void TmuxResponse::set_has_list_connections() {
  _oneof_case_[0] = kListConnections;
}
inline void TmuxResponse::clear_list_connections() {
  if (_internal_has_list_connections()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.list_connections_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxResponse_ListConnections* TmuxResponse::release_list_connections() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.list_connections)
  if (_internal_has_list_connections()) {
    clear_has_payload();
      ::iterm2::TmuxResponse_ListConnections* temp = payload_.list_connections_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.list_connections_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxResponse_ListConnections& TmuxResponse::_internal_list_connections() const {
  return _internal_has_list_connections()
      ? *payload_.list_connections_
      : reinterpret_cast< ::iterm2::TmuxResponse_ListConnections&>(::iterm2::_TmuxResponse_ListConnections_default_instance_);
}
inline const ::iterm2::TmuxResponse_ListConnections& TmuxResponse::list_connections() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.list_connections)
  return _internal_list_connections();
}
inline ::iterm2::TmuxResponse_ListConnections* TmuxResponse::unsafe_arena_release_list_connections() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxResponse.list_connections)
  if (_internal_has_list_connections()) {
    clear_has_payload();
    ::iterm2::TmuxResponse_ListConnections* temp = payload_.list_connections_;
    payload_.list_connections_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxResponse::unsafe_arena_set_allocated_list_connections(::iterm2::TmuxResponse_ListConnections* list_connections) {
  clear_payload();
  if (list_connections) {
    set_has_list_connections();
    payload_.list_connections_ = list_connections;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxResponse.list_connections)
}
inline ::iterm2::TmuxResponse_ListConnections* TmuxResponse::_internal_mutable_list_connections() {
  if (!_internal_has_list_connections()) {
    clear_payload();
    set_has_list_connections();
    payload_.list_connections_ = CreateMaybeMessage< ::iterm2::TmuxResponse_ListConnections >(GetArenaForAllocation());
  }
  return payload_.list_connections_;
}
inline ::iterm2::TmuxResponse_ListConnections* TmuxResponse::mutable_list_connections() {
  ::iterm2::TmuxResponse_ListConnections* _msg = _internal_mutable_list_connections();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.list_connections)
  return _msg;
}

// .iterm2.TmuxResponse.SendCommand send_command = 2;
inline bool TmuxResponse::_internal_has_send_command() const {
  return payload_case() == kSendCommand;
}
inline bool TmuxResponse::has_send_command() const {
  return _internal_has_send_command();
}
inline void TmuxResponse::set_has_send_command() {
  _oneof_case_[0] = kSendCommand;
}
inline void TmuxResponse::clear_send_command() {
  if (_internal_has_send_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.send_command_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxResponse_SendCommand* TmuxResponse::release_send_command() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.send_command)
  if (_internal_has_send_command()) {
    clear_has_payload();
      ::iterm2::TmuxResponse_SendCommand* temp = payload_.send_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.send_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxResponse_SendCommand& TmuxResponse::_internal_send_command() const {
  return _internal_has_send_command()
      ? *payload_.send_command_
      : reinterpret_cast< ::iterm2::TmuxResponse_SendCommand&>(::iterm2::_TmuxResponse_SendCommand_default_instance_);
}
inline const ::iterm2::TmuxResponse_SendCommand& TmuxResponse::send_command() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.send_command)
  return _internal_send_command();
}
inline ::iterm2::TmuxResponse_SendCommand* TmuxResponse::unsafe_arena_release_send_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxResponse.send_command)
  if (_internal_has_send_command()) {
    clear_has_payload();
    ::iterm2::TmuxResponse_SendCommand* temp = payload_.send_command_;
    payload_.send_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxResponse::unsafe_arena_set_allocated_send_command(::iterm2::TmuxResponse_SendCommand* send_command) {
  clear_payload();
  if (send_command) {
    set_has_send_command();
    payload_.send_command_ = send_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxResponse.send_command)
}
inline ::iterm2::TmuxResponse_SendCommand* TmuxResponse::_internal_mutable_send_command() {
  if (!_internal_has_send_command()) {
    clear_payload();
    set_has_send_command();
    payload_.send_command_ = CreateMaybeMessage< ::iterm2::TmuxResponse_SendCommand >(GetArenaForAllocation());
  }
  return payload_.send_command_;
}
inline ::iterm2::TmuxResponse_SendCommand* TmuxResponse::mutable_send_command() {
  ::iterm2::TmuxResponse_SendCommand* _msg = _internal_mutable_send_command();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.send_command)
  return _msg;
}

// .iterm2.TmuxResponse.SetWindowVisible set_window_visible = 3;
inline bool TmuxResponse::_internal_has_set_window_visible() const {
  return payload_case() == kSetWindowVisible;
}
inline bool TmuxResponse::has_set_window_visible() const {
  return _internal_has_set_window_visible();
}
inline void TmuxResponse::set_has_set_window_visible() {
  _oneof_case_[0] = kSetWindowVisible;
}
inline void TmuxResponse::clear_set_window_visible() {
  if (_internal_has_set_window_visible()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.set_window_visible_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxResponse_SetWindowVisible* TmuxResponse::release_set_window_visible() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.set_window_visible)
  if (_internal_has_set_window_visible()) {
    clear_has_payload();
      ::iterm2::TmuxResponse_SetWindowVisible* temp = payload_.set_window_visible_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.set_window_visible_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxResponse_SetWindowVisible& TmuxResponse::_internal_set_window_visible() const {
  return _internal_has_set_window_visible()
      ? *payload_.set_window_visible_
      : reinterpret_cast< ::iterm2::TmuxResponse_SetWindowVisible&>(::iterm2::_TmuxResponse_SetWindowVisible_default_instance_);
}
inline const ::iterm2::TmuxResponse_SetWindowVisible& TmuxResponse::set_window_visible() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.set_window_visible)
  return _internal_set_window_visible();
}
inline ::iterm2::TmuxResponse_SetWindowVisible* TmuxResponse::unsafe_arena_release_set_window_visible() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxResponse.set_window_visible)
  if (_internal_has_set_window_visible()) {
    clear_has_payload();
    ::iterm2::TmuxResponse_SetWindowVisible* temp = payload_.set_window_visible_;
    payload_.set_window_visible_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxResponse::unsafe_arena_set_allocated_set_window_visible(::iterm2::TmuxResponse_SetWindowVisible* set_window_visible) {
  clear_payload();
  if (set_window_visible) {
    set_has_set_window_visible();
    payload_.set_window_visible_ = set_window_visible;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxResponse.set_window_visible)
}
inline ::iterm2::TmuxResponse_SetWindowVisible* TmuxResponse::_internal_mutable_set_window_visible() {
  if (!_internal_has_set_window_visible()) {
    clear_payload();
    set_has_set_window_visible();
    payload_.set_window_visible_ = CreateMaybeMessage< ::iterm2::TmuxResponse_SetWindowVisible >(GetArenaForAllocation());
  }
  return payload_.set_window_visible_;
}
inline ::iterm2::TmuxResponse_SetWindowVisible* TmuxResponse::mutable_set_window_visible() {
  ::iterm2::TmuxResponse_SetWindowVisible* _msg = _internal_mutable_set_window_visible();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.set_window_visible)
  return _msg;
}

// .iterm2.TmuxResponse.CreateWindow create_window = 5;
inline bool TmuxResponse::_internal_has_create_window() const {
  return payload_case() == kCreateWindow;
}
inline bool TmuxResponse::has_create_window() const {
  return _internal_has_create_window();
}
inline void TmuxResponse::set_has_create_window() {
  _oneof_case_[0] = kCreateWindow;
}
inline void TmuxResponse::clear_create_window() {
  if (_internal_has_create_window()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.create_window_;
    }
    clear_has_payload();
  }
}
inline ::iterm2::TmuxResponse_CreateWindow* TmuxResponse::release_create_window() {
  // @@protoc_insertion_point(field_release:iterm2.TmuxResponse.create_window)
  if (_internal_has_create_window()) {
    clear_has_payload();
      ::iterm2::TmuxResponse_CreateWindow* temp = payload_.create_window_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.create_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::TmuxResponse_CreateWindow& TmuxResponse::_internal_create_window() const {
  return _internal_has_create_window()
      ? *payload_.create_window_
      : reinterpret_cast< ::iterm2::TmuxResponse_CreateWindow&>(::iterm2::_TmuxResponse_CreateWindow_default_instance_);
}
inline const ::iterm2::TmuxResponse_CreateWindow& TmuxResponse::create_window() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.create_window)
  return _internal_create_window();
}
inline ::iterm2::TmuxResponse_CreateWindow* TmuxResponse::unsafe_arena_release_create_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.TmuxResponse.create_window)
  if (_internal_has_create_window()) {
    clear_has_payload();
    ::iterm2::TmuxResponse_CreateWindow* temp = payload_.create_window_;
    payload_.create_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmuxResponse::unsafe_arena_set_allocated_create_window(::iterm2::TmuxResponse_CreateWindow* create_window) {
  clear_payload();
  if (create_window) {
    set_has_create_window();
    payload_.create_window_ = create_window;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.TmuxResponse.create_window)
}
inline ::iterm2::TmuxResponse_CreateWindow* TmuxResponse::_internal_mutable_create_window() {
  if (!_internal_has_create_window()) {
    clear_payload();
    set_has_create_window();
    payload_.create_window_ = CreateMaybeMessage< ::iterm2::TmuxResponse_CreateWindow >(GetArenaForAllocation());
  }
  return payload_.create_window_;
}
inline ::iterm2::TmuxResponse_CreateWindow* TmuxResponse::mutable_create_window() {
  ::iterm2::TmuxResponse_CreateWindow* _msg = _internal_mutable_create_window();
  // @@protoc_insertion_point(field_mutable:iterm2.TmuxResponse.create_window)
  return _msg;
}

// optional .iterm2.TmuxResponse.Status status = 4;
inline bool TmuxResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TmuxResponse::has_status() const {
  return _internal_has_status();
}
inline void TmuxResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::TmuxResponse_Status TmuxResponse::_internal_status() const {
  return static_cast< ::iterm2::TmuxResponse_Status >(status_);
}
inline ::iterm2::TmuxResponse_Status TmuxResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.TmuxResponse.status)
  return _internal_status();
}
inline void TmuxResponse::_internal_set_status(::iterm2::TmuxResponse_Status value) {
  assert(::iterm2::TmuxResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void TmuxResponse::set_status(::iterm2::TmuxResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.TmuxResponse.status)
}

inline bool TmuxResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void TmuxResponse::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline TmuxResponse::PayloadCase TmuxResponse::payload_case() const {
  return TmuxResponse::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetBroadcastDomainsRequest

// -------------------------------------------------------------------

// BroadcastDomain

// repeated string session_ids = 1;
inline int BroadcastDomain::_internal_session_ids_size() const {
  return session_ids_.size();
}
inline int BroadcastDomain::session_ids_size() const {
  return _internal_session_ids_size();
}
inline void BroadcastDomain::clear_session_ids() {
  session_ids_.Clear();
}
inline std::string* BroadcastDomain::add_session_ids() {
  std::string* _s = _internal_add_session_ids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.BroadcastDomain.session_ids)
  return _s;
}
inline const std::string& BroadcastDomain::_internal_session_ids(int index) const {
  return session_ids_.Get(index);
}
inline const std::string& BroadcastDomain::session_ids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.BroadcastDomain.session_ids)
  return _internal_session_ids(index);
}
inline std::string* BroadcastDomain::mutable_session_ids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.BroadcastDomain.session_ids)
  return session_ids_.Mutable(index);
}
inline void BroadcastDomain::set_session_ids(int index, const std::string& value) {
  session_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.BroadcastDomain.session_ids)
}
inline void BroadcastDomain::set_session_ids(int index, std::string&& value) {
  session_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.BroadcastDomain.session_ids)
}
inline void BroadcastDomain::set_session_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.BroadcastDomain.session_ids)
}
inline void BroadcastDomain::set_session_ids(int index, const char* value, size_t size) {
  session_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.BroadcastDomain.session_ids)
}
inline std::string* BroadcastDomain::_internal_add_session_ids() {
  return session_ids_.Add();
}
inline void BroadcastDomain::add_session_ids(const std::string& value) {
  session_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.BroadcastDomain.session_ids)
}
inline void BroadcastDomain::add_session_ids(std::string&& value) {
  session_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.BroadcastDomain.session_ids)
}
inline void BroadcastDomain::add_session_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.BroadcastDomain.session_ids)
}
inline void BroadcastDomain::add_session_ids(const char* value, size_t size) {
  session_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.BroadcastDomain.session_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BroadcastDomain::session_ids() const {
  // @@protoc_insertion_point(field_list:iterm2.BroadcastDomain.session_ids)
  return session_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BroadcastDomain::mutable_session_ids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.BroadcastDomain.session_ids)
  return &session_ids_;
}

// -------------------------------------------------------------------

// GetBroadcastDomainsResponse

// repeated .iterm2.BroadcastDomain broadcast_domains = 1;
inline int GetBroadcastDomainsResponse::_internal_broadcast_domains_size() const {
  return broadcast_domains_.size();
}
inline int GetBroadcastDomainsResponse::broadcast_domains_size() const {
  return _internal_broadcast_domains_size();
}
inline void GetBroadcastDomainsResponse::clear_broadcast_domains() {
  broadcast_domains_.Clear();
}
inline ::iterm2::BroadcastDomain* GetBroadcastDomainsResponse::mutable_broadcast_domains(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.GetBroadcastDomainsResponse.broadcast_domains)
  return broadcast_domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >*
GetBroadcastDomainsResponse::mutable_broadcast_domains() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.GetBroadcastDomainsResponse.broadcast_domains)
  return &broadcast_domains_;
}
inline const ::iterm2::BroadcastDomain& GetBroadcastDomainsResponse::_internal_broadcast_domains(int index) const {
  return broadcast_domains_.Get(index);
}
inline const ::iterm2::BroadcastDomain& GetBroadcastDomainsResponse::broadcast_domains(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.GetBroadcastDomainsResponse.broadcast_domains)
  return _internal_broadcast_domains(index);
}
inline ::iterm2::BroadcastDomain* GetBroadcastDomainsResponse::_internal_add_broadcast_domains() {
  return broadcast_domains_.Add();
}
inline ::iterm2::BroadcastDomain* GetBroadcastDomainsResponse::add_broadcast_domains() {
  ::iterm2::BroadcastDomain* _add = _internal_add_broadcast_domains();
  // @@protoc_insertion_point(field_add:iterm2.GetBroadcastDomainsResponse.broadcast_domains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >&
GetBroadcastDomainsResponse::broadcast_domains() const {
  // @@protoc_insertion_point(field_list:iterm2.GetBroadcastDomainsResponse.broadcast_domains)
  return broadcast_domains_;
}

// -------------------------------------------------------------------

// SetTabLayoutRequest

// optional .iterm2.SplitTreeNode root = 1;
inline bool SetTabLayoutRequest::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool SetTabLayoutRequest::has_root() const {
  return _internal_has_root();
}
inline void SetTabLayoutRequest::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::SplitTreeNode& SetTabLayoutRequest::_internal_root() const {
  const ::iterm2::SplitTreeNode* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::SplitTreeNode&>(
      ::iterm2::_SplitTreeNode_default_instance_);
}
inline const ::iterm2::SplitTreeNode& SetTabLayoutRequest::root() const {
  // @@protoc_insertion_point(field_get:iterm2.SetTabLayoutRequest.root)
  return _internal_root();
}
inline void SetTabLayoutRequest::unsafe_arena_set_allocated_root(
    ::iterm2::SplitTreeNode* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SetTabLayoutRequest.root)
}
inline ::iterm2::SplitTreeNode* SetTabLayoutRequest::release_root() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::SplitTreeNode* temp = root_;
  root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::SplitTreeNode* SetTabLayoutRequest::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:iterm2.SetTabLayoutRequest.root)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::SplitTreeNode* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::iterm2::SplitTreeNode* SetTabLayoutRequest::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000002u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::SplitTreeNode>(GetArenaForAllocation());
    root_ = p;
  }
  return root_;
}
inline ::iterm2::SplitTreeNode* SetTabLayoutRequest::mutable_root() {
  ::iterm2::SplitTreeNode* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:iterm2.SetTabLayoutRequest.root)
  return _msg;
}
inline void SetTabLayoutRequest::set_allocated_root(::iterm2::SplitTreeNode* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SplitTreeNode>::GetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetTabLayoutRequest.root)
}

// optional string tab_id = 2;
inline bool SetTabLayoutRequest::_internal_has_tab_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetTabLayoutRequest::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void SetTabLayoutRequest::clear_tab_id() {
  tab_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetTabLayoutRequest::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.SetTabLayoutRequest.tab_id)
  return _internal_tab_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetTabLayoutRequest::set_tab_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetTabLayoutRequest.tab_id)
}
inline std::string* SetTabLayoutRequest::mutable_tab_id() {
  std::string* _s = _internal_mutable_tab_id();
  // @@protoc_insertion_point(field_mutable:iterm2.SetTabLayoutRequest.tab_id)
  return _s;
}
inline const std::string& SetTabLayoutRequest::_internal_tab_id() const {
  return tab_id_.Get();
}
inline void SetTabLayoutRequest::_internal_set_tab_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetTabLayoutRequest::_internal_mutable_tab_id() {
  _has_bits_[0] |= 0x00000001u;
  return tab_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetTabLayoutRequest::release_tab_id() {
  // @@protoc_insertion_point(field_release:iterm2.SetTabLayoutRequest.tab_id)
  if (!_internal_has_tab_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tab_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetTabLayoutRequest::set_allocated_tab_id(std::string* tab_id) {
  if (tab_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tab_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tab_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetTabLayoutRequest.tab_id)
}

// -------------------------------------------------------------------

// SetTabLayoutResponse

// optional .iterm2.SetTabLayoutResponse.Status status = 1;
inline bool SetTabLayoutResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetTabLayoutResponse::has_status() const {
  return _internal_has_status();
}
inline void SetTabLayoutResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SetTabLayoutResponse_Status SetTabLayoutResponse::_internal_status() const {
  return static_cast< ::iterm2::SetTabLayoutResponse_Status >(status_);
}
inline ::iterm2::SetTabLayoutResponse_Status SetTabLayoutResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SetTabLayoutResponse.status)
  return _internal_status();
}
inline void SetTabLayoutResponse::_internal_set_status(::iterm2::SetTabLayoutResponse_Status value) {
  assert(::iterm2::SetTabLayoutResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SetTabLayoutResponse::set_status(::iterm2::SetTabLayoutResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SetTabLayoutResponse.status)
}

// -------------------------------------------------------------------

// MenuItemRequest

// optional string identifier = 1;
inline bool MenuItemRequest::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MenuItemRequest::has_identifier() const {
  return _internal_has_identifier();
}
inline void MenuItemRequest::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MenuItemRequest::identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.MenuItemRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MenuItemRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.MenuItemRequest.identifier)
}
inline std::string* MenuItemRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.MenuItemRequest.identifier)
  return _s;
}
inline const std::string& MenuItemRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void MenuItemRequest::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MenuItemRequest::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MenuItemRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.MenuItemRequest.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MenuItemRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.MenuItemRequest.identifier)
}

// optional bool query_only = 2;
inline bool MenuItemRequest::_internal_has_query_only() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MenuItemRequest::has_query_only() const {
  return _internal_has_query_only();
}
inline void MenuItemRequest::clear_query_only() {
  query_only_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MenuItemRequest::_internal_query_only() const {
  return query_only_;
}
inline bool MenuItemRequest::query_only() const {
  // @@protoc_insertion_point(field_get:iterm2.MenuItemRequest.query_only)
  return _internal_query_only();
}
inline void MenuItemRequest::_internal_set_query_only(bool value) {
  _has_bits_[0] |= 0x00000002u;
  query_only_ = value;
}
inline void MenuItemRequest::set_query_only(bool value) {
  _internal_set_query_only(value);
  // @@protoc_insertion_point(field_set:iterm2.MenuItemRequest.query_only)
}

// -------------------------------------------------------------------

// MenuItemResponse

// optional .iterm2.MenuItemResponse.Status status = 1;
inline bool MenuItemResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MenuItemResponse::has_status() const {
  return _internal_has_status();
}
inline void MenuItemResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::MenuItemResponse_Status MenuItemResponse::_internal_status() const {
  return static_cast< ::iterm2::MenuItemResponse_Status >(status_);
}
inline ::iterm2::MenuItemResponse_Status MenuItemResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.MenuItemResponse.status)
  return _internal_status();
}
inline void MenuItemResponse::_internal_set_status(::iterm2::MenuItemResponse_Status value) {
  assert(::iterm2::MenuItemResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void MenuItemResponse::set_status(::iterm2::MenuItemResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.MenuItemResponse.status)
}

// optional bool checked = 2;
inline bool MenuItemResponse::_internal_has_checked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MenuItemResponse::has_checked() const {
  return _internal_has_checked();
}
inline void MenuItemResponse::clear_checked() {
  checked_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MenuItemResponse::_internal_checked() const {
  return checked_;
}
inline bool MenuItemResponse::checked() const {
  // @@protoc_insertion_point(field_get:iterm2.MenuItemResponse.checked)
  return _internal_checked();
}
inline void MenuItemResponse::_internal_set_checked(bool value) {
  _has_bits_[0] |= 0x00000002u;
  checked_ = value;
}
inline void MenuItemResponse::set_checked(bool value) {
  _internal_set_checked(value);
  // @@protoc_insertion_point(field_set:iterm2.MenuItemResponse.checked)
}

// optional bool enabled = 3;
inline bool MenuItemResponse::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MenuItemResponse::has_enabled() const {
  return _internal_has_enabled();
}
inline void MenuItemResponse::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MenuItemResponse::_internal_enabled() const {
  return enabled_;
}
inline bool MenuItemResponse::enabled() const {
  // @@protoc_insertion_point(field_get:iterm2.MenuItemResponse.enabled)
  return _internal_enabled();
}
inline void MenuItemResponse::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enabled_ = value;
}
inline void MenuItemResponse::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:iterm2.MenuItemResponse.enabled)
}

// -------------------------------------------------------------------

// RestartSessionRequest

// optional string session_id = 1;
inline bool RestartSessionRequest::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RestartSessionRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void RestartSessionRequest::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RestartSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.RestartSessionRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RestartSessionRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RestartSessionRequest.session_id)
}
inline std::string* RestartSessionRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.RestartSessionRequest.session_id)
  return _s;
}
inline const std::string& RestartSessionRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void RestartSessionRequest::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RestartSessionRequest::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RestartSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.RestartSessionRequest.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RestartSessionRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RestartSessionRequest.session_id)
}

// optional bool only_if_exited = 2;
inline bool RestartSessionRequest::_internal_has_only_if_exited() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RestartSessionRequest::has_only_if_exited() const {
  return _internal_has_only_if_exited();
}
inline void RestartSessionRequest::clear_only_if_exited() {
  only_if_exited_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RestartSessionRequest::_internal_only_if_exited() const {
  return only_if_exited_;
}
inline bool RestartSessionRequest::only_if_exited() const {
  // @@protoc_insertion_point(field_get:iterm2.RestartSessionRequest.only_if_exited)
  return _internal_only_if_exited();
}
inline void RestartSessionRequest::_internal_set_only_if_exited(bool value) {
  _has_bits_[0] |= 0x00000002u;
  only_if_exited_ = value;
}
inline void RestartSessionRequest::set_only_if_exited(bool value) {
  _internal_set_only_if_exited(value);
  // @@protoc_insertion_point(field_set:iterm2.RestartSessionRequest.only_if_exited)
}

// -------------------------------------------------------------------

// RestartSessionResponse

// optional .iterm2.RestartSessionResponse.Status status = 1;
inline bool RestartSessionResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RestartSessionResponse::has_status() const {
  return _internal_has_status();
}
inline void RestartSessionResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::RestartSessionResponse_Status RestartSessionResponse::_internal_status() const {
  return static_cast< ::iterm2::RestartSessionResponse_Status >(status_);
}
inline ::iterm2::RestartSessionResponse_Status RestartSessionResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.RestartSessionResponse.status)
  return _internal_status();
}
inline void RestartSessionResponse::_internal_set_status(::iterm2::RestartSessionResponse_Status value) {
  assert(::iterm2::RestartSessionResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void RestartSessionResponse::set_status(::iterm2::RestartSessionResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.RestartSessionResponse.status)
}

// -------------------------------------------------------------------

// ServerOriginatedRPCResultRequest

// optional string request_id = 1;
inline bool ServerOriginatedRPCResultRequest::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerOriginatedRPCResultRequest::has_request_id() const {
  return _internal_has_request_id();
}
inline void ServerOriginatedRPCResultRequest::clear_request_id() {
  request_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerOriginatedRPCResultRequest::request_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPCResultRequest.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerOriginatedRPCResultRequest::set_request_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPCResultRequest.request_id)
}
inline std::string* ServerOriginatedRPCResultRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPCResultRequest.request_id)
  return _s;
}
inline const std::string& ServerOriginatedRPCResultRequest::_internal_request_id() const {
  return request_id_.Get();
}
inline void ServerOriginatedRPCResultRequest::_internal_set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCResultRequest::_internal_mutable_request_id() {
  _has_bits_[0] |= 0x00000001u;
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCResultRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPCResultRequest.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerOriginatedRPCResultRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPCResultRequest.request_id)
}

// string json_exception = 2;
inline bool ServerOriginatedRPCResultRequest::_internal_has_json_exception() const {
  return result_case() == kJsonException;
}
inline bool ServerOriginatedRPCResultRequest::has_json_exception() const {
  return _internal_has_json_exception();
}
inline void ServerOriginatedRPCResultRequest::set_has_json_exception() {
  _oneof_case_[0] = kJsonException;
}
inline void ServerOriginatedRPCResultRequest::clear_json_exception() {
  if (_internal_has_json_exception()) {
    result_.json_exception_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_result();
  }
}
inline const std::string& ServerOriginatedRPCResultRequest::json_exception() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPCResultRequest.json_exception)
  return _internal_json_exception();
}
template <typename ArgT0, typename... ArgT>
inline void ServerOriginatedRPCResultRequest::set_json_exception(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_exception()) {
    clear_result();
    set_has_json_exception();
    result_.json_exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  result_.json_exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPCResultRequest.json_exception)
}
inline std::string* ServerOriginatedRPCResultRequest::mutable_json_exception() {
  std::string* _s = _internal_mutable_json_exception();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPCResultRequest.json_exception)
  return _s;
}
inline const std::string& ServerOriginatedRPCResultRequest::_internal_json_exception() const {
  if (_internal_has_json_exception()) {
    return result_.json_exception_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ServerOriginatedRPCResultRequest::_internal_set_json_exception(const std::string& value) {
  if (!_internal_has_json_exception()) {
    clear_result();
    set_has_json_exception();
    result_.json_exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  result_.json_exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCResultRequest::_internal_mutable_json_exception() {
  if (!_internal_has_json_exception()) {
    clear_result();
    set_has_json_exception();
    result_.json_exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return result_.json_exception_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCResultRequest::release_json_exception() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPCResultRequest.json_exception)
  if (_internal_has_json_exception()) {
    clear_has_result();
    return result_.json_exception_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedRPCResultRequest::set_allocated_json_exception(std::string* json_exception) {
  if (has_result()) {
    clear_result();
  }
  if (json_exception != nullptr) {
    set_has_json_exception();
    result_.json_exception_.UnsafeSetDefault(json_exception);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(json_exception);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPCResultRequest.json_exception)
}

// string json_value = 3;
inline bool ServerOriginatedRPCResultRequest::_internal_has_json_value() const {
  return result_case() == kJsonValue;
}
inline bool ServerOriginatedRPCResultRequest::has_json_value() const {
  return _internal_has_json_value();
}
inline void ServerOriginatedRPCResultRequest::set_has_json_value() {
  _oneof_case_[0] = kJsonValue;
}
inline void ServerOriginatedRPCResultRequest::clear_json_value() {
  if (_internal_has_json_value()) {
    result_.json_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_result();
  }
}
inline const std::string& ServerOriginatedRPCResultRequest::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPCResultRequest.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline void ServerOriginatedRPCResultRequest::set_json_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_value()) {
    clear_result();
    set_has_json_value();
    result_.json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  result_.json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPCResultRequest.json_value)
}
inline std::string* ServerOriginatedRPCResultRequest::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPCResultRequest.json_value)
  return _s;
}
inline const std::string& ServerOriginatedRPCResultRequest::_internal_json_value() const {
  if (_internal_has_json_value()) {
    return result_.json_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ServerOriginatedRPCResultRequest::_internal_set_json_value(const std::string& value) {
  if (!_internal_has_json_value()) {
    clear_result();
    set_has_json_value();
    result_.json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  result_.json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCResultRequest::_internal_mutable_json_value() {
  if (!_internal_has_json_value()) {
    clear_result();
    set_has_json_value();
    result_.json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return result_.json_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCResultRequest::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPCResultRequest.json_value)
  if (_internal_has_json_value()) {
    clear_has_result();
    return result_.json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ServerOriginatedRPCResultRequest::set_allocated_json_value(std::string* json_value) {
  if (has_result()) {
    clear_result();
  }
  if (json_value != nullptr) {
    set_has_json_value();
    result_.json_value_.UnsafeSetDefault(json_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(json_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPCResultRequest.json_value)
}

inline bool ServerOriginatedRPCResultRequest::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void ServerOriginatedRPCResultRequest::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline ServerOriginatedRPCResultRequest::ResultCase ServerOriginatedRPCResultRequest::result_case() const {
  return ServerOriginatedRPCResultRequest::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerOriginatedRPCResultResponse

// -------------------------------------------------------------------

// ListProfilesRequest

// repeated string properties = 1;
inline int ListProfilesRequest::_internal_properties_size() const {
  return properties_.size();
}
inline int ListProfilesRequest::properties_size() const {
  return _internal_properties_size();
}
inline void ListProfilesRequest::clear_properties() {
  properties_.Clear();
}
inline std::string* ListProfilesRequest::add_properties() {
  std::string* _s = _internal_add_properties();
  // @@protoc_insertion_point(field_add_mutable:iterm2.ListProfilesRequest.properties)
  return _s;
}
inline const std::string& ListProfilesRequest::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const std::string& ListProfilesRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListProfilesRequest.properties)
  return _internal_properties(index);
}
inline std::string* ListProfilesRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListProfilesRequest.properties)
  return properties_.Mutable(index);
}
inline void ListProfilesRequest::set_properties(int index, const std::string& value) {
  properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.ListProfilesRequest.properties)
}
inline void ListProfilesRequest::set_properties(int index, std::string&& value) {
  properties_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.ListProfilesRequest.properties)
}
inline void ListProfilesRequest::set_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.ListProfilesRequest.properties)
}
inline void ListProfilesRequest::set_properties(int index, const char* value, size_t size) {
  properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.ListProfilesRequest.properties)
}
inline std::string* ListProfilesRequest::_internal_add_properties() {
  return properties_.Add();
}
inline void ListProfilesRequest::add_properties(const std::string& value) {
  properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.ListProfilesRequest.properties)
}
inline void ListProfilesRequest::add_properties(std::string&& value) {
  properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.ListProfilesRequest.properties)
}
inline void ListProfilesRequest::add_properties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.ListProfilesRequest.properties)
}
inline void ListProfilesRequest::add_properties(const char* value, size_t size) {
  properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.ListProfilesRequest.properties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListProfilesRequest::properties() const {
  // @@protoc_insertion_point(field_list:iterm2.ListProfilesRequest.properties)
  return properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListProfilesRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListProfilesRequest.properties)
  return &properties_;
}

// repeated string guids = 2;
inline int ListProfilesRequest::_internal_guids_size() const {
  return guids_.size();
}
inline int ListProfilesRequest::guids_size() const {
  return _internal_guids_size();
}
inline void ListProfilesRequest::clear_guids() {
  guids_.Clear();
}
inline std::string* ListProfilesRequest::add_guids() {
  std::string* _s = _internal_add_guids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.ListProfilesRequest.guids)
  return _s;
}
inline const std::string& ListProfilesRequest::_internal_guids(int index) const {
  return guids_.Get(index);
}
inline const std::string& ListProfilesRequest::guids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListProfilesRequest.guids)
  return _internal_guids(index);
}
inline std::string* ListProfilesRequest::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListProfilesRequest.guids)
  return guids_.Mutable(index);
}
inline void ListProfilesRequest::set_guids(int index, const std::string& value) {
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.ListProfilesRequest.guids)
}
inline void ListProfilesRequest::set_guids(int index, std::string&& value) {
  guids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.ListProfilesRequest.guids)
}
inline void ListProfilesRequest::set_guids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.ListProfilesRequest.guids)
}
inline void ListProfilesRequest::set_guids(int index, const char* value, size_t size) {
  guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.ListProfilesRequest.guids)
}
inline std::string* ListProfilesRequest::_internal_add_guids() {
  return guids_.Add();
}
inline void ListProfilesRequest::add_guids(const std::string& value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.ListProfilesRequest.guids)
}
inline void ListProfilesRequest::add_guids(std::string&& value) {
  guids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.ListProfilesRequest.guids)
}
inline void ListProfilesRequest::add_guids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.ListProfilesRequest.guids)
}
inline void ListProfilesRequest::add_guids(const char* value, size_t size) {
  guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.ListProfilesRequest.guids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListProfilesRequest::guids() const {
  // @@protoc_insertion_point(field_list:iterm2.ListProfilesRequest.guids)
  return guids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListProfilesRequest::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListProfilesRequest.guids)
  return &guids_;
}

// -------------------------------------------------------------------

// ListProfilesResponse_Profile

// repeated .iterm2.ProfileProperty properties = 1;
inline int ListProfilesResponse_Profile::_internal_properties_size() const {
  return properties_.size();
}
inline int ListProfilesResponse_Profile::properties_size() const {
  return _internal_properties_size();
}
inline void ListProfilesResponse_Profile::clear_properties() {
  properties_.Clear();
}
inline ::iterm2::ProfileProperty* ListProfilesResponse_Profile::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListProfilesResponse.Profile.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
ListProfilesResponse_Profile::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListProfilesResponse.Profile.properties)
  return &properties_;
}
inline const ::iterm2::ProfileProperty& ListProfilesResponse_Profile::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::iterm2::ProfileProperty& ListProfilesResponse_Profile::properties(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListProfilesResponse.Profile.properties)
  return _internal_properties(index);
}
inline ::iterm2::ProfileProperty* ListProfilesResponse_Profile::_internal_add_properties() {
  return properties_.Add();
}
inline ::iterm2::ProfileProperty* ListProfilesResponse_Profile::add_properties() {
  ::iterm2::ProfileProperty* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:iterm2.ListProfilesResponse.Profile.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
ListProfilesResponse_Profile::properties() const {
  // @@protoc_insertion_point(field_list:iterm2.ListProfilesResponse.Profile.properties)
  return properties_;
}

// -------------------------------------------------------------------

// ListProfilesResponse

// repeated .iterm2.ListProfilesResponse.Profile profiles = 1;
inline int ListProfilesResponse::_internal_profiles_size() const {
  return profiles_.size();
}
inline int ListProfilesResponse::profiles_size() const {
  return _internal_profiles_size();
}
inline void ListProfilesResponse::clear_profiles() {
  profiles_.Clear();
}
inline ::iterm2::ListProfilesResponse_Profile* ListProfilesResponse::mutable_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListProfilesResponse.profiles)
  return profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListProfilesResponse_Profile >*
ListProfilesResponse::mutable_profiles() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListProfilesResponse.profiles)
  return &profiles_;
}
inline const ::iterm2::ListProfilesResponse_Profile& ListProfilesResponse::_internal_profiles(int index) const {
  return profiles_.Get(index);
}
inline const ::iterm2::ListProfilesResponse_Profile& ListProfilesResponse::profiles(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListProfilesResponse.profiles)
  return _internal_profiles(index);
}
inline ::iterm2::ListProfilesResponse_Profile* ListProfilesResponse::_internal_add_profiles() {
  return profiles_.Add();
}
inline ::iterm2::ListProfilesResponse_Profile* ListProfilesResponse::add_profiles() {
  ::iterm2::ListProfilesResponse_Profile* _add = _internal_add_profiles();
  // @@protoc_insertion_point(field_add:iterm2.ListProfilesResponse.profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListProfilesResponse_Profile >&
ListProfilesResponse::profiles() const {
  // @@protoc_insertion_point(field_list:iterm2.ListProfilesResponse.profiles)
  return profiles_;
}

// -------------------------------------------------------------------

// FocusRequest

// -------------------------------------------------------------------

// FocusResponse

// repeated .iterm2.FocusChangedNotification notifications = 1;
inline int FocusResponse::_internal_notifications_size() const {
  return notifications_.size();
}
inline int FocusResponse::notifications_size() const {
  return _internal_notifications_size();
}
inline void FocusResponse::clear_notifications() {
  notifications_.Clear();
}
inline ::iterm2::FocusChangedNotification* FocusResponse::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.FocusResponse.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::FocusChangedNotification >*
FocusResponse::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.FocusResponse.notifications)
  return &notifications_;
}
inline const ::iterm2::FocusChangedNotification& FocusResponse::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::iterm2::FocusChangedNotification& FocusResponse::notifications(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.FocusResponse.notifications)
  return _internal_notifications(index);
}
inline ::iterm2::FocusChangedNotification* FocusResponse::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::iterm2::FocusChangedNotification* FocusResponse::add_notifications() {
  ::iterm2::FocusChangedNotification* _add = _internal_add_notifications();
  // @@protoc_insertion_point(field_add:iterm2.FocusResponse.notifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::FocusChangedNotification >&
FocusResponse::notifications() const {
  // @@protoc_insertion_point(field_list:iterm2.FocusResponse.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// SavedArrangementRequest

// optional string name = 1;
inline bool SavedArrangementRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SavedArrangementRequest::has_name() const {
  return _internal_has_name();
}
inline void SavedArrangementRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SavedArrangementRequest::name() const {
  // @@protoc_insertion_point(field_get:iterm2.SavedArrangementRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavedArrangementRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SavedArrangementRequest.name)
}
inline std::string* SavedArrangementRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.SavedArrangementRequest.name)
  return _s;
}
inline const std::string& SavedArrangementRequest::_internal_name() const {
  return name_.Get();
}
inline void SavedArrangementRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SavedArrangementRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SavedArrangementRequest::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.SavedArrangementRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SavedArrangementRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SavedArrangementRequest.name)
}

// optional .iterm2.SavedArrangementRequest.Action action = 2;
inline bool SavedArrangementRequest::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SavedArrangementRequest::has_action() const {
  return _internal_has_action();
}
inline void SavedArrangementRequest::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::iterm2::SavedArrangementRequest_Action SavedArrangementRequest::_internal_action() const {
  return static_cast< ::iterm2::SavedArrangementRequest_Action >(action_);
}
inline ::iterm2::SavedArrangementRequest_Action SavedArrangementRequest::action() const {
  // @@protoc_insertion_point(field_get:iterm2.SavedArrangementRequest.action)
  return _internal_action();
}
inline void SavedArrangementRequest::_internal_set_action(::iterm2::SavedArrangementRequest_Action value) {
  assert(::iterm2::SavedArrangementRequest_Action_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
}
inline void SavedArrangementRequest::set_action(::iterm2::SavedArrangementRequest_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:iterm2.SavedArrangementRequest.action)
}

// optional string window_id = 3;
inline bool SavedArrangementRequest::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SavedArrangementRequest::has_window_id() const {
  return _internal_has_window_id();
}
inline void SavedArrangementRequest::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SavedArrangementRequest::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.SavedArrangementRequest.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavedArrangementRequest::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SavedArrangementRequest.window_id)
}
inline std::string* SavedArrangementRequest::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.SavedArrangementRequest.window_id)
  return _s;
}
inline const std::string& SavedArrangementRequest::_internal_window_id() const {
  return window_id_.Get();
}
inline void SavedArrangementRequest::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SavedArrangementRequest::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000002u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SavedArrangementRequest::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.SavedArrangementRequest.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SavedArrangementRequest::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SavedArrangementRequest.window_id)
}

// -------------------------------------------------------------------

// SavedArrangementResponse

// optional .iterm2.SavedArrangementResponse.Status status = 1;
inline bool SavedArrangementResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SavedArrangementResponse::has_status() const {
  return _internal_has_status();
}
inline void SavedArrangementResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SavedArrangementResponse_Status SavedArrangementResponse::_internal_status() const {
  return static_cast< ::iterm2::SavedArrangementResponse_Status >(status_);
}
inline ::iterm2::SavedArrangementResponse_Status SavedArrangementResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SavedArrangementResponse.status)
  return _internal_status();
}
inline void SavedArrangementResponse::_internal_set_status(::iterm2::SavedArrangementResponse_Status value) {
  assert(::iterm2::SavedArrangementResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SavedArrangementResponse::set_status(::iterm2::SavedArrangementResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SavedArrangementResponse.status)
}

// repeated string names = 2;
inline int SavedArrangementResponse::_internal_names_size() const {
  return names_.size();
}
inline int SavedArrangementResponse::names_size() const {
  return _internal_names_size();
}
inline void SavedArrangementResponse::clear_names() {
  names_.Clear();
}
inline std::string* SavedArrangementResponse::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:iterm2.SavedArrangementResponse.names)
  return _s;
}
inline const std::string& SavedArrangementResponse::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& SavedArrangementResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SavedArrangementResponse.names)
  return _internal_names(index);
}
inline std::string* SavedArrangementResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SavedArrangementResponse.names)
  return names_.Mutable(index);
}
inline void SavedArrangementResponse::set_names(int index, const std::string& value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.SavedArrangementResponse.names)
}
inline void SavedArrangementResponse::set_names(int index, std::string&& value) {
  names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.SavedArrangementResponse.names)
}
inline void SavedArrangementResponse::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.SavedArrangementResponse.names)
}
inline void SavedArrangementResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.SavedArrangementResponse.names)
}
inline std::string* SavedArrangementResponse::_internal_add_names() {
  return names_.Add();
}
inline void SavedArrangementResponse::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.SavedArrangementResponse.names)
}
inline void SavedArrangementResponse::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.SavedArrangementResponse.names)
}
inline void SavedArrangementResponse::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.SavedArrangementResponse.names)
}
inline void SavedArrangementResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.SavedArrangementResponse.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SavedArrangementResponse::names() const {
  // @@protoc_insertion_point(field_list:iterm2.SavedArrangementResponse.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SavedArrangementResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SavedArrangementResponse.names)
  return &names_;
}

// -------------------------------------------------------------------

// VariableRequest_Set

// optional string name = 1;
inline bool VariableRequest_Set::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariableRequest_Set::has_name() const {
  return _internal_has_name();
}
inline void VariableRequest_Set::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariableRequest_Set::name() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.Set.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableRequest_Set::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.Set.name)
}
inline std::string* VariableRequest_Set::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.Set.name)
  return _s;
}
inline const std::string& VariableRequest_Set::_internal_name() const {
  return name_.Get();
}
inline void VariableRequest_Set::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableRequest_Set::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableRequest_Set::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.VariableRequest.Set.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableRequest_Set::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableRequest.Set.name)
}

// optional string value = 2;
inline bool VariableRequest_Set::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VariableRequest_Set::has_value() const {
  return _internal_has_value();
}
inline void VariableRequest_Set::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VariableRequest_Set::value() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.Set.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableRequest_Set::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.Set.value)
}
inline std::string* VariableRequest_Set::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.Set.value)
  return _s;
}
inline const std::string& VariableRequest_Set::_internal_value() const {
  return value_.Get();
}
inline void VariableRequest_Set::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableRequest_Set::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableRequest_Set::release_value() {
  // @@protoc_insertion_point(field_release:iterm2.VariableRequest.Set.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableRequest_Set::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableRequest.Set.value)
}

// -------------------------------------------------------------------

// VariableRequest

// string session_id = 1;
inline bool VariableRequest::_internal_has_session_id() const {
  return scope_case() == kSessionId;
}
inline bool VariableRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void VariableRequest::set_has_session_id() {
  _oneof_case_[0] = kSessionId;
}
inline void VariableRequest::clear_session_id() {
  if (_internal_has_session_id()) {
    scope_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_scope();
  }
}
inline const std::string& VariableRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline void VariableRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_session_id()) {
    clear_scope();
    set_has_session_id();
    scope_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scope_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.session_id)
}
inline std::string* VariableRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.session_id)
  return _s;
}
inline const std::string& VariableRequest::_internal_session_id() const {
  if (_internal_has_session_id()) {
    return scope_.session_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VariableRequest::_internal_set_session_id(const std::string& value) {
  if (!_internal_has_session_id()) {
    clear_scope();
    set_has_session_id();
    scope_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scope_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableRequest::_internal_mutable_session_id() {
  if (!_internal_has_session_id()) {
    clear_scope();
    set_has_session_id();
    scope_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return scope_.session_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.VariableRequest.session_id)
  if (_internal_has_session_id()) {
    clear_has_scope();
    return scope_.session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void VariableRequest::set_allocated_session_id(std::string* session_id) {
  if (has_scope()) {
    clear_scope();
  }
  if (session_id != nullptr) {
    set_has_session_id();
    scope_.session_id_.UnsafeSetDefault(session_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(session_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableRequest.session_id)
}

// string tab_id = 4;
inline bool VariableRequest::_internal_has_tab_id() const {
  return scope_case() == kTabId;
}
inline bool VariableRequest::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void VariableRequest::set_has_tab_id() {
  _oneof_case_[0] = kTabId;
}
inline void VariableRequest::clear_tab_id() {
  if (_internal_has_tab_id()) {
    scope_.tab_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_scope();
  }
}
inline const std::string& VariableRequest::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.tab_id)
  return _internal_tab_id();
}
template <typename ArgT0, typename... ArgT>
inline void VariableRequest::set_tab_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_tab_id()) {
    clear_scope();
    set_has_tab_id();
    scope_.tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scope_.tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.tab_id)
}
inline std::string* VariableRequest::mutable_tab_id() {
  std::string* _s = _internal_mutable_tab_id();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.tab_id)
  return _s;
}
inline const std::string& VariableRequest::_internal_tab_id() const {
  if (_internal_has_tab_id()) {
    return scope_.tab_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VariableRequest::_internal_set_tab_id(const std::string& value) {
  if (!_internal_has_tab_id()) {
    clear_scope();
    set_has_tab_id();
    scope_.tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scope_.tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableRequest::_internal_mutable_tab_id() {
  if (!_internal_has_tab_id()) {
    clear_scope();
    set_has_tab_id();
    scope_.tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return scope_.tab_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableRequest::release_tab_id() {
  // @@protoc_insertion_point(field_release:iterm2.VariableRequest.tab_id)
  if (_internal_has_tab_id()) {
    clear_has_scope();
    return scope_.tab_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void VariableRequest::set_allocated_tab_id(std::string* tab_id) {
  if (has_scope()) {
    clear_scope();
  }
  if (tab_id != nullptr) {
    set_has_tab_id();
    scope_.tab_id_.UnsafeSetDefault(tab_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(tab_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableRequest.tab_id)
}

// bool app = 5;
inline bool VariableRequest::_internal_has_app() const {
  return scope_case() == kApp;
}
inline bool VariableRequest::has_app() const {
  return _internal_has_app();
}
inline void VariableRequest::set_has_app() {
  _oneof_case_[0] = kApp;
}
inline void VariableRequest::clear_app() {
  if (_internal_has_app()) {
    scope_.app_ = false;
    clear_has_scope();
  }
}
inline bool VariableRequest::_internal_app() const {
  if (_internal_has_app()) {
    return scope_.app_;
  }
  return false;
}
inline void VariableRequest::_internal_set_app(bool value) {
  if (!_internal_has_app()) {
    clear_scope();
    set_has_app();
  }
  scope_.app_ = value;
}
inline bool VariableRequest::app() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.app)
  return _internal_app();
}
inline void VariableRequest::set_app(bool value) {
  _internal_set_app(value);
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.app)
}

// string window_id = 6;
inline bool VariableRequest::_internal_has_window_id() const {
  return scope_case() == kWindowId;
}
inline bool VariableRequest::has_window_id() const {
  return _internal_has_window_id();
}
inline void VariableRequest::set_has_window_id() {
  _oneof_case_[0] = kWindowId;
}
inline void VariableRequest::clear_window_id() {
  if (_internal_has_window_id()) {
    scope_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_scope();
  }
}
inline const std::string& VariableRequest::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline void VariableRequest::set_window_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_window_id()) {
    clear_scope();
    set_has_window_id();
    scope_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scope_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.window_id)
}
inline std::string* VariableRequest::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.window_id)
  return _s;
}
inline const std::string& VariableRequest::_internal_window_id() const {
  if (_internal_has_window_id()) {
    return scope_.window_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VariableRequest::_internal_set_window_id(const std::string& value) {
  if (!_internal_has_window_id()) {
    clear_scope();
    set_has_window_id();
    scope_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scope_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableRequest::_internal_mutable_window_id() {
  if (!_internal_has_window_id()) {
    clear_scope();
    set_has_window_id();
    scope_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return scope_.window_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableRequest::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.VariableRequest.window_id)
  if (_internal_has_window_id()) {
    clear_has_scope();
    return scope_.window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void VariableRequest::set_allocated_window_id(std::string* window_id) {
  if (has_scope()) {
    clear_scope();
  }
  if (window_id != nullptr) {
    set_has_window_id();
    scope_.window_id_.UnsafeSetDefault(window_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(window_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableRequest.window_id)
}

// repeated .iterm2.VariableRequest.Set set = 2;
inline int VariableRequest::_internal_set_size() const {
  return set_.size();
}
inline int VariableRequest::set_size() const {
  return _internal_set_size();
}
inline void VariableRequest::clear_set() {
  set_.Clear();
}
inline ::iterm2::VariableRequest_Set* VariableRequest::mutable_set(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.set)
  return set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::VariableRequest_Set >*
VariableRequest::mutable_set() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.VariableRequest.set)
  return &set_;
}
inline const ::iterm2::VariableRequest_Set& VariableRequest::_internal_set(int index) const {
  return set_.Get(index);
}
inline const ::iterm2::VariableRequest_Set& VariableRequest::set(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.set)
  return _internal_set(index);
}
inline ::iterm2::VariableRequest_Set* VariableRequest::_internal_add_set() {
  return set_.Add();
}
inline ::iterm2::VariableRequest_Set* VariableRequest::add_set() {
  ::iterm2::VariableRequest_Set* _add = _internal_add_set();
  // @@protoc_insertion_point(field_add:iterm2.VariableRequest.set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::VariableRequest_Set >&
VariableRequest::set() const {
  // @@protoc_insertion_point(field_list:iterm2.VariableRequest.set)
  return set_;
}

// repeated string get = 3;
inline int VariableRequest::_internal_get_size() const {
  return get_.size();
}
inline int VariableRequest::get_size() const {
  return _internal_get_size();
}
inline void VariableRequest::clear_get() {
  get_.Clear();
}
inline std::string* VariableRequest::add_get() {
  std::string* _s = _internal_add_get();
  // @@protoc_insertion_point(field_add_mutable:iterm2.VariableRequest.get)
  return _s;
}
inline const std::string& VariableRequest::_internal_get(int index) const {
  return get_.Get(index);
}
inline const std::string& VariableRequest::get(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.VariableRequest.get)
  return _internal_get(index);
}
inline std::string* VariableRequest::mutable_get(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.VariableRequest.get)
  return get_.Mutable(index);
}
inline void VariableRequest::set_get(int index, const std::string& value) {
  get_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.get)
}
inline void VariableRequest::set_get(int index, std::string&& value) {
  get_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.VariableRequest.get)
}
inline void VariableRequest::set_get(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  get_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.VariableRequest.get)
}
inline void VariableRequest::set_get(int index, const char* value, size_t size) {
  get_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.VariableRequest.get)
}
inline std::string* VariableRequest::_internal_add_get() {
  return get_.Add();
}
inline void VariableRequest::add_get(const std::string& value) {
  get_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.VariableRequest.get)
}
inline void VariableRequest::add_get(std::string&& value) {
  get_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.VariableRequest.get)
}
inline void VariableRequest::add_get(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  get_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.VariableRequest.get)
}
inline void VariableRequest::add_get(const char* value, size_t size) {
  get_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.VariableRequest.get)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VariableRequest::get() const {
  // @@protoc_insertion_point(field_list:iterm2.VariableRequest.get)
  return get_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VariableRequest::mutable_get() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.VariableRequest.get)
  return &get_;
}

inline bool VariableRequest::has_scope() const {
  return scope_case() != SCOPE_NOT_SET;
}
inline void VariableRequest::clear_has_scope() {
  _oneof_case_[0] = SCOPE_NOT_SET;
}
inline VariableRequest::ScopeCase VariableRequest::scope_case() const {
  return VariableRequest::ScopeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VariableResponse

// optional .iterm2.VariableResponse.Status status = 1;
inline bool VariableResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariableResponse::has_status() const {
  return _internal_has_status();
}
inline void VariableResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::VariableResponse_Status VariableResponse::_internal_status() const {
  return static_cast< ::iterm2::VariableResponse_Status >(status_);
}
inline ::iterm2::VariableResponse_Status VariableResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableResponse.status)
  return _internal_status();
}
inline void VariableResponse::_internal_set_status(::iterm2::VariableResponse_Status value) {
  assert(::iterm2::VariableResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void VariableResponse::set_status(::iterm2::VariableResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.VariableResponse.status)
}

// repeated string values = 2;
inline int VariableResponse::_internal_values_size() const {
  return values_.size();
}
inline int VariableResponse::values_size() const {
  return _internal_values_size();
}
inline void VariableResponse::clear_values() {
  values_.Clear();
}
inline std::string* VariableResponse::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:iterm2.VariableResponse.values)
  return _s;
}
inline const std::string& VariableResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& VariableResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.VariableResponse.values)
  return _internal_values(index);
}
inline std::string* VariableResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.VariableResponse.values)
  return values_.Mutable(index);
}
inline void VariableResponse::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.VariableResponse.values)
}
inline void VariableResponse::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.VariableResponse.values)
}
inline void VariableResponse::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.VariableResponse.values)
}
inline void VariableResponse::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.VariableResponse.values)
}
inline std::string* VariableResponse::_internal_add_values() {
  return values_.Add();
}
inline void VariableResponse::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.VariableResponse.values)
}
inline void VariableResponse::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.VariableResponse.values)
}
inline void VariableResponse::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.VariableResponse.values)
}
inline void VariableResponse::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.VariableResponse.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VariableResponse::values() const {
  // @@protoc_insertion_point(field_list:iterm2.VariableResponse.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VariableResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.VariableResponse.values)
  return &values_;
}

// -------------------------------------------------------------------

// ActivateRequest_App

// optional bool raise_all_windows = 1;
inline bool ActivateRequest_App::_internal_has_raise_all_windows() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActivateRequest_App::has_raise_all_windows() const {
  return _internal_has_raise_all_windows();
}
inline void ActivateRequest_App::clear_raise_all_windows() {
  raise_all_windows_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ActivateRequest_App::_internal_raise_all_windows() const {
  return raise_all_windows_;
}
inline bool ActivateRequest_App::raise_all_windows() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.App.raise_all_windows)
  return _internal_raise_all_windows();
}
inline void ActivateRequest_App::_internal_set_raise_all_windows(bool value) {
  _has_bits_[0] |= 0x00000001u;
  raise_all_windows_ = value;
}
inline void ActivateRequest_App::set_raise_all_windows(bool value) {
  _internal_set_raise_all_windows(value);
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.App.raise_all_windows)
}

// optional bool ignoring_other_apps = 2;
inline bool ActivateRequest_App::_internal_has_ignoring_other_apps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActivateRequest_App::has_ignoring_other_apps() const {
  return _internal_has_ignoring_other_apps();
}
inline void ActivateRequest_App::clear_ignoring_other_apps() {
  ignoring_other_apps_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ActivateRequest_App::_internal_ignoring_other_apps() const {
  return ignoring_other_apps_;
}
inline bool ActivateRequest_App::ignoring_other_apps() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.App.ignoring_other_apps)
  return _internal_ignoring_other_apps();
}
inline void ActivateRequest_App::_internal_set_ignoring_other_apps(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ignoring_other_apps_ = value;
}
inline void ActivateRequest_App::set_ignoring_other_apps(bool value) {
  _internal_set_ignoring_other_apps(value);
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.App.ignoring_other_apps)
}

// -------------------------------------------------------------------

// ActivateRequest

// string window_id = 1;
inline bool ActivateRequest::_internal_has_window_id() const {
  return identifier_case() == kWindowId;
}
inline bool ActivateRequest::has_window_id() const {
  return _internal_has_window_id();
}
inline void ActivateRequest::set_has_window_id() {
  _oneof_case_[0] = kWindowId;
}
inline void ActivateRequest::clear_window_id() {
  if (_internal_has_window_id()) {
    identifier_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& ActivateRequest::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline void ActivateRequest::set_window_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.window_id)
}
inline std::string* ActivateRequest::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ActivateRequest.window_id)
  return _s;
}
inline const std::string& ActivateRequest::_internal_window_id() const {
  if (_internal_has_window_id()) {
    return identifier_.window_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ActivateRequest::_internal_set_window_id(const std::string& value) {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivateRequest::_internal_mutable_window_id() {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.window_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivateRequest::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.ActivateRequest.window_id)
  if (_internal_has_window_id()) {
    clear_has_identifier();
    return identifier_.window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ActivateRequest::set_allocated_window_id(std::string* window_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (window_id != nullptr) {
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(window_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(window_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ActivateRequest.window_id)
}

// string tab_id = 2;
inline bool ActivateRequest::_internal_has_tab_id() const {
  return identifier_case() == kTabId;
}
inline bool ActivateRequest::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void ActivateRequest::set_has_tab_id() {
  _oneof_case_[0] = kTabId;
}
inline void ActivateRequest::clear_tab_id() {
  if (_internal_has_tab_id()) {
    identifier_.tab_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& ActivateRequest::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.tab_id)
  return _internal_tab_id();
}
template <typename ArgT0, typename... ArgT>
inline void ActivateRequest::set_tab_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_tab_id()) {
    clear_identifier();
    set_has_tab_id();
    identifier_.tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.tab_id)
}
inline std::string* ActivateRequest::mutable_tab_id() {
  std::string* _s = _internal_mutable_tab_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ActivateRequest.tab_id)
  return _s;
}
inline const std::string& ActivateRequest::_internal_tab_id() const {
  if (_internal_has_tab_id()) {
    return identifier_.tab_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ActivateRequest::_internal_set_tab_id(const std::string& value) {
  if (!_internal_has_tab_id()) {
    clear_identifier();
    set_has_tab_id();
    identifier_.tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivateRequest::_internal_mutable_tab_id() {
  if (!_internal_has_tab_id()) {
    clear_identifier();
    set_has_tab_id();
    identifier_.tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.tab_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivateRequest::release_tab_id() {
  // @@protoc_insertion_point(field_release:iterm2.ActivateRequest.tab_id)
  if (_internal_has_tab_id()) {
    clear_has_identifier();
    return identifier_.tab_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ActivateRequest::set_allocated_tab_id(std::string* tab_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (tab_id != nullptr) {
    set_has_tab_id();
    identifier_.tab_id_.UnsafeSetDefault(tab_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(tab_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ActivateRequest.tab_id)
}

// string session_id = 3;
inline bool ActivateRequest::_internal_has_session_id() const {
  return identifier_case() == kSessionId;
}
inline bool ActivateRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void ActivateRequest::set_has_session_id() {
  _oneof_case_[0] = kSessionId;
}
inline void ActivateRequest::clear_session_id() {
  if (_internal_has_session_id()) {
    identifier_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& ActivateRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline void ActivateRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.session_id)
}
inline std::string* ActivateRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ActivateRequest.session_id)
  return _s;
}
inline const std::string& ActivateRequest::_internal_session_id() const {
  if (_internal_has_session_id()) {
    return identifier_.session_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ActivateRequest::_internal_set_session_id(const std::string& value) {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivateRequest::_internal_mutable_session_id() {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.session_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivateRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.ActivateRequest.session_id)
  if (_internal_has_session_id()) {
    clear_has_identifier();
    return identifier_.session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ActivateRequest::set_allocated_session_id(std::string* session_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (session_id != nullptr) {
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(session_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(session_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ActivateRequest.session_id)
}

// optional bool order_window_front = 4;
inline bool ActivateRequest::_internal_has_order_window_front() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActivateRequest::has_order_window_front() const {
  return _internal_has_order_window_front();
}
inline void ActivateRequest::clear_order_window_front() {
  order_window_front_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ActivateRequest::_internal_order_window_front() const {
  return order_window_front_;
}
inline bool ActivateRequest::order_window_front() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.order_window_front)
  return _internal_order_window_front();
}
inline void ActivateRequest::_internal_set_order_window_front(bool value) {
  _has_bits_[0] |= 0x00000002u;
  order_window_front_ = value;
}
inline void ActivateRequest::set_order_window_front(bool value) {
  _internal_set_order_window_front(value);
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.order_window_front)
}

// optional bool select_tab = 5;
inline bool ActivateRequest::_internal_has_select_tab() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ActivateRequest::has_select_tab() const {
  return _internal_has_select_tab();
}
inline void ActivateRequest::clear_select_tab() {
  select_tab_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ActivateRequest::_internal_select_tab() const {
  return select_tab_;
}
inline bool ActivateRequest::select_tab() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.select_tab)
  return _internal_select_tab();
}
inline void ActivateRequest::_internal_set_select_tab(bool value) {
  _has_bits_[0] |= 0x00000004u;
  select_tab_ = value;
}
inline void ActivateRequest::set_select_tab(bool value) {
  _internal_set_select_tab(value);
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.select_tab)
}

// optional bool select_session = 6;
inline bool ActivateRequest::_internal_has_select_session() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ActivateRequest::has_select_session() const {
  return _internal_has_select_session();
}
inline void ActivateRequest::clear_select_session() {
  select_session_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ActivateRequest::_internal_select_session() const {
  return select_session_;
}
inline bool ActivateRequest::select_session() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.select_session)
  return _internal_select_session();
}
inline void ActivateRequest::_internal_set_select_session(bool value) {
  _has_bits_[0] |= 0x00000008u;
  select_session_ = value;
}
inline void ActivateRequest::set_select_session(bool value) {
  _internal_set_select_session(value);
  // @@protoc_insertion_point(field_set:iterm2.ActivateRequest.select_session)
}

// optional .iterm2.ActivateRequest.App activate_app = 7;
inline bool ActivateRequest::_internal_has_activate_app() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || activate_app_ != nullptr);
  return value;
}
inline bool ActivateRequest::has_activate_app() const {
  return _internal_has_activate_app();
}
inline void ActivateRequest::clear_activate_app() {
  if (activate_app_ != nullptr) activate_app_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::ActivateRequest_App& ActivateRequest::_internal_activate_app() const {
  const ::iterm2::ActivateRequest_App* p = activate_app_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::ActivateRequest_App&>(
      ::iterm2::_ActivateRequest_App_default_instance_);
}
inline const ::iterm2::ActivateRequest_App& ActivateRequest::activate_app() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateRequest.activate_app)
  return _internal_activate_app();
}
inline void ActivateRequest::unsafe_arena_set_allocated_activate_app(
    ::iterm2::ActivateRequest_App* activate_app) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activate_app_);
  }
  activate_app_ = activate_app;
  if (activate_app) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ActivateRequest.activate_app)
}
inline ::iterm2::ActivateRequest_App* ActivateRequest::release_activate_app() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::ActivateRequest_App* temp = activate_app_;
  activate_app_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::ActivateRequest_App* ActivateRequest::unsafe_arena_release_activate_app() {
  // @@protoc_insertion_point(field_release:iterm2.ActivateRequest.activate_app)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::ActivateRequest_App* temp = activate_app_;
  activate_app_ = nullptr;
  return temp;
}
inline ::iterm2::ActivateRequest_App* ActivateRequest::_internal_mutable_activate_app() {
  _has_bits_[0] |= 0x00000001u;
  if (activate_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::ActivateRequest_App>(GetArenaForAllocation());
    activate_app_ = p;
  }
  return activate_app_;
}
inline ::iterm2::ActivateRequest_App* ActivateRequest::mutable_activate_app() {
  ::iterm2::ActivateRequest_App* _msg = _internal_mutable_activate_app();
  // @@protoc_insertion_point(field_mutable:iterm2.ActivateRequest.activate_app)
  return _msg;
}
inline void ActivateRequest::set_allocated_activate_app(::iterm2::ActivateRequest_App* activate_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete activate_app_;
  }
  if (activate_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ActivateRequest_App>::GetOwningArena(activate_app);
    if (message_arena != submessage_arena) {
      activate_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activate_app_ = activate_app;
  // @@protoc_insertion_point(field_set_allocated:iterm2.ActivateRequest.activate_app)
}

inline bool ActivateRequest::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void ActivateRequest::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline ActivateRequest::IdentifierCase ActivateRequest::identifier_case() const {
  return ActivateRequest::IdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActivateResponse

// optional .iterm2.ActivateResponse.Status status = 1;
inline bool ActivateResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActivateResponse::has_status() const {
  return _internal_has_status();
}
inline void ActivateResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::ActivateResponse_Status ActivateResponse::_internal_status() const {
  return static_cast< ::iterm2::ActivateResponse_Status >(status_);
}
inline ::iterm2::ActivateResponse_Status ActivateResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.ActivateResponse.status)
  return _internal_status();
}
inline void ActivateResponse::_internal_set_status(::iterm2::ActivateResponse_Status value) {
  assert(::iterm2::ActivateResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void ActivateResponse::set_status(::iterm2::ActivateResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.ActivateResponse.status)
}

// -------------------------------------------------------------------

// InjectRequest

// repeated string session_id = 1;
inline int InjectRequest::_internal_session_id_size() const {
  return session_id_.size();
}
inline int InjectRequest::session_id_size() const {
  return _internal_session_id_size();
}
inline void InjectRequest::clear_session_id() {
  session_id_.Clear();
}
inline std::string* InjectRequest::add_session_id() {
  std::string* _s = _internal_add_session_id();
  // @@protoc_insertion_point(field_add_mutable:iterm2.InjectRequest.session_id)
  return _s;
}
inline const std::string& InjectRequest::_internal_session_id(int index) const {
  return session_id_.Get(index);
}
inline const std::string& InjectRequest::session_id(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.InjectRequest.session_id)
  return _internal_session_id(index);
}
inline std::string* InjectRequest::mutable_session_id(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.InjectRequest.session_id)
  return session_id_.Mutable(index);
}
inline void InjectRequest::set_session_id(int index, const std::string& value) {
  session_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.InjectRequest.session_id)
}
inline void InjectRequest::set_session_id(int index, std::string&& value) {
  session_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.InjectRequest.session_id)
}
inline void InjectRequest::set_session_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.InjectRequest.session_id)
}
inline void InjectRequest::set_session_id(int index, const char* value, size_t size) {
  session_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.InjectRequest.session_id)
}
inline std::string* InjectRequest::_internal_add_session_id() {
  return session_id_.Add();
}
inline void InjectRequest::add_session_id(const std::string& value) {
  session_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.InjectRequest.session_id)
}
inline void InjectRequest::add_session_id(std::string&& value) {
  session_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.InjectRequest.session_id)
}
inline void InjectRequest::add_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.InjectRequest.session_id)
}
inline void InjectRequest::add_session_id(const char* value, size_t size) {
  session_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.InjectRequest.session_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InjectRequest::session_id() const {
  // @@protoc_insertion_point(field_list:iterm2.InjectRequest.session_id)
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InjectRequest::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.InjectRequest.session_id)
  return &session_id_;
}

// optional bytes data = 2;
inline bool InjectRequest::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InjectRequest::has_data() const {
  return _internal_has_data();
}
inline void InjectRequest::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InjectRequest::data() const {
  // @@protoc_insertion_point(field_get:iterm2.InjectRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InjectRequest::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.InjectRequest.data)
}
inline std::string* InjectRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:iterm2.InjectRequest.data)
  return _s;
}
inline const std::string& InjectRequest::_internal_data() const {
  return data_.Get();
}
inline void InjectRequest::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InjectRequest::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InjectRequest::release_data() {
  // @@protoc_insertion_point(field_release:iterm2.InjectRequest.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InjectRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.InjectRequest.data)
}

// -------------------------------------------------------------------

// InjectResponse

// repeated .iterm2.InjectResponse.Status status = 1;
inline int InjectResponse::_internal_status_size() const {
  return status_.size();
}
inline int InjectResponse::status_size() const {
  return _internal_status_size();
}
inline void InjectResponse::clear_status() {
  status_.Clear();
}
inline ::iterm2::InjectResponse_Status InjectResponse::_internal_status(int index) const {
  return static_cast< ::iterm2::InjectResponse_Status >(status_.Get(index));
}
inline ::iterm2::InjectResponse_Status InjectResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.InjectResponse.status)
  return _internal_status(index);
}
inline void InjectResponse::set_status(int index, ::iterm2::InjectResponse_Status value) {
  assert(::iterm2::InjectResponse_Status_IsValid(value));
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.InjectResponse.status)
}
inline void InjectResponse::_internal_add_status(::iterm2::InjectResponse_Status value) {
  assert(::iterm2::InjectResponse_Status_IsValid(value));
  status_.Add(value);
}
inline void InjectResponse::add_status(::iterm2::InjectResponse_Status value) {
  _internal_add_status(value);
  // @@protoc_insertion_point(field_add:iterm2.InjectResponse.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InjectResponse::status() const {
  // @@protoc_insertion_point(field_list:iterm2.InjectResponse.status)
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InjectResponse::_internal_mutable_status() {
  return &status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InjectResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.InjectResponse.status)
  return _internal_mutable_status();
}

// -------------------------------------------------------------------

// GetPropertyRequest

// string window_id = 1;
inline bool GetPropertyRequest::_internal_has_window_id() const {
  return identifier_case() == kWindowId;
}
inline bool GetPropertyRequest::has_window_id() const {
  return _internal_has_window_id();
}
inline void GetPropertyRequest::set_has_window_id() {
  _oneof_case_[0] = kWindowId;
}
inline void GetPropertyRequest::clear_window_id() {
  if (_internal_has_window_id()) {
    identifier_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& GetPropertyRequest::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPropertyRequest.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline void GetPropertyRequest::set_window_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPropertyRequest.window_id)
}
inline std::string* GetPropertyRequest::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPropertyRequest.window_id)
  return _s;
}
inline const std::string& GetPropertyRequest::_internal_window_id() const {
  if (_internal_has_window_id()) {
    return identifier_.window_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetPropertyRequest::_internal_set_window_id(const std::string& value) {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::_internal_mutable_window_id() {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.window_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.GetPropertyRequest.window_id)
  if (_internal_has_window_id()) {
    clear_has_identifier();
    return identifier_.window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void GetPropertyRequest::set_allocated_window_id(std::string* window_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (window_id != nullptr) {
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(window_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(window_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPropertyRequest.window_id)
}

// string session_id = 3;
inline bool GetPropertyRequest::_internal_has_session_id() const {
  return identifier_case() == kSessionId;
}
inline bool GetPropertyRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetPropertyRequest::set_has_session_id() {
  _oneof_case_[0] = kSessionId;
}
inline void GetPropertyRequest::clear_session_id() {
  if (_internal_has_session_id()) {
    identifier_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& GetPropertyRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPropertyRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline void GetPropertyRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPropertyRequest.session_id)
}
inline std::string* GetPropertyRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPropertyRequest.session_id)
  return _s;
}
inline const std::string& GetPropertyRequest::_internal_session_id() const {
  if (_internal_has_session_id()) {
    return identifier_.session_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetPropertyRequest::_internal_set_session_id(const std::string& value) {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::_internal_mutable_session_id() {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.session_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.GetPropertyRequest.session_id)
  if (_internal_has_session_id()) {
    clear_has_identifier();
    return identifier_.session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void GetPropertyRequest::set_allocated_session_id(std::string* session_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (session_id != nullptr) {
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(session_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(session_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPropertyRequest.session_id)
}

// optional string name = 2;
inline bool GetPropertyRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPropertyRequest::has_name() const {
  return _internal_has_name();
}
inline void GetPropertyRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPropertyRequest::name() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPropertyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPropertyRequest.name)
}
inline std::string* GetPropertyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPropertyRequest.name)
  return _s;
}
inline const std::string& GetPropertyRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPropertyRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPropertyRequest::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.GetPropertyRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPropertyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPropertyRequest.name)
}

inline bool GetPropertyRequest::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void GetPropertyRequest::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline GetPropertyRequest::IdentifierCase GetPropertyRequest::identifier_case() const {
  return GetPropertyRequest::IdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetPropertyResponse

// optional .iterm2.GetPropertyResponse.Status status = 1;
inline bool GetPropertyResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPropertyResponse::has_status() const {
  return _internal_has_status();
}
inline void GetPropertyResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::iterm2::GetPropertyResponse_Status GetPropertyResponse::_internal_status() const {
  return static_cast< ::iterm2::GetPropertyResponse_Status >(status_);
}
inline ::iterm2::GetPropertyResponse_Status GetPropertyResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPropertyResponse.status)
  return _internal_status();
}
inline void GetPropertyResponse::_internal_set_status(::iterm2::GetPropertyResponse_Status value) {
  assert(::iterm2::GetPropertyResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void GetPropertyResponse::set_status(::iterm2::GetPropertyResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.GetPropertyResponse.status)
}

// optional string json_value = 2;
inline bool GetPropertyResponse::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPropertyResponse::has_json_value() const {
  return _internal_has_json_value();
}
inline void GetPropertyResponse::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPropertyResponse::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPropertyResponse.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertyResponse::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPropertyResponse.json_value)
}
inline std::string* GetPropertyResponse::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPropertyResponse.json_value)
  return _s;
}
inline const std::string& GetPropertyResponse::_internal_json_value() const {
  return json_value_.Get();
}
inline void GetPropertyResponse::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPropertyResponse::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000001u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPropertyResponse::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.GetPropertyResponse.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPropertyResponse::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPropertyResponse.json_value)
}

// -------------------------------------------------------------------

// SetPropertyRequest

// string window_id = 1;
inline bool SetPropertyRequest::_internal_has_window_id() const {
  return identifier_case() == kWindowId;
}
inline bool SetPropertyRequest::has_window_id() const {
  return _internal_has_window_id();
}
inline void SetPropertyRequest::set_has_window_id() {
  _oneof_case_[0] = kWindowId;
}
inline void SetPropertyRequest::clear_window_id() {
  if (_internal_has_window_id()) {
    identifier_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& SetPropertyRequest::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.SetPropertyRequest.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline void SetPropertyRequest::set_window_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetPropertyRequest.window_id)
}
inline std::string* SetPropertyRequest::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.SetPropertyRequest.window_id)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_window_id() const {
  if (_internal_has_window_id()) {
    return identifier_.window_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SetPropertyRequest::_internal_set_window_id(const std::string& value) {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_window_id() {
  if (!_internal_has_window_id()) {
    clear_identifier();
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.window_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.SetPropertyRequest.window_id)
  if (_internal_has_window_id()) {
    clear_has_identifier();
    return identifier_.window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SetPropertyRequest::set_allocated_window_id(std::string* window_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (window_id != nullptr) {
    set_has_window_id();
    identifier_.window_id_.UnsafeSetDefault(window_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(window_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetPropertyRequest.window_id)
}

// string session_id = 5;
inline bool SetPropertyRequest::_internal_has_session_id() const {
  return identifier_case() == kSessionId;
}
inline bool SetPropertyRequest::has_session_id() const {
  return _internal_has_session_id();
}
inline void SetPropertyRequest::set_has_session_id() {
  _oneof_case_[0] = kSessionId;
}
inline void SetPropertyRequest::clear_session_id() {
  if (_internal_has_session_id()) {
    identifier_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_identifier();
  }
}
inline const std::string& SetPropertyRequest::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.SetPropertyRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline void SetPropertyRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetPropertyRequest.session_id)
}
inline std::string* SetPropertyRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.SetPropertyRequest.session_id)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_session_id() const {
  if (_internal_has_session_id()) {
    return identifier_.session_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SetPropertyRequest::_internal_set_session_id(const std::string& value) {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_session_id() {
  if (!_internal_has_session_id()) {
    clear_identifier();
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return identifier_.session_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.SetPropertyRequest.session_id)
  if (_internal_has_session_id()) {
    clear_has_identifier();
    return identifier_.session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SetPropertyRequest::set_allocated_session_id(std::string* session_id) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (session_id != nullptr) {
    set_has_session_id();
    identifier_.session_id_.UnsafeSetDefault(session_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(session_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetPropertyRequest.session_id)
}

// optional string name = 3;
inline bool SetPropertyRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetPropertyRequest::has_name() const {
  return _internal_has_name();
}
inline void SetPropertyRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetPropertyRequest::name() const {
  // @@protoc_insertion_point(field_get:iterm2.SetPropertyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetPropertyRequest.name)
}
inline std::string* SetPropertyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.SetPropertyRequest.name)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_name() const {
  return name_.Get();
}
inline void SetPropertyRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.SetPropertyRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetPropertyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetPropertyRequest.name)
}

// optional string json_value = 4;
inline bool SetPropertyRequest::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetPropertyRequest::has_json_value() const {
  return _internal_has_json_value();
}
inline void SetPropertyRequest::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetPropertyRequest::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.SetPropertyRequest.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPropertyRequest::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetPropertyRequest.json_value)
}
inline std::string* SetPropertyRequest::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.SetPropertyRequest.json_value)
  return _s;
}
inline const std::string& SetPropertyRequest::_internal_json_value() const {
  return json_value_.Get();
}
inline void SetPropertyRequest::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000002u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetPropertyRequest::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.SetPropertyRequest.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetPropertyRequest::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetPropertyRequest.json_value)
}

inline bool SetPropertyRequest::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void SetPropertyRequest::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline SetPropertyRequest::IdentifierCase SetPropertyRequest::identifier_case() const {
  return SetPropertyRequest::IdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetPropertyResponse

// optional .iterm2.SetPropertyResponse.Status status = 1;
inline bool SetPropertyResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetPropertyResponse::has_status() const {
  return _internal_has_status();
}
inline void SetPropertyResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SetPropertyResponse_Status SetPropertyResponse::_internal_status() const {
  return static_cast< ::iterm2::SetPropertyResponse_Status >(status_);
}
inline ::iterm2::SetPropertyResponse_Status SetPropertyResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SetPropertyResponse.status)
  return _internal_status();
}
inline void SetPropertyResponse::_internal_set_status(::iterm2::SetPropertyResponse_Status value) {
  assert(::iterm2::SetPropertyResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SetPropertyResponse::set_status(::iterm2::SetPropertyResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SetPropertyResponse.status)
}

// -------------------------------------------------------------------

// RegisterToolRequest

// optional string name = 1;
inline bool RegisterToolRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterToolRequest::has_name() const {
  return _internal_has_name();
}
inline void RegisterToolRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterToolRequest::name() const {
  // @@protoc_insertion_point(field_get:iterm2.RegisterToolRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterToolRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RegisterToolRequest.name)
}
inline std::string* RegisterToolRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RegisterToolRequest.name)
  return _s;
}
inline const std::string& RegisterToolRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterToolRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterToolRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterToolRequest::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.RegisterToolRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegisterToolRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RegisterToolRequest.name)
}

// optional string identifier = 2;
inline bool RegisterToolRequest::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterToolRequest::has_identifier() const {
  return _internal_has_identifier();
}
inline void RegisterToolRequest::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegisterToolRequest::identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.RegisterToolRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterToolRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RegisterToolRequest.identifier)
}
inline std::string* RegisterToolRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.RegisterToolRequest.identifier)
  return _s;
}
inline const std::string& RegisterToolRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void RegisterToolRequest::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterToolRequest::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterToolRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.RegisterToolRequest.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegisterToolRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RegisterToolRequest.identifier)
}

// optional bool reveal_if_already_registered = 5 [default = false];
inline bool RegisterToolRequest::_internal_has_reveal_if_already_registered() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegisterToolRequest::has_reveal_if_already_registered() const {
  return _internal_has_reveal_if_already_registered();
}
inline void RegisterToolRequest::clear_reveal_if_already_registered() {
  reveal_if_already_registered_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RegisterToolRequest::_internal_reveal_if_already_registered() const {
  return reveal_if_already_registered_;
}
inline bool RegisterToolRequest::reveal_if_already_registered() const {
  // @@protoc_insertion_point(field_get:iterm2.RegisterToolRequest.reveal_if_already_registered)
  return _internal_reveal_if_already_registered();
}
inline void RegisterToolRequest::_internal_set_reveal_if_already_registered(bool value) {
  _has_bits_[0] |= 0x00000008u;
  reveal_if_already_registered_ = value;
}
inline void RegisterToolRequest::set_reveal_if_already_registered(bool value) {
  _internal_set_reveal_if_already_registered(value);
  // @@protoc_insertion_point(field_set:iterm2.RegisterToolRequest.reveal_if_already_registered)
}

// optional .iterm2.RegisterToolRequest.ToolType tool_type = 3 [default = WEB_VIEW_TOOL];
inline bool RegisterToolRequest::_internal_has_tool_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegisterToolRequest::has_tool_type() const {
  return _internal_has_tool_type();
}
inline void RegisterToolRequest::clear_tool_type() {
  tool_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::iterm2::RegisterToolRequest_ToolType RegisterToolRequest::_internal_tool_type() const {
  return static_cast< ::iterm2::RegisterToolRequest_ToolType >(tool_type_);
}
inline ::iterm2::RegisterToolRequest_ToolType RegisterToolRequest::tool_type() const {
  // @@protoc_insertion_point(field_get:iterm2.RegisterToolRequest.tool_type)
  return _internal_tool_type();
}
inline void RegisterToolRequest::_internal_set_tool_type(::iterm2::RegisterToolRequest_ToolType value) {
  assert(::iterm2::RegisterToolRequest_ToolType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  tool_type_ = value;
}
inline void RegisterToolRequest::set_tool_type(::iterm2::RegisterToolRequest_ToolType value) {
  _internal_set_tool_type(value);
  // @@protoc_insertion_point(field_set:iterm2.RegisterToolRequest.tool_type)
}

// optional string URL = 4;
inline bool RegisterToolRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegisterToolRequest::has_url() const {
  return _internal_has_url();
}
inline void RegisterToolRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RegisterToolRequest::url() const {
  // @@protoc_insertion_point(field_get:iterm2.RegisterToolRequest.URL)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterToolRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RegisterToolRequest.URL)
}
inline std::string* RegisterToolRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:iterm2.RegisterToolRequest.URL)
  return _s;
}
inline const std::string& RegisterToolRequest::_internal_url() const {
  return url_.Get();
}
inline void RegisterToolRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterToolRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterToolRequest::release_url() {
  // @@protoc_insertion_point(field_release:iterm2.RegisterToolRequest.URL)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegisterToolRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RegisterToolRequest.URL)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_RPCArgumentSignature

// optional string name = 1;
inline bool RPCRegistrationRequest_RPCArgumentSignature::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_RPCArgumentSignature::has_name() const {
  return _internal_has_name();
}
inline void RPCRegistrationRequest_RPCArgumentSignature::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_RPCArgumentSignature::name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.RPCArgumentSignature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_RPCArgumentSignature::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.RPCArgumentSignature.name)
}
inline std::string* RPCRegistrationRequest_RPCArgumentSignature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.RPCArgumentSignature.name)
  return _s;
}
inline const std::string& RPCRegistrationRequest_RPCArgumentSignature::_internal_name() const {
  return name_.Get();
}
inline void RPCRegistrationRequest_RPCArgumentSignature::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_RPCArgumentSignature::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_RPCArgumentSignature::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.RPCArgumentSignature.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_RPCArgumentSignature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.RPCArgumentSignature.name)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_RPCArgument

// optional string name = 1;
inline bool RPCRegistrationRequest_RPCArgument::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_RPCArgument::has_name() const {
  return _internal_has_name();
}
inline void RPCRegistrationRequest_RPCArgument::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_RPCArgument::name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.RPCArgument.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_RPCArgument::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.RPCArgument.name)
}
inline std::string* RPCRegistrationRequest_RPCArgument::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.RPCArgument.name)
  return _s;
}
inline const std::string& RPCRegistrationRequest_RPCArgument::_internal_name() const {
  return name_.Get();
}
inline void RPCRegistrationRequest_RPCArgument::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_RPCArgument::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_RPCArgument::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.RPCArgument.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_RPCArgument::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.RPCArgument.name)
}

// optional string path = 2;
inline bool RPCRegistrationRequest_RPCArgument::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_RPCArgument::has_path() const {
  return _internal_has_path();
}
inline void RPCRegistrationRequest_RPCArgument::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCRegistrationRequest_RPCArgument::path() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.RPCArgument.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_RPCArgument::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.RPCArgument.path)
}
inline std::string* RPCRegistrationRequest_RPCArgument::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.RPCArgument.path)
  return _s;
}
inline const std::string& RPCRegistrationRequest_RPCArgument::_internal_path() const {
  return path_.Get();
}
inline void RPCRegistrationRequest_RPCArgument::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_RPCArgument::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_RPCArgument::release_path() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.RPCArgument.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_RPCArgument::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.RPCArgument.path)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_SessionTitleAttributes

// optional string display_name = 1;
inline bool RPCRegistrationRequest_SessionTitleAttributes::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_SessionTitleAttributes::has_display_name() const {
  return _internal_has_display_name();
}
inline void RPCRegistrationRequest_SessionTitleAttributes::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_SessionTitleAttributes::display_name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_SessionTitleAttributes::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name)
}
inline std::string* RPCRegistrationRequest_SessionTitleAttributes::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name)
  return _s;
}
inline const std::string& RPCRegistrationRequest_SessionTitleAttributes::_internal_display_name() const {
  return display_name_.Get();
}
inline void RPCRegistrationRequest_SessionTitleAttributes::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_SessionTitleAttributes::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_SessionTitleAttributes::release_display_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_SessionTitleAttributes::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name)
}

// optional string unique_identifier = 6;
inline bool RPCRegistrationRequest_SessionTitleAttributes::_internal_has_unique_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_SessionTitleAttributes::has_unique_identifier() const {
  return _internal_has_unique_identifier();
}
inline void RPCRegistrationRequest_SessionTitleAttributes::clear_unique_identifier() {
  unique_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCRegistrationRequest_SessionTitleAttributes::unique_identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier)
  return _internal_unique_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_SessionTitleAttributes::set_unique_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier)
}
inline std::string* RPCRegistrationRequest_SessionTitleAttributes::mutable_unique_identifier() {
  std::string* _s = _internal_mutable_unique_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier)
  return _s;
}
inline const std::string& RPCRegistrationRequest_SessionTitleAttributes::_internal_unique_identifier() const {
  return unique_identifier_.Get();
}
inline void RPCRegistrationRequest_SessionTitleAttributes::_internal_set_unique_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_SessionTitleAttributes::_internal_mutable_unique_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return unique_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_SessionTitleAttributes::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier)
  if (!_internal_has_unique_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = unique_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_SessionTitleAttributes::set_allocated_unique_identifier(std::string* unique_identifier) {
  if (unique_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unique_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_StatusBarComponentAttributes_Knob

// optional string name = 1;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::has_name() const {
  return _internal_has_name();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_name() const {
  return name_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name)
}

// optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.Type type = 2;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::has_type() const {
  return _internal_has_type();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_type() const {
  return static_cast< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type >(type_);
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::type() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.type)
  return _internal_type();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_set_type(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type value) {
  assert(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_type(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.type)
}

// optional string placeholder = 3;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_has_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::has_placeholder() const {
  return _internal_has_placeholder();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::clear_placeholder() {
  placeholder_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::placeholder() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder)
  return _internal_placeholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_placeholder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::mutable_placeholder() {
  std::string* _s = _internal_mutable_placeholder();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_placeholder() const {
  return placeholder_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_set_placeholder(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_mutable_placeholder() {
  _has_bits_[0] |= 0x00000002u;
  return placeholder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::release_placeholder() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder)
  if (!_internal_has_placeholder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = placeholder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (placeholder_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_allocated_placeholder(std::string* placeholder) {
  if (placeholder != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  placeholder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (placeholder_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder)
}

// optional string json_default_value = 4;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_has_json_default_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::has_json_default_value() const {
  return _internal_has_json_default_value();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::clear_json_default_value() {
  json_default_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::json_default_value() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value)
  return _internal_json_default_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_json_default_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 json_default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::mutable_json_default_value() {
  std::string* _s = _internal_mutable_json_default_value();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_json_default_value() const {
  return json_default_value_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_set_json_default_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  json_default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_mutable_json_default_value() {
  _has_bits_[0] |= 0x00000004u;
  return json_default_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::release_json_default_value() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value)
  if (!_internal_has_json_default_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = json_default_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_default_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_allocated_json_default_value(std::string* json_default_value) {
  if (json_default_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  json_default_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_default_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_default_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value)
}

// optional string key = 5;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::has_key() const {
  return _internal_has_key();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::key() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_key() const {
  return key_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000008u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_StatusBarComponentAttributes_Icon

// optional bytes data = 1;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Icon::has_data() const {
  return _internal_has_data();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Icon::data() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.data)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Icon::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.data)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_data() const {
  return data_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes_Icon::release_data() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.data)
}

// optional float scale = 2;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes_Icon::has_scale() const {
  return _internal_has_scale();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_scale() const {
  return scale_;
}
inline float RPCRegistrationRequest_StatusBarComponentAttributes_Icon::scale() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.scale)
  return _internal_scale();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon.scale)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_StatusBarComponentAttributes

// optional string short_description = 1;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::_internal_has_short_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::has_short_description() const {
  return _internal_has_short_description();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_short_description() {
  short_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::short_description() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description)
  return _internal_short_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes::set_short_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::mutable_short_description() {
  std::string* _s = _internal_mutable_short_description();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::_internal_short_description() const {
  return short_description_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::_internal_set_short_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::_internal_mutable_short_description() {
  _has_bits_[0] |= 0x00000001u;
  return short_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::release_short_description() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description)
  if (!_internal_has_short_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = short_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::set_allocated_short_description(std::string* short_description) {
  if (short_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description)
}

// optional string detailed_description = 2;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::_internal_has_detailed_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::has_detailed_description() const {
  return _internal_has_detailed_description();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_detailed_description() {
  detailed_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::detailed_description() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description)
  return _internal_detailed_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes::set_detailed_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 detailed_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::mutable_detailed_description() {
  std::string* _s = _internal_mutable_detailed_description();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::_internal_detailed_description() const {
  return detailed_description_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::_internal_set_detailed_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  detailed_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::_internal_mutable_detailed_description() {
  _has_bits_[0] |= 0x00000002u;
  return detailed_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::release_detailed_description() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description)
  if (!_internal_has_detailed_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = detailed_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detailed_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    detailed_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::set_allocated_detailed_description(std::string* detailed_description) {
  if (detailed_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  detailed_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detailed_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detailed_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    detailed_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description)
}

// repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob knobs = 3;
inline int RPCRegistrationRequest_StatusBarComponentAttributes::_internal_knobs_size() const {
  return knobs_.size();
}
inline int RPCRegistrationRequest_StatusBarComponentAttributes::knobs_size() const {
  return _internal_knobs_size();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_knobs() {
  knobs_.Clear();
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* RPCRegistrationRequest_StatusBarComponentAttributes::mutable_knobs(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.knobs)
  return knobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob >*
RPCRegistrationRequest_StatusBarComponentAttributes::mutable_knobs() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.knobs)
  return &knobs_;
}
inline const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob& RPCRegistrationRequest_StatusBarComponentAttributes::_internal_knobs(int index) const {
  return knobs_.Get(index);
}
inline const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob& RPCRegistrationRequest_StatusBarComponentAttributes::knobs(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.knobs)
  return _internal_knobs(index);
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* RPCRegistrationRequest_StatusBarComponentAttributes::_internal_add_knobs() {
  return knobs_.Add();
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* RPCRegistrationRequest_StatusBarComponentAttributes::add_knobs() {
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* _add = _internal_add_knobs();
  // @@protoc_insertion_point(field_add:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.knobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob >&
RPCRegistrationRequest_StatusBarComponentAttributes::knobs() const {
  // @@protoc_insertion_point(field_list:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.knobs)
  return knobs_;
}

// optional string exemplar = 4;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::_internal_has_exemplar() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::has_exemplar() const {
  return _internal_has_exemplar();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_exemplar() {
  exemplar_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::exemplar() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar)
  return _internal_exemplar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes::set_exemplar(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 exemplar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::mutable_exemplar() {
  std::string* _s = _internal_mutable_exemplar();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::_internal_exemplar() const {
  return exemplar_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::_internal_set_exemplar(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  exemplar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::_internal_mutable_exemplar() {
  _has_bits_[0] |= 0x00000004u;
  return exemplar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::release_exemplar() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar)
  if (!_internal_has_exemplar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = exemplar_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exemplar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exemplar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::set_allocated_exemplar(std::string* exemplar) {
  if (exemplar != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  exemplar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exemplar,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exemplar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exemplar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar)
}

// optional float update_cadence = 5;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::_internal_has_update_cadence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::has_update_cadence() const {
  return _internal_has_update_cadence();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_update_cadence() {
  update_cadence_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RPCRegistrationRequest_StatusBarComponentAttributes::_internal_update_cadence() const {
  return update_cadence_;
}
inline float RPCRegistrationRequest_StatusBarComponentAttributes::update_cadence() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.update_cadence)
  return _internal_update_cadence();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::_internal_set_update_cadence(float value) {
  _has_bits_[0] |= 0x00000010u;
  update_cadence_ = value;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::set_update_cadence(float value) {
  _internal_set_update_cadence(value);
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.update_cadence)
}

// optional string unique_identifier = 6;
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::_internal_has_unique_identifier() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::has_unique_identifier() const {
  return _internal_has_unique_identifier();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_unique_identifier() {
  unique_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::unique_identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier)
  return _internal_unique_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_StatusBarComponentAttributes::set_unique_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier)
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::mutable_unique_identifier() {
  std::string* _s = _internal_mutable_unique_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier)
  return _s;
}
inline const std::string& RPCRegistrationRequest_StatusBarComponentAttributes::_internal_unique_identifier() const {
  return unique_identifier_.Get();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::_internal_set_unique_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::_internal_mutable_unique_identifier() {
  _has_bits_[0] |= 0x00000008u;
  return unique_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_StatusBarComponentAttributes::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier)
  if (!_internal_has_unique_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = unique_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::set_allocated_unique_identifier(std::string* unique_identifier) {
  if (unique_identifier != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  unique_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier)
}

// repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon icons = 7;
inline int RPCRegistrationRequest_StatusBarComponentAttributes::_internal_icons_size() const {
  return icons_.size();
}
inline int RPCRegistrationRequest_StatusBarComponentAttributes::icons_size() const {
  return _internal_icons_size();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_icons() {
  icons_.Clear();
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* RPCRegistrationRequest_StatusBarComponentAttributes::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon >*
RPCRegistrationRequest_StatusBarComponentAttributes::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.icons)
  return &icons_;
}
inline const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon& RPCRegistrationRequest_StatusBarComponentAttributes::_internal_icons(int index) const {
  return icons_.Get(index);
}
inline const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon& RPCRegistrationRequest_StatusBarComponentAttributes::icons(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.icons)
  return _internal_icons(index);
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* RPCRegistrationRequest_StatusBarComponentAttributes::_internal_add_icons() {
  return icons_.Add();
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* RPCRegistrationRequest_StatusBarComponentAttributes::add_icons() {
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* _add = _internal_add_icons();
  // @@protoc_insertion_point(field_add:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon >&
RPCRegistrationRequest_StatusBarComponentAttributes::icons() const {
  // @@protoc_insertion_point(field_list:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.icons)
  return icons_;
}

// optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Format format = 8 [default = PLAIN_TEXT];
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_StatusBarComponentAttributes::has_format() const {
  return _internal_has_format();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes::_internal_format() const {
  return static_cast< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format >(format_);
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes::format() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.format)
  return _internal_format();
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::_internal_set_format(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format value) {
  assert(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
}
inline void RPCRegistrationRequest_StatusBarComponentAttributes::set_format(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.format)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest_ContextMenuAttributes

// optional string display_name = 1;
inline bool RPCRegistrationRequest_ContextMenuAttributes::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_ContextMenuAttributes::has_display_name() const {
  return _internal_has_display_name();
}
inline void RPCRegistrationRequest_ContextMenuAttributes::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest_ContextMenuAttributes::display_name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_ContextMenuAttributes::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name)
}
inline std::string* RPCRegistrationRequest_ContextMenuAttributes::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name)
  return _s;
}
inline const std::string& RPCRegistrationRequest_ContextMenuAttributes::_internal_display_name() const {
  return display_name_.Get();
}
inline void RPCRegistrationRequest_ContextMenuAttributes::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_ContextMenuAttributes::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_ContextMenuAttributes::release_display_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_ContextMenuAttributes::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name)
}

// optional string unique_identifier = 2;
inline bool RPCRegistrationRequest_ContextMenuAttributes::_internal_has_unique_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest_ContextMenuAttributes::has_unique_identifier() const {
  return _internal_has_unique_identifier();
}
inline void RPCRegistrationRequest_ContextMenuAttributes::clear_unique_identifier() {
  unique_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCRegistrationRequest_ContextMenuAttributes::unique_identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier)
  return _internal_unique_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest_ContextMenuAttributes::set_unique_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier)
}
inline std::string* RPCRegistrationRequest_ContextMenuAttributes::mutable_unique_identifier() {
  std::string* _s = _internal_mutable_unique_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier)
  return _s;
}
inline const std::string& RPCRegistrationRequest_ContextMenuAttributes::_internal_unique_identifier() const {
  return unique_identifier_.Get();
}
inline void RPCRegistrationRequest_ContextMenuAttributes::_internal_set_unique_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_ContextMenuAttributes::_internal_mutable_unique_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return unique_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest_ContextMenuAttributes::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier)
  if (!_internal_has_unique_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = unique_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest_ContextMenuAttributes::set_allocated_unique_identifier(std::string* unique_identifier) {
  if (unique_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unique_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier)
}

// -------------------------------------------------------------------

// RPCRegistrationRequest

// optional string name = 1;
inline bool RPCRegistrationRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCRegistrationRequest::has_name() const {
  return _internal_has_name();
}
inline void RPCRegistrationRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCRegistrationRequest::name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.name)
}
inline std::string* RPCRegistrationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.name)
  return _s;
}
inline const std::string& RPCRegistrationRequest::_internal_name() const {
  return name_.Get();
}
inline void RPCRegistrationRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.name)
}

// repeated .iterm2.RPCRegistrationRequest.RPCArgumentSignature arguments = 2;
inline int RPCRegistrationRequest::_internal_arguments_size() const {
  return arguments_.size();
}
inline int RPCRegistrationRequest::arguments_size() const {
  return _internal_arguments_size();
}
inline void RPCRegistrationRequest::clear_arguments() {
  arguments_.Clear();
}
inline ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* RPCRegistrationRequest::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature >*
RPCRegistrationRequest::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.RPCRegistrationRequest.arguments)
  return &arguments_;
}
inline const ::iterm2::RPCRegistrationRequest_RPCArgumentSignature& RPCRegistrationRequest::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::iterm2::RPCRegistrationRequest_RPCArgumentSignature& RPCRegistrationRequest::arguments(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.arguments)
  return _internal_arguments(index);
}
inline ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* RPCRegistrationRequest::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* RPCRegistrationRequest::add_arguments() {
  ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:iterm2.RPCRegistrationRequest.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature >&
RPCRegistrationRequest::arguments() const {
  // @@protoc_insertion_point(field_list:iterm2.RPCRegistrationRequest.arguments)
  return arguments_;
}

// repeated .iterm2.RPCRegistrationRequest.RPCArgument defaults = 4;
inline int RPCRegistrationRequest::_internal_defaults_size() const {
  return defaults_.size();
}
inline int RPCRegistrationRequest::defaults_size() const {
  return _internal_defaults_size();
}
inline void RPCRegistrationRequest::clear_defaults() {
  defaults_.Clear();
}
inline ::iterm2::RPCRegistrationRequest_RPCArgument* RPCRegistrationRequest::mutable_defaults(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.defaults)
  return defaults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgument >*
RPCRegistrationRequest::mutable_defaults() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.RPCRegistrationRequest.defaults)
  return &defaults_;
}
inline const ::iterm2::RPCRegistrationRequest_RPCArgument& RPCRegistrationRequest::_internal_defaults(int index) const {
  return defaults_.Get(index);
}
inline const ::iterm2::RPCRegistrationRequest_RPCArgument& RPCRegistrationRequest::defaults(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.defaults)
  return _internal_defaults(index);
}
inline ::iterm2::RPCRegistrationRequest_RPCArgument* RPCRegistrationRequest::_internal_add_defaults() {
  return defaults_.Add();
}
inline ::iterm2::RPCRegistrationRequest_RPCArgument* RPCRegistrationRequest::add_defaults() {
  ::iterm2::RPCRegistrationRequest_RPCArgument* _add = _internal_add_defaults();
  // @@protoc_insertion_point(field_add:iterm2.RPCRegistrationRequest.defaults)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::RPCRegistrationRequest_RPCArgument >&
RPCRegistrationRequest::defaults() const {
  // @@protoc_insertion_point(field_list:iterm2.RPCRegistrationRequest.defaults)
  return defaults_;
}

// optional float timeout = 3;
inline bool RPCRegistrationRequest::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RPCRegistrationRequest::has_timeout() const {
  return _internal_has_timeout();
}
inline void RPCRegistrationRequest::clear_timeout() {
  timeout_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RPCRegistrationRequest::_internal_timeout() const {
  return timeout_;
}
inline float RPCRegistrationRequest::timeout() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.timeout)
  return _internal_timeout();
}
inline void RPCRegistrationRequest::_internal_set_timeout(float value) {
  _has_bits_[0] |= 0x00000004u;
  timeout_ = value;
}
inline void RPCRegistrationRequest::set_timeout(float value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.timeout)
}

// optional .iterm2.RPCRegistrationRequest.Role role = 5 [default = GENERIC];
inline bool RPCRegistrationRequest::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RPCRegistrationRequest::has_role() const {
  return _internal_has_role();
}
inline void RPCRegistrationRequest::clear_role() {
  role_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::iterm2::RPCRegistrationRequest_Role RPCRegistrationRequest::_internal_role() const {
  return static_cast< ::iterm2::RPCRegistrationRequest_Role >(role_);
}
inline ::iterm2::RPCRegistrationRequest_Role RPCRegistrationRequest::role() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.role)
  return _internal_role();
}
inline void RPCRegistrationRequest::_internal_set_role(::iterm2::RPCRegistrationRequest_Role value) {
  assert(::iterm2::RPCRegistrationRequest_Role_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  role_ = value;
}
inline void RPCRegistrationRequest::set_role(::iterm2::RPCRegistrationRequest_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.role)
}

// .iterm2.RPCRegistrationRequest.SessionTitleAttributes session_title_attributes = 7;
inline bool RPCRegistrationRequest::_internal_has_session_title_attributes() const {
  return RoleSpecificAttributes_case() == kSessionTitleAttributes;
}
inline bool RPCRegistrationRequest::has_session_title_attributes() const {
  return _internal_has_session_title_attributes();
}
inline void RPCRegistrationRequest::set_has_session_title_attributes() {
  _oneof_case_[0] = kSessionTitleAttributes;
}
inline void RPCRegistrationRequest::clear_session_title_attributes() {
  if (_internal_has_session_title_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete RoleSpecificAttributes_.session_title_attributes_;
    }
    clear_has_RoleSpecificAttributes();
  }
}
inline ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* RPCRegistrationRequest::release_session_title_attributes() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.session_title_attributes)
  if (_internal_has_session_title_attributes()) {
    clear_has_RoleSpecificAttributes();
      ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* temp = RoleSpecificAttributes_.session_title_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RoleSpecificAttributes_.session_title_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RPCRegistrationRequest_SessionTitleAttributes& RPCRegistrationRequest::_internal_session_title_attributes() const {
  return _internal_has_session_title_attributes()
      ? *RoleSpecificAttributes_.session_title_attributes_
      : reinterpret_cast< ::iterm2::RPCRegistrationRequest_SessionTitleAttributes&>(::iterm2::_RPCRegistrationRequest_SessionTitleAttributes_default_instance_);
}
inline const ::iterm2::RPCRegistrationRequest_SessionTitleAttributes& RPCRegistrationRequest::session_title_attributes() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.session_title_attributes)
  return _internal_session_title_attributes();
}
inline ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* RPCRegistrationRequest::unsafe_arena_release_session_title_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.RPCRegistrationRequest.session_title_attributes)
  if (_internal_has_session_title_attributes()) {
    clear_has_RoleSpecificAttributes();
    ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* temp = RoleSpecificAttributes_.session_title_attributes_;
    RoleSpecificAttributes_.session_title_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RPCRegistrationRequest::unsafe_arena_set_allocated_session_title_attributes(::iterm2::RPCRegistrationRequest_SessionTitleAttributes* session_title_attributes) {
  clear_RoleSpecificAttributes();
  if (session_title_attributes) {
    set_has_session_title_attributes();
    RoleSpecificAttributes_.session_title_attributes_ = session_title_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.RPCRegistrationRequest.session_title_attributes)
}
inline ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* RPCRegistrationRequest::_internal_mutable_session_title_attributes() {
  if (!_internal_has_session_title_attributes()) {
    clear_RoleSpecificAttributes();
    set_has_session_title_attributes();
    RoleSpecificAttributes_.session_title_attributes_ = CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_SessionTitleAttributes >(GetArenaForAllocation());
  }
  return RoleSpecificAttributes_.session_title_attributes_;
}
inline ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* RPCRegistrationRequest::mutable_session_title_attributes() {
  ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* _msg = _internal_mutable_session_title_attributes();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.session_title_attributes)
  return _msg;
}

// .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes status_bar_component_attributes = 8;
inline bool RPCRegistrationRequest::_internal_has_status_bar_component_attributes() const {
  return RoleSpecificAttributes_case() == kStatusBarComponentAttributes;
}
inline bool RPCRegistrationRequest::has_status_bar_component_attributes() const {
  return _internal_has_status_bar_component_attributes();
}
inline void RPCRegistrationRequest::set_has_status_bar_component_attributes() {
  _oneof_case_[0] = kStatusBarComponentAttributes;
}
inline void RPCRegistrationRequest::clear_status_bar_component_attributes() {
  if (_internal_has_status_bar_component_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete RoleSpecificAttributes_.status_bar_component_attributes_;
    }
    clear_has_RoleSpecificAttributes();
  }
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* RPCRegistrationRequest::release_status_bar_component_attributes() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.status_bar_component_attributes)
  if (_internal_has_status_bar_component_attributes()) {
    clear_has_RoleSpecificAttributes();
      ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* temp = RoleSpecificAttributes_.status_bar_component_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RoleSpecificAttributes_.status_bar_component_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes& RPCRegistrationRequest::_internal_status_bar_component_attributes() const {
  return _internal_has_status_bar_component_attributes()
      ? *RoleSpecificAttributes_.status_bar_component_attributes_
      : reinterpret_cast< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes&>(::iterm2::_RPCRegistrationRequest_StatusBarComponentAttributes_default_instance_);
}
inline const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes& RPCRegistrationRequest::status_bar_component_attributes() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.status_bar_component_attributes)
  return _internal_status_bar_component_attributes();
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* RPCRegistrationRequest::unsafe_arena_release_status_bar_component_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.RPCRegistrationRequest.status_bar_component_attributes)
  if (_internal_has_status_bar_component_attributes()) {
    clear_has_RoleSpecificAttributes();
    ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* temp = RoleSpecificAttributes_.status_bar_component_attributes_;
    RoleSpecificAttributes_.status_bar_component_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RPCRegistrationRequest::unsafe_arena_set_allocated_status_bar_component_attributes(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* status_bar_component_attributes) {
  clear_RoleSpecificAttributes();
  if (status_bar_component_attributes) {
    set_has_status_bar_component_attributes();
    RoleSpecificAttributes_.status_bar_component_attributes_ = status_bar_component_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.RPCRegistrationRequest.status_bar_component_attributes)
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* RPCRegistrationRequest::_internal_mutable_status_bar_component_attributes() {
  if (!_internal_has_status_bar_component_attributes()) {
    clear_RoleSpecificAttributes();
    set_has_status_bar_component_attributes();
    RoleSpecificAttributes_.status_bar_component_attributes_ = CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes >(GetArenaForAllocation());
  }
  return RoleSpecificAttributes_.status_bar_component_attributes_;
}
inline ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* RPCRegistrationRequest::mutable_status_bar_component_attributes() {
  ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* _msg = _internal_mutable_status_bar_component_attributes();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.status_bar_component_attributes)
  return _msg;
}

// .iterm2.RPCRegistrationRequest.ContextMenuAttributes context_menu_attributes = 9;
inline bool RPCRegistrationRequest::_internal_has_context_menu_attributes() const {
  return RoleSpecificAttributes_case() == kContextMenuAttributes;
}
inline bool RPCRegistrationRequest::has_context_menu_attributes() const {
  return _internal_has_context_menu_attributes();
}
inline void RPCRegistrationRequest::set_has_context_menu_attributes() {
  _oneof_case_[0] = kContextMenuAttributes;
}
inline void RPCRegistrationRequest::clear_context_menu_attributes() {
  if (_internal_has_context_menu_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete RoleSpecificAttributes_.context_menu_attributes_;
    }
    clear_has_RoleSpecificAttributes();
  }
}
inline ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* RPCRegistrationRequest::release_context_menu_attributes() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.context_menu_attributes)
  if (_internal_has_context_menu_attributes()) {
    clear_has_RoleSpecificAttributes();
      ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* temp = RoleSpecificAttributes_.context_menu_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    RoleSpecificAttributes_.context_menu_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RPCRegistrationRequest_ContextMenuAttributes& RPCRegistrationRequest::_internal_context_menu_attributes() const {
  return _internal_has_context_menu_attributes()
      ? *RoleSpecificAttributes_.context_menu_attributes_
      : reinterpret_cast< ::iterm2::RPCRegistrationRequest_ContextMenuAttributes&>(::iterm2::_RPCRegistrationRequest_ContextMenuAttributes_default_instance_);
}
inline const ::iterm2::RPCRegistrationRequest_ContextMenuAttributes& RPCRegistrationRequest::context_menu_attributes() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.context_menu_attributes)
  return _internal_context_menu_attributes();
}
inline ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* RPCRegistrationRequest::unsafe_arena_release_context_menu_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.RPCRegistrationRequest.context_menu_attributes)
  if (_internal_has_context_menu_attributes()) {
    clear_has_RoleSpecificAttributes();
    ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* temp = RoleSpecificAttributes_.context_menu_attributes_;
    RoleSpecificAttributes_.context_menu_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RPCRegistrationRequest::unsafe_arena_set_allocated_context_menu_attributes(::iterm2::RPCRegistrationRequest_ContextMenuAttributes* context_menu_attributes) {
  clear_RoleSpecificAttributes();
  if (context_menu_attributes) {
    set_has_context_menu_attributes();
    RoleSpecificAttributes_.context_menu_attributes_ = context_menu_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.RPCRegistrationRequest.context_menu_attributes)
}
inline ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* RPCRegistrationRequest::_internal_mutable_context_menu_attributes() {
  if (!_internal_has_context_menu_attributes()) {
    clear_RoleSpecificAttributes();
    set_has_context_menu_attributes();
    RoleSpecificAttributes_.context_menu_attributes_ = CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_ContextMenuAttributes >(GetArenaForAllocation());
  }
  return RoleSpecificAttributes_.context_menu_attributes_;
}
inline ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* RPCRegistrationRequest::mutable_context_menu_attributes() {
  ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* _msg = _internal_mutable_context_menu_attributes();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.context_menu_attributes)
  return _msg;
}

// optional string display_name = 6 [deprecated = true];
inline bool RPCRegistrationRequest::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCRegistrationRequest::has_display_name() const {
  return _internal_has_display_name();
}
inline void RPCRegistrationRequest::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RPCRegistrationRequest::display_name() const {
  // @@protoc_insertion_point(field_get:iterm2.RPCRegistrationRequest.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCRegistrationRequest::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.RPCRegistrationRequest.display_name)
}
inline std::string* RPCRegistrationRequest::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:iterm2.RPCRegistrationRequest.display_name)
  return _s;
}
inline const std::string& RPCRegistrationRequest::_internal_display_name() const {
  return display_name_.Get();
}
inline void RPCRegistrationRequest::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000002u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCRegistrationRequest::release_display_name() {
  // @@protoc_insertion_point(field_release:iterm2.RPCRegistrationRequest.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCRegistrationRequest::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.display_name)
}

inline bool RPCRegistrationRequest::has_RoleSpecificAttributes() const {
  return RoleSpecificAttributes_case() != ROLESPECIFICATTRIBUTES_NOT_SET;
}
inline void RPCRegistrationRequest::clear_has_RoleSpecificAttributes() {
  _oneof_case_[0] = ROLESPECIFICATTRIBUTES_NOT_SET;
}
inline RPCRegistrationRequest::RoleSpecificAttributesCase RPCRegistrationRequest::RoleSpecificAttributes_case() const {
  return RPCRegistrationRequest::RoleSpecificAttributesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RegisterToolResponse

// optional .iterm2.RegisterToolResponse.Status status = 1;
inline bool RegisterToolResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterToolResponse::has_status() const {
  return _internal_has_status();
}
inline void RegisterToolResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::RegisterToolResponse_Status RegisterToolResponse::_internal_status() const {
  return static_cast< ::iterm2::RegisterToolResponse_Status >(status_);
}
inline ::iterm2::RegisterToolResponse_Status RegisterToolResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.RegisterToolResponse.status)
  return _internal_status();
}
inline void RegisterToolResponse::_internal_set_status(::iterm2::RegisterToolResponse_Status value) {
  assert(::iterm2::RegisterToolResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void RegisterToolResponse::set_status(::iterm2::RegisterToolResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.RegisterToolResponse.status)
}

// -------------------------------------------------------------------

// KeystrokePattern

// repeated .iterm2.Modifiers required_modifiers = 1;
inline int KeystrokePattern::_internal_required_modifiers_size() const {
  return required_modifiers_.size();
}
inline int KeystrokePattern::required_modifiers_size() const {
  return _internal_required_modifiers_size();
}
inline void KeystrokePattern::clear_required_modifiers() {
  required_modifiers_.Clear();
}
inline ::iterm2::Modifiers KeystrokePattern::_internal_required_modifiers(int index) const {
  return static_cast< ::iterm2::Modifiers >(required_modifiers_.Get(index));
}
inline ::iterm2::Modifiers KeystrokePattern::required_modifiers(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokePattern.required_modifiers)
  return _internal_required_modifiers(index);
}
inline void KeystrokePattern::set_required_modifiers(int index, ::iterm2::Modifiers value) {
  assert(::iterm2::Modifiers_IsValid(value));
  required_modifiers_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.required_modifiers)
}
inline void KeystrokePattern::_internal_add_required_modifiers(::iterm2::Modifiers value) {
  assert(::iterm2::Modifiers_IsValid(value));
  required_modifiers_.Add(value);
}
inline void KeystrokePattern::add_required_modifiers(::iterm2::Modifiers value) {
  _internal_add_required_modifiers(value);
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.required_modifiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
KeystrokePattern::required_modifiers() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokePattern.required_modifiers)
  return required_modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeystrokePattern::_internal_mutable_required_modifiers() {
  return &required_modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeystrokePattern::mutable_required_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokePattern.required_modifiers)
  return _internal_mutable_required_modifiers();
}

// repeated .iterm2.Modifiers forbidden_modifiers = 2;
inline int KeystrokePattern::_internal_forbidden_modifiers_size() const {
  return forbidden_modifiers_.size();
}
inline int KeystrokePattern::forbidden_modifiers_size() const {
  return _internal_forbidden_modifiers_size();
}
inline void KeystrokePattern::clear_forbidden_modifiers() {
  forbidden_modifiers_.Clear();
}
inline ::iterm2::Modifiers KeystrokePattern::_internal_forbidden_modifiers(int index) const {
  return static_cast< ::iterm2::Modifiers >(forbidden_modifiers_.Get(index));
}
inline ::iterm2::Modifiers KeystrokePattern::forbidden_modifiers(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokePattern.forbidden_modifiers)
  return _internal_forbidden_modifiers(index);
}
inline void KeystrokePattern::set_forbidden_modifiers(int index, ::iterm2::Modifiers value) {
  assert(::iterm2::Modifiers_IsValid(value));
  forbidden_modifiers_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.forbidden_modifiers)
}
inline void KeystrokePattern::_internal_add_forbidden_modifiers(::iterm2::Modifiers value) {
  assert(::iterm2::Modifiers_IsValid(value));
  forbidden_modifiers_.Add(value);
}
inline void KeystrokePattern::add_forbidden_modifiers(::iterm2::Modifiers value) {
  _internal_add_forbidden_modifiers(value);
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.forbidden_modifiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
KeystrokePattern::forbidden_modifiers() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokePattern.forbidden_modifiers)
  return forbidden_modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeystrokePattern::_internal_mutable_forbidden_modifiers() {
  return &forbidden_modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeystrokePattern::mutable_forbidden_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokePattern.forbidden_modifiers)
  return _internal_mutable_forbidden_modifiers();
}

// repeated int32 keycodes = 3;
inline int KeystrokePattern::_internal_keycodes_size() const {
  return keycodes_.size();
}
inline int KeystrokePattern::keycodes_size() const {
  return _internal_keycodes_size();
}
inline void KeystrokePattern::clear_keycodes() {
  keycodes_.Clear();
}
inline int32_t KeystrokePattern::_internal_keycodes(int index) const {
  return keycodes_.Get(index);
}
inline int32_t KeystrokePattern::keycodes(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokePattern.keycodes)
  return _internal_keycodes(index);
}
inline void KeystrokePattern::set_keycodes(int index, int32_t value) {
  keycodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.keycodes)
}
inline void KeystrokePattern::_internal_add_keycodes(int32_t value) {
  keycodes_.Add(value);
}
inline void KeystrokePattern::add_keycodes(int32_t value) {
  _internal_add_keycodes(value);
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.keycodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KeystrokePattern::_internal_keycodes() const {
  return keycodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
KeystrokePattern::keycodes() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokePattern.keycodes)
  return _internal_keycodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KeystrokePattern::_internal_mutable_keycodes() {
  return &keycodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
KeystrokePattern::mutable_keycodes() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokePattern.keycodes)
  return _internal_mutable_keycodes();
}

// repeated string characters = 4;
inline int KeystrokePattern::_internal_characters_size() const {
  return characters_.size();
}
inline int KeystrokePattern::characters_size() const {
  return _internal_characters_size();
}
inline void KeystrokePattern::clear_characters() {
  characters_.Clear();
}
inline std::string* KeystrokePattern::add_characters() {
  std::string* _s = _internal_add_characters();
  // @@protoc_insertion_point(field_add_mutable:iterm2.KeystrokePattern.characters)
  return _s;
}
inline const std::string& KeystrokePattern::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const std::string& KeystrokePattern::characters(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokePattern.characters)
  return _internal_characters(index);
}
inline std::string* KeystrokePattern::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokePattern.characters)
  return characters_.Mutable(index);
}
inline void KeystrokePattern::set_characters(int index, const std::string& value) {
  characters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.characters)
}
inline void KeystrokePattern::set_characters(int index, std::string&& value) {
  characters_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.characters)
}
inline void KeystrokePattern::set_characters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  characters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.KeystrokePattern.characters)
}
inline void KeystrokePattern::set_characters(int index, const char* value, size_t size) {
  characters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.KeystrokePattern.characters)
}
inline std::string* KeystrokePattern::_internal_add_characters() {
  return characters_.Add();
}
inline void KeystrokePattern::add_characters(const std::string& value) {
  characters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.characters)
}
inline void KeystrokePattern::add_characters(std::string&& value) {
  characters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.characters)
}
inline void KeystrokePattern::add_characters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  characters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.KeystrokePattern.characters)
}
inline void KeystrokePattern::add_characters(const char* value, size_t size) {
  characters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.KeystrokePattern.characters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KeystrokePattern::characters() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokePattern.characters)
  return characters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KeystrokePattern::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokePattern.characters)
  return &characters_;
}

// repeated string characters_ignoring_modifiers = 5;
inline int KeystrokePattern::_internal_characters_ignoring_modifiers_size() const {
  return characters_ignoring_modifiers_.size();
}
inline int KeystrokePattern::characters_ignoring_modifiers_size() const {
  return _internal_characters_ignoring_modifiers_size();
}
inline void KeystrokePattern::clear_characters_ignoring_modifiers() {
  characters_ignoring_modifiers_.Clear();
}
inline std::string* KeystrokePattern::add_characters_ignoring_modifiers() {
  std::string* _s = _internal_add_characters_ignoring_modifiers();
  // @@protoc_insertion_point(field_add_mutable:iterm2.KeystrokePattern.characters_ignoring_modifiers)
  return _s;
}
inline const std::string& KeystrokePattern::_internal_characters_ignoring_modifiers(int index) const {
  return characters_ignoring_modifiers_.Get(index);
}
inline const std::string& KeystrokePattern::characters_ignoring_modifiers(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokePattern.characters_ignoring_modifiers)
  return _internal_characters_ignoring_modifiers(index);
}
inline std::string* KeystrokePattern::mutable_characters_ignoring_modifiers(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokePattern.characters_ignoring_modifiers)
  return characters_ignoring_modifiers_.Mutable(index);
}
inline void KeystrokePattern::set_characters_ignoring_modifiers(int index, const std::string& value) {
  characters_ignoring_modifiers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline void KeystrokePattern::set_characters_ignoring_modifiers(int index, std::string&& value) {
  characters_ignoring_modifiers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline void KeystrokePattern::set_characters_ignoring_modifiers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  characters_ignoring_modifiers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline void KeystrokePattern::set_characters_ignoring_modifiers(int index, const char* value, size_t size) {
  characters_ignoring_modifiers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline std::string* KeystrokePattern::_internal_add_characters_ignoring_modifiers() {
  return characters_ignoring_modifiers_.Add();
}
inline void KeystrokePattern::add_characters_ignoring_modifiers(const std::string& value) {
  characters_ignoring_modifiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline void KeystrokePattern::add_characters_ignoring_modifiers(std::string&& value) {
  characters_ignoring_modifiers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline void KeystrokePattern::add_characters_ignoring_modifiers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  characters_ignoring_modifiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline void KeystrokePattern::add_characters_ignoring_modifiers(const char* value, size_t size) {
  characters_ignoring_modifiers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.KeystrokePattern.characters_ignoring_modifiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KeystrokePattern::characters_ignoring_modifiers() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokePattern.characters_ignoring_modifiers)
  return characters_ignoring_modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KeystrokePattern::mutable_characters_ignoring_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokePattern.characters_ignoring_modifiers)
  return &characters_ignoring_modifiers_;
}

// -------------------------------------------------------------------

// KeystrokeMonitorRequest

// repeated .iterm2.KeystrokePattern patterns_to_ignore = 1 [deprecated = true];
inline int KeystrokeMonitorRequest::_internal_patterns_to_ignore_size() const {
  return patterns_to_ignore_.size();
}
inline int KeystrokeMonitorRequest::patterns_to_ignore_size() const {
  return _internal_patterns_to_ignore_size();
}
inline void KeystrokeMonitorRequest::clear_patterns_to_ignore() {
  patterns_to_ignore_.Clear();
}
inline ::iterm2::KeystrokePattern* KeystrokeMonitorRequest::mutable_patterns_to_ignore(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokeMonitorRequest.patterns_to_ignore)
  return patterns_to_ignore_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >*
KeystrokeMonitorRequest::mutable_patterns_to_ignore() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokeMonitorRequest.patterns_to_ignore)
  return &patterns_to_ignore_;
}
inline const ::iterm2::KeystrokePattern& KeystrokeMonitorRequest::_internal_patterns_to_ignore(int index) const {
  return patterns_to_ignore_.Get(index);
}
inline const ::iterm2::KeystrokePattern& KeystrokeMonitorRequest::patterns_to_ignore(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeMonitorRequest.patterns_to_ignore)
  return _internal_patterns_to_ignore(index);
}
inline ::iterm2::KeystrokePattern* KeystrokeMonitorRequest::_internal_add_patterns_to_ignore() {
  return patterns_to_ignore_.Add();
}
inline ::iterm2::KeystrokePattern* KeystrokeMonitorRequest::add_patterns_to_ignore() {
  ::iterm2::KeystrokePattern* _add = _internal_add_patterns_to_ignore();
  // @@protoc_insertion_point(field_add:iterm2.KeystrokeMonitorRequest.patterns_to_ignore)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >&
KeystrokeMonitorRequest::patterns_to_ignore() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokeMonitorRequest.patterns_to_ignore)
  return patterns_to_ignore_;
}

// optional bool advanced = 2;
inline bool KeystrokeMonitorRequest::_internal_has_advanced() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeystrokeMonitorRequest::has_advanced() const {
  return _internal_has_advanced();
}
inline void KeystrokeMonitorRequest::clear_advanced() {
  advanced_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool KeystrokeMonitorRequest::_internal_advanced() const {
  return advanced_;
}
inline bool KeystrokeMonitorRequest::advanced() const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeMonitorRequest.advanced)
  return _internal_advanced();
}
inline void KeystrokeMonitorRequest::_internal_set_advanced(bool value) {
  _has_bits_[0] |= 0x00000001u;
  advanced_ = value;
}
inline void KeystrokeMonitorRequest::set_advanced(bool value) {
  _internal_set_advanced(value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeMonitorRequest.advanced)
}

// -------------------------------------------------------------------

// KeystrokeFilterRequest

// repeated .iterm2.KeystrokePattern patterns_to_ignore = 1;
inline int KeystrokeFilterRequest::_internal_patterns_to_ignore_size() const {
  return patterns_to_ignore_.size();
}
inline int KeystrokeFilterRequest::patterns_to_ignore_size() const {
  return _internal_patterns_to_ignore_size();
}
inline void KeystrokeFilterRequest::clear_patterns_to_ignore() {
  patterns_to_ignore_.Clear();
}
inline ::iterm2::KeystrokePattern* KeystrokeFilterRequest::mutable_patterns_to_ignore(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokeFilterRequest.patterns_to_ignore)
  return patterns_to_ignore_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >*
KeystrokeFilterRequest::mutable_patterns_to_ignore() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokeFilterRequest.patterns_to_ignore)
  return &patterns_to_ignore_;
}
inline const ::iterm2::KeystrokePattern& KeystrokeFilterRequest::_internal_patterns_to_ignore(int index) const {
  return patterns_to_ignore_.Get(index);
}
inline const ::iterm2::KeystrokePattern& KeystrokeFilterRequest::patterns_to_ignore(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeFilterRequest.patterns_to_ignore)
  return _internal_patterns_to_ignore(index);
}
inline ::iterm2::KeystrokePattern* KeystrokeFilterRequest::_internal_add_patterns_to_ignore() {
  return patterns_to_ignore_.Add();
}
inline ::iterm2::KeystrokePattern* KeystrokeFilterRequest::add_patterns_to_ignore() {
  ::iterm2::KeystrokePattern* _add = _internal_add_patterns_to_ignore();
  // @@protoc_insertion_point(field_add:iterm2.KeystrokeFilterRequest.patterns_to_ignore)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::KeystrokePattern >&
KeystrokeFilterRequest::patterns_to_ignore() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokeFilterRequest.patterns_to_ignore)
  return patterns_to_ignore_;
}

// -------------------------------------------------------------------

// VariableMonitorRequest

// optional string name = 1;
inline bool VariableMonitorRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariableMonitorRequest::has_name() const {
  return _internal_has_name();
}
inline void VariableMonitorRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariableMonitorRequest::name() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableMonitorRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableMonitorRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableMonitorRequest.name)
}
inline std::string* VariableMonitorRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableMonitorRequest.name)
  return _s;
}
inline const std::string& VariableMonitorRequest::_internal_name() const {
  return name_.Get();
}
inline void VariableMonitorRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableMonitorRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableMonitorRequest::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.VariableMonitorRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableMonitorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableMonitorRequest.name)
}

// optional .iterm2.VariableScope scope = 2;
inline bool VariableMonitorRequest::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VariableMonitorRequest::has_scope() const {
  return _internal_has_scope();
}
inline void VariableMonitorRequest::clear_scope() {
  scope_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::iterm2::VariableScope VariableMonitorRequest::_internal_scope() const {
  return static_cast< ::iterm2::VariableScope >(scope_);
}
inline ::iterm2::VariableScope VariableMonitorRequest::scope() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableMonitorRequest.scope)
  return _internal_scope();
}
inline void VariableMonitorRequest::_internal_set_scope(::iterm2::VariableScope value) {
  assert(::iterm2::VariableScope_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  scope_ = value;
}
inline void VariableMonitorRequest::set_scope(::iterm2::VariableScope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:iterm2.VariableMonitorRequest.scope)
}

// optional string identifier = 3;
inline bool VariableMonitorRequest::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VariableMonitorRequest::has_identifier() const {
  return _internal_has_identifier();
}
inline void VariableMonitorRequest::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VariableMonitorRequest::identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableMonitorRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableMonitorRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableMonitorRequest.identifier)
}
inline std::string* VariableMonitorRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableMonitorRequest.identifier)
  return _s;
}
inline const std::string& VariableMonitorRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void VariableMonitorRequest::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableMonitorRequest::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableMonitorRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.VariableMonitorRequest.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableMonitorRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableMonitorRequest.identifier)
}

// -------------------------------------------------------------------

// ProfileChangeRequest

// optional string guid = 1;
inline bool ProfileChangeRequest::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileChangeRequest::has_guid() const {
  return _internal_has_guid();
}
inline void ProfileChangeRequest::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileChangeRequest::guid() const {
  // @@protoc_insertion_point(field_get:iterm2.ProfileChangeRequest.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileChangeRequest::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ProfileChangeRequest.guid)
}
inline std::string* ProfileChangeRequest::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:iterm2.ProfileChangeRequest.guid)
  return _s;
}
inline const std::string& ProfileChangeRequest::_internal_guid() const {
  return guid_.Get();
}
inline void ProfileChangeRequest::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileChangeRequest::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileChangeRequest::release_guid() {
  // @@protoc_insertion_point(field_release:iterm2.ProfileChangeRequest.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileChangeRequest::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ProfileChangeRequest.guid)
}

// -------------------------------------------------------------------

// PromptMonitorRequest

// repeated .iterm2.PromptMonitorMode modes = 1;
inline int PromptMonitorRequest::_internal_modes_size() const {
  return modes_.size();
}
inline int PromptMonitorRequest::modes_size() const {
  return _internal_modes_size();
}
inline void PromptMonitorRequest::clear_modes() {
  modes_.Clear();
}
inline ::iterm2::PromptMonitorMode PromptMonitorRequest::_internal_modes(int index) const {
  return static_cast< ::iterm2::PromptMonitorMode >(modes_.Get(index));
}
inline ::iterm2::PromptMonitorMode PromptMonitorRequest::modes(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.PromptMonitorRequest.modes)
  return _internal_modes(index);
}
inline void PromptMonitorRequest::set_modes(int index, ::iterm2::PromptMonitorMode value) {
  assert(::iterm2::PromptMonitorMode_IsValid(value));
  modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.PromptMonitorRequest.modes)
}
inline void PromptMonitorRequest::_internal_add_modes(::iterm2::PromptMonitorMode value) {
  assert(::iterm2::PromptMonitorMode_IsValid(value));
  modes_.Add(value);
}
inline void PromptMonitorRequest::add_modes(::iterm2::PromptMonitorMode value) {
  _internal_add_modes(value);
  // @@protoc_insertion_point(field_add:iterm2.PromptMonitorRequest.modes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PromptMonitorRequest::modes() const {
  // @@protoc_insertion_point(field_list:iterm2.PromptMonitorRequest.modes)
  return modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PromptMonitorRequest::_internal_mutable_modes() {
  return &modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PromptMonitorRequest::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.PromptMonitorRequest.modes)
  return _internal_mutable_modes();
}

// -------------------------------------------------------------------

// NotificationRequest

// optional string session = 1;
inline bool NotificationRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationRequest::has_session() const {
  return _internal_has_session();
}
inline void NotificationRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.NotificationRequest.session)
}
inline std::string* NotificationRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.session)
  return _s;
}
inline const std::string& NotificationRequest::_internal_session() const {
  return session_.Get();
}
inline void NotificationRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NotificationRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NotificationRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.session)
}

// optional bool subscribe = 2;
inline bool NotificationRequest::_internal_has_subscribe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NotificationRequest::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void NotificationRequest::clear_subscribe() {
  subscribe_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool NotificationRequest::_internal_subscribe() const {
  return subscribe_;
}
inline bool NotificationRequest::subscribe() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.subscribe)
  return _internal_subscribe();
}
inline void NotificationRequest::_internal_set_subscribe(bool value) {
  _has_bits_[0] |= 0x00000002u;
  subscribe_ = value;
}
inline void NotificationRequest::set_subscribe(bool value) {
  _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:iterm2.NotificationRequest.subscribe)
}

// optional .iterm2.NotificationType notification_type = 3;
inline bool NotificationRequest::_internal_has_notification_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NotificationRequest::has_notification_type() const {
  return _internal_has_notification_type();
}
inline void NotificationRequest::clear_notification_type() {
  notification_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::iterm2::NotificationType NotificationRequest::_internal_notification_type() const {
  return static_cast< ::iterm2::NotificationType >(notification_type_);
}
inline ::iterm2::NotificationType NotificationRequest::notification_type() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.notification_type)
  return _internal_notification_type();
}
inline void NotificationRequest::_internal_set_notification_type(::iterm2::NotificationType value) {
  assert(::iterm2::NotificationType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  notification_type_ = value;
}
inline void NotificationRequest::set_notification_type(::iterm2::NotificationType value) {
  _internal_set_notification_type(value);
  // @@protoc_insertion_point(field_set:iterm2.NotificationRequest.notification_type)
}

// .iterm2.RPCRegistrationRequest rpc_registration_request = 4;
inline bool NotificationRequest::_internal_has_rpc_registration_request() const {
  return arguments_case() == kRpcRegistrationRequest;
}
inline bool NotificationRequest::has_rpc_registration_request() const {
  return _internal_has_rpc_registration_request();
}
inline void NotificationRequest::set_has_rpc_registration_request() {
  _oneof_case_[0] = kRpcRegistrationRequest;
}
inline void NotificationRequest::clear_rpc_registration_request() {
  if (_internal_has_rpc_registration_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete arguments_.rpc_registration_request_;
    }
    clear_has_arguments();
  }
}
inline ::iterm2::RPCRegistrationRequest* NotificationRequest::release_rpc_registration_request() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.rpc_registration_request)
  if (_internal_has_rpc_registration_request()) {
    clear_has_arguments();
      ::iterm2::RPCRegistrationRequest* temp = arguments_.rpc_registration_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arguments_.rpc_registration_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::RPCRegistrationRequest& NotificationRequest::_internal_rpc_registration_request() const {
  return _internal_has_rpc_registration_request()
      ? *arguments_.rpc_registration_request_
      : reinterpret_cast< ::iterm2::RPCRegistrationRequest&>(::iterm2::_RPCRegistrationRequest_default_instance_);
}
inline const ::iterm2::RPCRegistrationRequest& NotificationRequest::rpc_registration_request() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.rpc_registration_request)
  return _internal_rpc_registration_request();
}
inline ::iterm2::RPCRegistrationRequest* NotificationRequest::unsafe_arena_release_rpc_registration_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.NotificationRequest.rpc_registration_request)
  if (_internal_has_rpc_registration_request()) {
    clear_has_arguments();
    ::iterm2::RPCRegistrationRequest* temp = arguments_.rpc_registration_request_;
    arguments_.rpc_registration_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotificationRequest::unsafe_arena_set_allocated_rpc_registration_request(::iterm2::RPCRegistrationRequest* rpc_registration_request) {
  clear_arguments();
  if (rpc_registration_request) {
    set_has_rpc_registration_request();
    arguments_.rpc_registration_request_ = rpc_registration_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.NotificationRequest.rpc_registration_request)
}
inline ::iterm2::RPCRegistrationRequest* NotificationRequest::_internal_mutable_rpc_registration_request() {
  if (!_internal_has_rpc_registration_request()) {
    clear_arguments();
    set_has_rpc_registration_request();
    arguments_.rpc_registration_request_ = CreateMaybeMessage< ::iterm2::RPCRegistrationRequest >(GetArenaForAllocation());
  }
  return arguments_.rpc_registration_request_;
}
inline ::iterm2::RPCRegistrationRequest* NotificationRequest::mutable_rpc_registration_request() {
  ::iterm2::RPCRegistrationRequest* _msg = _internal_mutable_rpc_registration_request();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.rpc_registration_request)
  return _msg;
}

// .iterm2.KeystrokeMonitorRequest keystroke_monitor_request = 5;
inline bool NotificationRequest::_internal_has_keystroke_monitor_request() const {
  return arguments_case() == kKeystrokeMonitorRequest;
}
inline bool NotificationRequest::has_keystroke_monitor_request() const {
  return _internal_has_keystroke_monitor_request();
}
inline void NotificationRequest::set_has_keystroke_monitor_request() {
  _oneof_case_[0] = kKeystrokeMonitorRequest;
}
inline void NotificationRequest::clear_keystroke_monitor_request() {
  if (_internal_has_keystroke_monitor_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete arguments_.keystroke_monitor_request_;
    }
    clear_has_arguments();
  }
}
inline ::iterm2::KeystrokeMonitorRequest* NotificationRequest::release_keystroke_monitor_request() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.keystroke_monitor_request)
  if (_internal_has_keystroke_monitor_request()) {
    clear_has_arguments();
      ::iterm2::KeystrokeMonitorRequest* temp = arguments_.keystroke_monitor_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arguments_.keystroke_monitor_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::KeystrokeMonitorRequest& NotificationRequest::_internal_keystroke_monitor_request() const {
  return _internal_has_keystroke_monitor_request()
      ? *arguments_.keystroke_monitor_request_
      : reinterpret_cast< ::iterm2::KeystrokeMonitorRequest&>(::iterm2::_KeystrokeMonitorRequest_default_instance_);
}
inline const ::iterm2::KeystrokeMonitorRequest& NotificationRequest::keystroke_monitor_request() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.keystroke_monitor_request)
  return _internal_keystroke_monitor_request();
}
inline ::iterm2::KeystrokeMonitorRequest* NotificationRequest::unsafe_arena_release_keystroke_monitor_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.NotificationRequest.keystroke_monitor_request)
  if (_internal_has_keystroke_monitor_request()) {
    clear_has_arguments();
    ::iterm2::KeystrokeMonitorRequest* temp = arguments_.keystroke_monitor_request_;
    arguments_.keystroke_monitor_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotificationRequest::unsafe_arena_set_allocated_keystroke_monitor_request(::iterm2::KeystrokeMonitorRequest* keystroke_monitor_request) {
  clear_arguments();
  if (keystroke_monitor_request) {
    set_has_keystroke_monitor_request();
    arguments_.keystroke_monitor_request_ = keystroke_monitor_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.NotificationRequest.keystroke_monitor_request)
}
inline ::iterm2::KeystrokeMonitorRequest* NotificationRequest::_internal_mutable_keystroke_monitor_request() {
  if (!_internal_has_keystroke_monitor_request()) {
    clear_arguments();
    set_has_keystroke_monitor_request();
    arguments_.keystroke_monitor_request_ = CreateMaybeMessage< ::iterm2::KeystrokeMonitorRequest >(GetArenaForAllocation());
  }
  return arguments_.keystroke_monitor_request_;
}
inline ::iterm2::KeystrokeMonitorRequest* NotificationRequest::mutable_keystroke_monitor_request() {
  ::iterm2::KeystrokeMonitorRequest* _msg = _internal_mutable_keystroke_monitor_request();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.keystroke_monitor_request)
  return _msg;
}

// .iterm2.VariableMonitorRequest variable_monitor_request = 6;
inline bool NotificationRequest::_internal_has_variable_monitor_request() const {
  return arguments_case() == kVariableMonitorRequest;
}
inline bool NotificationRequest::has_variable_monitor_request() const {
  return _internal_has_variable_monitor_request();
}
inline void NotificationRequest::set_has_variable_monitor_request() {
  _oneof_case_[0] = kVariableMonitorRequest;
}
inline void NotificationRequest::clear_variable_monitor_request() {
  if (_internal_has_variable_monitor_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete arguments_.variable_monitor_request_;
    }
    clear_has_arguments();
  }
}
inline ::iterm2::VariableMonitorRequest* NotificationRequest::release_variable_monitor_request() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.variable_monitor_request)
  if (_internal_has_variable_monitor_request()) {
    clear_has_arguments();
      ::iterm2::VariableMonitorRequest* temp = arguments_.variable_monitor_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arguments_.variable_monitor_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::VariableMonitorRequest& NotificationRequest::_internal_variable_monitor_request() const {
  return _internal_has_variable_monitor_request()
      ? *arguments_.variable_monitor_request_
      : reinterpret_cast< ::iterm2::VariableMonitorRequest&>(::iterm2::_VariableMonitorRequest_default_instance_);
}
inline const ::iterm2::VariableMonitorRequest& NotificationRequest::variable_monitor_request() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.variable_monitor_request)
  return _internal_variable_monitor_request();
}
inline ::iterm2::VariableMonitorRequest* NotificationRequest::unsafe_arena_release_variable_monitor_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.NotificationRequest.variable_monitor_request)
  if (_internal_has_variable_monitor_request()) {
    clear_has_arguments();
    ::iterm2::VariableMonitorRequest* temp = arguments_.variable_monitor_request_;
    arguments_.variable_monitor_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotificationRequest::unsafe_arena_set_allocated_variable_monitor_request(::iterm2::VariableMonitorRequest* variable_monitor_request) {
  clear_arguments();
  if (variable_monitor_request) {
    set_has_variable_monitor_request();
    arguments_.variable_monitor_request_ = variable_monitor_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.NotificationRequest.variable_monitor_request)
}
inline ::iterm2::VariableMonitorRequest* NotificationRequest::_internal_mutable_variable_monitor_request() {
  if (!_internal_has_variable_monitor_request()) {
    clear_arguments();
    set_has_variable_monitor_request();
    arguments_.variable_monitor_request_ = CreateMaybeMessage< ::iterm2::VariableMonitorRequest >(GetArenaForAllocation());
  }
  return arguments_.variable_monitor_request_;
}
inline ::iterm2::VariableMonitorRequest* NotificationRequest::mutable_variable_monitor_request() {
  ::iterm2::VariableMonitorRequest* _msg = _internal_mutable_variable_monitor_request();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.variable_monitor_request)
  return _msg;
}

// .iterm2.ProfileChangeRequest profile_change_request = 7;
inline bool NotificationRequest::_internal_has_profile_change_request() const {
  return arguments_case() == kProfileChangeRequest;
}
inline bool NotificationRequest::has_profile_change_request() const {
  return _internal_has_profile_change_request();
}
inline void NotificationRequest::set_has_profile_change_request() {
  _oneof_case_[0] = kProfileChangeRequest;
}
inline void NotificationRequest::clear_profile_change_request() {
  if (_internal_has_profile_change_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete arguments_.profile_change_request_;
    }
    clear_has_arguments();
  }
}
inline ::iterm2::ProfileChangeRequest* NotificationRequest::release_profile_change_request() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.profile_change_request)
  if (_internal_has_profile_change_request()) {
    clear_has_arguments();
      ::iterm2::ProfileChangeRequest* temp = arguments_.profile_change_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arguments_.profile_change_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::ProfileChangeRequest& NotificationRequest::_internal_profile_change_request() const {
  return _internal_has_profile_change_request()
      ? *arguments_.profile_change_request_
      : reinterpret_cast< ::iterm2::ProfileChangeRequest&>(::iterm2::_ProfileChangeRequest_default_instance_);
}
inline const ::iterm2::ProfileChangeRequest& NotificationRequest::profile_change_request() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.profile_change_request)
  return _internal_profile_change_request();
}
inline ::iterm2::ProfileChangeRequest* NotificationRequest::unsafe_arena_release_profile_change_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.NotificationRequest.profile_change_request)
  if (_internal_has_profile_change_request()) {
    clear_has_arguments();
    ::iterm2::ProfileChangeRequest* temp = arguments_.profile_change_request_;
    arguments_.profile_change_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotificationRequest::unsafe_arena_set_allocated_profile_change_request(::iterm2::ProfileChangeRequest* profile_change_request) {
  clear_arguments();
  if (profile_change_request) {
    set_has_profile_change_request();
    arguments_.profile_change_request_ = profile_change_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.NotificationRequest.profile_change_request)
}
inline ::iterm2::ProfileChangeRequest* NotificationRequest::_internal_mutable_profile_change_request() {
  if (!_internal_has_profile_change_request()) {
    clear_arguments();
    set_has_profile_change_request();
    arguments_.profile_change_request_ = CreateMaybeMessage< ::iterm2::ProfileChangeRequest >(GetArenaForAllocation());
  }
  return arguments_.profile_change_request_;
}
inline ::iterm2::ProfileChangeRequest* NotificationRequest::mutable_profile_change_request() {
  ::iterm2::ProfileChangeRequest* _msg = _internal_mutable_profile_change_request();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.profile_change_request)
  return _msg;
}

// .iterm2.KeystrokeFilterRequest keystroke_filter_request = 8;
inline bool NotificationRequest::_internal_has_keystroke_filter_request() const {
  return arguments_case() == kKeystrokeFilterRequest;
}
inline bool NotificationRequest::has_keystroke_filter_request() const {
  return _internal_has_keystroke_filter_request();
}
inline void NotificationRequest::set_has_keystroke_filter_request() {
  _oneof_case_[0] = kKeystrokeFilterRequest;
}
inline void NotificationRequest::clear_keystroke_filter_request() {
  if (_internal_has_keystroke_filter_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete arguments_.keystroke_filter_request_;
    }
    clear_has_arguments();
  }
}
inline ::iterm2::KeystrokeFilterRequest* NotificationRequest::release_keystroke_filter_request() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.keystroke_filter_request)
  if (_internal_has_keystroke_filter_request()) {
    clear_has_arguments();
      ::iterm2::KeystrokeFilterRequest* temp = arguments_.keystroke_filter_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arguments_.keystroke_filter_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::KeystrokeFilterRequest& NotificationRequest::_internal_keystroke_filter_request() const {
  return _internal_has_keystroke_filter_request()
      ? *arguments_.keystroke_filter_request_
      : reinterpret_cast< ::iterm2::KeystrokeFilterRequest&>(::iterm2::_KeystrokeFilterRequest_default_instance_);
}
inline const ::iterm2::KeystrokeFilterRequest& NotificationRequest::keystroke_filter_request() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.keystroke_filter_request)
  return _internal_keystroke_filter_request();
}
inline ::iterm2::KeystrokeFilterRequest* NotificationRequest::unsafe_arena_release_keystroke_filter_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.NotificationRequest.keystroke_filter_request)
  if (_internal_has_keystroke_filter_request()) {
    clear_has_arguments();
    ::iterm2::KeystrokeFilterRequest* temp = arguments_.keystroke_filter_request_;
    arguments_.keystroke_filter_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotificationRequest::unsafe_arena_set_allocated_keystroke_filter_request(::iterm2::KeystrokeFilterRequest* keystroke_filter_request) {
  clear_arguments();
  if (keystroke_filter_request) {
    set_has_keystroke_filter_request();
    arguments_.keystroke_filter_request_ = keystroke_filter_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.NotificationRequest.keystroke_filter_request)
}
inline ::iterm2::KeystrokeFilterRequest* NotificationRequest::_internal_mutable_keystroke_filter_request() {
  if (!_internal_has_keystroke_filter_request()) {
    clear_arguments();
    set_has_keystroke_filter_request();
    arguments_.keystroke_filter_request_ = CreateMaybeMessage< ::iterm2::KeystrokeFilterRequest >(GetArenaForAllocation());
  }
  return arguments_.keystroke_filter_request_;
}
inline ::iterm2::KeystrokeFilterRequest* NotificationRequest::mutable_keystroke_filter_request() {
  ::iterm2::KeystrokeFilterRequest* _msg = _internal_mutable_keystroke_filter_request();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.keystroke_filter_request)
  return _msg;
}

// .iterm2.PromptMonitorRequest prompt_monitor_request = 9;
inline bool NotificationRequest::_internal_has_prompt_monitor_request() const {
  return arguments_case() == kPromptMonitorRequest;
}
inline bool NotificationRequest::has_prompt_monitor_request() const {
  return _internal_has_prompt_monitor_request();
}
inline void NotificationRequest::set_has_prompt_monitor_request() {
  _oneof_case_[0] = kPromptMonitorRequest;
}
inline void NotificationRequest::clear_prompt_monitor_request() {
  if (_internal_has_prompt_monitor_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete arguments_.prompt_monitor_request_;
    }
    clear_has_arguments();
  }
}
inline ::iterm2::PromptMonitorRequest* NotificationRequest::release_prompt_monitor_request() {
  // @@protoc_insertion_point(field_release:iterm2.NotificationRequest.prompt_monitor_request)
  if (_internal_has_prompt_monitor_request()) {
    clear_has_arguments();
      ::iterm2::PromptMonitorRequest* temp = arguments_.prompt_monitor_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arguments_.prompt_monitor_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PromptMonitorRequest& NotificationRequest::_internal_prompt_monitor_request() const {
  return _internal_has_prompt_monitor_request()
      ? *arguments_.prompt_monitor_request_
      : reinterpret_cast< ::iterm2::PromptMonitorRequest&>(::iterm2::_PromptMonitorRequest_default_instance_);
}
inline const ::iterm2::PromptMonitorRequest& NotificationRequest::prompt_monitor_request() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationRequest.prompt_monitor_request)
  return _internal_prompt_monitor_request();
}
inline ::iterm2::PromptMonitorRequest* NotificationRequest::unsafe_arena_release_prompt_monitor_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.NotificationRequest.prompt_monitor_request)
  if (_internal_has_prompt_monitor_request()) {
    clear_has_arguments();
    ::iterm2::PromptMonitorRequest* temp = arguments_.prompt_monitor_request_;
    arguments_.prompt_monitor_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NotificationRequest::unsafe_arena_set_allocated_prompt_monitor_request(::iterm2::PromptMonitorRequest* prompt_monitor_request) {
  clear_arguments();
  if (prompt_monitor_request) {
    set_has_prompt_monitor_request();
    arguments_.prompt_monitor_request_ = prompt_monitor_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.NotificationRequest.prompt_monitor_request)
}
inline ::iterm2::PromptMonitorRequest* NotificationRequest::_internal_mutable_prompt_monitor_request() {
  if (!_internal_has_prompt_monitor_request()) {
    clear_arguments();
    set_has_prompt_monitor_request();
    arguments_.prompt_monitor_request_ = CreateMaybeMessage< ::iterm2::PromptMonitorRequest >(GetArenaForAllocation());
  }
  return arguments_.prompt_monitor_request_;
}
inline ::iterm2::PromptMonitorRequest* NotificationRequest::mutable_prompt_monitor_request() {
  ::iterm2::PromptMonitorRequest* _msg = _internal_mutable_prompt_monitor_request();
  // @@protoc_insertion_point(field_mutable:iterm2.NotificationRequest.prompt_monitor_request)
  return _msg;
}

inline bool NotificationRequest::has_arguments() const {
  return arguments_case() != ARGUMENTS_NOT_SET;
}
inline void NotificationRequest::clear_has_arguments() {
  _oneof_case_[0] = ARGUMENTS_NOT_SET;
}
inline NotificationRequest::ArgumentsCase NotificationRequest::arguments_case() const {
  return NotificationRequest::ArgumentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NotificationResponse

// optional .iterm2.NotificationResponse.Status status = 1;
inline bool NotificationResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationResponse::has_status() const {
  return _internal_has_status();
}
inline void NotificationResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::NotificationResponse_Status NotificationResponse::_internal_status() const {
  return static_cast< ::iterm2::NotificationResponse_Status >(status_);
}
inline ::iterm2::NotificationResponse_Status NotificationResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.NotificationResponse.status)
  return _internal_status();
}
inline void NotificationResponse::_internal_set_status(::iterm2::NotificationResponse_Status value) {
  assert(::iterm2::NotificationResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void NotificationResponse::set_status(::iterm2::NotificationResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.NotificationResponse.status)
}

// -------------------------------------------------------------------

// Notification

// optional .iterm2.KeystrokeNotification keystroke_notification = 1;
inline bool Notification::_internal_has_keystroke_notification() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || keystroke_notification_ != nullptr);
  return value;
}
inline bool Notification::has_keystroke_notification() const {
  return _internal_has_keystroke_notification();
}
inline void Notification::clear_keystroke_notification() {
  if (keystroke_notification_ != nullptr) keystroke_notification_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::KeystrokeNotification& Notification::_internal_keystroke_notification() const {
  const ::iterm2::KeystrokeNotification* p = keystroke_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::KeystrokeNotification&>(
      ::iterm2::_KeystrokeNotification_default_instance_);
}
inline const ::iterm2::KeystrokeNotification& Notification::keystroke_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.keystroke_notification)
  return _internal_keystroke_notification();
}
inline void Notification::unsafe_arena_set_allocated_keystroke_notification(
    ::iterm2::KeystrokeNotification* keystroke_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keystroke_notification_);
  }
  keystroke_notification_ = keystroke_notification;
  if (keystroke_notification) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.keystroke_notification)
}
inline ::iterm2::KeystrokeNotification* Notification::release_keystroke_notification() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::KeystrokeNotification* temp = keystroke_notification_;
  keystroke_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::KeystrokeNotification* Notification::unsafe_arena_release_keystroke_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.keystroke_notification)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::KeystrokeNotification* temp = keystroke_notification_;
  keystroke_notification_ = nullptr;
  return temp;
}
inline ::iterm2::KeystrokeNotification* Notification::_internal_mutable_keystroke_notification() {
  _has_bits_[0] |= 0x00000001u;
  if (keystroke_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::KeystrokeNotification>(GetArenaForAllocation());
    keystroke_notification_ = p;
  }
  return keystroke_notification_;
}
inline ::iterm2::KeystrokeNotification* Notification::mutable_keystroke_notification() {
  ::iterm2::KeystrokeNotification* _msg = _internal_mutable_keystroke_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.keystroke_notification)
  return _msg;
}
inline void Notification::set_allocated_keystroke_notification(::iterm2::KeystrokeNotification* keystroke_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete keystroke_notification_;
  }
  if (keystroke_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::KeystrokeNotification>::GetOwningArena(keystroke_notification);
    if (message_arena != submessage_arena) {
      keystroke_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keystroke_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keystroke_notification_ = keystroke_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.keystroke_notification)
}

// optional .iterm2.ScreenUpdateNotification screen_update_notification = 2;
inline bool Notification::_internal_has_screen_update_notification() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || screen_update_notification_ != nullptr);
  return value;
}
inline bool Notification::has_screen_update_notification() const {
  return _internal_has_screen_update_notification();
}
inline void Notification::clear_screen_update_notification() {
  if (screen_update_notification_ != nullptr) screen_update_notification_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::ScreenUpdateNotification& Notification::_internal_screen_update_notification() const {
  const ::iterm2::ScreenUpdateNotification* p = screen_update_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::ScreenUpdateNotification&>(
      ::iterm2::_ScreenUpdateNotification_default_instance_);
}
inline const ::iterm2::ScreenUpdateNotification& Notification::screen_update_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.screen_update_notification)
  return _internal_screen_update_notification();
}
inline void Notification::unsafe_arena_set_allocated_screen_update_notification(
    ::iterm2::ScreenUpdateNotification* screen_update_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_update_notification_);
  }
  screen_update_notification_ = screen_update_notification;
  if (screen_update_notification) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.screen_update_notification)
}
inline ::iterm2::ScreenUpdateNotification* Notification::release_screen_update_notification() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::ScreenUpdateNotification* temp = screen_update_notification_;
  screen_update_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::ScreenUpdateNotification* Notification::unsafe_arena_release_screen_update_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.screen_update_notification)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::ScreenUpdateNotification* temp = screen_update_notification_;
  screen_update_notification_ = nullptr;
  return temp;
}
inline ::iterm2::ScreenUpdateNotification* Notification::_internal_mutable_screen_update_notification() {
  _has_bits_[0] |= 0x00000002u;
  if (screen_update_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::ScreenUpdateNotification>(GetArenaForAllocation());
    screen_update_notification_ = p;
  }
  return screen_update_notification_;
}
inline ::iterm2::ScreenUpdateNotification* Notification::mutable_screen_update_notification() {
  ::iterm2::ScreenUpdateNotification* _msg = _internal_mutable_screen_update_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.screen_update_notification)
  return _msg;
}
inline void Notification::set_allocated_screen_update_notification(::iterm2::ScreenUpdateNotification* screen_update_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete screen_update_notification_;
  }
  if (screen_update_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ScreenUpdateNotification>::GetOwningArena(screen_update_notification);
    if (message_arena != submessage_arena) {
      screen_update_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_update_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  screen_update_notification_ = screen_update_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.screen_update_notification)
}

// optional .iterm2.PromptNotification prompt_notification = 3;
inline bool Notification::_internal_has_prompt_notification() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || prompt_notification_ != nullptr);
  return value;
}
inline bool Notification::has_prompt_notification() const {
  return _internal_has_prompt_notification();
}
inline void Notification::clear_prompt_notification() {
  if (prompt_notification_ != nullptr) prompt_notification_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::iterm2::PromptNotification& Notification::_internal_prompt_notification() const {
  const ::iterm2::PromptNotification* p = prompt_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::PromptNotification&>(
      ::iterm2::_PromptNotification_default_instance_);
}
inline const ::iterm2::PromptNotification& Notification::prompt_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.prompt_notification)
  return _internal_prompt_notification();
}
inline void Notification::unsafe_arena_set_allocated_prompt_notification(
    ::iterm2::PromptNotification* prompt_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prompt_notification_);
  }
  prompt_notification_ = prompt_notification;
  if (prompt_notification) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.prompt_notification)
}
inline ::iterm2::PromptNotification* Notification::release_prompt_notification() {
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::PromptNotification* temp = prompt_notification_;
  prompt_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::PromptNotification* Notification::unsafe_arena_release_prompt_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.prompt_notification)
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::PromptNotification* temp = prompt_notification_;
  prompt_notification_ = nullptr;
  return temp;
}
inline ::iterm2::PromptNotification* Notification::_internal_mutable_prompt_notification() {
  _has_bits_[0] |= 0x00000004u;
  if (prompt_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::PromptNotification>(GetArenaForAllocation());
    prompt_notification_ = p;
  }
  return prompt_notification_;
}
inline ::iterm2::PromptNotification* Notification::mutable_prompt_notification() {
  ::iterm2::PromptNotification* _msg = _internal_mutable_prompt_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.prompt_notification)
  return _msg;
}
inline void Notification::set_allocated_prompt_notification(::iterm2::PromptNotification* prompt_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prompt_notification_;
  }
  if (prompt_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PromptNotification>::GetOwningArena(prompt_notification);
    if (message_arena != submessage_arena) {
      prompt_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prompt_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prompt_notification_ = prompt_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.prompt_notification)
}

// optional .iterm2.LocationChangeNotification location_change_notification = 4 [deprecated = true];
inline bool Notification::_internal_has_location_change_notification() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || location_change_notification_ != nullptr);
  return value;
}
inline bool Notification::has_location_change_notification() const {
  return _internal_has_location_change_notification();
}
inline void Notification::clear_location_change_notification() {
  if (location_change_notification_ != nullptr) location_change_notification_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::iterm2::LocationChangeNotification& Notification::_internal_location_change_notification() const {
  const ::iterm2::LocationChangeNotification* p = location_change_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::LocationChangeNotification&>(
      ::iterm2::_LocationChangeNotification_default_instance_);
}
inline const ::iterm2::LocationChangeNotification& Notification::location_change_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.location_change_notification)
  return _internal_location_change_notification();
}
inline void Notification::unsafe_arena_set_allocated_location_change_notification(
    ::iterm2::LocationChangeNotification* location_change_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_change_notification_);
  }
  location_change_notification_ = location_change_notification;
  if (location_change_notification) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.location_change_notification)
}
inline ::iterm2::LocationChangeNotification* Notification::release_location_change_notification() {
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::LocationChangeNotification* temp = location_change_notification_;
  location_change_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::LocationChangeNotification* Notification::unsafe_arena_release_location_change_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.location_change_notification)
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::LocationChangeNotification* temp = location_change_notification_;
  location_change_notification_ = nullptr;
  return temp;
}
inline ::iterm2::LocationChangeNotification* Notification::_internal_mutable_location_change_notification() {
  _has_bits_[0] |= 0x00000008u;
  if (location_change_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::LocationChangeNotification>(GetArenaForAllocation());
    location_change_notification_ = p;
  }
  return location_change_notification_;
}
inline ::iterm2::LocationChangeNotification* Notification::mutable_location_change_notification() {
  ::iterm2::LocationChangeNotification* _msg = _internal_mutable_location_change_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.location_change_notification)
  return _msg;
}
inline void Notification::set_allocated_location_change_notification(::iterm2::LocationChangeNotification* location_change_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_change_notification_;
  }
  if (location_change_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::LocationChangeNotification>::GetOwningArena(location_change_notification);
    if (message_arena != submessage_arena) {
      location_change_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_change_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  location_change_notification_ = location_change_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.location_change_notification)
}

// optional .iterm2.CustomEscapeSequenceNotification custom_escape_sequence_notification = 5;
inline bool Notification::_internal_has_custom_escape_sequence_notification() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || custom_escape_sequence_notification_ != nullptr);
  return value;
}
inline bool Notification::has_custom_escape_sequence_notification() const {
  return _internal_has_custom_escape_sequence_notification();
}
inline void Notification::clear_custom_escape_sequence_notification() {
  if (custom_escape_sequence_notification_ != nullptr) custom_escape_sequence_notification_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::iterm2::CustomEscapeSequenceNotification& Notification::_internal_custom_escape_sequence_notification() const {
  const ::iterm2::CustomEscapeSequenceNotification* p = custom_escape_sequence_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::CustomEscapeSequenceNotification&>(
      ::iterm2::_CustomEscapeSequenceNotification_default_instance_);
}
inline const ::iterm2::CustomEscapeSequenceNotification& Notification::custom_escape_sequence_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.custom_escape_sequence_notification)
  return _internal_custom_escape_sequence_notification();
}
inline void Notification::unsafe_arena_set_allocated_custom_escape_sequence_notification(
    ::iterm2::CustomEscapeSequenceNotification* custom_escape_sequence_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_escape_sequence_notification_);
  }
  custom_escape_sequence_notification_ = custom_escape_sequence_notification;
  if (custom_escape_sequence_notification) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.custom_escape_sequence_notification)
}
inline ::iterm2::CustomEscapeSequenceNotification* Notification::release_custom_escape_sequence_notification() {
  _has_bits_[0] &= ~0x00000010u;
  ::iterm2::CustomEscapeSequenceNotification* temp = custom_escape_sequence_notification_;
  custom_escape_sequence_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::CustomEscapeSequenceNotification* Notification::unsafe_arena_release_custom_escape_sequence_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.custom_escape_sequence_notification)
  _has_bits_[0] &= ~0x00000010u;
  ::iterm2::CustomEscapeSequenceNotification* temp = custom_escape_sequence_notification_;
  custom_escape_sequence_notification_ = nullptr;
  return temp;
}
inline ::iterm2::CustomEscapeSequenceNotification* Notification::_internal_mutable_custom_escape_sequence_notification() {
  _has_bits_[0] |= 0x00000010u;
  if (custom_escape_sequence_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::CustomEscapeSequenceNotification>(GetArenaForAllocation());
    custom_escape_sequence_notification_ = p;
  }
  return custom_escape_sequence_notification_;
}
inline ::iterm2::CustomEscapeSequenceNotification* Notification::mutable_custom_escape_sequence_notification() {
  ::iterm2::CustomEscapeSequenceNotification* _msg = _internal_mutable_custom_escape_sequence_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.custom_escape_sequence_notification)
  return _msg;
}
inline void Notification::set_allocated_custom_escape_sequence_notification(::iterm2::CustomEscapeSequenceNotification* custom_escape_sequence_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete custom_escape_sequence_notification_;
  }
  if (custom_escape_sequence_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CustomEscapeSequenceNotification>::GetOwningArena(custom_escape_sequence_notification);
    if (message_arena != submessage_arena) {
      custom_escape_sequence_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_escape_sequence_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_escape_sequence_notification_ = custom_escape_sequence_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.custom_escape_sequence_notification)
}

// optional .iterm2.NewSessionNotification new_session_notification = 6;
inline bool Notification::_internal_has_new_session_notification() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || new_session_notification_ != nullptr);
  return value;
}
inline bool Notification::has_new_session_notification() const {
  return _internal_has_new_session_notification();
}
inline void Notification::clear_new_session_notification() {
  if (new_session_notification_ != nullptr) new_session_notification_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::iterm2::NewSessionNotification& Notification::_internal_new_session_notification() const {
  const ::iterm2::NewSessionNotification* p = new_session_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::NewSessionNotification&>(
      ::iterm2::_NewSessionNotification_default_instance_);
}
inline const ::iterm2::NewSessionNotification& Notification::new_session_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.new_session_notification)
  return _internal_new_session_notification();
}
inline void Notification::unsafe_arena_set_allocated_new_session_notification(
    ::iterm2::NewSessionNotification* new_session_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_session_notification_);
  }
  new_session_notification_ = new_session_notification;
  if (new_session_notification) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.new_session_notification)
}
inline ::iterm2::NewSessionNotification* Notification::release_new_session_notification() {
  _has_bits_[0] &= ~0x00000020u;
  ::iterm2::NewSessionNotification* temp = new_session_notification_;
  new_session_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::NewSessionNotification* Notification::unsafe_arena_release_new_session_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.new_session_notification)
  _has_bits_[0] &= ~0x00000020u;
  ::iterm2::NewSessionNotification* temp = new_session_notification_;
  new_session_notification_ = nullptr;
  return temp;
}
inline ::iterm2::NewSessionNotification* Notification::_internal_mutable_new_session_notification() {
  _has_bits_[0] |= 0x00000020u;
  if (new_session_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::NewSessionNotification>(GetArenaForAllocation());
    new_session_notification_ = p;
  }
  return new_session_notification_;
}
inline ::iterm2::NewSessionNotification* Notification::mutable_new_session_notification() {
  ::iterm2::NewSessionNotification* _msg = _internal_mutable_new_session_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.new_session_notification)
  return _msg;
}
inline void Notification::set_allocated_new_session_notification(::iterm2::NewSessionNotification* new_session_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete new_session_notification_;
  }
  if (new_session_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::NewSessionNotification>::GetOwningArena(new_session_notification);
    if (message_arena != submessage_arena) {
      new_session_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_session_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  new_session_notification_ = new_session_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.new_session_notification)
}

// optional .iterm2.TerminateSessionNotification terminate_session_notification = 7;
inline bool Notification::_internal_has_terminate_session_notification() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || terminate_session_notification_ != nullptr);
  return value;
}
inline bool Notification::has_terminate_session_notification() const {
  return _internal_has_terminate_session_notification();
}
inline void Notification::clear_terminate_session_notification() {
  if (terminate_session_notification_ != nullptr) terminate_session_notification_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::iterm2::TerminateSessionNotification& Notification::_internal_terminate_session_notification() const {
  const ::iterm2::TerminateSessionNotification* p = terminate_session_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::TerminateSessionNotification&>(
      ::iterm2::_TerminateSessionNotification_default_instance_);
}
inline const ::iterm2::TerminateSessionNotification& Notification::terminate_session_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.terminate_session_notification)
  return _internal_terminate_session_notification();
}
inline void Notification::unsafe_arena_set_allocated_terminate_session_notification(
    ::iterm2::TerminateSessionNotification* terminate_session_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(terminate_session_notification_);
  }
  terminate_session_notification_ = terminate_session_notification;
  if (terminate_session_notification) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.terminate_session_notification)
}
inline ::iterm2::TerminateSessionNotification* Notification::release_terminate_session_notification() {
  _has_bits_[0] &= ~0x00000040u;
  ::iterm2::TerminateSessionNotification* temp = terminate_session_notification_;
  terminate_session_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::TerminateSessionNotification* Notification::unsafe_arena_release_terminate_session_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.terminate_session_notification)
  _has_bits_[0] &= ~0x00000040u;
  ::iterm2::TerminateSessionNotification* temp = terminate_session_notification_;
  terminate_session_notification_ = nullptr;
  return temp;
}
inline ::iterm2::TerminateSessionNotification* Notification::_internal_mutable_terminate_session_notification() {
  _has_bits_[0] |= 0x00000040u;
  if (terminate_session_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::TerminateSessionNotification>(GetArenaForAllocation());
    terminate_session_notification_ = p;
  }
  return terminate_session_notification_;
}
inline ::iterm2::TerminateSessionNotification* Notification::mutable_terminate_session_notification() {
  ::iterm2::TerminateSessionNotification* _msg = _internal_mutable_terminate_session_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.terminate_session_notification)
  return _msg;
}
inline void Notification::set_allocated_terminate_session_notification(::iterm2::TerminateSessionNotification* terminate_session_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete terminate_session_notification_;
  }
  if (terminate_session_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TerminateSessionNotification>::GetOwningArena(terminate_session_notification);
    if (message_arena != submessage_arena) {
      terminate_session_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, terminate_session_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  terminate_session_notification_ = terminate_session_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.terminate_session_notification)
}

// optional .iterm2.LayoutChangedNotification layout_changed_notification = 8;
inline bool Notification::_internal_has_layout_changed_notification() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || layout_changed_notification_ != nullptr);
  return value;
}
inline bool Notification::has_layout_changed_notification() const {
  return _internal_has_layout_changed_notification();
}
inline void Notification::clear_layout_changed_notification() {
  if (layout_changed_notification_ != nullptr) layout_changed_notification_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::iterm2::LayoutChangedNotification& Notification::_internal_layout_changed_notification() const {
  const ::iterm2::LayoutChangedNotification* p = layout_changed_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::LayoutChangedNotification&>(
      ::iterm2::_LayoutChangedNotification_default_instance_);
}
inline const ::iterm2::LayoutChangedNotification& Notification::layout_changed_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.layout_changed_notification)
  return _internal_layout_changed_notification();
}
inline void Notification::unsafe_arena_set_allocated_layout_changed_notification(
    ::iterm2::LayoutChangedNotification* layout_changed_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_changed_notification_);
  }
  layout_changed_notification_ = layout_changed_notification;
  if (layout_changed_notification) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.layout_changed_notification)
}
inline ::iterm2::LayoutChangedNotification* Notification::release_layout_changed_notification() {
  _has_bits_[0] &= ~0x00000080u;
  ::iterm2::LayoutChangedNotification* temp = layout_changed_notification_;
  layout_changed_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::LayoutChangedNotification* Notification::unsafe_arena_release_layout_changed_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.layout_changed_notification)
  _has_bits_[0] &= ~0x00000080u;
  ::iterm2::LayoutChangedNotification* temp = layout_changed_notification_;
  layout_changed_notification_ = nullptr;
  return temp;
}
inline ::iterm2::LayoutChangedNotification* Notification::_internal_mutable_layout_changed_notification() {
  _has_bits_[0] |= 0x00000080u;
  if (layout_changed_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::LayoutChangedNotification>(GetArenaForAllocation());
    layout_changed_notification_ = p;
  }
  return layout_changed_notification_;
}
inline ::iterm2::LayoutChangedNotification* Notification::mutable_layout_changed_notification() {
  ::iterm2::LayoutChangedNotification* _msg = _internal_mutable_layout_changed_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.layout_changed_notification)
  return _msg;
}
inline void Notification::set_allocated_layout_changed_notification(::iterm2::LayoutChangedNotification* layout_changed_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete layout_changed_notification_;
  }
  if (layout_changed_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::LayoutChangedNotification>::GetOwningArena(layout_changed_notification);
    if (message_arena != submessage_arena) {
      layout_changed_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout_changed_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  layout_changed_notification_ = layout_changed_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.layout_changed_notification)
}

// optional .iterm2.FocusChangedNotification focus_changed_notification = 9;
inline bool Notification::_internal_has_focus_changed_notification() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || focus_changed_notification_ != nullptr);
  return value;
}
inline bool Notification::has_focus_changed_notification() const {
  return _internal_has_focus_changed_notification();
}
inline void Notification::clear_focus_changed_notification() {
  if (focus_changed_notification_ != nullptr) focus_changed_notification_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::iterm2::FocusChangedNotification& Notification::_internal_focus_changed_notification() const {
  const ::iterm2::FocusChangedNotification* p = focus_changed_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::FocusChangedNotification&>(
      ::iterm2::_FocusChangedNotification_default_instance_);
}
inline const ::iterm2::FocusChangedNotification& Notification::focus_changed_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.focus_changed_notification)
  return _internal_focus_changed_notification();
}
inline void Notification::unsafe_arena_set_allocated_focus_changed_notification(
    ::iterm2::FocusChangedNotification* focus_changed_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(focus_changed_notification_);
  }
  focus_changed_notification_ = focus_changed_notification;
  if (focus_changed_notification) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.focus_changed_notification)
}
inline ::iterm2::FocusChangedNotification* Notification::release_focus_changed_notification() {
  _has_bits_[0] &= ~0x00000100u;
  ::iterm2::FocusChangedNotification* temp = focus_changed_notification_;
  focus_changed_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::FocusChangedNotification* Notification::unsafe_arena_release_focus_changed_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.focus_changed_notification)
  _has_bits_[0] &= ~0x00000100u;
  ::iterm2::FocusChangedNotification* temp = focus_changed_notification_;
  focus_changed_notification_ = nullptr;
  return temp;
}
inline ::iterm2::FocusChangedNotification* Notification::_internal_mutable_focus_changed_notification() {
  _has_bits_[0] |= 0x00000100u;
  if (focus_changed_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::FocusChangedNotification>(GetArenaForAllocation());
    focus_changed_notification_ = p;
  }
  return focus_changed_notification_;
}
inline ::iterm2::FocusChangedNotification* Notification::mutable_focus_changed_notification() {
  ::iterm2::FocusChangedNotification* _msg = _internal_mutable_focus_changed_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.focus_changed_notification)
  return _msg;
}
inline void Notification::set_allocated_focus_changed_notification(::iterm2::FocusChangedNotification* focus_changed_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete focus_changed_notification_;
  }
  if (focus_changed_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::FocusChangedNotification>::GetOwningArena(focus_changed_notification);
    if (message_arena != submessage_arena) {
      focus_changed_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus_changed_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  focus_changed_notification_ = focus_changed_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.focus_changed_notification)
}

// optional .iterm2.ServerOriginatedRPCNotification server_originated_rpc_notification = 10;
inline bool Notification::_internal_has_server_originated_rpc_notification() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || server_originated_rpc_notification_ != nullptr);
  return value;
}
inline bool Notification::has_server_originated_rpc_notification() const {
  return _internal_has_server_originated_rpc_notification();
}
inline void Notification::clear_server_originated_rpc_notification() {
  if (server_originated_rpc_notification_ != nullptr) server_originated_rpc_notification_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::iterm2::ServerOriginatedRPCNotification& Notification::_internal_server_originated_rpc_notification() const {
  const ::iterm2::ServerOriginatedRPCNotification* p = server_originated_rpc_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::ServerOriginatedRPCNotification&>(
      ::iterm2::_ServerOriginatedRPCNotification_default_instance_);
}
inline const ::iterm2::ServerOriginatedRPCNotification& Notification::server_originated_rpc_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.server_originated_rpc_notification)
  return _internal_server_originated_rpc_notification();
}
inline void Notification::unsafe_arena_set_allocated_server_originated_rpc_notification(
    ::iterm2::ServerOriginatedRPCNotification* server_originated_rpc_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_originated_rpc_notification_);
  }
  server_originated_rpc_notification_ = server_originated_rpc_notification;
  if (server_originated_rpc_notification) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.server_originated_rpc_notification)
}
inline ::iterm2::ServerOriginatedRPCNotification* Notification::release_server_originated_rpc_notification() {
  _has_bits_[0] &= ~0x00000200u;
  ::iterm2::ServerOriginatedRPCNotification* temp = server_originated_rpc_notification_;
  server_originated_rpc_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::ServerOriginatedRPCNotification* Notification::unsafe_arena_release_server_originated_rpc_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.server_originated_rpc_notification)
  _has_bits_[0] &= ~0x00000200u;
  ::iterm2::ServerOriginatedRPCNotification* temp = server_originated_rpc_notification_;
  server_originated_rpc_notification_ = nullptr;
  return temp;
}
inline ::iterm2::ServerOriginatedRPCNotification* Notification::_internal_mutable_server_originated_rpc_notification() {
  _has_bits_[0] |= 0x00000200u;
  if (server_originated_rpc_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::ServerOriginatedRPCNotification>(GetArenaForAllocation());
    server_originated_rpc_notification_ = p;
  }
  return server_originated_rpc_notification_;
}
inline ::iterm2::ServerOriginatedRPCNotification* Notification::mutable_server_originated_rpc_notification() {
  ::iterm2::ServerOriginatedRPCNotification* _msg = _internal_mutable_server_originated_rpc_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.server_originated_rpc_notification)
  return _msg;
}
inline void Notification::set_allocated_server_originated_rpc_notification(::iterm2::ServerOriginatedRPCNotification* server_originated_rpc_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete server_originated_rpc_notification_;
  }
  if (server_originated_rpc_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ServerOriginatedRPCNotification>::GetOwningArena(server_originated_rpc_notification);
    if (message_arena != submessage_arena) {
      server_originated_rpc_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_originated_rpc_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  server_originated_rpc_notification_ = server_originated_rpc_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.server_originated_rpc_notification)
}

// optional .iterm2.BroadcastDomainsChangedNotification broadcast_domains_changed = 11;
inline bool Notification::_internal_has_broadcast_domains_changed() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_domains_changed_ != nullptr);
  return value;
}
inline bool Notification::has_broadcast_domains_changed() const {
  return _internal_has_broadcast_domains_changed();
}
inline void Notification::clear_broadcast_domains_changed() {
  if (broadcast_domains_changed_ != nullptr) broadcast_domains_changed_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::iterm2::BroadcastDomainsChangedNotification& Notification::_internal_broadcast_domains_changed() const {
  const ::iterm2::BroadcastDomainsChangedNotification* p = broadcast_domains_changed_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::BroadcastDomainsChangedNotification&>(
      ::iterm2::_BroadcastDomainsChangedNotification_default_instance_);
}
inline const ::iterm2::BroadcastDomainsChangedNotification& Notification::broadcast_domains_changed() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.broadcast_domains_changed)
  return _internal_broadcast_domains_changed();
}
inline void Notification::unsafe_arena_set_allocated_broadcast_domains_changed(
    ::iterm2::BroadcastDomainsChangedNotification* broadcast_domains_changed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broadcast_domains_changed_);
  }
  broadcast_domains_changed_ = broadcast_domains_changed;
  if (broadcast_domains_changed) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.broadcast_domains_changed)
}
inline ::iterm2::BroadcastDomainsChangedNotification* Notification::release_broadcast_domains_changed() {
  _has_bits_[0] &= ~0x00000400u;
  ::iterm2::BroadcastDomainsChangedNotification* temp = broadcast_domains_changed_;
  broadcast_domains_changed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::BroadcastDomainsChangedNotification* Notification::unsafe_arena_release_broadcast_domains_changed() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.broadcast_domains_changed)
  _has_bits_[0] &= ~0x00000400u;
  ::iterm2::BroadcastDomainsChangedNotification* temp = broadcast_domains_changed_;
  broadcast_domains_changed_ = nullptr;
  return temp;
}
inline ::iterm2::BroadcastDomainsChangedNotification* Notification::_internal_mutable_broadcast_domains_changed() {
  _has_bits_[0] |= 0x00000400u;
  if (broadcast_domains_changed_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::BroadcastDomainsChangedNotification>(GetArenaForAllocation());
    broadcast_domains_changed_ = p;
  }
  return broadcast_domains_changed_;
}
inline ::iterm2::BroadcastDomainsChangedNotification* Notification::mutable_broadcast_domains_changed() {
  ::iterm2::BroadcastDomainsChangedNotification* _msg = _internal_mutable_broadcast_domains_changed();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.broadcast_domains_changed)
  return _msg;
}
inline void Notification::set_allocated_broadcast_domains_changed(::iterm2::BroadcastDomainsChangedNotification* broadcast_domains_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete broadcast_domains_changed_;
  }
  if (broadcast_domains_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::BroadcastDomainsChangedNotification>::GetOwningArena(broadcast_domains_changed);
    if (message_arena != submessage_arena) {
      broadcast_domains_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast_domains_changed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  broadcast_domains_changed_ = broadcast_domains_changed;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.broadcast_domains_changed)
}

// optional .iterm2.VariableChangedNotification variable_changed_notification = 12;
inline bool Notification::_internal_has_variable_changed_notification() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || variable_changed_notification_ != nullptr);
  return value;
}
inline bool Notification::has_variable_changed_notification() const {
  return _internal_has_variable_changed_notification();
}
inline void Notification::clear_variable_changed_notification() {
  if (variable_changed_notification_ != nullptr) variable_changed_notification_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::iterm2::VariableChangedNotification& Notification::_internal_variable_changed_notification() const {
  const ::iterm2::VariableChangedNotification* p = variable_changed_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::VariableChangedNotification&>(
      ::iterm2::_VariableChangedNotification_default_instance_);
}
inline const ::iterm2::VariableChangedNotification& Notification::variable_changed_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.variable_changed_notification)
  return _internal_variable_changed_notification();
}
inline void Notification::unsafe_arena_set_allocated_variable_changed_notification(
    ::iterm2::VariableChangedNotification* variable_changed_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variable_changed_notification_);
  }
  variable_changed_notification_ = variable_changed_notification;
  if (variable_changed_notification) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.variable_changed_notification)
}
inline ::iterm2::VariableChangedNotification* Notification::release_variable_changed_notification() {
  _has_bits_[0] &= ~0x00000800u;
  ::iterm2::VariableChangedNotification* temp = variable_changed_notification_;
  variable_changed_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::VariableChangedNotification* Notification::unsafe_arena_release_variable_changed_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.variable_changed_notification)
  _has_bits_[0] &= ~0x00000800u;
  ::iterm2::VariableChangedNotification* temp = variable_changed_notification_;
  variable_changed_notification_ = nullptr;
  return temp;
}
inline ::iterm2::VariableChangedNotification* Notification::_internal_mutable_variable_changed_notification() {
  _has_bits_[0] |= 0x00000800u;
  if (variable_changed_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::VariableChangedNotification>(GetArenaForAllocation());
    variable_changed_notification_ = p;
  }
  return variable_changed_notification_;
}
inline ::iterm2::VariableChangedNotification* Notification::mutable_variable_changed_notification() {
  ::iterm2::VariableChangedNotification* _msg = _internal_mutable_variable_changed_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.variable_changed_notification)
  return _msg;
}
inline void Notification::set_allocated_variable_changed_notification(::iterm2::VariableChangedNotification* variable_changed_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete variable_changed_notification_;
  }
  if (variable_changed_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::VariableChangedNotification>::GetOwningArena(variable_changed_notification);
    if (message_arena != submessage_arena) {
      variable_changed_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_changed_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  variable_changed_notification_ = variable_changed_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.variable_changed_notification)
}

// optional .iterm2.ProfileChangedNotification profile_changed_notification = 13;
inline bool Notification::_internal_has_profile_changed_notification() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || profile_changed_notification_ != nullptr);
  return value;
}
inline bool Notification::has_profile_changed_notification() const {
  return _internal_has_profile_changed_notification();
}
inline void Notification::clear_profile_changed_notification() {
  if (profile_changed_notification_ != nullptr) profile_changed_notification_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::iterm2::ProfileChangedNotification& Notification::_internal_profile_changed_notification() const {
  const ::iterm2::ProfileChangedNotification* p = profile_changed_notification_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::ProfileChangedNotification&>(
      ::iterm2::_ProfileChangedNotification_default_instance_);
}
inline const ::iterm2::ProfileChangedNotification& Notification::profile_changed_notification() const {
  // @@protoc_insertion_point(field_get:iterm2.Notification.profile_changed_notification)
  return _internal_profile_changed_notification();
}
inline void Notification::unsafe_arena_set_allocated_profile_changed_notification(
    ::iterm2::ProfileChangedNotification* profile_changed_notification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_changed_notification_);
  }
  profile_changed_notification_ = profile_changed_notification;
  if (profile_changed_notification) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Notification.profile_changed_notification)
}
inline ::iterm2::ProfileChangedNotification* Notification::release_profile_changed_notification() {
  _has_bits_[0] &= ~0x00001000u;
  ::iterm2::ProfileChangedNotification* temp = profile_changed_notification_;
  profile_changed_notification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::ProfileChangedNotification* Notification::unsafe_arena_release_profile_changed_notification() {
  // @@protoc_insertion_point(field_release:iterm2.Notification.profile_changed_notification)
  _has_bits_[0] &= ~0x00001000u;
  ::iterm2::ProfileChangedNotification* temp = profile_changed_notification_;
  profile_changed_notification_ = nullptr;
  return temp;
}
inline ::iterm2::ProfileChangedNotification* Notification::_internal_mutable_profile_changed_notification() {
  _has_bits_[0] |= 0x00001000u;
  if (profile_changed_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::ProfileChangedNotification>(GetArenaForAllocation());
    profile_changed_notification_ = p;
  }
  return profile_changed_notification_;
}
inline ::iterm2::ProfileChangedNotification* Notification::mutable_profile_changed_notification() {
  ::iterm2::ProfileChangedNotification* _msg = _internal_mutable_profile_changed_notification();
  // @@protoc_insertion_point(field_mutable:iterm2.Notification.profile_changed_notification)
  return _msg;
}
inline void Notification::set_allocated_profile_changed_notification(::iterm2::ProfileChangedNotification* profile_changed_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_changed_notification_;
  }
  if (profile_changed_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ProfileChangedNotification>::GetOwningArena(profile_changed_notification);
    if (message_arena != submessage_arena) {
      profile_changed_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_changed_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  profile_changed_notification_ = profile_changed_notification;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Notification.profile_changed_notification)
}

// -------------------------------------------------------------------

// ProfileChangedNotification

// optional string guid = 1;
inline bool ProfileChangedNotification::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileChangedNotification::has_guid() const {
  return _internal_has_guid();
}
inline void ProfileChangedNotification::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileChangedNotification::guid() const {
  // @@protoc_insertion_point(field_get:iterm2.ProfileChangedNotification.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileChangedNotification::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ProfileChangedNotification.guid)
}
inline std::string* ProfileChangedNotification::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:iterm2.ProfileChangedNotification.guid)
  return _s;
}
inline const std::string& ProfileChangedNotification::_internal_guid() const {
  return guid_.Get();
}
inline void ProfileChangedNotification::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileChangedNotification::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileChangedNotification::release_guid() {
  // @@protoc_insertion_point(field_release:iterm2.ProfileChangedNotification.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileChangedNotification::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ProfileChangedNotification.guid)
}

// -------------------------------------------------------------------

// VariableChangedNotification

// optional .iterm2.VariableScope scope = 1;
inline bool VariableChangedNotification::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VariableChangedNotification::has_scope() const {
  return _internal_has_scope();
}
inline void VariableChangedNotification::clear_scope() {
  scope_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::iterm2::VariableScope VariableChangedNotification::_internal_scope() const {
  return static_cast< ::iterm2::VariableScope >(scope_);
}
inline ::iterm2::VariableScope VariableChangedNotification::scope() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableChangedNotification.scope)
  return _internal_scope();
}
inline void VariableChangedNotification::_internal_set_scope(::iterm2::VariableScope value) {
  assert(::iterm2::VariableScope_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  scope_ = value;
}
inline void VariableChangedNotification::set_scope(::iterm2::VariableScope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:iterm2.VariableChangedNotification.scope)
}

// optional string identifier = 2;
inline bool VariableChangedNotification::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariableChangedNotification::has_identifier() const {
  return _internal_has_identifier();
}
inline void VariableChangedNotification::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariableChangedNotification::identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableChangedNotification.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableChangedNotification::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableChangedNotification.identifier)
}
inline std::string* VariableChangedNotification::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableChangedNotification.identifier)
  return _s;
}
inline const std::string& VariableChangedNotification::_internal_identifier() const {
  return identifier_.Get();
}
inline void VariableChangedNotification::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableChangedNotification::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableChangedNotification::release_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.VariableChangedNotification.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableChangedNotification::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableChangedNotification.identifier)
}

// optional string name = 3;
inline bool VariableChangedNotification::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VariableChangedNotification::has_name() const {
  return _internal_has_name();
}
inline void VariableChangedNotification::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VariableChangedNotification::name() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableChangedNotification.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableChangedNotification::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableChangedNotification.name)
}
inline std::string* VariableChangedNotification::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableChangedNotification.name)
  return _s;
}
inline const std::string& VariableChangedNotification::_internal_name() const {
  return name_.Get();
}
inline void VariableChangedNotification::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableChangedNotification::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableChangedNotification::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.VariableChangedNotification.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableChangedNotification::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableChangedNotification.name)
}

// optional string json_new_value = 4;
inline bool VariableChangedNotification::_internal_has_json_new_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VariableChangedNotification::has_json_new_value() const {
  return _internal_has_json_new_value();
}
inline void VariableChangedNotification::clear_json_new_value() {
  json_new_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VariableChangedNotification::json_new_value() const {
  // @@protoc_insertion_point(field_get:iterm2.VariableChangedNotification.json_new_value)
  return _internal_json_new_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableChangedNotification::set_json_new_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 json_new_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.VariableChangedNotification.json_new_value)
}
inline std::string* VariableChangedNotification::mutable_json_new_value() {
  std::string* _s = _internal_mutable_json_new_value();
  // @@protoc_insertion_point(field_mutable:iterm2.VariableChangedNotification.json_new_value)
  return _s;
}
inline const std::string& VariableChangedNotification::_internal_json_new_value() const {
  return json_new_value_.Get();
}
inline void VariableChangedNotification::_internal_set_json_new_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  json_new_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VariableChangedNotification::_internal_mutable_json_new_value() {
  _has_bits_[0] |= 0x00000004u;
  return json_new_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VariableChangedNotification::release_json_new_value() {
  // @@protoc_insertion_point(field_release:iterm2.VariableChangedNotification.json_new_value)
  if (!_internal_has_json_new_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = json_new_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_new_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_new_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VariableChangedNotification::set_allocated_json_new_value(std::string* json_new_value) {
  if (json_new_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  json_new_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_new_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_new_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_new_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.VariableChangedNotification.json_new_value)
}

// -------------------------------------------------------------------

// BroadcastDomainsChangedNotification

// repeated .iterm2.BroadcastDomain broadcast_domains = 1;
inline int BroadcastDomainsChangedNotification::_internal_broadcast_domains_size() const {
  return broadcast_domains_.size();
}
inline int BroadcastDomainsChangedNotification::broadcast_domains_size() const {
  return _internal_broadcast_domains_size();
}
inline void BroadcastDomainsChangedNotification::clear_broadcast_domains() {
  broadcast_domains_.Clear();
}
inline ::iterm2::BroadcastDomain* BroadcastDomainsChangedNotification::mutable_broadcast_domains(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.BroadcastDomainsChangedNotification.broadcast_domains)
  return broadcast_domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >*
BroadcastDomainsChangedNotification::mutable_broadcast_domains() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.BroadcastDomainsChangedNotification.broadcast_domains)
  return &broadcast_domains_;
}
inline const ::iterm2::BroadcastDomain& BroadcastDomainsChangedNotification::_internal_broadcast_domains(int index) const {
  return broadcast_domains_.Get(index);
}
inline const ::iterm2::BroadcastDomain& BroadcastDomainsChangedNotification::broadcast_domains(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.BroadcastDomainsChangedNotification.broadcast_domains)
  return _internal_broadcast_domains(index);
}
inline ::iterm2::BroadcastDomain* BroadcastDomainsChangedNotification::_internal_add_broadcast_domains() {
  return broadcast_domains_.Add();
}
inline ::iterm2::BroadcastDomain* BroadcastDomainsChangedNotification::add_broadcast_domains() {
  ::iterm2::BroadcastDomain* _add = _internal_add_broadcast_domains();
  // @@protoc_insertion_point(field_add:iterm2.BroadcastDomainsChangedNotification.broadcast_domains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::BroadcastDomain >&
BroadcastDomainsChangedNotification::broadcast_domains() const {
  // @@protoc_insertion_point(field_list:iterm2.BroadcastDomainsChangedNotification.broadcast_domains)
  return broadcast_domains_;
}

// -------------------------------------------------------------------

// ServerOriginatedRPC_RPCArgument

// optional string name = 1;
inline bool ServerOriginatedRPC_RPCArgument::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerOriginatedRPC_RPCArgument::has_name() const {
  return _internal_has_name();
}
inline void ServerOriginatedRPC_RPCArgument::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerOriginatedRPC_RPCArgument::name() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPC.RPCArgument.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerOriginatedRPC_RPCArgument::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPC.RPCArgument.name)
}
inline std::string* ServerOriginatedRPC_RPCArgument::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPC.RPCArgument.name)
  return _s;
}
inline const std::string& ServerOriginatedRPC_RPCArgument::_internal_name() const {
  return name_.Get();
}
inline void ServerOriginatedRPC_RPCArgument::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPC_RPCArgument::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPC_RPCArgument::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPC.RPCArgument.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerOriginatedRPC_RPCArgument::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPC.RPCArgument.name)
}

// optional string json_value = 2;
inline bool ServerOriginatedRPC_RPCArgument::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerOriginatedRPC_RPCArgument::has_json_value() const {
  return _internal_has_json_value();
}
inline void ServerOriginatedRPC_RPCArgument::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerOriginatedRPC_RPCArgument::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPC.RPCArgument.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerOriginatedRPC_RPCArgument::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPC.RPCArgument.json_value)
}
inline std::string* ServerOriginatedRPC_RPCArgument::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPC.RPCArgument.json_value)
  return _s;
}
inline const std::string& ServerOriginatedRPC_RPCArgument::_internal_json_value() const {
  return json_value_.Get();
}
inline void ServerOriginatedRPC_RPCArgument::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPC_RPCArgument::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000002u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPC_RPCArgument::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPC.RPCArgument.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerOriginatedRPC_RPCArgument::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPC.RPCArgument.json_value)
}

// -------------------------------------------------------------------

// ServerOriginatedRPC

// optional string name = 2;
inline bool ServerOriginatedRPC::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerOriginatedRPC::has_name() const {
  return _internal_has_name();
}
inline void ServerOriginatedRPC::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerOriginatedRPC::name() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPC.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerOriginatedRPC::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPC.name)
}
inline std::string* ServerOriginatedRPC::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPC.name)
  return _s;
}
inline const std::string& ServerOriginatedRPC::_internal_name() const {
  return name_.Get();
}
inline void ServerOriginatedRPC::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPC::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPC::release_name() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPC.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerOriginatedRPC::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPC.name)
}

// repeated .iterm2.ServerOriginatedRPC.RPCArgument arguments = 3;
inline int ServerOriginatedRPC::_internal_arguments_size() const {
  return arguments_.size();
}
inline int ServerOriginatedRPC::arguments_size() const {
  return _internal_arguments_size();
}
inline void ServerOriginatedRPC::clear_arguments() {
  arguments_.Clear();
}
inline ::iterm2::ServerOriginatedRPC_RPCArgument* ServerOriginatedRPC::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPC.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ServerOriginatedRPC_RPCArgument >*
ServerOriginatedRPC::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ServerOriginatedRPC.arguments)
  return &arguments_;
}
inline const ::iterm2::ServerOriginatedRPC_RPCArgument& ServerOriginatedRPC::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::iterm2::ServerOriginatedRPC_RPCArgument& ServerOriginatedRPC::arguments(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPC.arguments)
  return _internal_arguments(index);
}
inline ::iterm2::ServerOriginatedRPC_RPCArgument* ServerOriginatedRPC::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::iterm2::ServerOriginatedRPC_RPCArgument* ServerOriginatedRPC::add_arguments() {
  ::iterm2::ServerOriginatedRPC_RPCArgument* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:iterm2.ServerOriginatedRPC.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ServerOriginatedRPC_RPCArgument >&
ServerOriginatedRPC::arguments() const {
  // @@protoc_insertion_point(field_list:iterm2.ServerOriginatedRPC.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// ServerOriginatedRPCNotification

// optional string request_id = 1;
inline bool ServerOriginatedRPCNotification::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerOriginatedRPCNotification::has_request_id() const {
  return _internal_has_request_id();
}
inline void ServerOriginatedRPCNotification::clear_request_id() {
  request_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerOriginatedRPCNotification::request_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPCNotification.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerOriginatedRPCNotification::set_request_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ServerOriginatedRPCNotification.request_id)
}
inline std::string* ServerOriginatedRPCNotification::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPCNotification.request_id)
  return _s;
}
inline const std::string& ServerOriginatedRPCNotification::_internal_request_id() const {
  return request_id_.Get();
}
inline void ServerOriginatedRPCNotification::_internal_set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCNotification::_internal_mutable_request_id() {
  _has_bits_[0] |= 0x00000001u;
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerOriginatedRPCNotification::release_request_id() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPCNotification.request_id)
  if (!_internal_has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerOriginatedRPCNotification::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPCNotification.request_id)
}

// optional .iterm2.ServerOriginatedRPC rpc = 2;
inline bool ServerOriginatedRPCNotification::_internal_has_rpc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rpc_ != nullptr);
  return value;
}
inline bool ServerOriginatedRPCNotification::has_rpc() const {
  return _internal_has_rpc();
}
inline void ServerOriginatedRPCNotification::clear_rpc() {
  if (rpc_ != nullptr) rpc_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::ServerOriginatedRPC& ServerOriginatedRPCNotification::_internal_rpc() const {
  const ::iterm2::ServerOriginatedRPC* p = rpc_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::ServerOriginatedRPC&>(
      ::iterm2::_ServerOriginatedRPC_default_instance_);
}
inline const ::iterm2::ServerOriginatedRPC& ServerOriginatedRPCNotification::rpc() const {
  // @@protoc_insertion_point(field_get:iterm2.ServerOriginatedRPCNotification.rpc)
  return _internal_rpc();
}
inline void ServerOriginatedRPCNotification::unsafe_arena_set_allocated_rpc(
    ::iterm2::ServerOriginatedRPC* rpc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc_);
  }
  rpc_ = rpc;
  if (rpc) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ServerOriginatedRPCNotification.rpc)
}
inline ::iterm2::ServerOriginatedRPC* ServerOriginatedRPCNotification::release_rpc() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::ServerOriginatedRPC* temp = rpc_;
  rpc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::ServerOriginatedRPC* ServerOriginatedRPCNotification::unsafe_arena_release_rpc() {
  // @@protoc_insertion_point(field_release:iterm2.ServerOriginatedRPCNotification.rpc)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::ServerOriginatedRPC* temp = rpc_;
  rpc_ = nullptr;
  return temp;
}
inline ::iterm2::ServerOriginatedRPC* ServerOriginatedRPCNotification::_internal_mutable_rpc() {
  _has_bits_[0] |= 0x00000002u;
  if (rpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::ServerOriginatedRPC>(GetArenaForAllocation());
    rpc_ = p;
  }
  return rpc_;
}
inline ::iterm2::ServerOriginatedRPC* ServerOriginatedRPCNotification::mutable_rpc() {
  ::iterm2::ServerOriginatedRPC* _msg = _internal_mutable_rpc();
  // @@protoc_insertion_point(field_mutable:iterm2.ServerOriginatedRPCNotification.rpc)
  return _msg;
}
inline void ServerOriginatedRPCNotification::set_allocated_rpc(::iterm2::ServerOriginatedRPC* rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rpc_;
  }
  if (rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ServerOriginatedRPC>::GetOwningArena(rpc);
    if (message_arena != submessage_arena) {
      rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rpc_ = rpc;
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedRPCNotification.rpc)
}

// -------------------------------------------------------------------

// KeystrokeNotification

// optional string characters = 1;
inline bool KeystrokeNotification::_internal_has_characters() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeystrokeNotification::has_characters() const {
  return _internal_has_characters();
}
inline void KeystrokeNotification::clear_characters() {
  characters_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeystrokeNotification::characters() const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeNotification.characters)
  return _internal_characters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeystrokeNotification::set_characters(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 characters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeNotification.characters)
}
inline std::string* KeystrokeNotification::mutable_characters() {
  std::string* _s = _internal_mutable_characters();
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokeNotification.characters)
  return _s;
}
inline const std::string& KeystrokeNotification::_internal_characters() const {
  return characters_.Get();
}
inline void KeystrokeNotification::_internal_set_characters(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  characters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeystrokeNotification::_internal_mutable_characters() {
  _has_bits_[0] |= 0x00000001u;
  return characters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeystrokeNotification::release_characters() {
  // @@protoc_insertion_point(field_release:iterm2.KeystrokeNotification.characters)
  if (!_internal_has_characters()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = characters_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (characters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    characters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeystrokeNotification::set_allocated_characters(std::string* characters) {
  if (characters != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  characters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), characters,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (characters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    characters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.KeystrokeNotification.characters)
}

// optional string charactersIgnoringModifiers = 2;
inline bool KeystrokeNotification::_internal_has_charactersignoringmodifiers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeystrokeNotification::has_charactersignoringmodifiers() const {
  return _internal_has_charactersignoringmodifiers();
}
inline void KeystrokeNotification::clear_charactersignoringmodifiers() {
  charactersignoringmodifiers_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeystrokeNotification::charactersignoringmodifiers() const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeNotification.charactersIgnoringModifiers)
  return _internal_charactersignoringmodifiers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeystrokeNotification::set_charactersignoringmodifiers(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 charactersignoringmodifiers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeNotification.charactersIgnoringModifiers)
}
inline std::string* KeystrokeNotification::mutable_charactersignoringmodifiers() {
  std::string* _s = _internal_mutable_charactersignoringmodifiers();
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokeNotification.charactersIgnoringModifiers)
  return _s;
}
inline const std::string& KeystrokeNotification::_internal_charactersignoringmodifiers() const {
  return charactersignoringmodifiers_.Get();
}
inline void KeystrokeNotification::_internal_set_charactersignoringmodifiers(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  charactersignoringmodifiers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeystrokeNotification::_internal_mutable_charactersignoringmodifiers() {
  _has_bits_[0] |= 0x00000002u;
  return charactersignoringmodifiers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeystrokeNotification::release_charactersignoringmodifiers() {
  // @@protoc_insertion_point(field_release:iterm2.KeystrokeNotification.charactersIgnoringModifiers)
  if (!_internal_has_charactersignoringmodifiers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = charactersignoringmodifiers_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (charactersignoringmodifiers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    charactersignoringmodifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeystrokeNotification::set_allocated_charactersignoringmodifiers(std::string* charactersignoringmodifiers) {
  if (charactersignoringmodifiers != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  charactersignoringmodifiers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charactersignoringmodifiers,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (charactersignoringmodifiers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    charactersignoringmodifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.KeystrokeNotification.charactersIgnoringModifiers)
}

// repeated .iterm2.Modifiers modifiers = 3;
inline int KeystrokeNotification::_internal_modifiers_size() const {
  return modifiers_.size();
}
inline int KeystrokeNotification::modifiers_size() const {
  return _internal_modifiers_size();
}
inline void KeystrokeNotification::clear_modifiers() {
  modifiers_.Clear();
}
inline ::iterm2::Modifiers KeystrokeNotification::_internal_modifiers(int index) const {
  return static_cast< ::iterm2::Modifiers >(modifiers_.Get(index));
}
inline ::iterm2::Modifiers KeystrokeNotification::modifiers(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeNotification.modifiers)
  return _internal_modifiers(index);
}
inline void KeystrokeNotification::set_modifiers(int index, ::iterm2::Modifiers value) {
  assert(::iterm2::Modifiers_IsValid(value));
  modifiers_.Set(index, value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeNotification.modifiers)
}
inline void KeystrokeNotification::_internal_add_modifiers(::iterm2::Modifiers value) {
  assert(::iterm2::Modifiers_IsValid(value));
  modifiers_.Add(value);
}
inline void KeystrokeNotification::add_modifiers(::iterm2::Modifiers value) {
  _internal_add_modifiers(value);
  // @@protoc_insertion_point(field_add:iterm2.KeystrokeNotification.modifiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
KeystrokeNotification::modifiers() const {
  // @@protoc_insertion_point(field_list:iterm2.KeystrokeNotification.modifiers)
  return modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeystrokeNotification::_internal_mutable_modifiers() {
  return &modifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeystrokeNotification::mutable_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.KeystrokeNotification.modifiers)
  return _internal_mutable_modifiers();
}

// optional int32 keyCode = 4;
inline bool KeystrokeNotification::_internal_has_keycode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KeystrokeNotification::has_keycode() const {
  return _internal_has_keycode();
}
inline void KeystrokeNotification::clear_keycode() {
  keycode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t KeystrokeNotification::_internal_keycode() const {
  return keycode_;
}
inline int32_t KeystrokeNotification::keycode() const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeNotification.keyCode)
  return _internal_keycode();
}
inline void KeystrokeNotification::_internal_set_keycode(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  keycode_ = value;
}
inline void KeystrokeNotification::set_keycode(int32_t value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeNotification.keyCode)
}

// optional string session = 5;
inline bool KeystrokeNotification::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KeystrokeNotification::has_session() const {
  return _internal_has_session();
}
inline void KeystrokeNotification::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KeystrokeNotification::session() const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeNotification.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeystrokeNotification::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeNotification.session)
}
inline std::string* KeystrokeNotification::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.KeystrokeNotification.session)
  return _s;
}
inline const std::string& KeystrokeNotification::_internal_session() const {
  return session_.Get();
}
inline void KeystrokeNotification::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeystrokeNotification::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000004u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeystrokeNotification::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.KeystrokeNotification.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeystrokeNotification::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.KeystrokeNotification.session)
}

// optional .iterm2.KeystrokeNotification.Action action = 6;
inline bool KeystrokeNotification::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KeystrokeNotification::has_action() const {
  return _internal_has_action();
}
inline void KeystrokeNotification::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::iterm2::KeystrokeNotification_Action KeystrokeNotification::_internal_action() const {
  return static_cast< ::iterm2::KeystrokeNotification_Action >(action_);
}
inline ::iterm2::KeystrokeNotification_Action KeystrokeNotification::action() const {
  // @@protoc_insertion_point(field_get:iterm2.KeystrokeNotification.action)
  return _internal_action();
}
inline void KeystrokeNotification::_internal_set_action(::iterm2::KeystrokeNotification_Action value) {
  assert(::iterm2::KeystrokeNotification_Action_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  action_ = value;
}
inline void KeystrokeNotification::set_action(::iterm2::KeystrokeNotification_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:iterm2.KeystrokeNotification.action)
}

// -------------------------------------------------------------------

// ScreenUpdateNotification

// optional string session = 1;
inline bool ScreenUpdateNotification::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScreenUpdateNotification::has_session() const {
  return _internal_has_session();
}
inline void ScreenUpdateNotification::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScreenUpdateNotification::session() const {
  // @@protoc_insertion_point(field_get:iterm2.ScreenUpdateNotification.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScreenUpdateNotification::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ScreenUpdateNotification.session)
}
inline std::string* ScreenUpdateNotification::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.ScreenUpdateNotification.session)
  return _s;
}
inline const std::string& ScreenUpdateNotification::_internal_session() const {
  return session_.Get();
}
inline void ScreenUpdateNotification::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScreenUpdateNotification::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScreenUpdateNotification::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.ScreenUpdateNotification.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ScreenUpdateNotification::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ScreenUpdateNotification.session)
}

// -------------------------------------------------------------------

// PromptNotificationPrompt

// optional string placeholder = 1;
inline bool PromptNotificationPrompt::_internal_has_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PromptNotificationPrompt::has_placeholder() const {
  return _internal_has_placeholder();
}
inline void PromptNotificationPrompt::clear_placeholder() {
  placeholder_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PromptNotificationPrompt::placeholder() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotificationPrompt.placeholder)
  return _internal_placeholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptNotificationPrompt::set_placeholder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PromptNotificationPrompt.placeholder)
}
inline std::string* PromptNotificationPrompt::mutable_placeholder() {
  std::string* _s = _internal_mutable_placeholder();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotificationPrompt.placeholder)
  return _s;
}
inline const std::string& PromptNotificationPrompt::_internal_placeholder() const {
  return placeholder_.Get();
}
inline void PromptNotificationPrompt::_internal_set_placeholder(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PromptNotificationPrompt::_internal_mutable_placeholder() {
  _has_bits_[0] |= 0x00000001u;
  return placeholder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PromptNotificationPrompt::release_placeholder() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotificationPrompt.placeholder)
  if (!_internal_has_placeholder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = placeholder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (placeholder_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PromptNotificationPrompt::set_allocated_placeholder(std::string* placeholder) {
  if (placeholder != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  placeholder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (placeholder_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotificationPrompt.placeholder)
}

// optional .iterm2.GetPromptResponse prompt = 2;
inline bool PromptNotificationPrompt::_internal_has_prompt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || prompt_ != nullptr);
  return value;
}
inline bool PromptNotificationPrompt::has_prompt() const {
  return _internal_has_prompt();
}
inline void PromptNotificationPrompt::clear_prompt() {
  if (prompt_ != nullptr) prompt_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::GetPromptResponse& PromptNotificationPrompt::_internal_prompt() const {
  const ::iterm2::GetPromptResponse* p = prompt_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::GetPromptResponse&>(
      ::iterm2::_GetPromptResponse_default_instance_);
}
inline const ::iterm2::GetPromptResponse& PromptNotificationPrompt::prompt() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotificationPrompt.prompt)
  return _internal_prompt();
}
inline void PromptNotificationPrompt::unsafe_arena_set_allocated_prompt(
    ::iterm2::GetPromptResponse* prompt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prompt_);
  }
  prompt_ = prompt;
  if (prompt) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PromptNotificationPrompt.prompt)
}
inline ::iterm2::GetPromptResponse* PromptNotificationPrompt::release_prompt() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::GetPromptResponse* temp = prompt_;
  prompt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::GetPromptResponse* PromptNotificationPrompt::unsafe_arena_release_prompt() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotificationPrompt.prompt)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::GetPromptResponse* temp = prompt_;
  prompt_ = nullptr;
  return temp;
}
inline ::iterm2::GetPromptResponse* PromptNotificationPrompt::_internal_mutable_prompt() {
  _has_bits_[0] |= 0x00000002u;
  if (prompt_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::GetPromptResponse>(GetArenaForAllocation());
    prompt_ = p;
  }
  return prompt_;
}
inline ::iterm2::GetPromptResponse* PromptNotificationPrompt::mutable_prompt() {
  ::iterm2::GetPromptResponse* _msg = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotificationPrompt.prompt)
  return _msg;
}
inline void PromptNotificationPrompt::set_allocated_prompt(::iterm2::GetPromptResponse* prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prompt_;
  }
  if (prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetPromptResponse>::GetOwningArena(prompt);
    if (message_arena != submessage_arena) {
      prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prompt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prompt_ = prompt;
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotificationPrompt.prompt)
}

// -------------------------------------------------------------------

// PromptNotificationCommandStart

// optional string command = 1;
inline bool PromptNotificationCommandStart::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PromptNotificationCommandStart::has_command() const {
  return _internal_has_command();
}
inline void PromptNotificationCommandStart::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PromptNotificationCommandStart::command() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotificationCommandStart.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptNotificationCommandStart::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PromptNotificationCommandStart.command)
}
inline std::string* PromptNotificationCommandStart::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotificationCommandStart.command)
  return _s;
}
inline const std::string& PromptNotificationCommandStart::_internal_command() const {
  return command_.Get();
}
inline void PromptNotificationCommandStart::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PromptNotificationCommandStart::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PromptNotificationCommandStart::release_command() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotificationCommandStart.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PromptNotificationCommandStart::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotificationCommandStart.command)
}

// -------------------------------------------------------------------

// PromptNotificationCommandEnd

// optional int32 status = 1;
inline bool PromptNotificationCommandEnd::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PromptNotificationCommandEnd::has_status() const {
  return _internal_has_status();
}
inline void PromptNotificationCommandEnd::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t PromptNotificationCommandEnd::_internal_status() const {
  return status_;
}
inline int32_t PromptNotificationCommandEnd::status() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotificationCommandEnd.status)
  return _internal_status();
}
inline void PromptNotificationCommandEnd::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void PromptNotificationCommandEnd::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.PromptNotificationCommandEnd.status)
}

// -------------------------------------------------------------------

// PromptNotification

// optional string session = 1;
inline bool PromptNotification::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PromptNotification::has_session() const {
  return _internal_has_session();
}
inline void PromptNotification::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PromptNotification::session() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotification.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptNotification::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PromptNotification.session)
}
inline std::string* PromptNotification::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotification.session)
  return _s;
}
inline const std::string& PromptNotification::_internal_session() const {
  return session_.Get();
}
inline void PromptNotification::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PromptNotification::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PromptNotification::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotification.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PromptNotification::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotification.session)
}

// .iterm2.PromptNotificationPrompt prompt = 2;
inline bool PromptNotification::_internal_has_prompt() const {
  return event_case() == kPrompt;
}
inline bool PromptNotification::has_prompt() const {
  return _internal_has_prompt();
}
inline void PromptNotification::set_has_prompt() {
  _oneof_case_[0] = kPrompt;
}
inline void PromptNotification::clear_prompt() {
  if (_internal_has_prompt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.prompt_;
    }
    clear_has_event();
  }
}
inline ::iterm2::PromptNotificationPrompt* PromptNotification::release_prompt() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotification.prompt)
  if (_internal_has_prompt()) {
    clear_has_event();
      ::iterm2::PromptNotificationPrompt* temp = event_.prompt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.prompt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PromptNotificationPrompt& PromptNotification::_internal_prompt() const {
  return _internal_has_prompt()
      ? *event_.prompt_
      : reinterpret_cast< ::iterm2::PromptNotificationPrompt&>(::iterm2::_PromptNotificationPrompt_default_instance_);
}
inline const ::iterm2::PromptNotificationPrompt& PromptNotification::prompt() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotification.prompt)
  return _internal_prompt();
}
inline ::iterm2::PromptNotificationPrompt* PromptNotification::unsafe_arena_release_prompt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PromptNotification.prompt)
  if (_internal_has_prompt()) {
    clear_has_event();
    ::iterm2::PromptNotificationPrompt* temp = event_.prompt_;
    event_.prompt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PromptNotification::unsafe_arena_set_allocated_prompt(::iterm2::PromptNotificationPrompt* prompt) {
  clear_event();
  if (prompt) {
    set_has_prompt();
    event_.prompt_ = prompt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PromptNotification.prompt)
}
inline ::iterm2::PromptNotificationPrompt* PromptNotification::_internal_mutable_prompt() {
  if (!_internal_has_prompt()) {
    clear_event();
    set_has_prompt();
    event_.prompt_ = CreateMaybeMessage< ::iterm2::PromptNotificationPrompt >(GetArenaForAllocation());
  }
  return event_.prompt_;
}
inline ::iterm2::PromptNotificationPrompt* PromptNotification::mutable_prompt() {
  ::iterm2::PromptNotificationPrompt* _msg = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotification.prompt)
  return _msg;
}

// .iterm2.PromptNotificationCommandStart command_start = 3;
inline bool PromptNotification::_internal_has_command_start() const {
  return event_case() == kCommandStart;
}
inline bool PromptNotification::has_command_start() const {
  return _internal_has_command_start();
}
inline void PromptNotification::set_has_command_start() {
  _oneof_case_[0] = kCommandStart;
}
inline void PromptNotification::clear_command_start() {
  if (_internal_has_command_start()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.command_start_;
    }
    clear_has_event();
  }
}
inline ::iterm2::PromptNotificationCommandStart* PromptNotification::release_command_start() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotification.command_start)
  if (_internal_has_command_start()) {
    clear_has_event();
      ::iterm2::PromptNotificationCommandStart* temp = event_.command_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.command_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PromptNotificationCommandStart& PromptNotification::_internal_command_start() const {
  return _internal_has_command_start()
      ? *event_.command_start_
      : reinterpret_cast< ::iterm2::PromptNotificationCommandStart&>(::iterm2::_PromptNotificationCommandStart_default_instance_);
}
inline const ::iterm2::PromptNotificationCommandStart& PromptNotification::command_start() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotification.command_start)
  return _internal_command_start();
}
inline ::iterm2::PromptNotificationCommandStart* PromptNotification::unsafe_arena_release_command_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PromptNotification.command_start)
  if (_internal_has_command_start()) {
    clear_has_event();
    ::iterm2::PromptNotificationCommandStart* temp = event_.command_start_;
    event_.command_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PromptNotification::unsafe_arena_set_allocated_command_start(::iterm2::PromptNotificationCommandStart* command_start) {
  clear_event();
  if (command_start) {
    set_has_command_start();
    event_.command_start_ = command_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PromptNotification.command_start)
}
inline ::iterm2::PromptNotificationCommandStart* PromptNotification::_internal_mutable_command_start() {
  if (!_internal_has_command_start()) {
    clear_event();
    set_has_command_start();
    event_.command_start_ = CreateMaybeMessage< ::iterm2::PromptNotificationCommandStart >(GetArenaForAllocation());
  }
  return event_.command_start_;
}
inline ::iterm2::PromptNotificationCommandStart* PromptNotification::mutable_command_start() {
  ::iterm2::PromptNotificationCommandStart* _msg = _internal_mutable_command_start();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotification.command_start)
  return _msg;
}

// .iterm2.PromptNotificationCommandEnd command_end = 4;
inline bool PromptNotification::_internal_has_command_end() const {
  return event_case() == kCommandEnd;
}
inline bool PromptNotification::has_command_end() const {
  return _internal_has_command_end();
}
inline void PromptNotification::set_has_command_end() {
  _oneof_case_[0] = kCommandEnd;
}
inline void PromptNotification::clear_command_end() {
  if (_internal_has_command_end()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.command_end_;
    }
    clear_has_event();
  }
}
inline ::iterm2::PromptNotificationCommandEnd* PromptNotification::release_command_end() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotification.command_end)
  if (_internal_has_command_end()) {
    clear_has_event();
      ::iterm2::PromptNotificationCommandEnd* temp = event_.command_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.command_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::PromptNotificationCommandEnd& PromptNotification::_internal_command_end() const {
  return _internal_has_command_end()
      ? *event_.command_end_
      : reinterpret_cast< ::iterm2::PromptNotificationCommandEnd&>(::iterm2::_PromptNotificationCommandEnd_default_instance_);
}
inline const ::iterm2::PromptNotificationCommandEnd& PromptNotification::command_end() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotification.command_end)
  return _internal_command_end();
}
inline ::iterm2::PromptNotificationCommandEnd* PromptNotification::unsafe_arena_release_command_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.PromptNotification.command_end)
  if (_internal_has_command_end()) {
    clear_has_event();
    ::iterm2::PromptNotificationCommandEnd* temp = event_.command_end_;
    event_.command_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PromptNotification::unsafe_arena_set_allocated_command_end(::iterm2::PromptNotificationCommandEnd* command_end) {
  clear_event();
  if (command_end) {
    set_has_command_end();
    event_.command_end_ = command_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.PromptNotification.command_end)
}
inline ::iterm2::PromptNotificationCommandEnd* PromptNotification::_internal_mutable_command_end() {
  if (!_internal_has_command_end()) {
    clear_event();
    set_has_command_end();
    event_.command_end_ = CreateMaybeMessage< ::iterm2::PromptNotificationCommandEnd >(GetArenaForAllocation());
  }
  return event_.command_end_;
}
inline ::iterm2::PromptNotificationCommandEnd* PromptNotification::mutable_command_end() {
  ::iterm2::PromptNotificationCommandEnd* _msg = _internal_mutable_command_end();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotification.command_end)
  return _msg;
}

// optional string unique_prompt_id = 5;
inline bool PromptNotification::_internal_has_unique_prompt_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PromptNotification::has_unique_prompt_id() const {
  return _internal_has_unique_prompt_id();
}
inline void PromptNotification::clear_unique_prompt_id() {
  unique_prompt_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PromptNotification::unique_prompt_id() const {
  // @@protoc_insertion_point(field_get:iterm2.PromptNotification.unique_prompt_id)
  return _internal_unique_prompt_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromptNotification::set_unique_prompt_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.PromptNotification.unique_prompt_id)
}
inline std::string* PromptNotification::mutable_unique_prompt_id() {
  std::string* _s = _internal_mutable_unique_prompt_id();
  // @@protoc_insertion_point(field_mutable:iterm2.PromptNotification.unique_prompt_id)
  return _s;
}
inline const std::string& PromptNotification::_internal_unique_prompt_id() const {
  return unique_prompt_id_.Get();
}
inline void PromptNotification::_internal_set_unique_prompt_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PromptNotification::_internal_mutable_unique_prompt_id() {
  _has_bits_[0] |= 0x00000002u;
  return unique_prompt_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PromptNotification::release_unique_prompt_id() {
  // @@protoc_insertion_point(field_release:iterm2.PromptNotification.unique_prompt_id)
  if (!_internal_has_unique_prompt_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = unique_prompt_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_prompt_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PromptNotification::set_allocated_unique_prompt_id(std::string* unique_prompt_id) {
  if (unique_prompt_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unique_prompt_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_prompt_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_prompt_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotification.unique_prompt_id)
}

inline bool PromptNotification::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void PromptNotification::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline PromptNotification::EventCase PromptNotification::event_case() const {
  return PromptNotification::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LocationChangeNotification

// optional string host_name = 1;
inline bool LocationChangeNotification::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocationChangeNotification::has_host_name() const {
  return _internal_has_host_name();
}
inline void LocationChangeNotification::clear_host_name() {
  host_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocationChangeNotification::host_name() const {
  // @@protoc_insertion_point(field_get:iterm2.LocationChangeNotification.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocationChangeNotification::set_host_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.LocationChangeNotification.host_name)
}
inline std::string* LocationChangeNotification::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:iterm2.LocationChangeNotification.host_name)
  return _s;
}
inline const std::string& LocationChangeNotification::_internal_host_name() const {
  return host_name_.Get();
}
inline void LocationChangeNotification::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000001u;
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::release_host_name() {
  // @@protoc_insertion_point(field_release:iterm2.LocationChangeNotification.host_name)
  if (!_internal_has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = host_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocationChangeNotification::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.LocationChangeNotification.host_name)
}

// optional string user_name = 2;
inline bool LocationChangeNotification::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocationChangeNotification::has_user_name() const {
  return _internal_has_user_name();
}
inline void LocationChangeNotification::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LocationChangeNotification::user_name() const {
  // @@protoc_insertion_point(field_get:iterm2.LocationChangeNotification.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocationChangeNotification::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.LocationChangeNotification.user_name)
}
inline std::string* LocationChangeNotification::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:iterm2.LocationChangeNotification.user_name)
  return _s;
}
inline const std::string& LocationChangeNotification::_internal_user_name() const {
  return user_name_.Get();
}
inline void LocationChangeNotification::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000002u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::release_user_name() {
  // @@protoc_insertion_point(field_release:iterm2.LocationChangeNotification.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocationChangeNotification::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.LocationChangeNotification.user_name)
}

// optional string directory = 3;
inline bool LocationChangeNotification::_internal_has_directory() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocationChangeNotification::has_directory() const {
  return _internal_has_directory();
}
inline void LocationChangeNotification::clear_directory() {
  directory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LocationChangeNotification::directory() const {
  // @@protoc_insertion_point(field_get:iterm2.LocationChangeNotification.directory)
  return _internal_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocationChangeNotification::set_directory(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.LocationChangeNotification.directory)
}
inline std::string* LocationChangeNotification::mutable_directory() {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:iterm2.LocationChangeNotification.directory)
  return _s;
}
inline const std::string& LocationChangeNotification::_internal_directory() const {
  return directory_.Get();
}
inline void LocationChangeNotification::_internal_set_directory(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::_internal_mutable_directory() {
  _has_bits_[0] |= 0x00000004u;
  return directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::release_directory() {
  // @@protoc_insertion_point(field_release:iterm2.LocationChangeNotification.directory)
  if (!_internal_has_directory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = directory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (directory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocationChangeNotification::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (directory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.LocationChangeNotification.directory)
}

// optional string session = 4;
inline bool LocationChangeNotification::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocationChangeNotification::has_session() const {
  return _internal_has_session();
}
inline void LocationChangeNotification::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LocationChangeNotification::session() const {
  // @@protoc_insertion_point(field_get:iterm2.LocationChangeNotification.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocationChangeNotification::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.LocationChangeNotification.session)
}
inline std::string* LocationChangeNotification::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.LocationChangeNotification.session)
  return _s;
}
inline const std::string& LocationChangeNotification::_internal_session() const {
  return session_.Get();
}
inline void LocationChangeNotification::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000008u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocationChangeNotification::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.LocationChangeNotification.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocationChangeNotification::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.LocationChangeNotification.session)
}

// -------------------------------------------------------------------

// CustomEscapeSequenceNotification

// optional string session = 1;
inline bool CustomEscapeSequenceNotification::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomEscapeSequenceNotification::has_session() const {
  return _internal_has_session();
}
inline void CustomEscapeSequenceNotification::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomEscapeSequenceNotification::session() const {
  // @@protoc_insertion_point(field_get:iterm2.CustomEscapeSequenceNotification.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomEscapeSequenceNotification::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CustomEscapeSequenceNotification.session)
}
inline std::string* CustomEscapeSequenceNotification::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.CustomEscapeSequenceNotification.session)
  return _s;
}
inline const std::string& CustomEscapeSequenceNotification::_internal_session() const {
  return session_.Get();
}
inline void CustomEscapeSequenceNotification::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CustomEscapeSequenceNotification::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CustomEscapeSequenceNotification::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.CustomEscapeSequenceNotification.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomEscapeSequenceNotification::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CustomEscapeSequenceNotification.session)
}

// optional string sender_identity = 2;
inline bool CustomEscapeSequenceNotification::_internal_has_sender_identity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomEscapeSequenceNotification::has_sender_identity() const {
  return _internal_has_sender_identity();
}
inline void CustomEscapeSequenceNotification::clear_sender_identity() {
  sender_identity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomEscapeSequenceNotification::sender_identity() const {
  // @@protoc_insertion_point(field_get:iterm2.CustomEscapeSequenceNotification.sender_identity)
  return _internal_sender_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomEscapeSequenceNotification::set_sender_identity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sender_identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CustomEscapeSequenceNotification.sender_identity)
}
inline std::string* CustomEscapeSequenceNotification::mutable_sender_identity() {
  std::string* _s = _internal_mutable_sender_identity();
  // @@protoc_insertion_point(field_mutable:iterm2.CustomEscapeSequenceNotification.sender_identity)
  return _s;
}
inline const std::string& CustomEscapeSequenceNotification::_internal_sender_identity() const {
  return sender_identity_.Get();
}
inline void CustomEscapeSequenceNotification::_internal_set_sender_identity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CustomEscapeSequenceNotification::_internal_mutable_sender_identity() {
  _has_bits_[0] |= 0x00000002u;
  return sender_identity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CustomEscapeSequenceNotification::release_sender_identity() {
  // @@protoc_insertion_point(field_release:iterm2.CustomEscapeSequenceNotification.sender_identity)
  if (!_internal_has_sender_identity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sender_identity_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_identity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomEscapeSequenceNotification::set_allocated_sender_identity(std::string* sender_identity) {
  if (sender_identity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_identity,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_identity_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CustomEscapeSequenceNotification.sender_identity)
}

// optional string payload = 3;
inline bool CustomEscapeSequenceNotification::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomEscapeSequenceNotification::has_payload() const {
  return _internal_has_payload();
}
inline void CustomEscapeSequenceNotification::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CustomEscapeSequenceNotification::payload() const {
  // @@protoc_insertion_point(field_get:iterm2.CustomEscapeSequenceNotification.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomEscapeSequenceNotification::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CustomEscapeSequenceNotification.payload)
}
inline std::string* CustomEscapeSequenceNotification::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:iterm2.CustomEscapeSequenceNotification.payload)
  return _s;
}
inline const std::string& CustomEscapeSequenceNotification::_internal_payload() const {
  return payload_.Get();
}
inline void CustomEscapeSequenceNotification::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CustomEscapeSequenceNotification::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000004u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CustomEscapeSequenceNotification::release_payload() {
  // @@protoc_insertion_point(field_release:iterm2.CustomEscapeSequenceNotification.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomEscapeSequenceNotification::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CustomEscapeSequenceNotification.payload)
}

// -------------------------------------------------------------------

// NewSessionNotification

// optional string session_id = 1;
inline bool NewSessionNotification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewSessionNotification::has_session_id() const {
  return _internal_has_session_id();
}
inline void NewSessionNotification::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewSessionNotification::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.NewSessionNotification.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewSessionNotification::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.NewSessionNotification.session_id)
}
inline std::string* NewSessionNotification::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.NewSessionNotification.session_id)
  return _s;
}
inline const std::string& NewSessionNotification::_internal_session_id() const {
  return session_id_.Get();
}
inline void NewSessionNotification::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewSessionNotification::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewSessionNotification::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.NewSessionNotification.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewSessionNotification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.NewSessionNotification.session_id)
}

// -------------------------------------------------------------------

// FocusChangedNotification_Window

// optional .iterm2.FocusChangedNotification.Window.WindowStatus window_status = 1;
inline bool FocusChangedNotification_Window::_internal_has_window_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FocusChangedNotification_Window::has_window_status() const {
  return _internal_has_window_status();
}
inline void FocusChangedNotification_Window::clear_window_status() {
  window_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::iterm2::FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::_internal_window_status() const {
  return static_cast< ::iterm2::FocusChangedNotification_Window_WindowStatus >(window_status_);
}
inline ::iterm2::FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::window_status() const {
  // @@protoc_insertion_point(field_get:iterm2.FocusChangedNotification.Window.window_status)
  return _internal_window_status();
}
inline void FocusChangedNotification_Window::_internal_set_window_status(::iterm2::FocusChangedNotification_Window_WindowStatus value) {
  assert(::iterm2::FocusChangedNotification_Window_WindowStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  window_status_ = value;
}
inline void FocusChangedNotification_Window::set_window_status(::iterm2::FocusChangedNotification_Window_WindowStatus value) {
  _internal_set_window_status(value);
  // @@protoc_insertion_point(field_set:iterm2.FocusChangedNotification.Window.window_status)
}

// optional string window_id = 2;
inline bool FocusChangedNotification_Window::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FocusChangedNotification_Window::has_window_id() const {
  return _internal_has_window_id();
}
inline void FocusChangedNotification_Window::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FocusChangedNotification_Window::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.FocusChangedNotification.Window.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FocusChangedNotification_Window::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.FocusChangedNotification.Window.window_id)
}
inline std::string* FocusChangedNotification_Window::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.FocusChangedNotification.Window.window_id)
  return _s;
}
inline const std::string& FocusChangedNotification_Window::_internal_window_id() const {
  return window_id_.Get();
}
inline void FocusChangedNotification_Window::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FocusChangedNotification_Window::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000001u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FocusChangedNotification_Window::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.FocusChangedNotification.Window.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FocusChangedNotification_Window::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.FocusChangedNotification.Window.window_id)
}

// -------------------------------------------------------------------

// FocusChangedNotification

// bool application_active = 1;
inline bool FocusChangedNotification::_internal_has_application_active() const {
  return event_case() == kApplicationActive;
}
inline bool FocusChangedNotification::has_application_active() const {
  return _internal_has_application_active();
}
inline void FocusChangedNotification::set_has_application_active() {
  _oneof_case_[0] = kApplicationActive;
}
inline void FocusChangedNotification::clear_application_active() {
  if (_internal_has_application_active()) {
    event_.application_active_ = false;
    clear_has_event();
  }
}
inline bool FocusChangedNotification::_internal_application_active() const {
  if (_internal_has_application_active()) {
    return event_.application_active_;
  }
  return false;
}
inline void FocusChangedNotification::_internal_set_application_active(bool value) {
  if (!_internal_has_application_active()) {
    clear_event();
    set_has_application_active();
  }
  event_.application_active_ = value;
}
inline bool FocusChangedNotification::application_active() const {
  // @@protoc_insertion_point(field_get:iterm2.FocusChangedNotification.application_active)
  return _internal_application_active();
}
inline void FocusChangedNotification::set_application_active(bool value) {
  _internal_set_application_active(value);
  // @@protoc_insertion_point(field_set:iterm2.FocusChangedNotification.application_active)
}

// .iterm2.FocusChangedNotification.Window window = 2;
inline bool FocusChangedNotification::_internal_has_window() const {
  return event_case() == kWindow;
}
inline bool FocusChangedNotification::has_window() const {
  return _internal_has_window();
}
inline void FocusChangedNotification::set_has_window() {
  _oneof_case_[0] = kWindow;
}
inline void FocusChangedNotification::clear_window() {
  if (_internal_has_window()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.window_;
    }
    clear_has_event();
  }
}
inline ::iterm2::FocusChangedNotification_Window* FocusChangedNotification::release_window() {
  // @@protoc_insertion_point(field_release:iterm2.FocusChangedNotification.window)
  if (_internal_has_window()) {
    clear_has_event();
      ::iterm2::FocusChangedNotification_Window* temp = event_.window_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::FocusChangedNotification_Window& FocusChangedNotification::_internal_window() const {
  return _internal_has_window()
      ? *event_.window_
      : reinterpret_cast< ::iterm2::FocusChangedNotification_Window&>(::iterm2::_FocusChangedNotification_Window_default_instance_);
}
inline const ::iterm2::FocusChangedNotification_Window& FocusChangedNotification::window() const {
  // @@protoc_insertion_point(field_get:iterm2.FocusChangedNotification.window)
  return _internal_window();
}
inline ::iterm2::FocusChangedNotification_Window* FocusChangedNotification::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.FocusChangedNotification.window)
  if (_internal_has_window()) {
    clear_has_event();
    ::iterm2::FocusChangedNotification_Window* temp = event_.window_;
    event_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FocusChangedNotification::unsafe_arena_set_allocated_window(::iterm2::FocusChangedNotification_Window* window) {
  clear_event();
  if (window) {
    set_has_window();
    event_.window_ = window;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.FocusChangedNotification.window)
}
inline ::iterm2::FocusChangedNotification_Window* FocusChangedNotification::_internal_mutable_window() {
  if (!_internal_has_window()) {
    clear_event();
    set_has_window();
    event_.window_ = CreateMaybeMessage< ::iterm2::FocusChangedNotification_Window >(GetArenaForAllocation());
  }
  return event_.window_;
}
inline ::iterm2::FocusChangedNotification_Window* FocusChangedNotification::mutable_window() {
  ::iterm2::FocusChangedNotification_Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:iterm2.FocusChangedNotification.window)
  return _msg;
}

// string selected_tab = 3;
inline bool FocusChangedNotification::_internal_has_selected_tab() const {
  return event_case() == kSelectedTab;
}
inline bool FocusChangedNotification::has_selected_tab() const {
  return _internal_has_selected_tab();
}
inline void FocusChangedNotification::set_has_selected_tab() {
  _oneof_case_[0] = kSelectedTab;
}
inline void FocusChangedNotification::clear_selected_tab() {
  if (_internal_has_selected_tab()) {
    event_.selected_tab_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_event();
  }
}
inline const std::string& FocusChangedNotification::selected_tab() const {
  // @@protoc_insertion_point(field_get:iterm2.FocusChangedNotification.selected_tab)
  return _internal_selected_tab();
}
template <typename ArgT0, typename... ArgT>
inline void FocusChangedNotification::set_selected_tab(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_selected_tab()) {
    clear_event();
    set_has_selected_tab();
    event_.selected_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.selected_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.FocusChangedNotification.selected_tab)
}
inline std::string* FocusChangedNotification::mutable_selected_tab() {
  std::string* _s = _internal_mutable_selected_tab();
  // @@protoc_insertion_point(field_mutable:iterm2.FocusChangedNotification.selected_tab)
  return _s;
}
inline const std::string& FocusChangedNotification::_internal_selected_tab() const {
  if (_internal_has_selected_tab()) {
    return event_.selected_tab_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FocusChangedNotification::_internal_set_selected_tab(const std::string& value) {
  if (!_internal_has_selected_tab()) {
    clear_event();
    set_has_selected_tab();
    event_.selected_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.selected_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FocusChangedNotification::_internal_mutable_selected_tab() {
  if (!_internal_has_selected_tab()) {
    clear_event();
    set_has_selected_tab();
    event_.selected_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return event_.selected_tab_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FocusChangedNotification::release_selected_tab() {
  // @@protoc_insertion_point(field_release:iterm2.FocusChangedNotification.selected_tab)
  if (_internal_has_selected_tab()) {
    clear_has_event();
    return event_.selected_tab_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void FocusChangedNotification::set_allocated_selected_tab(std::string* selected_tab) {
  if (has_event()) {
    clear_event();
  }
  if (selected_tab != nullptr) {
    set_has_selected_tab();
    event_.selected_tab_.UnsafeSetDefault(selected_tab);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(selected_tab);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.FocusChangedNotification.selected_tab)
}

// string session = 4;
inline bool FocusChangedNotification::_internal_has_session() const {
  return event_case() == kSession;
}
inline bool FocusChangedNotification::has_session() const {
  return _internal_has_session();
}
inline void FocusChangedNotification::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void FocusChangedNotification::clear_session() {
  if (_internal_has_session()) {
    event_.session_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_event();
  }
}
inline const std::string& FocusChangedNotification::session() const {
  // @@protoc_insertion_point(field_get:iterm2.FocusChangedNotification.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline void FocusChangedNotification::set_session(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_session()) {
    clear_event();
    set_has_session();
    event_.session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.FocusChangedNotification.session)
}
inline std::string* FocusChangedNotification::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.FocusChangedNotification.session)
  return _s;
}
inline const std::string& FocusChangedNotification::_internal_session() const {
  if (_internal_has_session()) {
    return event_.session_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FocusChangedNotification::_internal_set_session(const std::string& value) {
  if (!_internal_has_session()) {
    clear_event();
    set_has_session();
    event_.session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FocusChangedNotification::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_event();
    set_has_session();
    event_.session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return event_.session_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FocusChangedNotification::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.FocusChangedNotification.session)
  if (_internal_has_session()) {
    clear_has_event();
    return event_.session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void FocusChangedNotification::set_allocated_session(std::string* session) {
  if (has_event()) {
    clear_event();
  }
  if (session != nullptr) {
    set_has_session();
    event_.session_.UnsafeSetDefault(session);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(session);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.FocusChangedNotification.session)
}

inline bool FocusChangedNotification::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void FocusChangedNotification::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline FocusChangedNotification::EventCase FocusChangedNotification::event_case() const {
  return FocusChangedNotification::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TerminateSessionNotification

// optional string session_id = 1;
inline bool TerminateSessionNotification::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TerminateSessionNotification::has_session_id() const {
  return _internal_has_session_id();
}
inline void TerminateSessionNotification::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TerminateSessionNotification::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.TerminateSessionNotification.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TerminateSessionNotification::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.TerminateSessionNotification.session_id)
}
inline std::string* TerminateSessionNotification::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.TerminateSessionNotification.session_id)
  return _s;
}
inline const std::string& TerminateSessionNotification::_internal_session_id() const {
  return session_id_.Get();
}
inline void TerminateSessionNotification::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TerminateSessionNotification::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TerminateSessionNotification::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.TerminateSessionNotification.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TerminateSessionNotification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.TerminateSessionNotification.session_id)
}

// -------------------------------------------------------------------

// LayoutChangedNotification

// optional .iterm2.ListSessionsResponse list_sessions_response = 1;
inline bool LayoutChangedNotification::_internal_has_list_sessions_response() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || list_sessions_response_ != nullptr);
  return value;
}
inline bool LayoutChangedNotification::has_list_sessions_response() const {
  return _internal_has_list_sessions_response();
}
inline void LayoutChangedNotification::clear_list_sessions_response() {
  if (list_sessions_response_ != nullptr) list_sessions_response_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::ListSessionsResponse& LayoutChangedNotification::_internal_list_sessions_response() const {
  const ::iterm2::ListSessionsResponse* p = list_sessions_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::ListSessionsResponse&>(
      ::iterm2::_ListSessionsResponse_default_instance_);
}
inline const ::iterm2::ListSessionsResponse& LayoutChangedNotification::list_sessions_response() const {
  // @@protoc_insertion_point(field_get:iterm2.LayoutChangedNotification.list_sessions_response)
  return _internal_list_sessions_response();
}
inline void LayoutChangedNotification::unsafe_arena_set_allocated_list_sessions_response(
    ::iterm2::ListSessionsResponse* list_sessions_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_sessions_response_);
  }
  list_sessions_response_ = list_sessions_response;
  if (list_sessions_response) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.LayoutChangedNotification.list_sessions_response)
}
inline ::iterm2::ListSessionsResponse* LayoutChangedNotification::release_list_sessions_response() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::ListSessionsResponse* temp = list_sessions_response_;
  list_sessions_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::ListSessionsResponse* LayoutChangedNotification::unsafe_arena_release_list_sessions_response() {
  // @@protoc_insertion_point(field_release:iterm2.LayoutChangedNotification.list_sessions_response)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::ListSessionsResponse* temp = list_sessions_response_;
  list_sessions_response_ = nullptr;
  return temp;
}
inline ::iterm2::ListSessionsResponse* LayoutChangedNotification::_internal_mutable_list_sessions_response() {
  _has_bits_[0] |= 0x00000001u;
  if (list_sessions_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::ListSessionsResponse>(GetArenaForAllocation());
    list_sessions_response_ = p;
  }
  return list_sessions_response_;
}
inline ::iterm2::ListSessionsResponse* LayoutChangedNotification::mutable_list_sessions_response() {
  ::iterm2::ListSessionsResponse* _msg = _internal_mutable_list_sessions_response();
  // @@protoc_insertion_point(field_mutable:iterm2.LayoutChangedNotification.list_sessions_response)
  return _msg;
}
inline void LayoutChangedNotification::set_allocated_list_sessions_response(::iterm2::ListSessionsResponse* list_sessions_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete list_sessions_response_;
  }
  if (list_sessions_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListSessionsResponse>::GetOwningArena(list_sessions_response);
    if (message_arena != submessage_arena) {
      list_sessions_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_sessions_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  list_sessions_response_ = list_sessions_response;
  // @@protoc_insertion_point(field_set_allocated:iterm2.LayoutChangedNotification.list_sessions_response)
}

// -------------------------------------------------------------------

// GetBufferRequest

// optional string session = 1;
inline bool GetBufferRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBufferRequest::has_session() const {
  return _internal_has_session();
}
inline void GetBufferRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBufferRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBufferRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetBufferRequest.session)
}
inline std::string* GetBufferRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.GetBufferRequest.session)
  return _s;
}
inline const std::string& GetBufferRequest::_internal_session() const {
  return session_.Get();
}
inline void GetBufferRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBufferRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBufferRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.GetBufferRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetBufferRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetBufferRequest.session)
}

// optional .iterm2.LineRange line_range = 2;
inline bool GetBufferRequest::_internal_has_line_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || line_range_ != nullptr);
  return value;
}
inline bool GetBufferRequest::has_line_range() const {
  return _internal_has_line_range();
}
inline void GetBufferRequest::clear_line_range() {
  if (line_range_ != nullptr) line_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::LineRange& GetBufferRequest::_internal_line_range() const {
  const ::iterm2::LineRange* p = line_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::LineRange&>(
      ::iterm2::_LineRange_default_instance_);
}
inline const ::iterm2::LineRange& GetBufferRequest::line_range() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferRequest.line_range)
  return _internal_line_range();
}
inline void GetBufferRequest::unsafe_arena_set_allocated_line_range(
    ::iterm2::LineRange* line_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_range_);
  }
  line_range_ = line_range;
  if (line_range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetBufferRequest.line_range)
}
inline ::iterm2::LineRange* GetBufferRequest::release_line_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::LineRange* temp = line_range_;
  line_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::LineRange* GetBufferRequest::unsafe_arena_release_line_range() {
  // @@protoc_insertion_point(field_release:iterm2.GetBufferRequest.line_range)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::LineRange* temp = line_range_;
  line_range_ = nullptr;
  return temp;
}
inline ::iterm2::LineRange* GetBufferRequest::_internal_mutable_line_range() {
  _has_bits_[0] |= 0x00000002u;
  if (line_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::LineRange>(GetArenaForAllocation());
    line_range_ = p;
  }
  return line_range_;
}
inline ::iterm2::LineRange* GetBufferRequest::mutable_line_range() {
  ::iterm2::LineRange* _msg = _internal_mutable_line_range();
  // @@protoc_insertion_point(field_mutable:iterm2.GetBufferRequest.line_range)
  return _msg;
}
inline void GetBufferRequest::set_allocated_line_range(::iterm2::LineRange* line_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete line_range_;
  }
  if (line_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::LineRange>::GetOwningArena(line_range);
    if (message_arena != submessage_arena) {
      line_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  line_range_ = line_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetBufferRequest.line_range)
}

// -------------------------------------------------------------------

// GetBufferResponse

// optional .iterm2.GetBufferResponse.Status status = 1 [default = OK];
inline bool GetBufferResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetBufferResponse::has_status() const {
  return _internal_has_status();
}
inline void GetBufferResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::iterm2::GetBufferResponse_Status GetBufferResponse::_internal_status() const {
  return static_cast< ::iterm2::GetBufferResponse_Status >(status_);
}
inline ::iterm2::GetBufferResponse_Status GetBufferResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferResponse.status)
  return _internal_status();
}
inline void GetBufferResponse::_internal_set_status(::iterm2::GetBufferResponse_Status value) {
  assert(::iterm2::GetBufferResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void GetBufferResponse::set_status(::iterm2::GetBufferResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.GetBufferResponse.status)
}

// optional .iterm2.Range range = 2 [deprecated = true];
inline bool GetBufferResponse::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool GetBufferResponse::has_range() const {
  return _internal_has_range();
}
inline void GetBufferResponse::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::Range& GetBufferResponse::_internal_range() const {
  const ::iterm2::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Range&>(
      ::iterm2::_Range_default_instance_);
}
inline const ::iterm2::Range& GetBufferResponse::range() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferResponse.range)
  return _internal_range();
}
inline void GetBufferResponse::unsafe_arena_set_allocated_range(
    ::iterm2::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetBufferResponse.range)
}
inline ::iterm2::Range* GetBufferResponse::release_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Range* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Range* GetBufferResponse::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:iterm2.GetBufferResponse.range)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::iterm2::Range* GetBufferResponse::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000001u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Range>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::iterm2::Range* GetBufferResponse::mutable_range() {
  ::iterm2::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:iterm2.GetBufferResponse.range)
  return _msg;
}
inline void GetBufferResponse::set_allocated_range(::iterm2::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Range>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetBufferResponse.range)
}

// repeated .iterm2.LineContents contents = 3;
inline int GetBufferResponse::_internal_contents_size() const {
  return contents_.size();
}
inline int GetBufferResponse::contents_size() const {
  return _internal_contents_size();
}
inline void GetBufferResponse::clear_contents() {
  contents_.Clear();
}
inline ::iterm2::LineContents* GetBufferResponse::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.GetBufferResponse.contents)
  return contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::LineContents >*
GetBufferResponse::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.GetBufferResponse.contents)
  return &contents_;
}
inline const ::iterm2::LineContents& GetBufferResponse::_internal_contents(int index) const {
  return contents_.Get(index);
}
inline const ::iterm2::LineContents& GetBufferResponse::contents(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferResponse.contents)
  return _internal_contents(index);
}
inline ::iterm2::LineContents* GetBufferResponse::_internal_add_contents() {
  return contents_.Add();
}
inline ::iterm2::LineContents* GetBufferResponse::add_contents() {
  ::iterm2::LineContents* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:iterm2.GetBufferResponse.contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::LineContents >&
GetBufferResponse::contents() const {
  // @@protoc_insertion_point(field_list:iterm2.GetBufferResponse.contents)
  return contents_;
}

// optional .iterm2.Coord cursor = 4;
inline bool GetBufferResponse::_internal_has_cursor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cursor_ != nullptr);
  return value;
}
inline bool GetBufferResponse::has_cursor() const {
  return _internal_has_cursor();
}
inline void GetBufferResponse::clear_cursor() {
  if (cursor_ != nullptr) cursor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::Coord& GetBufferResponse::_internal_cursor() const {
  const ::iterm2::Coord* p = cursor_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Coord&>(
      ::iterm2::_Coord_default_instance_);
}
inline const ::iterm2::Coord& GetBufferResponse::cursor() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferResponse.cursor)
  return _internal_cursor();
}
inline void GetBufferResponse::unsafe_arena_set_allocated_cursor(
    ::iterm2::Coord* cursor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_);
  }
  cursor_ = cursor;
  if (cursor) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetBufferResponse.cursor)
}
inline ::iterm2::Coord* GetBufferResponse::release_cursor() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Coord* temp = cursor_;
  cursor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Coord* GetBufferResponse::unsafe_arena_release_cursor() {
  // @@protoc_insertion_point(field_release:iterm2.GetBufferResponse.cursor)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Coord* temp = cursor_;
  cursor_ = nullptr;
  return temp;
}
inline ::iterm2::Coord* GetBufferResponse::_internal_mutable_cursor() {
  _has_bits_[0] |= 0x00000002u;
  if (cursor_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Coord>(GetArenaForAllocation());
    cursor_ = p;
  }
  return cursor_;
}
inline ::iterm2::Coord* GetBufferResponse::mutable_cursor() {
  ::iterm2::Coord* _msg = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:iterm2.GetBufferResponse.cursor)
  return _msg;
}
inline void GetBufferResponse::set_allocated_cursor(::iterm2::Coord* cursor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cursor_;
  }
  if (cursor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Coord>::GetOwningArena(cursor);
    if (message_arena != submessage_arena) {
      cursor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cursor_ = cursor;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetBufferResponse.cursor)
}

// optional int64 num_lines_above_screen = 5 [deprecated = true];
inline bool GetBufferResponse::_internal_has_num_lines_above_screen() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetBufferResponse::has_num_lines_above_screen() const {
  return _internal_has_num_lines_above_screen();
}
inline void GetBufferResponse::clear_num_lines_above_screen() {
  num_lines_above_screen_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t GetBufferResponse::_internal_num_lines_above_screen() const {
  return num_lines_above_screen_;
}
inline int64_t GetBufferResponse::num_lines_above_screen() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferResponse.num_lines_above_screen)
  return _internal_num_lines_above_screen();
}
inline void GetBufferResponse::_internal_set_num_lines_above_screen(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_lines_above_screen_ = value;
}
inline void GetBufferResponse::set_num_lines_above_screen(int64_t value) {
  _internal_set_num_lines_above_screen(value);
  // @@protoc_insertion_point(field_set:iterm2.GetBufferResponse.num_lines_above_screen)
}

// optional .iterm2.WindowedCoordRange windowed_coord_range = 6;
inline bool GetBufferResponse::_internal_has_windowed_coord_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || windowed_coord_range_ != nullptr);
  return value;
}
inline bool GetBufferResponse::has_windowed_coord_range() const {
  return _internal_has_windowed_coord_range();
}
inline void GetBufferResponse::clear_windowed_coord_range() {
  if (windowed_coord_range_ != nullptr) windowed_coord_range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::iterm2::WindowedCoordRange& GetBufferResponse::_internal_windowed_coord_range() const {
  const ::iterm2::WindowedCoordRange* p = windowed_coord_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::WindowedCoordRange&>(
      ::iterm2::_WindowedCoordRange_default_instance_);
}
inline const ::iterm2::WindowedCoordRange& GetBufferResponse::windowed_coord_range() const {
  // @@protoc_insertion_point(field_get:iterm2.GetBufferResponse.windowed_coord_range)
  return _internal_windowed_coord_range();
}
inline void GetBufferResponse::unsafe_arena_set_allocated_windowed_coord_range(
    ::iterm2::WindowedCoordRange* windowed_coord_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(windowed_coord_range_);
  }
  windowed_coord_range_ = windowed_coord_range;
  if (windowed_coord_range) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetBufferResponse.windowed_coord_range)
}
inline ::iterm2::WindowedCoordRange* GetBufferResponse::release_windowed_coord_range() {
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::WindowedCoordRange* temp = windowed_coord_range_;
  windowed_coord_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::WindowedCoordRange* GetBufferResponse::unsafe_arena_release_windowed_coord_range() {
  // @@protoc_insertion_point(field_release:iterm2.GetBufferResponse.windowed_coord_range)
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::WindowedCoordRange* temp = windowed_coord_range_;
  windowed_coord_range_ = nullptr;
  return temp;
}
inline ::iterm2::WindowedCoordRange* GetBufferResponse::_internal_mutable_windowed_coord_range() {
  _has_bits_[0] |= 0x00000004u;
  if (windowed_coord_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::WindowedCoordRange>(GetArenaForAllocation());
    windowed_coord_range_ = p;
  }
  return windowed_coord_range_;
}
inline ::iterm2::WindowedCoordRange* GetBufferResponse::mutable_windowed_coord_range() {
  ::iterm2::WindowedCoordRange* _msg = _internal_mutable_windowed_coord_range();
  // @@protoc_insertion_point(field_mutable:iterm2.GetBufferResponse.windowed_coord_range)
  return _msg;
}
inline void GetBufferResponse::set_allocated_windowed_coord_range(::iterm2::WindowedCoordRange* windowed_coord_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete windowed_coord_range_;
  }
  if (windowed_coord_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::WindowedCoordRange>::GetOwningArena(windowed_coord_range);
    if (message_arena != submessage_arena) {
      windowed_coord_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, windowed_coord_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  windowed_coord_range_ = windowed_coord_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetBufferResponse.windowed_coord_range)
}

// -------------------------------------------------------------------

// GetPromptRequest

// optional string session = 1;
inline bool GetPromptRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPromptRequest::has_session() const {
  return _internal_has_session();
}
inline void GetPromptRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPromptRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPromptRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPromptRequest.session)
}
inline std::string* GetPromptRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptRequest.session)
  return _s;
}
inline const std::string& GetPromptRequest::_internal_session() const {
  return session_.Get();
}
inline void GetPromptRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPromptRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPromptRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPromptRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptRequest.session)
}

// optional string unique_prompt_id = 2;
inline bool GetPromptRequest::_internal_has_unique_prompt_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPromptRequest::has_unique_prompt_id() const {
  return _internal_has_unique_prompt_id();
}
inline void GetPromptRequest::clear_unique_prompt_id() {
  unique_prompt_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetPromptRequest::unique_prompt_id() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptRequest.unique_prompt_id)
  return _internal_unique_prompt_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPromptRequest::set_unique_prompt_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPromptRequest.unique_prompt_id)
}
inline std::string* GetPromptRequest::mutable_unique_prompt_id() {
  std::string* _s = _internal_mutable_unique_prompt_id();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptRequest.unique_prompt_id)
  return _s;
}
inline const std::string& GetPromptRequest::_internal_unique_prompt_id() const {
  return unique_prompt_id_.Get();
}
inline void GetPromptRequest::_internal_set_unique_prompt_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPromptRequest::_internal_mutable_unique_prompt_id() {
  _has_bits_[0] |= 0x00000002u;
  return unique_prompt_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPromptRequest::release_unique_prompt_id() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptRequest.unique_prompt_id)
  if (!_internal_has_unique_prompt_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = unique_prompt_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_prompt_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPromptRequest::set_allocated_unique_prompt_id(std::string* unique_prompt_id) {
  if (unique_prompt_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unique_prompt_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_prompt_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_prompt_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptRequest.unique_prompt_id)
}

// -------------------------------------------------------------------

// GetPromptResponse

// optional .iterm2.GetPromptResponse.Status status = 1 [default = OK];
inline bool GetPromptResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GetPromptResponse::has_status() const {
  return _internal_has_status();
}
inline void GetPromptResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::iterm2::GetPromptResponse_Status GetPromptResponse::_internal_status() const {
  return static_cast< ::iterm2::GetPromptResponse_Status >(status_);
}
inline ::iterm2::GetPromptResponse_Status GetPromptResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.status)
  return _internal_status();
}
inline void GetPromptResponse::_internal_set_status(::iterm2::GetPromptResponse_Status value) {
  assert(::iterm2::GetPromptResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
}
inline void GetPromptResponse::set_status(::iterm2::GetPromptResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.GetPromptResponse.status)
}

// optional .iterm2.CoordRange prompt_range = 2;
inline bool GetPromptResponse::_internal_has_prompt_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || prompt_range_ != nullptr);
  return value;
}
inline bool GetPromptResponse::has_prompt_range() const {
  return _internal_has_prompt_range();
}
inline void GetPromptResponse::clear_prompt_range() {
  if (prompt_range_ != nullptr) prompt_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::iterm2::CoordRange& GetPromptResponse::_internal_prompt_range() const {
  const ::iterm2::CoordRange* p = prompt_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::CoordRange&>(
      ::iterm2::_CoordRange_default_instance_);
}
inline const ::iterm2::CoordRange& GetPromptResponse::prompt_range() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.prompt_range)
  return _internal_prompt_range();
}
inline void GetPromptResponse::unsafe_arena_set_allocated_prompt_range(
    ::iterm2::CoordRange* prompt_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prompt_range_);
  }
  prompt_range_ = prompt_range;
  if (prompt_range) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetPromptResponse.prompt_range)
}
inline ::iterm2::CoordRange* GetPromptResponse::release_prompt_range() {
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::CoordRange* temp = prompt_range_;
  prompt_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::CoordRange* GetPromptResponse::unsafe_arena_release_prompt_range() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptResponse.prompt_range)
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::CoordRange* temp = prompt_range_;
  prompt_range_ = nullptr;
  return temp;
}
inline ::iterm2::CoordRange* GetPromptResponse::_internal_mutable_prompt_range() {
  _has_bits_[0] |= 0x00000008u;
  if (prompt_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::CoordRange>(GetArenaForAllocation());
    prompt_range_ = p;
  }
  return prompt_range_;
}
inline ::iterm2::CoordRange* GetPromptResponse::mutable_prompt_range() {
  ::iterm2::CoordRange* _msg = _internal_mutable_prompt_range();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptResponse.prompt_range)
  return _msg;
}
inline void GetPromptResponse::set_allocated_prompt_range(::iterm2::CoordRange* prompt_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prompt_range_;
  }
  if (prompt_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CoordRange>::GetOwningArena(prompt_range);
    if (message_arena != submessage_arena) {
      prompt_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prompt_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prompt_range_ = prompt_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptResponse.prompt_range)
}

// optional .iterm2.CoordRange command_range = 3;
inline bool GetPromptResponse::_internal_has_command_range() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || command_range_ != nullptr);
  return value;
}
inline bool GetPromptResponse::has_command_range() const {
  return _internal_has_command_range();
}
inline void GetPromptResponse::clear_command_range() {
  if (command_range_ != nullptr) command_range_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::iterm2::CoordRange& GetPromptResponse::_internal_command_range() const {
  const ::iterm2::CoordRange* p = command_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::CoordRange&>(
      ::iterm2::_CoordRange_default_instance_);
}
inline const ::iterm2::CoordRange& GetPromptResponse::command_range() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.command_range)
  return _internal_command_range();
}
inline void GetPromptResponse::unsafe_arena_set_allocated_command_range(
    ::iterm2::CoordRange* command_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_range_);
  }
  command_range_ = command_range;
  if (command_range) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetPromptResponse.command_range)
}
inline ::iterm2::CoordRange* GetPromptResponse::release_command_range() {
  _has_bits_[0] &= ~0x00000010u;
  ::iterm2::CoordRange* temp = command_range_;
  command_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::CoordRange* GetPromptResponse::unsafe_arena_release_command_range() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptResponse.command_range)
  _has_bits_[0] &= ~0x00000010u;
  ::iterm2::CoordRange* temp = command_range_;
  command_range_ = nullptr;
  return temp;
}
inline ::iterm2::CoordRange* GetPromptResponse::_internal_mutable_command_range() {
  _has_bits_[0] |= 0x00000010u;
  if (command_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::CoordRange>(GetArenaForAllocation());
    command_range_ = p;
  }
  return command_range_;
}
inline ::iterm2::CoordRange* GetPromptResponse::mutable_command_range() {
  ::iterm2::CoordRange* _msg = _internal_mutable_command_range();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptResponse.command_range)
  return _msg;
}
inline void GetPromptResponse::set_allocated_command_range(::iterm2::CoordRange* command_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_range_;
  }
  if (command_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CoordRange>::GetOwningArena(command_range);
    if (message_arena != submessage_arena) {
      command_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  command_range_ = command_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptResponse.command_range)
}

// optional .iterm2.CoordRange output_range = 4;
inline bool GetPromptResponse::_internal_has_output_range() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || output_range_ != nullptr);
  return value;
}
inline bool GetPromptResponse::has_output_range() const {
  return _internal_has_output_range();
}
inline void GetPromptResponse::clear_output_range() {
  if (output_range_ != nullptr) output_range_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::iterm2::CoordRange& GetPromptResponse::_internal_output_range() const {
  const ::iterm2::CoordRange* p = output_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::CoordRange&>(
      ::iterm2::_CoordRange_default_instance_);
}
inline const ::iterm2::CoordRange& GetPromptResponse::output_range() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.output_range)
  return _internal_output_range();
}
inline void GetPromptResponse::unsafe_arena_set_allocated_output_range(
    ::iterm2::CoordRange* output_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_range_);
  }
  output_range_ = output_range;
  if (output_range) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.GetPromptResponse.output_range)
}
inline ::iterm2::CoordRange* GetPromptResponse::release_output_range() {
  _has_bits_[0] &= ~0x00000020u;
  ::iterm2::CoordRange* temp = output_range_;
  output_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::CoordRange* GetPromptResponse::unsafe_arena_release_output_range() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptResponse.output_range)
  _has_bits_[0] &= ~0x00000020u;
  ::iterm2::CoordRange* temp = output_range_;
  output_range_ = nullptr;
  return temp;
}
inline ::iterm2::CoordRange* GetPromptResponse::_internal_mutable_output_range() {
  _has_bits_[0] |= 0x00000020u;
  if (output_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::CoordRange>(GetArenaForAllocation());
    output_range_ = p;
  }
  return output_range_;
}
inline ::iterm2::CoordRange* GetPromptResponse::mutable_output_range() {
  ::iterm2::CoordRange* _msg = _internal_mutable_output_range();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptResponse.output_range)
  return _msg;
}
inline void GetPromptResponse::set_allocated_output_range(::iterm2::CoordRange* output_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_range_;
  }
  if (output_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CoordRange>::GetOwningArena(output_range);
    if (message_arena != submessage_arena) {
      output_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_range_ = output_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptResponse.output_range)
}

// optional string working_directory = 5;
inline bool GetPromptResponse::_internal_has_working_directory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPromptResponse::has_working_directory() const {
  return _internal_has_working_directory();
}
inline void GetPromptResponse::clear_working_directory() {
  working_directory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPromptResponse::working_directory() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.working_directory)
  return _internal_working_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPromptResponse::set_working_directory(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 working_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPromptResponse.working_directory)
}
inline std::string* GetPromptResponse::mutable_working_directory() {
  std::string* _s = _internal_mutable_working_directory();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptResponse.working_directory)
  return _s;
}
inline const std::string& GetPromptResponse::_internal_working_directory() const {
  return working_directory_.Get();
}
inline void GetPromptResponse::_internal_set_working_directory(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  working_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPromptResponse::_internal_mutable_working_directory() {
  _has_bits_[0] |= 0x00000001u;
  return working_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPromptResponse::release_working_directory() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptResponse.working_directory)
  if (!_internal_has_working_directory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = working_directory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (working_directory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    working_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPromptResponse::set_allocated_working_directory(std::string* working_directory) {
  if (working_directory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  working_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_directory,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (working_directory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    working_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptResponse.working_directory)
}

// optional string command = 6;
inline bool GetPromptResponse::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPromptResponse::has_command() const {
  return _internal_has_command();
}
inline void GetPromptResponse::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetPromptResponse::command() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPromptResponse::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPromptResponse.command)
}
inline std::string* GetPromptResponse::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptResponse.command)
  return _s;
}
inline const std::string& GetPromptResponse::_internal_command() const {
  return command_.Get();
}
inline void GetPromptResponse::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPromptResponse::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000002u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPromptResponse::release_command() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptResponse.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPromptResponse::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptResponse.command)
}

// optional .iterm2.GetPromptResponse.State prompt_state = 7;
inline bool GetPromptResponse::_internal_has_prompt_state() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GetPromptResponse::has_prompt_state() const {
  return _internal_has_prompt_state();
}
inline void GetPromptResponse::clear_prompt_state() {
  prompt_state_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::iterm2::GetPromptResponse_State GetPromptResponse::_internal_prompt_state() const {
  return static_cast< ::iterm2::GetPromptResponse_State >(prompt_state_);
}
inline ::iterm2::GetPromptResponse_State GetPromptResponse::prompt_state() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.prompt_state)
  return _internal_prompt_state();
}
inline void GetPromptResponse::_internal_set_prompt_state(::iterm2::GetPromptResponse_State value) {
  assert(::iterm2::GetPromptResponse_State_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  prompt_state_ = value;
}
inline void GetPromptResponse::set_prompt_state(::iterm2::GetPromptResponse_State value) {
  _internal_set_prompt_state(value);
  // @@protoc_insertion_point(field_set:iterm2.GetPromptResponse.prompt_state)
}

// optional uint32 exit_status = 9;
inline bool GetPromptResponse::_internal_has_exit_status() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GetPromptResponse::has_exit_status() const {
  return _internal_has_exit_status();
}
inline void GetPromptResponse::clear_exit_status() {
  exit_status_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t GetPromptResponse::_internal_exit_status() const {
  return exit_status_;
}
inline uint32_t GetPromptResponse::exit_status() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.exit_status)
  return _internal_exit_status();
}
inline void GetPromptResponse::_internal_set_exit_status(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  exit_status_ = value;
}
inline void GetPromptResponse::set_exit_status(uint32_t value) {
  _internal_set_exit_status(value);
  // @@protoc_insertion_point(field_set:iterm2.GetPromptResponse.exit_status)
}

// optional string unique_prompt_id = 10;
inline bool GetPromptResponse::_internal_has_unique_prompt_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetPromptResponse::has_unique_prompt_id() const {
  return _internal_has_unique_prompt_id();
}
inline void GetPromptResponse::clear_unique_prompt_id() {
  unique_prompt_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetPromptResponse::unique_prompt_id() const {
  // @@protoc_insertion_point(field_get:iterm2.GetPromptResponse.unique_prompt_id)
  return _internal_unique_prompt_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPromptResponse::set_unique_prompt_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetPromptResponse.unique_prompt_id)
}
inline std::string* GetPromptResponse::mutable_unique_prompt_id() {
  std::string* _s = _internal_mutable_unique_prompt_id();
  // @@protoc_insertion_point(field_mutable:iterm2.GetPromptResponse.unique_prompt_id)
  return _s;
}
inline const std::string& GetPromptResponse::_internal_unique_prompt_id() const {
  return unique_prompt_id_.Get();
}
inline void GetPromptResponse::_internal_set_unique_prompt_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPromptResponse::_internal_mutable_unique_prompt_id() {
  _has_bits_[0] |= 0x00000004u;
  return unique_prompt_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPromptResponse::release_unique_prompt_id() {
  // @@protoc_insertion_point(field_release:iterm2.GetPromptResponse.unique_prompt_id)
  if (!_internal_has_unique_prompt_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = unique_prompt_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_prompt_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPromptResponse::set_allocated_unique_prompt_id(std::string* unique_prompt_id) {
  if (unique_prompt_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unique_prompt_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_prompt_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_prompt_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetPromptResponse.unique_prompt_id)
}

// -------------------------------------------------------------------

// ListPromptsRequest

// optional string session = 1;
inline bool ListPromptsRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListPromptsRequest::has_session() const {
  return _internal_has_session();
}
inline void ListPromptsRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListPromptsRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.ListPromptsRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPromptsRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListPromptsRequest.session)
}
inline std::string* ListPromptsRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.ListPromptsRequest.session)
  return _s;
}
inline const std::string& ListPromptsRequest::_internal_session() const {
  return session_.Get();
}
inline void ListPromptsRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPromptsRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPromptsRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.ListPromptsRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListPromptsRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListPromptsRequest.session)
}

// optional string first_unique_id = 2;
inline bool ListPromptsRequest::_internal_has_first_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListPromptsRequest::has_first_unique_id() const {
  return _internal_has_first_unique_id();
}
inline void ListPromptsRequest::clear_first_unique_id() {
  first_unique_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListPromptsRequest::first_unique_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ListPromptsRequest.first_unique_id)
  return _internal_first_unique_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPromptsRequest::set_first_unique_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 first_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListPromptsRequest.first_unique_id)
}
inline std::string* ListPromptsRequest::mutable_first_unique_id() {
  std::string* _s = _internal_mutable_first_unique_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ListPromptsRequest.first_unique_id)
  return _s;
}
inline const std::string& ListPromptsRequest::_internal_first_unique_id() const {
  return first_unique_id_.Get();
}
inline void ListPromptsRequest::_internal_set_first_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  first_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPromptsRequest::_internal_mutable_first_unique_id() {
  _has_bits_[0] |= 0x00000002u;
  return first_unique_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPromptsRequest::release_first_unique_id() {
  // @@protoc_insertion_point(field_release:iterm2.ListPromptsRequest.first_unique_id)
  if (!_internal_has_first_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = first_unique_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (first_unique_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    first_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListPromptsRequest::set_allocated_first_unique_id(std::string* first_unique_id) {
  if (first_unique_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  first_unique_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_unique_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (first_unique_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    first_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListPromptsRequest.first_unique_id)
}

// optional string last_unique_id = 3;
inline bool ListPromptsRequest::_internal_has_last_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListPromptsRequest::has_last_unique_id() const {
  return _internal_has_last_unique_id();
}
inline void ListPromptsRequest::clear_last_unique_id() {
  last_unique_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ListPromptsRequest::last_unique_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ListPromptsRequest.last_unique_id)
  return _internal_last_unique_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPromptsRequest::set_last_unique_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 last_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListPromptsRequest.last_unique_id)
}
inline std::string* ListPromptsRequest::mutable_last_unique_id() {
  std::string* _s = _internal_mutable_last_unique_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ListPromptsRequest.last_unique_id)
  return _s;
}
inline const std::string& ListPromptsRequest::_internal_last_unique_id() const {
  return last_unique_id_.Get();
}
inline void ListPromptsRequest::_internal_set_last_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  last_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPromptsRequest::_internal_mutable_last_unique_id() {
  _has_bits_[0] |= 0x00000004u;
  return last_unique_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPromptsRequest::release_last_unique_id() {
  // @@protoc_insertion_point(field_release:iterm2.ListPromptsRequest.last_unique_id)
  if (!_internal_has_last_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = last_unique_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_unique_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListPromptsRequest::set_allocated_last_unique_id(std::string* last_unique_id) {
  if (last_unique_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_unique_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_unique_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_unique_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListPromptsRequest.last_unique_id)
}

// -------------------------------------------------------------------

// ListPromptsResponse

// optional .iterm2.ListPromptsResponse.Status status = 1 [default = OK];
inline bool ListPromptsResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListPromptsResponse::has_status() const {
  return _internal_has_status();
}
inline void ListPromptsResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::ListPromptsResponse_Status ListPromptsResponse::_internal_status() const {
  return static_cast< ::iterm2::ListPromptsResponse_Status >(status_);
}
inline ::iterm2::ListPromptsResponse_Status ListPromptsResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.ListPromptsResponse.status)
  return _internal_status();
}
inline void ListPromptsResponse::_internal_set_status(::iterm2::ListPromptsResponse_Status value) {
  assert(::iterm2::ListPromptsResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void ListPromptsResponse::set_status(::iterm2::ListPromptsResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.ListPromptsResponse.status)
}

// repeated string unique_prompt_id = 2;
inline int ListPromptsResponse::_internal_unique_prompt_id_size() const {
  return unique_prompt_id_.size();
}
inline int ListPromptsResponse::unique_prompt_id_size() const {
  return _internal_unique_prompt_id_size();
}
inline void ListPromptsResponse::clear_unique_prompt_id() {
  unique_prompt_id_.Clear();
}
inline std::string* ListPromptsResponse::add_unique_prompt_id() {
  std::string* _s = _internal_add_unique_prompt_id();
  // @@protoc_insertion_point(field_add_mutable:iterm2.ListPromptsResponse.unique_prompt_id)
  return _s;
}
inline const std::string& ListPromptsResponse::_internal_unique_prompt_id(int index) const {
  return unique_prompt_id_.Get(index);
}
inline const std::string& ListPromptsResponse::unique_prompt_id(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListPromptsResponse.unique_prompt_id)
  return _internal_unique_prompt_id(index);
}
inline std::string* ListPromptsResponse::mutable_unique_prompt_id(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListPromptsResponse.unique_prompt_id)
  return unique_prompt_id_.Mutable(index);
}
inline void ListPromptsResponse::set_unique_prompt_id(int index, const std::string& value) {
  unique_prompt_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline void ListPromptsResponse::set_unique_prompt_id(int index, std::string&& value) {
  unique_prompt_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline void ListPromptsResponse::set_unique_prompt_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unique_prompt_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline void ListPromptsResponse::set_unique_prompt_id(int index, const char* value, size_t size) {
  unique_prompt_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline std::string* ListPromptsResponse::_internal_add_unique_prompt_id() {
  return unique_prompt_id_.Add();
}
inline void ListPromptsResponse::add_unique_prompt_id(const std::string& value) {
  unique_prompt_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline void ListPromptsResponse::add_unique_prompt_id(std::string&& value) {
  unique_prompt_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline void ListPromptsResponse::add_unique_prompt_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unique_prompt_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline void ListPromptsResponse::add_unique_prompt_id(const char* value, size_t size) {
  unique_prompt_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.ListPromptsResponse.unique_prompt_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPromptsResponse::unique_prompt_id() const {
  // @@protoc_insertion_point(field_list:iterm2.ListPromptsResponse.unique_prompt_id)
  return unique_prompt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListPromptsResponse::mutable_unique_prompt_id() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListPromptsResponse.unique_prompt_id)
  return &unique_prompt_id_;
}

// -------------------------------------------------------------------

// GetProfilePropertyRequest

// optional string session = 1;
inline bool GetProfilePropertyRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetProfilePropertyRequest::has_session() const {
  return _internal_has_session();
}
inline void GetProfilePropertyRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetProfilePropertyRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.GetProfilePropertyRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetProfilePropertyRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.GetProfilePropertyRequest.session)
}
inline std::string* GetProfilePropertyRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.GetProfilePropertyRequest.session)
  return _s;
}
inline const std::string& GetProfilePropertyRequest::_internal_session() const {
  return session_.Get();
}
inline void GetProfilePropertyRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetProfilePropertyRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetProfilePropertyRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.GetProfilePropertyRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetProfilePropertyRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.GetProfilePropertyRequest.session)
}

// repeated string keys = 2;
inline int GetProfilePropertyRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int GetProfilePropertyRequest::keys_size() const {
  return _internal_keys_size();
}
inline void GetProfilePropertyRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* GetProfilePropertyRequest::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:iterm2.GetProfilePropertyRequest.keys)
  return _s;
}
inline const std::string& GetProfilePropertyRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& GetProfilePropertyRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.GetProfilePropertyRequest.keys)
  return _internal_keys(index);
}
inline std::string* GetProfilePropertyRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.GetProfilePropertyRequest.keys)
  return keys_.Mutable(index);
}
inline void GetProfilePropertyRequest::set_keys(int index, const std::string& value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.GetProfilePropertyRequest.keys)
}
inline void GetProfilePropertyRequest::set_keys(int index, std::string&& value) {
  keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.GetProfilePropertyRequest.keys)
}
inline void GetProfilePropertyRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.GetProfilePropertyRequest.keys)
}
inline void GetProfilePropertyRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.GetProfilePropertyRequest.keys)
}
inline std::string* GetProfilePropertyRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void GetProfilePropertyRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.GetProfilePropertyRequest.keys)
}
inline void GetProfilePropertyRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.GetProfilePropertyRequest.keys)
}
inline void GetProfilePropertyRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.GetProfilePropertyRequest.keys)
}
inline void GetProfilePropertyRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.GetProfilePropertyRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetProfilePropertyRequest::keys() const {
  // @@protoc_insertion_point(field_list:iterm2.GetProfilePropertyRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetProfilePropertyRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.GetProfilePropertyRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// ProfileProperty

// optional string key = 1;
inline bool ProfileProperty::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfileProperty::has_key() const {
  return _internal_has_key();
}
inline void ProfileProperty::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfileProperty::key() const {
  // @@protoc_insertion_point(field_get:iterm2.ProfileProperty.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileProperty::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ProfileProperty.key)
}
inline std::string* ProfileProperty::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.ProfileProperty.key)
  return _s;
}
inline const std::string& ProfileProperty::_internal_key() const {
  return key_.Get();
}
inline void ProfileProperty::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileProperty::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileProperty::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.ProfileProperty.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileProperty::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ProfileProperty.key)
}

// optional string json_value = 2;
inline bool ProfileProperty::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProfileProperty::has_json_value() const {
  return _internal_has_json_value();
}
inline void ProfileProperty::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfileProperty::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.ProfileProperty.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileProperty::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ProfileProperty.json_value)
}
inline std::string* ProfileProperty::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.ProfileProperty.json_value)
  return _s;
}
inline const std::string& ProfileProperty::_internal_json_value() const {
  return json_value_.Get();
}
inline void ProfileProperty::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProfileProperty::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000002u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProfileProperty::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.ProfileProperty.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProfileProperty::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ProfileProperty.json_value)
}

// -------------------------------------------------------------------

// GetProfilePropertyResponse

// optional .iterm2.GetProfilePropertyResponse.Status status = 1 [default = OK];
inline bool GetProfilePropertyResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetProfilePropertyResponse::has_status() const {
  return _internal_has_status();
}
inline void GetProfilePropertyResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::GetProfilePropertyResponse_Status GetProfilePropertyResponse::_internal_status() const {
  return static_cast< ::iterm2::GetProfilePropertyResponse_Status >(status_);
}
inline ::iterm2::GetProfilePropertyResponse_Status GetProfilePropertyResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.GetProfilePropertyResponse.status)
  return _internal_status();
}
inline void GetProfilePropertyResponse::_internal_set_status(::iterm2::GetProfilePropertyResponse_Status value) {
  assert(::iterm2::GetProfilePropertyResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void GetProfilePropertyResponse::set_status(::iterm2::GetProfilePropertyResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.GetProfilePropertyResponse.status)
}

// repeated .iterm2.ProfileProperty properties = 3;
inline int GetProfilePropertyResponse::_internal_properties_size() const {
  return properties_.size();
}
inline int GetProfilePropertyResponse::properties_size() const {
  return _internal_properties_size();
}
inline void GetProfilePropertyResponse::clear_properties() {
  properties_.Clear();
}
inline ::iterm2::ProfileProperty* GetProfilePropertyResponse::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.GetProfilePropertyResponse.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
GetProfilePropertyResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.GetProfilePropertyResponse.properties)
  return &properties_;
}
inline const ::iterm2::ProfileProperty& GetProfilePropertyResponse::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::iterm2::ProfileProperty& GetProfilePropertyResponse::properties(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.GetProfilePropertyResponse.properties)
  return _internal_properties(index);
}
inline ::iterm2::ProfileProperty* GetProfilePropertyResponse::_internal_add_properties() {
  return properties_.Add();
}
inline ::iterm2::ProfileProperty* GetProfilePropertyResponse::add_properties() {
  ::iterm2::ProfileProperty* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:iterm2.GetProfilePropertyResponse.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
GetProfilePropertyResponse::properties() const {
  // @@protoc_insertion_point(field_list:iterm2.GetProfilePropertyResponse.properties)
  return properties_;
}

// -------------------------------------------------------------------

// SetProfilePropertyRequest_GuidList

// repeated string guids = 1;
inline int SetProfilePropertyRequest_GuidList::_internal_guids_size() const {
  return guids_.size();
}
inline int SetProfilePropertyRequest_GuidList::guids_size() const {
  return _internal_guids_size();
}
inline void SetProfilePropertyRequest_GuidList::clear_guids() {
  guids_.Clear();
}
inline std::string* SetProfilePropertyRequest_GuidList::add_guids() {
  std::string* _s = _internal_add_guids();
  // @@protoc_insertion_point(field_add_mutable:iterm2.SetProfilePropertyRequest.GuidList.guids)
  return _s;
}
inline const std::string& SetProfilePropertyRequest_GuidList::_internal_guids(int index) const {
  return guids_.Get(index);
}
inline const std::string& SetProfilePropertyRequest_GuidList::guids(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.GuidList.guids)
  return _internal_guids(index);
}
inline std::string* SetProfilePropertyRequest_GuidList::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.GuidList.guids)
  return guids_.Mutable(index);
}
inline void SetProfilePropertyRequest_GuidList::set_guids(int index, const std::string& value) {
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline void SetProfilePropertyRequest_GuidList::set_guids(int index, std::string&& value) {
  guids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline void SetProfilePropertyRequest_GuidList::set_guids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline void SetProfilePropertyRequest_GuidList::set_guids(int index, const char* value, size_t size) {
  guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline std::string* SetProfilePropertyRequest_GuidList::_internal_add_guids() {
  return guids_.Add();
}
inline void SetProfilePropertyRequest_GuidList::add_guids(const std::string& value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline void SetProfilePropertyRequest_GuidList::add_guids(std::string&& value) {
  guids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline void SetProfilePropertyRequest_GuidList::add_guids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline void SetProfilePropertyRequest_GuidList::add_guids(const char* value, size_t size) {
  guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.SetProfilePropertyRequest.GuidList.guids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetProfilePropertyRequest_GuidList::guids() const {
  // @@protoc_insertion_point(field_list:iterm2.SetProfilePropertyRequest.GuidList.guids)
  return guids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetProfilePropertyRequest_GuidList::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SetProfilePropertyRequest.GuidList.guids)
  return &guids_;
}

// -------------------------------------------------------------------

// SetProfilePropertyRequest_Assignment

// optional string key = 1;
inline bool SetProfilePropertyRequest_Assignment::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetProfilePropertyRequest_Assignment::has_key() const {
  return _internal_has_key();
}
inline void SetProfilePropertyRequest_Assignment::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetProfilePropertyRequest_Assignment::key() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.Assignment.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetProfilePropertyRequest_Assignment::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.Assignment.key)
}
inline std::string* SetProfilePropertyRequest_Assignment::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.Assignment.key)
  return _s;
}
inline const std::string& SetProfilePropertyRequest_Assignment::_internal_key() const {
  return key_.Get();
}
inline void SetProfilePropertyRequest_Assignment::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest_Assignment::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest_Assignment::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.SetProfilePropertyRequest.Assignment.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetProfilePropertyRequest_Assignment::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetProfilePropertyRequest.Assignment.key)
}

// optional string json_value = 2;
inline bool SetProfilePropertyRequest_Assignment::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetProfilePropertyRequest_Assignment::has_json_value() const {
  return _internal_has_json_value();
}
inline void SetProfilePropertyRequest_Assignment::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetProfilePropertyRequest_Assignment::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.Assignment.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetProfilePropertyRequest_Assignment::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.Assignment.json_value)
}
inline std::string* SetProfilePropertyRequest_Assignment::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.Assignment.json_value)
  return _s;
}
inline const std::string& SetProfilePropertyRequest_Assignment::_internal_json_value() const {
  return json_value_.Get();
}
inline void SetProfilePropertyRequest_Assignment::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest_Assignment::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000002u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest_Assignment::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.SetProfilePropertyRequest.Assignment.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetProfilePropertyRequest_Assignment::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetProfilePropertyRequest.Assignment.json_value)
}

// -------------------------------------------------------------------

// SetProfilePropertyRequest

// string session = 1;
inline bool SetProfilePropertyRequest::_internal_has_session() const {
  return target_case() == kSession;
}
inline bool SetProfilePropertyRequest::has_session() const {
  return _internal_has_session();
}
inline void SetProfilePropertyRequest::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void SetProfilePropertyRequest::clear_session() {
  if (_internal_has_session()) {
    target_.session_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& SetProfilePropertyRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline void SetProfilePropertyRequest::set_session(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_session()) {
    clear_target();
    set_has_session();
    target_.session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.session)
}
inline std::string* SetProfilePropertyRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.session)
  return _s;
}
inline const std::string& SetProfilePropertyRequest::_internal_session() const {
  if (_internal_has_session()) {
    return target_.session_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SetProfilePropertyRequest::_internal_set_session(const std::string& value) {
  if (!_internal_has_session()) {
    clear_target();
    set_has_session();
    target_.session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_target();
    set_has_session();
    target_.session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.session_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.SetProfilePropertyRequest.session)
  if (_internal_has_session()) {
    clear_has_target();
    return target_.session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SetProfilePropertyRequest::set_allocated_session(std::string* session) {
  if (has_target()) {
    clear_target();
  }
  if (session != nullptr) {
    set_has_session();
    target_.session_.UnsafeSetDefault(session);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(session);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetProfilePropertyRequest.session)
}

// .iterm2.SetProfilePropertyRequest.GuidList guid_list = 2;
inline bool SetProfilePropertyRequest::_internal_has_guid_list() const {
  return target_case() == kGuidList;
}
inline bool SetProfilePropertyRequest::has_guid_list() const {
  return _internal_has_guid_list();
}
inline void SetProfilePropertyRequest::set_has_guid_list() {
  _oneof_case_[0] = kGuidList;
}
inline void SetProfilePropertyRequest::clear_guid_list() {
  if (_internal_has_guid_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.guid_list_;
    }
    clear_has_target();
  }
}
inline ::iterm2::SetProfilePropertyRequest_GuidList* SetProfilePropertyRequest::release_guid_list() {
  // @@protoc_insertion_point(field_release:iterm2.SetProfilePropertyRequest.guid_list)
  if (_internal_has_guid_list()) {
    clear_has_target();
      ::iterm2::SetProfilePropertyRequest_GuidList* temp = target_.guid_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.guid_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SetProfilePropertyRequest_GuidList& SetProfilePropertyRequest::_internal_guid_list() const {
  return _internal_has_guid_list()
      ? *target_.guid_list_
      : reinterpret_cast< ::iterm2::SetProfilePropertyRequest_GuidList&>(::iterm2::_SetProfilePropertyRequest_GuidList_default_instance_);
}
inline const ::iterm2::SetProfilePropertyRequest_GuidList& SetProfilePropertyRequest::guid_list() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.guid_list)
  return _internal_guid_list();
}
inline ::iterm2::SetProfilePropertyRequest_GuidList* SetProfilePropertyRequest::unsafe_arena_release_guid_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SetProfilePropertyRequest.guid_list)
  if (_internal_has_guid_list()) {
    clear_has_target();
    ::iterm2::SetProfilePropertyRequest_GuidList* temp = target_.guid_list_;
    target_.guid_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SetProfilePropertyRequest::unsafe_arena_set_allocated_guid_list(::iterm2::SetProfilePropertyRequest_GuidList* guid_list) {
  clear_target();
  if (guid_list) {
    set_has_guid_list();
    target_.guid_list_ = guid_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SetProfilePropertyRequest.guid_list)
}
inline ::iterm2::SetProfilePropertyRequest_GuidList* SetProfilePropertyRequest::_internal_mutable_guid_list() {
  if (!_internal_has_guid_list()) {
    clear_target();
    set_has_guid_list();
    target_.guid_list_ = CreateMaybeMessage< ::iterm2::SetProfilePropertyRequest_GuidList >(GetArenaForAllocation());
  }
  return target_.guid_list_;
}
inline ::iterm2::SetProfilePropertyRequest_GuidList* SetProfilePropertyRequest::mutable_guid_list() {
  ::iterm2::SetProfilePropertyRequest_GuidList* _msg = _internal_mutable_guid_list();
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.guid_list)
  return _msg;
}

// optional string key = 3;
inline bool SetProfilePropertyRequest::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetProfilePropertyRequest::has_key() const {
  return _internal_has_key();
}
inline void SetProfilePropertyRequest::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetProfilePropertyRequest::key() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetProfilePropertyRequest::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.key)
}
inline std::string* SetProfilePropertyRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.key)
  return _s;
}
inline const std::string& SetProfilePropertyRequest::_internal_key() const {
  return key_.Get();
}
inline void SetProfilePropertyRequest::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest::release_key() {
  // @@protoc_insertion_point(field_release:iterm2.SetProfilePropertyRequest.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetProfilePropertyRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetProfilePropertyRequest.key)
}

// optional string json_value = 4;
inline bool SetProfilePropertyRequest::_internal_has_json_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetProfilePropertyRequest::has_json_value() const {
  return _internal_has_json_value();
}
inline void SetProfilePropertyRequest::clear_json_value() {
  json_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetProfilePropertyRequest::json_value() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.json_value)
  return _internal_json_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetProfilePropertyRequest::set_json_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyRequest.json_value)
}
inline std::string* SetProfilePropertyRequest::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.json_value)
  return _s;
}
inline const std::string& SetProfilePropertyRequest::_internal_json_value() const {
  return json_value_.Get();
}
inline void SetProfilePropertyRequest::_internal_set_json_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest::_internal_mutable_json_value() {
  _has_bits_[0] |= 0x00000002u;
  return json_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetProfilePropertyRequest::release_json_value() {
  // @@protoc_insertion_point(field_release:iterm2.SetProfilePropertyRequest.json_value)
  if (!_internal_has_json_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = json_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SetProfilePropertyRequest::set_allocated_json_value(std::string* json_value) {
  if (json_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  json_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetProfilePropertyRequest.json_value)
}

// repeated .iterm2.SetProfilePropertyRequest.Assignment assignments = 5;
inline int SetProfilePropertyRequest::_internal_assignments_size() const {
  return assignments_.size();
}
inline int SetProfilePropertyRequest::assignments_size() const {
  return _internal_assignments_size();
}
inline void SetProfilePropertyRequest::clear_assignments() {
  assignments_.Clear();
}
inline ::iterm2::SetProfilePropertyRequest_Assignment* SetProfilePropertyRequest::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SetProfilePropertyRequest.assignments)
  return assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SetProfilePropertyRequest_Assignment >*
SetProfilePropertyRequest::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SetProfilePropertyRequest.assignments)
  return &assignments_;
}
inline const ::iterm2::SetProfilePropertyRequest_Assignment& SetProfilePropertyRequest::_internal_assignments(int index) const {
  return assignments_.Get(index);
}
inline const ::iterm2::SetProfilePropertyRequest_Assignment& SetProfilePropertyRequest::assignments(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyRequest.assignments)
  return _internal_assignments(index);
}
inline ::iterm2::SetProfilePropertyRequest_Assignment* SetProfilePropertyRequest::_internal_add_assignments() {
  return assignments_.Add();
}
inline ::iterm2::SetProfilePropertyRequest_Assignment* SetProfilePropertyRequest::add_assignments() {
  ::iterm2::SetProfilePropertyRequest_Assignment* _add = _internal_add_assignments();
  // @@protoc_insertion_point(field_add:iterm2.SetProfilePropertyRequest.assignments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SetProfilePropertyRequest_Assignment >&
SetProfilePropertyRequest::assignments() const {
  // @@protoc_insertion_point(field_list:iterm2.SetProfilePropertyRequest.assignments)
  return assignments_;
}

inline bool SetProfilePropertyRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void SetProfilePropertyRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline SetProfilePropertyRequest::TargetCase SetProfilePropertyRequest::target_case() const {
  return SetProfilePropertyRequest::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetProfilePropertyResponse

// optional .iterm2.SetProfilePropertyResponse.Status status = 1 [default = OK];
inline bool SetProfilePropertyResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetProfilePropertyResponse::has_status() const {
  return _internal_has_status();
}
inline void SetProfilePropertyResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SetProfilePropertyResponse_Status SetProfilePropertyResponse::_internal_status() const {
  return static_cast< ::iterm2::SetProfilePropertyResponse_Status >(status_);
}
inline ::iterm2::SetProfilePropertyResponse_Status SetProfilePropertyResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SetProfilePropertyResponse.status)
  return _internal_status();
}
inline void SetProfilePropertyResponse::_internal_set_status(::iterm2::SetProfilePropertyResponse_Status value) {
  assert(::iterm2::SetProfilePropertyResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SetProfilePropertyResponse::set_status(::iterm2::SetProfilePropertyResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SetProfilePropertyResponse.status)
}

// -------------------------------------------------------------------

// TransactionRequest

// optional bool begin = 1;
inline bool TransactionRequest::_internal_has_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransactionRequest::has_begin() const {
  return _internal_has_begin();
}
inline void TransactionRequest::clear_begin() {
  begin_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TransactionRequest::_internal_begin() const {
  return begin_;
}
inline bool TransactionRequest::begin() const {
  // @@protoc_insertion_point(field_get:iterm2.TransactionRequest.begin)
  return _internal_begin();
}
inline void TransactionRequest::_internal_set_begin(bool value) {
  _has_bits_[0] |= 0x00000001u;
  begin_ = value;
}
inline void TransactionRequest::set_begin(bool value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:iterm2.TransactionRequest.begin)
}

// -------------------------------------------------------------------

// TransactionResponse

// optional .iterm2.TransactionResponse.Status status = 1 [default = OK];
inline bool TransactionResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransactionResponse::has_status() const {
  return _internal_has_status();
}
inline void TransactionResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::TransactionResponse_Status TransactionResponse::_internal_status() const {
  return static_cast< ::iterm2::TransactionResponse_Status >(status_);
}
inline ::iterm2::TransactionResponse_Status TransactionResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.TransactionResponse.status)
  return _internal_status();
}
inline void TransactionResponse::_internal_set_status(::iterm2::TransactionResponse_Status value) {
  assert(::iterm2::TransactionResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void TransactionResponse::set_status(::iterm2::TransactionResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.TransactionResponse.status)
}

// -------------------------------------------------------------------

// LineRange

// optional bool screen_contents_only = 1;
inline bool LineRange::_internal_has_screen_contents_only() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LineRange::has_screen_contents_only() const {
  return _internal_has_screen_contents_only();
}
inline void LineRange::clear_screen_contents_only() {
  screen_contents_only_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LineRange::_internal_screen_contents_only() const {
  return screen_contents_only_;
}
inline bool LineRange::screen_contents_only() const {
  // @@protoc_insertion_point(field_get:iterm2.LineRange.screen_contents_only)
  return _internal_screen_contents_only();
}
inline void LineRange::_internal_set_screen_contents_only(bool value) {
  _has_bits_[0] |= 0x00000002u;
  screen_contents_only_ = value;
}
inline void LineRange::set_screen_contents_only(bool value) {
  _internal_set_screen_contents_only(value);
  // @@protoc_insertion_point(field_set:iterm2.LineRange.screen_contents_only)
}

// optional int32 trailing_lines = 2;
inline bool LineRange::_internal_has_trailing_lines() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LineRange::has_trailing_lines() const {
  return _internal_has_trailing_lines();
}
inline void LineRange::clear_trailing_lines() {
  trailing_lines_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t LineRange::_internal_trailing_lines() const {
  return trailing_lines_;
}
inline int32_t LineRange::trailing_lines() const {
  // @@protoc_insertion_point(field_get:iterm2.LineRange.trailing_lines)
  return _internal_trailing_lines();
}
inline void LineRange::_internal_set_trailing_lines(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  trailing_lines_ = value;
}
inline void LineRange::set_trailing_lines(int32_t value) {
  _internal_set_trailing_lines(value);
  // @@protoc_insertion_point(field_set:iterm2.LineRange.trailing_lines)
}

// optional .iterm2.WindowedCoordRange windowed_coord_range = 3;
inline bool LineRange::_internal_has_windowed_coord_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || windowed_coord_range_ != nullptr);
  return value;
}
inline bool LineRange::has_windowed_coord_range() const {
  return _internal_has_windowed_coord_range();
}
inline void LineRange::clear_windowed_coord_range() {
  if (windowed_coord_range_ != nullptr) windowed_coord_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::WindowedCoordRange& LineRange::_internal_windowed_coord_range() const {
  const ::iterm2::WindowedCoordRange* p = windowed_coord_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::WindowedCoordRange&>(
      ::iterm2::_WindowedCoordRange_default_instance_);
}
inline const ::iterm2::WindowedCoordRange& LineRange::windowed_coord_range() const {
  // @@protoc_insertion_point(field_get:iterm2.LineRange.windowed_coord_range)
  return _internal_windowed_coord_range();
}
inline void LineRange::unsafe_arena_set_allocated_windowed_coord_range(
    ::iterm2::WindowedCoordRange* windowed_coord_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(windowed_coord_range_);
  }
  windowed_coord_range_ = windowed_coord_range;
  if (windowed_coord_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.LineRange.windowed_coord_range)
}
inline ::iterm2::WindowedCoordRange* LineRange::release_windowed_coord_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::WindowedCoordRange* temp = windowed_coord_range_;
  windowed_coord_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::WindowedCoordRange* LineRange::unsafe_arena_release_windowed_coord_range() {
  // @@protoc_insertion_point(field_release:iterm2.LineRange.windowed_coord_range)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::WindowedCoordRange* temp = windowed_coord_range_;
  windowed_coord_range_ = nullptr;
  return temp;
}
inline ::iterm2::WindowedCoordRange* LineRange::_internal_mutable_windowed_coord_range() {
  _has_bits_[0] |= 0x00000001u;
  if (windowed_coord_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::WindowedCoordRange>(GetArenaForAllocation());
    windowed_coord_range_ = p;
  }
  return windowed_coord_range_;
}
inline ::iterm2::WindowedCoordRange* LineRange::mutable_windowed_coord_range() {
  ::iterm2::WindowedCoordRange* _msg = _internal_mutable_windowed_coord_range();
  // @@protoc_insertion_point(field_mutable:iterm2.LineRange.windowed_coord_range)
  return _msg;
}
inline void LineRange::set_allocated_windowed_coord_range(::iterm2::WindowedCoordRange* windowed_coord_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete windowed_coord_range_;
  }
  if (windowed_coord_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::WindowedCoordRange>::GetOwningArena(windowed_coord_range);
    if (message_arena != submessage_arena) {
      windowed_coord_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, windowed_coord_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  windowed_coord_range_ = windowed_coord_range;
  // @@protoc_insertion_point(field_set_allocated:iterm2.LineRange.windowed_coord_range)
}

// -------------------------------------------------------------------

// Range

// optional int64 location = 1;
inline bool Range::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Range::has_location() const {
  return _internal_has_location();
}
inline void Range::clear_location() {
  location_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Range::_internal_location() const {
  return location_;
}
inline int64_t Range::location() const {
  // @@protoc_insertion_point(field_get:iterm2.Range.location)
  return _internal_location();
}
inline void Range::_internal_set_location(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  location_ = value;
}
inline void Range::set_location(int64_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:iterm2.Range.location)
}

// optional int64 length = 2;
inline bool Range::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Range::has_length() const {
  return _internal_has_length();
}
inline void Range::clear_length() {
  length_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Range::_internal_length() const {
  return length_;
}
inline int64_t Range::length() const {
  // @@protoc_insertion_point(field_get:iterm2.Range.length)
  return _internal_length();
}
inline void Range::_internal_set_length(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void Range::set_length(int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:iterm2.Range.length)
}

// -------------------------------------------------------------------

// CoordRange

// optional .iterm2.Coord start = 1;
inline bool CoordRange::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool CoordRange::has_start() const {
  return _internal_has_start();
}
inline void CoordRange::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::Coord& CoordRange::_internal_start() const {
  const ::iterm2::Coord* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Coord&>(
      ::iterm2::_Coord_default_instance_);
}
inline const ::iterm2::Coord& CoordRange::start() const {
  // @@protoc_insertion_point(field_get:iterm2.CoordRange.start)
  return _internal_start();
}
inline void CoordRange::unsafe_arena_set_allocated_start(
    ::iterm2::Coord* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.CoordRange.start)
}
inline ::iterm2::Coord* CoordRange::release_start() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Coord* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Coord* CoordRange::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:iterm2.CoordRange.start)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Coord* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::iterm2::Coord* CoordRange::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000001u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Coord>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::iterm2::Coord* CoordRange::mutable_start() {
  ::iterm2::Coord* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:iterm2.CoordRange.start)
  return _msg;
}
inline void CoordRange::set_allocated_start(::iterm2::Coord* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Coord>::GetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:iterm2.CoordRange.start)
}

// optional .iterm2.Coord end = 2;
inline bool CoordRange::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool CoordRange::has_end() const {
  return _internal_has_end();
}
inline void CoordRange::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::Coord& CoordRange::_internal_end() const {
  const ::iterm2::Coord* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Coord&>(
      ::iterm2::_Coord_default_instance_);
}
inline const ::iterm2::Coord& CoordRange::end() const {
  // @@protoc_insertion_point(field_get:iterm2.CoordRange.end)
  return _internal_end();
}
inline void CoordRange::unsafe_arena_set_allocated_end(
    ::iterm2::Coord* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.CoordRange.end)
}
inline ::iterm2::Coord* CoordRange::release_end() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Coord* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Coord* CoordRange::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:iterm2.CoordRange.end)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Coord* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::iterm2::Coord* CoordRange::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000002u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Coord>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::iterm2::Coord* CoordRange::mutable_end() {
  ::iterm2::Coord* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:iterm2.CoordRange.end)
  return _msg;
}
inline void CoordRange::set_allocated_end(::iterm2::Coord* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Coord>::GetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:iterm2.CoordRange.end)
}

// -------------------------------------------------------------------

// Coord

// optional int32 x = 1;
inline bool Coord::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Coord::has_x() const {
  return _internal_has_x();
}
inline void Coord::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Coord::_internal_x() const {
  return x_;
}
inline int32_t Coord::x() const {
  // @@protoc_insertion_point(field_get:iterm2.Coord.x)
  return _internal_x();
}
inline void Coord::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void Coord::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:iterm2.Coord.x)
}

// optional int64 y = 2;
inline bool Coord::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Coord::has_y() const {
  return _internal_has_y();
}
inline void Coord::clear_y() {
  y_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Coord::_internal_y() const {
  return y_;
}
inline int64_t Coord::y() const {
  // @@protoc_insertion_point(field_get:iterm2.Coord.y)
  return _internal_y();
}
inline void Coord::_internal_set_y(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  y_ = value;
}
inline void Coord::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:iterm2.Coord.y)
}

// -------------------------------------------------------------------

// LineContents

// optional string text = 1;
inline bool LineContents::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LineContents::has_text() const {
  return _internal_has_text();
}
inline void LineContents::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LineContents::text() const {
  // @@protoc_insertion_point(field_get:iterm2.LineContents.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LineContents::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.LineContents.text)
}
inline std::string* LineContents::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:iterm2.LineContents.text)
  return _s;
}
inline const std::string& LineContents::_internal_text() const {
  return text_.Get();
}
inline void LineContents::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LineContents::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LineContents::release_text() {
  // @@protoc_insertion_point(field_release:iterm2.LineContents.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LineContents::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.LineContents.text)
}

// repeated .iterm2.CodePointsPerCell code_points_per_cell = 2;
inline int LineContents::_internal_code_points_per_cell_size() const {
  return code_points_per_cell_.size();
}
inline int LineContents::code_points_per_cell_size() const {
  return _internal_code_points_per_cell_size();
}
inline void LineContents::clear_code_points_per_cell() {
  code_points_per_cell_.Clear();
}
inline ::iterm2::CodePointsPerCell* LineContents::mutable_code_points_per_cell(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.LineContents.code_points_per_cell)
  return code_points_per_cell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::CodePointsPerCell >*
LineContents::mutable_code_points_per_cell() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.LineContents.code_points_per_cell)
  return &code_points_per_cell_;
}
inline const ::iterm2::CodePointsPerCell& LineContents::_internal_code_points_per_cell(int index) const {
  return code_points_per_cell_.Get(index);
}
inline const ::iterm2::CodePointsPerCell& LineContents::code_points_per_cell(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.LineContents.code_points_per_cell)
  return _internal_code_points_per_cell(index);
}
inline ::iterm2::CodePointsPerCell* LineContents::_internal_add_code_points_per_cell() {
  return code_points_per_cell_.Add();
}
inline ::iterm2::CodePointsPerCell* LineContents::add_code_points_per_cell() {
  ::iterm2::CodePointsPerCell* _add = _internal_add_code_points_per_cell();
  // @@protoc_insertion_point(field_add:iterm2.LineContents.code_points_per_cell)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::CodePointsPerCell >&
LineContents::code_points_per_cell() const {
  // @@protoc_insertion_point(field_list:iterm2.LineContents.code_points_per_cell)
  return code_points_per_cell_;
}

// optional .iterm2.LineContents.Continuation continuation = 3 [default = CONTINUATION_HARD_EOL];
inline bool LineContents::_internal_has_continuation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LineContents::has_continuation() const {
  return _internal_has_continuation();
}
inline void LineContents::clear_continuation() {
  continuation_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::iterm2::LineContents_Continuation LineContents::_internal_continuation() const {
  return static_cast< ::iterm2::LineContents_Continuation >(continuation_);
}
inline ::iterm2::LineContents_Continuation LineContents::continuation() const {
  // @@protoc_insertion_point(field_get:iterm2.LineContents.continuation)
  return _internal_continuation();
}
inline void LineContents::_internal_set_continuation(::iterm2::LineContents_Continuation value) {
  assert(::iterm2::LineContents_Continuation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  continuation_ = value;
}
inline void LineContents::set_continuation(::iterm2::LineContents_Continuation value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:iterm2.LineContents.continuation)
}

// -------------------------------------------------------------------

// CodePointsPerCell

// optional int32 num_code_points = 1 [default = 1];
inline bool CodePointsPerCell::_internal_has_num_code_points() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CodePointsPerCell::has_num_code_points() const {
  return _internal_has_num_code_points();
}
inline void CodePointsPerCell::clear_num_code_points() {
  num_code_points_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CodePointsPerCell::_internal_num_code_points() const {
  return num_code_points_;
}
inline int32_t CodePointsPerCell::num_code_points() const {
  // @@protoc_insertion_point(field_get:iterm2.CodePointsPerCell.num_code_points)
  return _internal_num_code_points();
}
inline void CodePointsPerCell::_internal_set_num_code_points(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_code_points_ = value;
}
inline void CodePointsPerCell::set_num_code_points(int32_t value) {
  _internal_set_num_code_points(value);
  // @@protoc_insertion_point(field_set:iterm2.CodePointsPerCell.num_code_points)
}

// optional int32 repeats = 2;
inline bool CodePointsPerCell::_internal_has_repeats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CodePointsPerCell::has_repeats() const {
  return _internal_has_repeats();
}
inline void CodePointsPerCell::clear_repeats() {
  repeats_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CodePointsPerCell::_internal_repeats() const {
  return repeats_;
}
inline int32_t CodePointsPerCell::repeats() const {
  // @@protoc_insertion_point(field_get:iterm2.CodePointsPerCell.repeats)
  return _internal_repeats();
}
inline void CodePointsPerCell::_internal_set_repeats(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  repeats_ = value;
}
inline void CodePointsPerCell::set_repeats(int32_t value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:iterm2.CodePointsPerCell.repeats)
}

// -------------------------------------------------------------------

// ListSessionsRequest

// -------------------------------------------------------------------

// SendTextRequest

// optional string session = 1;
inline bool SendTextRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SendTextRequest::has_session() const {
  return _internal_has_session();
}
inline void SendTextRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendTextRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.SendTextRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendTextRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SendTextRequest.session)
}
inline std::string* SendTextRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.SendTextRequest.session)
  return _s;
}
inline const std::string& SendTextRequest::_internal_session() const {
  return session_.Get();
}
inline void SendTextRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendTextRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendTextRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.SendTextRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SendTextRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SendTextRequest.session)
}

// optional string text = 2;
inline bool SendTextRequest::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SendTextRequest::has_text() const {
  return _internal_has_text();
}
inline void SendTextRequest::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SendTextRequest::text() const {
  // @@protoc_insertion_point(field_get:iterm2.SendTextRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendTextRequest::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SendTextRequest.text)
}
inline std::string* SendTextRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:iterm2.SendTextRequest.text)
  return _s;
}
inline const std::string& SendTextRequest::_internal_text() const {
  return text_.Get();
}
inline void SendTextRequest::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendTextRequest::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendTextRequest::release_text() {
  // @@protoc_insertion_point(field_release:iterm2.SendTextRequest.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SendTextRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SendTextRequest.text)
}

// optional bool suppress_broadcast = 3;
inline bool SendTextRequest::_internal_has_suppress_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SendTextRequest::has_suppress_broadcast() const {
  return _internal_has_suppress_broadcast();
}
inline void SendTextRequest::clear_suppress_broadcast() {
  suppress_broadcast_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SendTextRequest::_internal_suppress_broadcast() const {
  return suppress_broadcast_;
}
inline bool SendTextRequest::suppress_broadcast() const {
  // @@protoc_insertion_point(field_get:iterm2.SendTextRequest.suppress_broadcast)
  return _internal_suppress_broadcast();
}
inline void SendTextRequest::_internal_set_suppress_broadcast(bool value) {
  _has_bits_[0] |= 0x00000004u;
  suppress_broadcast_ = value;
}
inline void SendTextRequest::set_suppress_broadcast(bool value) {
  _internal_set_suppress_broadcast(value);
  // @@protoc_insertion_point(field_set:iterm2.SendTextRequest.suppress_broadcast)
}

// -------------------------------------------------------------------

// SendTextResponse

// optional .iterm2.SendTextResponse.Status status = 1;
inline bool SendTextResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SendTextResponse::has_status() const {
  return _internal_has_status();
}
inline void SendTextResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SendTextResponse_Status SendTextResponse::_internal_status() const {
  return static_cast< ::iterm2::SendTextResponse_Status >(status_);
}
inline ::iterm2::SendTextResponse_Status SendTextResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SendTextResponse.status)
  return _internal_status();
}
inline void SendTextResponse::_internal_set_status(::iterm2::SendTextResponse_Status value) {
  assert(::iterm2::SendTextResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SendTextResponse::set_status(::iterm2::SendTextResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SendTextResponse.status)
}

// -------------------------------------------------------------------

// Size

// optional int32 width = 1;
inline bool Size::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Size::has_width() const {
  return _internal_has_width();
}
inline void Size::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Size::_internal_width() const {
  return width_;
}
inline int32_t Size::width() const {
  // @@protoc_insertion_point(field_get:iterm2.Size.width)
  return _internal_width();
}
inline void Size::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void Size::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:iterm2.Size.width)
}

// optional int32 height = 2;
inline bool Size::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Size::has_height() const {
  return _internal_has_height();
}
inline void Size::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Size::_internal_height() const {
  return height_;
}
inline int32_t Size::height() const {
  // @@protoc_insertion_point(field_get:iterm2.Size.height)
  return _internal_height();
}
inline void Size::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Size::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:iterm2.Size.height)
}

// -------------------------------------------------------------------

// Point

// optional int32 x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Point::_internal_x() const {
  return x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:iterm2.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:iterm2.Point.x)
}

// optional int32 y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Point::_internal_y() const {
  return y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:iterm2.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:iterm2.Point.y)
}

// -------------------------------------------------------------------

// Frame

// optional .iterm2.Point origin = 1;
inline bool Frame::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || origin_ != nullptr);
  return value;
}
inline bool Frame::has_origin() const {
  return _internal_has_origin();
}
inline void Frame::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iterm2::Point& Frame::_internal_origin() const {
  const ::iterm2::Point* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Point&>(
      ::iterm2::_Point_default_instance_);
}
inline const ::iterm2::Point& Frame::origin() const {
  // @@protoc_insertion_point(field_get:iterm2.Frame.origin)
  return _internal_origin();
}
inline void Frame::unsafe_arena_set_allocated_origin(
    ::iterm2::Point* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Frame.origin)
}
inline ::iterm2::Point* Frame::release_origin() {
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Point* temp = origin_;
  origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Point* Frame::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:iterm2.Frame.origin)
  _has_bits_[0] &= ~0x00000001u;
  ::iterm2::Point* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::iterm2::Point* Frame::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Point>(GetArenaForAllocation());
    origin_ = p;
  }
  return origin_;
}
inline ::iterm2::Point* Frame::mutable_origin() {
  ::iterm2::Point* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:iterm2.Frame.origin)
  return _msg;
}
inline void Frame::set_allocated_origin(::iterm2::Point* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Point>::GetOwningArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Frame.origin)
}

// optional .iterm2.Size size = 2;
inline bool Frame::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool Frame::has_size() const {
  return _internal_has_size();
}
inline void Frame::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::Size& Frame::_internal_size() const {
  const ::iterm2::Size* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Size&>(
      ::iterm2::_Size_default_instance_);
}
inline const ::iterm2::Size& Frame::size() const {
  // @@protoc_insertion_point(field_get:iterm2.Frame.size)
  return _internal_size();
}
inline void Frame::unsafe_arena_set_allocated_size(
    ::iterm2::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.Frame.size)
}
inline ::iterm2::Size* Frame::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Size* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Size* Frame::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:iterm2.Frame.size)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::iterm2::Size* Frame::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Size>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::iterm2::Size* Frame::mutable_size() {
  ::iterm2::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:iterm2.Frame.size)
  return _msg;
}
inline void Frame::set_allocated_size(::iterm2::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Size>::GetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:iterm2.Frame.size)
}

// -------------------------------------------------------------------

// SessionSummary

// optional string unique_identifier = 1;
inline bool SessionSummary::_internal_has_unique_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionSummary::has_unique_identifier() const {
  return _internal_has_unique_identifier();
}
inline void SessionSummary::clear_unique_identifier() {
  unique_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionSummary::unique_identifier() const {
  // @@protoc_insertion_point(field_get:iterm2.SessionSummary.unique_identifier)
  return _internal_unique_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionSummary::set_unique_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SessionSummary.unique_identifier)
}
inline std::string* SessionSummary::mutable_unique_identifier() {
  std::string* _s = _internal_mutable_unique_identifier();
  // @@protoc_insertion_point(field_mutable:iterm2.SessionSummary.unique_identifier)
  return _s;
}
inline const std::string& SessionSummary::_internal_unique_identifier() const {
  return unique_identifier_.Get();
}
inline void SessionSummary::_internal_set_unique_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionSummary::_internal_mutable_unique_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return unique_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionSummary::release_unique_identifier() {
  // @@protoc_insertion_point(field_release:iterm2.SessionSummary.unique_identifier)
  if (!_internal_has_unique_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = unique_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionSummary::set_allocated_unique_identifier(std::string* unique_identifier) {
  if (unique_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SessionSummary.unique_identifier)
}

// optional .iterm2.Frame frame = 2;
inline bool SessionSummary::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool SessionSummary::has_frame() const {
  return _internal_has_frame();
}
inline void SessionSummary::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::iterm2::Frame& SessionSummary::_internal_frame() const {
  const ::iterm2::Frame* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Frame&>(
      ::iterm2::_Frame_default_instance_);
}
inline const ::iterm2::Frame& SessionSummary::frame() const {
  // @@protoc_insertion_point(field_get:iterm2.SessionSummary.frame)
  return _internal_frame();
}
inline void SessionSummary::unsafe_arena_set_allocated_frame(
    ::iterm2::Frame* frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SessionSummary.frame)
}
inline ::iterm2::Frame* SessionSummary::release_frame() {
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::Frame* temp = frame_;
  frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Frame* SessionSummary::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:iterm2.SessionSummary.frame)
  _has_bits_[0] &= ~0x00000004u;
  ::iterm2::Frame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::iterm2::Frame* SessionSummary::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00000004u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Frame>(GetArenaForAllocation());
    frame_ = p;
  }
  return frame_;
}
inline ::iterm2::Frame* SessionSummary::mutable_frame() {
  ::iterm2::Frame* _msg = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:iterm2.SessionSummary.frame)
  return _msg;
}
inline void SessionSummary::set_allocated_frame(::iterm2::Frame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Frame>::GetOwningArena(frame);
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:iterm2.SessionSummary.frame)
}

// optional .iterm2.Size grid_size = 3;
inline bool SessionSummary::_internal_has_grid_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || grid_size_ != nullptr);
  return value;
}
inline bool SessionSummary::has_grid_size() const {
  return _internal_has_grid_size();
}
inline void SessionSummary::clear_grid_size() {
  if (grid_size_ != nullptr) grid_size_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::iterm2::Size& SessionSummary::_internal_grid_size() const {
  const ::iterm2::Size* p = grid_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Size&>(
      ::iterm2::_Size_default_instance_);
}
inline const ::iterm2::Size& SessionSummary::grid_size() const {
  // @@protoc_insertion_point(field_get:iterm2.SessionSummary.grid_size)
  return _internal_grid_size();
}
inline void SessionSummary::unsafe_arena_set_allocated_grid_size(
    ::iterm2::Size* grid_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_size_);
  }
  grid_size_ = grid_size;
  if (grid_size) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SessionSummary.grid_size)
}
inline ::iterm2::Size* SessionSummary::release_grid_size() {
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::Size* temp = grid_size_;
  grid_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Size* SessionSummary::unsafe_arena_release_grid_size() {
  // @@protoc_insertion_point(field_release:iterm2.SessionSummary.grid_size)
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::Size* temp = grid_size_;
  grid_size_ = nullptr;
  return temp;
}
inline ::iterm2::Size* SessionSummary::_internal_mutable_grid_size() {
  _has_bits_[0] |= 0x00000008u;
  if (grid_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Size>(GetArenaForAllocation());
    grid_size_ = p;
  }
  return grid_size_;
}
inline ::iterm2::Size* SessionSummary::mutable_grid_size() {
  ::iterm2::Size* _msg = _internal_mutable_grid_size();
  // @@protoc_insertion_point(field_mutable:iterm2.SessionSummary.grid_size)
  return _msg;
}
inline void SessionSummary::set_allocated_grid_size(::iterm2::Size* grid_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grid_size_;
  }
  if (grid_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Size>::GetOwningArena(grid_size);
    if (message_arena != submessage_arena) {
      grid_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  grid_size_ = grid_size;
  // @@protoc_insertion_point(field_set_allocated:iterm2.SessionSummary.grid_size)
}

// optional string title = 4;
inline bool SessionSummary::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SessionSummary::has_title() const {
  return _internal_has_title();
}
inline void SessionSummary::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SessionSummary::title() const {
  // @@protoc_insertion_point(field_get:iterm2.SessionSummary.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionSummary::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SessionSummary.title)
}
inline std::string* SessionSummary::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:iterm2.SessionSummary.title)
  return _s;
}
inline const std::string& SessionSummary::_internal_title() const {
  return title_.Get();
}
inline void SessionSummary::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionSummary::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionSummary::release_title() {
  // @@protoc_insertion_point(field_release:iterm2.SessionSummary.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionSummary::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SessionSummary.title)
}

// -------------------------------------------------------------------

// SplitTreeNode_SplitTreeLink

// .iterm2.SessionSummary session = 1;
inline bool SplitTreeNode_SplitTreeLink::_internal_has_session() const {
  return child_case() == kSession;
}
inline bool SplitTreeNode_SplitTreeLink::has_session() const {
  return _internal_has_session();
}
inline void SplitTreeNode_SplitTreeLink::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void SplitTreeNode_SplitTreeLink::clear_session() {
  if (_internal_has_session()) {
    if (GetArenaForAllocation() == nullptr) {
      delete child_.session_;
    }
    clear_has_child();
  }
}
inline ::iterm2::SessionSummary* SplitTreeNode_SplitTreeLink::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.SplitTreeNode.SplitTreeLink.session)
  if (_internal_has_session()) {
    clear_has_child();
      ::iterm2::SessionSummary* temp = child_.session_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    child_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SessionSummary& SplitTreeNode_SplitTreeLink::_internal_session() const {
  return _internal_has_session()
      ? *child_.session_
      : reinterpret_cast< ::iterm2::SessionSummary&>(::iterm2::_SessionSummary_default_instance_);
}
inline const ::iterm2::SessionSummary& SplitTreeNode_SplitTreeLink::session() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitTreeNode.SplitTreeLink.session)
  return _internal_session();
}
inline ::iterm2::SessionSummary* SplitTreeNode_SplitTreeLink::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SplitTreeNode.SplitTreeLink.session)
  if (_internal_has_session()) {
    clear_has_child();
    ::iterm2::SessionSummary* temp = child_.session_;
    child_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SplitTreeNode_SplitTreeLink::unsafe_arena_set_allocated_session(::iterm2::SessionSummary* session) {
  clear_child();
  if (session) {
    set_has_session();
    child_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SplitTreeNode.SplitTreeLink.session)
}
inline ::iterm2::SessionSummary* SplitTreeNode_SplitTreeLink::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_child();
    set_has_session();
    child_.session_ = CreateMaybeMessage< ::iterm2::SessionSummary >(GetArenaForAllocation());
  }
  return child_.session_;
}
inline ::iterm2::SessionSummary* SplitTreeNode_SplitTreeLink::mutable_session() {
  ::iterm2::SessionSummary* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.SplitTreeNode.SplitTreeLink.session)
  return _msg;
}

// .iterm2.SplitTreeNode node = 2;
inline bool SplitTreeNode_SplitTreeLink::_internal_has_node() const {
  return child_case() == kNode;
}
inline bool SplitTreeNode_SplitTreeLink::has_node() const {
  return _internal_has_node();
}
inline void SplitTreeNode_SplitTreeLink::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void SplitTreeNode_SplitTreeLink::clear_node() {
  if (_internal_has_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete child_.node_;
    }
    clear_has_child();
  }
}
inline ::iterm2::SplitTreeNode* SplitTreeNode_SplitTreeLink::release_node() {
  // @@protoc_insertion_point(field_release:iterm2.SplitTreeNode.SplitTreeLink.node)
  if (_internal_has_node()) {
    clear_has_child();
      ::iterm2::SplitTreeNode* temp = child_.node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    child_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iterm2::SplitTreeNode& SplitTreeNode_SplitTreeLink::_internal_node() const {
  return _internal_has_node()
      ? *child_.node_
      : reinterpret_cast< ::iterm2::SplitTreeNode&>(::iterm2::_SplitTreeNode_default_instance_);
}
inline const ::iterm2::SplitTreeNode& SplitTreeNode_SplitTreeLink::node() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitTreeNode.SplitTreeLink.node)
  return _internal_node();
}
inline ::iterm2::SplitTreeNode* SplitTreeNode_SplitTreeLink::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iterm2.SplitTreeNode.SplitTreeLink.node)
  if (_internal_has_node()) {
    clear_has_child();
    ::iterm2::SplitTreeNode* temp = child_.node_;
    child_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SplitTreeNode_SplitTreeLink::unsafe_arena_set_allocated_node(::iterm2::SplitTreeNode* node) {
  clear_child();
  if (node) {
    set_has_node();
    child_.node_ = node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.SplitTreeNode.SplitTreeLink.node)
}
inline ::iterm2::SplitTreeNode* SplitTreeNode_SplitTreeLink::_internal_mutable_node() {
  if (!_internal_has_node()) {
    clear_child();
    set_has_node();
    child_.node_ = CreateMaybeMessage< ::iterm2::SplitTreeNode >(GetArenaForAllocation());
  }
  return child_.node_;
}
inline ::iterm2::SplitTreeNode* SplitTreeNode_SplitTreeLink::mutable_node() {
  ::iterm2::SplitTreeNode* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:iterm2.SplitTreeNode.SplitTreeLink.node)
  return _msg;
}

inline bool SplitTreeNode_SplitTreeLink::has_child() const {
  return child_case() != CHILD_NOT_SET;
}
inline void SplitTreeNode_SplitTreeLink::clear_has_child() {
  _oneof_case_[0] = CHILD_NOT_SET;
}
inline SplitTreeNode_SplitTreeLink::ChildCase SplitTreeNode_SplitTreeLink::child_case() const {
  return SplitTreeNode_SplitTreeLink::ChildCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SplitTreeNode

// optional bool vertical = 1;
inline bool SplitTreeNode::_internal_has_vertical() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SplitTreeNode::has_vertical() const {
  return _internal_has_vertical();
}
inline void SplitTreeNode::clear_vertical() {
  vertical_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SplitTreeNode::_internal_vertical() const {
  return vertical_;
}
inline bool SplitTreeNode::vertical() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitTreeNode.vertical)
  return _internal_vertical();
}
inline void SplitTreeNode::_internal_set_vertical(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vertical_ = value;
}
inline void SplitTreeNode::set_vertical(bool value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:iterm2.SplitTreeNode.vertical)
}

// repeated .iterm2.SplitTreeNode.SplitTreeLink links = 2;
inline int SplitTreeNode::_internal_links_size() const {
  return links_.size();
}
inline int SplitTreeNode::links_size() const {
  return _internal_links_size();
}
inline void SplitTreeNode::clear_links() {
  links_.Clear();
}
inline ::iterm2::SplitTreeNode_SplitTreeLink* SplitTreeNode::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SplitTreeNode.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SplitTreeNode_SplitTreeLink >*
SplitTreeNode::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SplitTreeNode.links)
  return &links_;
}
inline const ::iterm2::SplitTreeNode_SplitTreeLink& SplitTreeNode::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::iterm2::SplitTreeNode_SplitTreeLink& SplitTreeNode::links(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SplitTreeNode.links)
  return _internal_links(index);
}
inline ::iterm2::SplitTreeNode_SplitTreeLink* SplitTreeNode::_internal_add_links() {
  return links_.Add();
}
inline ::iterm2::SplitTreeNode_SplitTreeLink* SplitTreeNode::add_links() {
  ::iterm2::SplitTreeNode_SplitTreeLink* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:iterm2.SplitTreeNode.links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SplitTreeNode_SplitTreeLink >&
SplitTreeNode::links() const {
  // @@protoc_insertion_point(field_list:iterm2.SplitTreeNode.links)
  return links_;
}

// -------------------------------------------------------------------

// ListSessionsResponse_Window

// repeated .iterm2.ListSessionsResponse.Tab tabs = 1;
inline int ListSessionsResponse_Window::_internal_tabs_size() const {
  return tabs_.size();
}
inline int ListSessionsResponse_Window::tabs_size() const {
  return _internal_tabs_size();
}
inline void ListSessionsResponse_Window::clear_tabs() {
  tabs_.Clear();
}
inline ::iterm2::ListSessionsResponse_Tab* ListSessionsResponse_Window::mutable_tabs(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Window.tabs)
  return tabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Tab >*
ListSessionsResponse_Window::mutable_tabs() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListSessionsResponse.Window.tabs)
  return &tabs_;
}
inline const ::iterm2::ListSessionsResponse_Tab& ListSessionsResponse_Window::_internal_tabs(int index) const {
  return tabs_.Get(index);
}
inline const ::iterm2::ListSessionsResponse_Tab& ListSessionsResponse_Window::tabs(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Window.tabs)
  return _internal_tabs(index);
}
inline ::iterm2::ListSessionsResponse_Tab* ListSessionsResponse_Window::_internal_add_tabs() {
  return tabs_.Add();
}
inline ::iterm2::ListSessionsResponse_Tab* ListSessionsResponse_Window::add_tabs() {
  ::iterm2::ListSessionsResponse_Tab* _add = _internal_add_tabs();
  // @@protoc_insertion_point(field_add:iterm2.ListSessionsResponse.Window.tabs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Tab >&
ListSessionsResponse_Window::tabs() const {
  // @@protoc_insertion_point(field_list:iterm2.ListSessionsResponse.Window.tabs)
  return tabs_;
}

// optional string window_id = 2;
inline bool ListSessionsResponse_Window::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListSessionsResponse_Window::has_window_id() const {
  return _internal_has_window_id();
}
inline void ListSessionsResponse_Window::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListSessionsResponse_Window::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Window.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSessionsResponse_Window::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListSessionsResponse.Window.window_id)
}
inline std::string* ListSessionsResponse_Window::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Window.window_id)
  return _s;
}
inline const std::string& ListSessionsResponse_Window::_internal_window_id() const {
  return window_id_.Get();
}
inline void ListSessionsResponse_Window::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Window::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000001u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Window::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.ListSessionsResponse.Window.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListSessionsResponse_Window::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListSessionsResponse.Window.window_id)
}

// optional .iterm2.Frame frame = 3;
inline bool ListSessionsResponse_Window::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool ListSessionsResponse_Window::has_frame() const {
  return _internal_has_frame();
}
inline void ListSessionsResponse_Window::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iterm2::Frame& ListSessionsResponse_Window::_internal_frame() const {
  const ::iterm2::Frame* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::Frame&>(
      ::iterm2::_Frame_default_instance_);
}
inline const ::iterm2::Frame& ListSessionsResponse_Window::frame() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Window.frame)
  return _internal_frame();
}
inline void ListSessionsResponse_Window::unsafe_arena_set_allocated_frame(
    ::iterm2::Frame* frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ListSessionsResponse.Window.frame)
}
inline ::iterm2::Frame* ListSessionsResponse_Window::release_frame() {
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Frame* temp = frame_;
  frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::Frame* ListSessionsResponse_Window::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:iterm2.ListSessionsResponse.Window.frame)
  _has_bits_[0] &= ~0x00000002u;
  ::iterm2::Frame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::iterm2::Frame* ListSessionsResponse_Window::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::Frame>(GetArenaForAllocation());
    frame_ = p;
  }
  return frame_;
}
inline ::iterm2::Frame* ListSessionsResponse_Window::mutable_frame() {
  ::iterm2::Frame* _msg = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Window.frame)
  return _msg;
}
inline void ListSessionsResponse_Window::set_allocated_frame(::iterm2::Frame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Frame>::GetOwningArena(frame);
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListSessionsResponse.Window.frame)
}

// optional int32 number = 4;
inline bool ListSessionsResponse_Window::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListSessionsResponse_Window::has_number() const {
  return _internal_has_number();
}
inline void ListSessionsResponse_Window::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ListSessionsResponse_Window::_internal_number() const {
  return number_;
}
inline int32_t ListSessionsResponse_Window::number() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Window.number)
  return _internal_number();
}
inline void ListSessionsResponse_Window::_internal_set_number(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  number_ = value;
}
inline void ListSessionsResponse_Window::set_number(int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:iterm2.ListSessionsResponse.Window.number)
}

// -------------------------------------------------------------------

// ListSessionsResponse_Tab

// optional .iterm2.SplitTreeNode root = 3;
inline bool ListSessionsResponse_Tab::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool ListSessionsResponse_Tab::has_root() const {
  return _internal_has_root();
}
inline void ListSessionsResponse_Tab::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::iterm2::SplitTreeNode& ListSessionsResponse_Tab::_internal_root() const {
  const ::iterm2::SplitTreeNode* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::iterm2::SplitTreeNode&>(
      ::iterm2::_SplitTreeNode_default_instance_);
}
inline const ::iterm2::SplitTreeNode& ListSessionsResponse_Tab::root() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Tab.root)
  return _internal_root();
}
inline void ListSessionsResponse_Tab::unsafe_arena_set_allocated_root(
    ::iterm2::SplitTreeNode* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iterm2.ListSessionsResponse.Tab.root)
}
inline ::iterm2::SplitTreeNode* ListSessionsResponse_Tab::release_root() {
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::SplitTreeNode* temp = root_;
  root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::iterm2::SplitTreeNode* ListSessionsResponse_Tab::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:iterm2.ListSessionsResponse.Tab.root)
  _has_bits_[0] &= ~0x00000008u;
  ::iterm2::SplitTreeNode* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::iterm2::SplitTreeNode* ListSessionsResponse_Tab::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000008u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::iterm2::SplitTreeNode>(GetArenaForAllocation());
    root_ = p;
  }
  return root_;
}
inline ::iterm2::SplitTreeNode* ListSessionsResponse_Tab::mutable_root() {
  ::iterm2::SplitTreeNode* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Tab.root)
  return _msg;
}
inline void ListSessionsResponse_Tab::set_allocated_root(::iterm2::SplitTreeNode* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SplitTreeNode>::GetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListSessionsResponse.Tab.root)
}

// optional string tab_id = 2;
inline bool ListSessionsResponse_Tab::_internal_has_tab_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListSessionsResponse_Tab::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void ListSessionsResponse_Tab::clear_tab_id() {
  tab_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListSessionsResponse_Tab::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Tab.tab_id)
  return _internal_tab_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSessionsResponse_Tab::set_tab_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListSessionsResponse.Tab.tab_id)
}
inline std::string* ListSessionsResponse_Tab::mutable_tab_id() {
  std::string* _s = _internal_mutable_tab_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Tab.tab_id)
  return _s;
}
inline const std::string& ListSessionsResponse_Tab::_internal_tab_id() const {
  return tab_id_.Get();
}
inline void ListSessionsResponse_Tab::_internal_set_tab_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Tab::_internal_mutable_tab_id() {
  _has_bits_[0] |= 0x00000001u;
  return tab_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Tab::release_tab_id() {
  // @@protoc_insertion_point(field_release:iterm2.ListSessionsResponse.Tab.tab_id)
  if (!_internal_has_tab_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tab_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListSessionsResponse_Tab::set_allocated_tab_id(std::string* tab_id) {
  if (tab_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tab_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tab_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tab_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListSessionsResponse.Tab.tab_id)
}

// optional string tmux_window_id = 4;
inline bool ListSessionsResponse_Tab::_internal_has_tmux_window_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListSessionsResponse_Tab::has_tmux_window_id() const {
  return _internal_has_tmux_window_id();
}
inline void ListSessionsResponse_Tab::clear_tmux_window_id() {
  tmux_window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListSessionsResponse_Tab::tmux_window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Tab.tmux_window_id)
  return _internal_tmux_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSessionsResponse_Tab::set_tmux_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tmux_window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListSessionsResponse.Tab.tmux_window_id)
}
inline std::string* ListSessionsResponse_Tab::mutable_tmux_window_id() {
  std::string* _s = _internal_mutable_tmux_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Tab.tmux_window_id)
  return _s;
}
inline const std::string& ListSessionsResponse_Tab::_internal_tmux_window_id() const {
  return tmux_window_id_.Get();
}
inline void ListSessionsResponse_Tab::_internal_set_tmux_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tmux_window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Tab::_internal_mutable_tmux_window_id() {
  _has_bits_[0] |= 0x00000002u;
  return tmux_window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Tab::release_tmux_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.ListSessionsResponse.Tab.tmux_window_id)
  if (!_internal_has_tmux_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = tmux_window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tmux_window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tmux_window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListSessionsResponse_Tab::set_allocated_tmux_window_id(std::string* tmux_window_id) {
  if (tmux_window_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tmux_window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tmux_window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tmux_window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tmux_window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListSessionsResponse.Tab.tmux_window_id)
}

// optional string tmux_connection_id = 5;
inline bool ListSessionsResponse_Tab::_internal_has_tmux_connection_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListSessionsResponse_Tab::has_tmux_connection_id() const {
  return _internal_has_tmux_connection_id();
}
inline void ListSessionsResponse_Tab::clear_tmux_connection_id() {
  tmux_connection_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ListSessionsResponse_Tab::tmux_connection_id() const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Tab.tmux_connection_id)
  return _internal_tmux_connection_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSessionsResponse_Tab::set_tmux_connection_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 tmux_connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.ListSessionsResponse.Tab.tmux_connection_id)
}
inline std::string* ListSessionsResponse_Tab::mutable_tmux_connection_id() {
  std::string* _s = _internal_mutable_tmux_connection_id();
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Tab.tmux_connection_id)
  return _s;
}
inline const std::string& ListSessionsResponse_Tab::_internal_tmux_connection_id() const {
  return tmux_connection_id_.Get();
}
inline void ListSessionsResponse_Tab::_internal_set_tmux_connection_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  tmux_connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Tab::_internal_mutable_tmux_connection_id() {
  _has_bits_[0] |= 0x00000004u;
  return tmux_connection_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSessionsResponse_Tab::release_tmux_connection_id() {
  // @@protoc_insertion_point(field_release:iterm2.ListSessionsResponse.Tab.tmux_connection_id)
  if (!_internal_has_tmux_connection_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = tmux_connection_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tmux_connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tmux_connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListSessionsResponse_Tab::set_allocated_tmux_connection_id(std::string* tmux_connection_id) {
  if (tmux_connection_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tmux_connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tmux_connection_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tmux_connection_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tmux_connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.ListSessionsResponse.Tab.tmux_connection_id)
}

// repeated .iterm2.SessionSummary minimized_sessions = 6;
inline int ListSessionsResponse_Tab::_internal_minimized_sessions_size() const {
  return minimized_sessions_.size();
}
inline int ListSessionsResponse_Tab::minimized_sessions_size() const {
  return _internal_minimized_sessions_size();
}
inline void ListSessionsResponse_Tab::clear_minimized_sessions() {
  minimized_sessions_.Clear();
}
inline ::iterm2::SessionSummary* ListSessionsResponse_Tab::mutable_minimized_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.Tab.minimized_sessions)
  return minimized_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >*
ListSessionsResponse_Tab::mutable_minimized_sessions() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListSessionsResponse.Tab.minimized_sessions)
  return &minimized_sessions_;
}
inline const ::iterm2::SessionSummary& ListSessionsResponse_Tab::_internal_minimized_sessions(int index) const {
  return minimized_sessions_.Get(index);
}
inline const ::iterm2::SessionSummary& ListSessionsResponse_Tab::minimized_sessions(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.Tab.minimized_sessions)
  return _internal_minimized_sessions(index);
}
inline ::iterm2::SessionSummary* ListSessionsResponse_Tab::_internal_add_minimized_sessions() {
  return minimized_sessions_.Add();
}
inline ::iterm2::SessionSummary* ListSessionsResponse_Tab::add_minimized_sessions() {
  ::iterm2::SessionSummary* _add = _internal_add_minimized_sessions();
  // @@protoc_insertion_point(field_add:iterm2.ListSessionsResponse.Tab.minimized_sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >&
ListSessionsResponse_Tab::minimized_sessions() const {
  // @@protoc_insertion_point(field_list:iterm2.ListSessionsResponse.Tab.minimized_sessions)
  return minimized_sessions_;
}

// -------------------------------------------------------------------

// ListSessionsResponse

// repeated .iterm2.ListSessionsResponse.Window windows = 1;
inline int ListSessionsResponse::_internal_windows_size() const {
  return windows_.size();
}
inline int ListSessionsResponse::windows_size() const {
  return _internal_windows_size();
}
inline void ListSessionsResponse::clear_windows() {
  windows_.Clear();
}
inline ::iterm2::ListSessionsResponse_Window* ListSessionsResponse::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.windows)
  return windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Window >*
ListSessionsResponse::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListSessionsResponse.windows)
  return &windows_;
}
inline const ::iterm2::ListSessionsResponse_Window& ListSessionsResponse::_internal_windows(int index) const {
  return windows_.Get(index);
}
inline const ::iterm2::ListSessionsResponse_Window& ListSessionsResponse::windows(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.windows)
  return _internal_windows(index);
}
inline ::iterm2::ListSessionsResponse_Window* ListSessionsResponse::_internal_add_windows() {
  return windows_.Add();
}
inline ::iterm2::ListSessionsResponse_Window* ListSessionsResponse::add_windows() {
  ::iterm2::ListSessionsResponse_Window* _add = _internal_add_windows();
  // @@protoc_insertion_point(field_add:iterm2.ListSessionsResponse.windows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ListSessionsResponse_Window >&
ListSessionsResponse::windows() const {
  // @@protoc_insertion_point(field_list:iterm2.ListSessionsResponse.windows)
  return windows_;
}

// repeated .iterm2.SessionSummary buried_sessions = 2;
inline int ListSessionsResponse::_internal_buried_sessions_size() const {
  return buried_sessions_.size();
}
inline int ListSessionsResponse::buried_sessions_size() const {
  return _internal_buried_sessions_size();
}
inline void ListSessionsResponse::clear_buried_sessions() {
  buried_sessions_.Clear();
}
inline ::iterm2::SessionSummary* ListSessionsResponse::mutable_buried_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.ListSessionsResponse.buried_sessions)
  return buried_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >*
ListSessionsResponse::mutable_buried_sessions() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.ListSessionsResponse.buried_sessions)
  return &buried_sessions_;
}
inline const ::iterm2::SessionSummary& ListSessionsResponse::_internal_buried_sessions(int index) const {
  return buried_sessions_.Get(index);
}
inline const ::iterm2::SessionSummary& ListSessionsResponse::buried_sessions(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.ListSessionsResponse.buried_sessions)
  return _internal_buried_sessions(index);
}
inline ::iterm2::SessionSummary* ListSessionsResponse::_internal_add_buried_sessions() {
  return buried_sessions_.Add();
}
inline ::iterm2::SessionSummary* ListSessionsResponse::add_buried_sessions() {
  ::iterm2::SessionSummary* _add = _internal_add_buried_sessions();
  // @@protoc_insertion_point(field_add:iterm2.ListSessionsResponse.buried_sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::SessionSummary >&
ListSessionsResponse::buried_sessions() const {
  // @@protoc_insertion_point(field_list:iterm2.ListSessionsResponse.buried_sessions)
  return buried_sessions_;
}

// -------------------------------------------------------------------

// CreateTabRequest

// optional string profile_name = 1;
inline bool CreateTabRequest::_internal_has_profile_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateTabRequest::has_profile_name() const {
  return _internal_has_profile_name();
}
inline void CreateTabRequest::clear_profile_name() {
  profile_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateTabRequest::profile_name() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabRequest.profile_name)
  return _internal_profile_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTabRequest::set_profile_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CreateTabRequest.profile_name)
}
inline std::string* CreateTabRequest::mutable_profile_name() {
  std::string* _s = _internal_mutable_profile_name();
  // @@protoc_insertion_point(field_mutable:iterm2.CreateTabRequest.profile_name)
  return _s;
}
inline const std::string& CreateTabRequest::_internal_profile_name() const {
  return profile_name_.Get();
}
inline void CreateTabRequest::_internal_set_profile_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTabRequest::_internal_mutable_profile_name() {
  _has_bits_[0] |= 0x00000001u;
  return profile_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTabRequest::release_profile_name() {
  // @@protoc_insertion_point(field_release:iterm2.CreateTabRequest.profile_name)
  if (!_internal_has_profile_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = profile_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateTabRequest::set_allocated_profile_name(std::string* profile_name) {
  if (profile_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CreateTabRequest.profile_name)
}

// optional string window_id = 2;
inline bool CreateTabRequest::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateTabRequest::has_window_id() const {
  return _internal_has_window_id();
}
inline void CreateTabRequest::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateTabRequest::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabRequest.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTabRequest::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CreateTabRequest.window_id)
}
inline std::string* CreateTabRequest::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.CreateTabRequest.window_id)
  return _s;
}
inline const std::string& CreateTabRequest::_internal_window_id() const {
  return window_id_.Get();
}
inline void CreateTabRequest::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTabRequest::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000002u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTabRequest::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.CreateTabRequest.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateTabRequest::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CreateTabRequest.window_id)
}

// optional uint32 tab_index = 3;
inline bool CreateTabRequest::_internal_has_tab_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateTabRequest::has_tab_index() const {
  return _internal_has_tab_index();
}
inline void CreateTabRequest::clear_tab_index() {
  tab_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CreateTabRequest::_internal_tab_index() const {
  return tab_index_;
}
inline uint32_t CreateTabRequest::tab_index() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabRequest.tab_index)
  return _internal_tab_index();
}
inline void CreateTabRequest::_internal_set_tab_index(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  tab_index_ = value;
}
inline void CreateTabRequest::set_tab_index(uint32_t value) {
  _internal_set_tab_index(value);
  // @@protoc_insertion_point(field_set:iterm2.CreateTabRequest.tab_index)
}

// optional string command = 4 [deprecated = true];
inline bool CreateTabRequest::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateTabRequest::has_command() const {
  return _internal_has_command();
}
inline void CreateTabRequest::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CreateTabRequest::command() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTabRequest::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CreateTabRequest.command)
}
inline std::string* CreateTabRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:iterm2.CreateTabRequest.command)
  return _s;
}
inline const std::string& CreateTabRequest::_internal_command() const {
  return command_.Get();
}
inline void CreateTabRequest::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTabRequest::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000004u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTabRequest::release_command() {
  // @@protoc_insertion_point(field_release:iterm2.CreateTabRequest.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateTabRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CreateTabRequest.command)
}

// repeated .iterm2.ProfileProperty custom_profile_properties = 5;
inline int CreateTabRequest::_internal_custom_profile_properties_size() const {
  return custom_profile_properties_.size();
}
inline int CreateTabRequest::custom_profile_properties_size() const {
  return _internal_custom_profile_properties_size();
}
inline void CreateTabRequest::clear_custom_profile_properties() {
  custom_profile_properties_.Clear();
}
inline ::iterm2::ProfileProperty* CreateTabRequest::mutable_custom_profile_properties(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.CreateTabRequest.custom_profile_properties)
  return custom_profile_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
CreateTabRequest::mutable_custom_profile_properties() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.CreateTabRequest.custom_profile_properties)
  return &custom_profile_properties_;
}
inline const ::iterm2::ProfileProperty& CreateTabRequest::_internal_custom_profile_properties(int index) const {
  return custom_profile_properties_.Get(index);
}
inline const ::iterm2::ProfileProperty& CreateTabRequest::custom_profile_properties(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabRequest.custom_profile_properties)
  return _internal_custom_profile_properties(index);
}
inline ::iterm2::ProfileProperty* CreateTabRequest::_internal_add_custom_profile_properties() {
  return custom_profile_properties_.Add();
}
inline ::iterm2::ProfileProperty* CreateTabRequest::add_custom_profile_properties() {
  ::iterm2::ProfileProperty* _add = _internal_add_custom_profile_properties();
  // @@protoc_insertion_point(field_add:iterm2.CreateTabRequest.custom_profile_properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
CreateTabRequest::custom_profile_properties() const {
  // @@protoc_insertion_point(field_list:iterm2.CreateTabRequest.custom_profile_properties)
  return custom_profile_properties_;
}

// -------------------------------------------------------------------

// CreateTabResponse

// optional .iterm2.CreateTabResponse.Status status = 1;
inline bool CreateTabResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateTabResponse::has_status() const {
  return _internal_has_status();
}
inline void CreateTabResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::iterm2::CreateTabResponse_Status CreateTabResponse::_internal_status() const {
  return static_cast< ::iterm2::CreateTabResponse_Status >(status_);
}
inline ::iterm2::CreateTabResponse_Status CreateTabResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabResponse.status)
  return _internal_status();
}
inline void CreateTabResponse::_internal_set_status(::iterm2::CreateTabResponse_Status value) {
  assert(::iterm2::CreateTabResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void CreateTabResponse::set_status(::iterm2::CreateTabResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.CreateTabResponse.status)
}

// optional string window_id = 2;
inline bool CreateTabResponse::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateTabResponse::has_window_id() const {
  return _internal_has_window_id();
}
inline void CreateTabResponse::clear_window_id() {
  window_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateTabResponse::window_id() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabResponse.window_id)
  return _internal_window_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTabResponse::set_window_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CreateTabResponse.window_id)
}
inline std::string* CreateTabResponse::mutable_window_id() {
  std::string* _s = _internal_mutable_window_id();
  // @@protoc_insertion_point(field_mutable:iterm2.CreateTabResponse.window_id)
  return _s;
}
inline const std::string& CreateTabResponse::_internal_window_id() const {
  return window_id_.Get();
}
inline void CreateTabResponse::_internal_set_window_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTabResponse::_internal_mutable_window_id() {
  _has_bits_[0] |= 0x00000001u;
  return window_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTabResponse::release_window_id() {
  // @@protoc_insertion_point(field_release:iterm2.CreateTabResponse.window_id)
  if (!_internal_has_window_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = window_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateTabResponse::set_allocated_window_id(std::string* window_id) {
  if (window_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CreateTabResponse.window_id)
}

// optional int32 tab_id = 3;
inline bool CreateTabResponse::_internal_has_tab_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateTabResponse::has_tab_id() const {
  return _internal_has_tab_id();
}
inline void CreateTabResponse::clear_tab_id() {
  tab_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CreateTabResponse::_internal_tab_id() const {
  return tab_id_;
}
inline int32_t CreateTabResponse::tab_id() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabResponse.tab_id)
  return _internal_tab_id();
}
inline void CreateTabResponse::_internal_set_tab_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  tab_id_ = value;
}
inline void CreateTabResponse::set_tab_id(int32_t value) {
  _internal_set_tab_id(value);
  // @@protoc_insertion_point(field_set:iterm2.CreateTabResponse.tab_id)
}

// optional string session_id = 4;
inline bool CreateTabResponse::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateTabResponse::has_session_id() const {
  return _internal_has_session_id();
}
inline void CreateTabResponse::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateTabResponse::session_id() const {
  // @@protoc_insertion_point(field_get:iterm2.CreateTabResponse.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTabResponse::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.CreateTabResponse.session_id)
}
inline std::string* CreateTabResponse::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:iterm2.CreateTabResponse.session_id)
  return _s;
}
inline const std::string& CreateTabResponse::_internal_session_id() const {
  return session_id_.Get();
}
inline void CreateTabResponse::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTabResponse::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTabResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:iterm2.CreateTabResponse.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateTabResponse::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.CreateTabResponse.session_id)
}

// -------------------------------------------------------------------

// SplitPaneRequest

// optional string session = 1;
inline bool SplitPaneRequest::_internal_has_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SplitPaneRequest::has_session() const {
  return _internal_has_session();
}
inline void SplitPaneRequest::clear_session() {
  session_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SplitPaneRequest::session() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneRequest.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitPaneRequest::set_session(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneRequest.session)
}
inline std::string* SplitPaneRequest::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:iterm2.SplitPaneRequest.session)
  return _s;
}
inline const std::string& SplitPaneRequest::_internal_session() const {
  return session_.Get();
}
inline void SplitPaneRequest::_internal_set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SplitPaneRequest::_internal_mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SplitPaneRequest::release_session() {
  // @@protoc_insertion_point(field_release:iterm2.SplitPaneRequest.session)
  if (!_internal_has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SplitPaneRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SplitPaneRequest.session)
}

// optional .iterm2.SplitPaneRequest.SplitDirection split_direction = 2;
inline bool SplitPaneRequest::_internal_has_split_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SplitPaneRequest::has_split_direction() const {
  return _internal_has_split_direction();
}
inline void SplitPaneRequest::clear_split_direction() {
  split_direction_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::iterm2::SplitPaneRequest_SplitDirection SplitPaneRequest::_internal_split_direction() const {
  return static_cast< ::iterm2::SplitPaneRequest_SplitDirection >(split_direction_);
}
inline ::iterm2::SplitPaneRequest_SplitDirection SplitPaneRequest::split_direction() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneRequest.split_direction)
  return _internal_split_direction();
}
inline void SplitPaneRequest::_internal_set_split_direction(::iterm2::SplitPaneRequest_SplitDirection value) {
  assert(::iterm2::SplitPaneRequest_SplitDirection_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  split_direction_ = value;
}
inline void SplitPaneRequest::set_split_direction(::iterm2::SplitPaneRequest_SplitDirection value) {
  _internal_set_split_direction(value);
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneRequest.split_direction)
}

// optional bool before = 3 [default = false];
inline bool SplitPaneRequest::_internal_has_before() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SplitPaneRequest::has_before() const {
  return _internal_has_before();
}
inline void SplitPaneRequest::clear_before() {
  before_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SplitPaneRequest::_internal_before() const {
  return before_;
}
inline bool SplitPaneRequest::before() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneRequest.before)
  return _internal_before();
}
inline void SplitPaneRequest::_internal_set_before(bool value) {
  _has_bits_[0] |= 0x00000008u;
  before_ = value;
}
inline void SplitPaneRequest::set_before(bool value) {
  _internal_set_before(value);
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneRequest.before)
}

// optional string profile_name = 4;
inline bool SplitPaneRequest::_internal_has_profile_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SplitPaneRequest::has_profile_name() const {
  return _internal_has_profile_name();
}
inline void SplitPaneRequest::clear_profile_name() {
  profile_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SplitPaneRequest::profile_name() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneRequest.profile_name)
  return _internal_profile_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SplitPaneRequest::set_profile_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneRequest.profile_name)
}
inline std::string* SplitPaneRequest::mutable_profile_name() {
  std::string* _s = _internal_mutable_profile_name();
  // @@protoc_insertion_point(field_mutable:iterm2.SplitPaneRequest.profile_name)
  return _s;
}
inline const std::string& SplitPaneRequest::_internal_profile_name() const {
  return profile_name_.Get();
}
inline void SplitPaneRequest::_internal_set_profile_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SplitPaneRequest::_internal_mutable_profile_name() {
  _has_bits_[0] |= 0x00000002u;
  return profile_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SplitPaneRequest::release_profile_name() {
  // @@protoc_insertion_point(field_release:iterm2.SplitPaneRequest.profile_name)
  if (!_internal_has_profile_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = profile_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SplitPaneRequest::set_allocated_profile_name(std::string* profile_name) {
  if (profile_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  profile_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:iterm2.SplitPaneRequest.profile_name)
}

// repeated .iterm2.ProfileProperty custom_profile_properties = 5;
inline int SplitPaneRequest::_internal_custom_profile_properties_size() const {
  return custom_profile_properties_.size();
}
inline int SplitPaneRequest::custom_profile_properties_size() const {
  return _internal_custom_profile_properties_size();
}
inline void SplitPaneRequest::clear_custom_profile_properties() {
  custom_profile_properties_.Clear();
}
inline ::iterm2::ProfileProperty* SplitPaneRequest::mutable_custom_profile_properties(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SplitPaneRequest.custom_profile_properties)
  return custom_profile_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >*
SplitPaneRequest::mutable_custom_profile_properties() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SplitPaneRequest.custom_profile_properties)
  return &custom_profile_properties_;
}
inline const ::iterm2::ProfileProperty& SplitPaneRequest::_internal_custom_profile_properties(int index) const {
  return custom_profile_properties_.Get(index);
}
inline const ::iterm2::ProfileProperty& SplitPaneRequest::custom_profile_properties(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneRequest.custom_profile_properties)
  return _internal_custom_profile_properties(index);
}
inline ::iterm2::ProfileProperty* SplitPaneRequest::_internal_add_custom_profile_properties() {
  return custom_profile_properties_.Add();
}
inline ::iterm2::ProfileProperty* SplitPaneRequest::add_custom_profile_properties() {
  ::iterm2::ProfileProperty* _add = _internal_add_custom_profile_properties();
  // @@protoc_insertion_point(field_add:iterm2.SplitPaneRequest.custom_profile_properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iterm2::ProfileProperty >&
SplitPaneRequest::custom_profile_properties() const {
  // @@protoc_insertion_point(field_list:iterm2.SplitPaneRequest.custom_profile_properties)
  return custom_profile_properties_;
}

// -------------------------------------------------------------------

// SplitPaneResponse

// optional .iterm2.SplitPaneResponse.Status status = 1;
inline bool SplitPaneResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SplitPaneResponse::has_status() const {
  return _internal_has_status();
}
inline void SplitPaneResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::iterm2::SplitPaneResponse_Status SplitPaneResponse::_internal_status() const {
  return static_cast< ::iterm2::SplitPaneResponse_Status >(status_);
}
inline ::iterm2::SplitPaneResponse_Status SplitPaneResponse::status() const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneResponse.status)
  return _internal_status();
}
inline void SplitPaneResponse::_internal_set_status(::iterm2::SplitPaneResponse_Status value) {
  assert(::iterm2::SplitPaneResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void SplitPaneResponse::set_status(::iterm2::SplitPaneResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneResponse.status)
}

// repeated string session_id = 2;
inline int SplitPaneResponse::_internal_session_id_size() const {
  return session_id_.size();
}
inline int SplitPaneResponse::session_id_size() const {
  return _internal_session_id_size();
}
inline void SplitPaneResponse::clear_session_id() {
  session_id_.Clear();
}
inline std::string* SplitPaneResponse::add_session_id() {
  std::string* _s = _internal_add_session_id();
  // @@protoc_insertion_point(field_add_mutable:iterm2.SplitPaneResponse.session_id)
  return _s;
}
inline const std::string& SplitPaneResponse::_internal_session_id(int index) const {
  return session_id_.Get(index);
}
inline const std::string& SplitPaneResponse::session_id(int index) const {
  // @@protoc_insertion_point(field_get:iterm2.SplitPaneResponse.session_id)
  return _internal_session_id(index);
}
inline std::string* SplitPaneResponse::mutable_session_id(int index) {
  // @@protoc_insertion_point(field_mutable:iterm2.SplitPaneResponse.session_id)
  return session_id_.Mutable(index);
}
inline void SplitPaneResponse::set_session_id(int index, const std::string& value) {
  session_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneResponse.session_id)
}
inline void SplitPaneResponse::set_session_id(int index, std::string&& value) {
  session_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:iterm2.SplitPaneResponse.session_id)
}
inline void SplitPaneResponse::set_session_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iterm2.SplitPaneResponse.session_id)
}
inline void SplitPaneResponse::set_session_id(int index, const char* value, size_t size) {
  session_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iterm2.SplitPaneResponse.session_id)
}
inline std::string* SplitPaneResponse::_internal_add_session_id() {
  return session_id_.Add();
}
inline void SplitPaneResponse::add_session_id(const std::string& value) {
  session_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iterm2.SplitPaneResponse.session_id)
}
inline void SplitPaneResponse::add_session_id(std::string&& value) {
  session_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iterm2.SplitPaneResponse.session_id)
}
inline void SplitPaneResponse::add_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iterm2.SplitPaneResponse.session_id)
}
inline void SplitPaneResponse::add_session_id(const char* value, size_t size) {
  session_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iterm2.SplitPaneResponse.session_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SplitPaneResponse::session_id() const {
  // @@protoc_insertion_point(field_list:iterm2.SplitPaneResponse.session_id)
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SplitPaneResponse::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable_list:iterm2.SplitPaneResponse.session_id)
  return &session_id_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace iterm2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::iterm2::InvokeFunctionResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::InvokeFunctionResponse_Status>() {
  return ::iterm2::InvokeFunctionResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::CloseResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::CloseResponse_Status>() {
  return ::iterm2::CloseResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SetBroadcastDomainsResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SetBroadcastDomainsResponse_Status>() {
  return ::iterm2::SetBroadcastDomainsResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::StatusBarComponentResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::StatusBarComponentResponse_Status>() {
  return ::iterm2::StatusBarComponentResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SelectionResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SelectionResponse_Status>() {
  return ::iterm2::SelectionResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::ColorPresetResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::ColorPresetResponse_Status>() {
  return ::iterm2::ColorPresetResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status>() {
  return ::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status>() {
  return ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::ReorderTabsResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::ReorderTabsResponse_Status>() {
  return ::iterm2::ReorderTabsResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::TmuxResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::TmuxResponse_Status>() {
  return ::iterm2::TmuxResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SetTabLayoutResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SetTabLayoutResponse_Status>() {
  return ::iterm2::SetTabLayoutResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::MenuItemResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::MenuItemResponse_Status>() {
  return ::iterm2::MenuItemResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::RestartSessionResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::RestartSessionResponse_Status>() {
  return ::iterm2::RestartSessionResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SavedArrangementRequest_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SavedArrangementRequest_Action>() {
  return ::iterm2::SavedArrangementRequest_Action_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SavedArrangementResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SavedArrangementResponse_Status>() {
  return ::iterm2::SavedArrangementResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::VariableResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::VariableResponse_Status>() {
  return ::iterm2::VariableResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::ActivateResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::ActivateResponse_Status>() {
  return ::iterm2::ActivateResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::InjectResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::InjectResponse_Status>() {
  return ::iterm2::InjectResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::GetPropertyResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::GetPropertyResponse_Status>() {
  return ::iterm2::GetPropertyResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SetPropertyResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SetPropertyResponse_Status>() {
  return ::iterm2::SetPropertyResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::RegisterToolRequest_ToolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::RegisterToolRequest_ToolType>() {
  return ::iterm2::RegisterToolRequest_ToolType_descriptor();
}
template <> struct is_proto_enum< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type>() {
  return ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_descriptor();
}
template <> struct is_proto_enum< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format>() {
  return ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format_descriptor();
}
template <> struct is_proto_enum< ::iterm2::RPCRegistrationRequest_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::RPCRegistrationRequest_Role>() {
  return ::iterm2::RPCRegistrationRequest_Role_descriptor();
}
template <> struct is_proto_enum< ::iterm2::RegisterToolResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::RegisterToolResponse_Status>() {
  return ::iterm2::RegisterToolResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::NotificationResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::NotificationResponse_Status>() {
  return ::iterm2::NotificationResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::KeystrokeNotification_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::KeystrokeNotification_Action>() {
  return ::iterm2::KeystrokeNotification_Action_descriptor();
}
template <> struct is_proto_enum< ::iterm2::FocusChangedNotification_Window_WindowStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::FocusChangedNotification_Window_WindowStatus>() {
  return ::iterm2::FocusChangedNotification_Window_WindowStatus_descriptor();
}
template <> struct is_proto_enum< ::iterm2::GetBufferResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::GetBufferResponse_Status>() {
  return ::iterm2::GetBufferResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::GetPromptResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::GetPromptResponse_Status>() {
  return ::iterm2::GetPromptResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::GetPromptResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::GetPromptResponse_State>() {
  return ::iterm2::GetPromptResponse_State_descriptor();
}
template <> struct is_proto_enum< ::iterm2::ListPromptsResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::ListPromptsResponse_Status>() {
  return ::iterm2::ListPromptsResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::GetProfilePropertyResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::GetProfilePropertyResponse_Status>() {
  return ::iterm2::GetProfilePropertyResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SetProfilePropertyResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SetProfilePropertyResponse_Status>() {
  return ::iterm2::SetProfilePropertyResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::TransactionResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::TransactionResponse_Status>() {
  return ::iterm2::TransactionResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::LineContents_Continuation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::LineContents_Continuation>() {
  return ::iterm2::LineContents_Continuation_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SendTextResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SendTextResponse_Status>() {
  return ::iterm2::SendTextResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::CreateTabResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::CreateTabResponse_Status>() {
  return ::iterm2::CreateTabResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SplitPaneRequest_SplitDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SplitPaneRequest_SplitDirection>() {
  return ::iterm2::SplitPaneRequest_SplitDirection_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SplitPaneResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SplitPaneResponse_Status>() {
  return ::iterm2::SplitPaneResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::iterm2::SelectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::SelectionMode>() {
  return ::iterm2::SelectionMode_descriptor();
}
template <> struct is_proto_enum< ::iterm2::NotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::NotificationType>() {
  return ::iterm2::NotificationType_descriptor();
}
template <> struct is_proto_enum< ::iterm2::Modifiers> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::Modifiers>() {
  return ::iterm2::Modifiers_descriptor();
}
template <> struct is_proto_enum< ::iterm2::VariableScope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::VariableScope>() {
  return ::iterm2::VariableScope_descriptor();
}
template <> struct is_proto_enum< ::iterm2::PromptMonitorMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iterm2::PromptMonitorMode>() {
  return ::iterm2::PromptMonitorMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_iterm_2dapi_2epb
