// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iterm-api.pb

#include "iterm-api.pb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iterm2 {
constexpr ClientOriginatedMessage::ClientOriginatedMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0})
  , _oneof_case_{}{}
struct ClientOriginatedMessageDefaultTypeInternal {
  constexpr ClientOriginatedMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientOriginatedMessageDefaultTypeInternal() {}
  union {
    ClientOriginatedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientOriginatedMessageDefaultTypeInternal _ClientOriginatedMessage_default_instance_;
constexpr ServerOriginatedMessage::ServerOriginatedMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0})
  , _oneof_case_{}{}
struct ServerOriginatedMessageDefaultTypeInternal {
  constexpr ServerOriginatedMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerOriginatedMessageDefaultTypeInternal() {}
  union {
    ServerOriginatedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerOriginatedMessageDefaultTypeInternal _ServerOriginatedMessage_default_instance_;
constexpr InvokeFunctionRequest_Tab::InvokeFunctionRequest_Tab(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tab_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InvokeFunctionRequest_TabDefaultTypeInternal {
  constexpr InvokeFunctionRequest_TabDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionRequest_TabDefaultTypeInternal() {}
  union {
    InvokeFunctionRequest_Tab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionRequest_TabDefaultTypeInternal _InvokeFunctionRequest_Tab_default_instance_;
constexpr InvokeFunctionRequest_Session::InvokeFunctionRequest_Session(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InvokeFunctionRequest_SessionDefaultTypeInternal {
  constexpr InvokeFunctionRequest_SessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionRequest_SessionDefaultTypeInternal() {}
  union {
    InvokeFunctionRequest_Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionRequest_SessionDefaultTypeInternal _InvokeFunctionRequest_Session_default_instance_;
constexpr InvokeFunctionRequest_Window::InvokeFunctionRequest_Window(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InvokeFunctionRequest_WindowDefaultTypeInternal {
  constexpr InvokeFunctionRequest_WindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionRequest_WindowDefaultTypeInternal() {}
  union {
    InvokeFunctionRequest_Window _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionRequest_WindowDefaultTypeInternal _InvokeFunctionRequest_Window_default_instance_;
constexpr InvokeFunctionRequest_App::InvokeFunctionRequest_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InvokeFunctionRequest_AppDefaultTypeInternal {
  constexpr InvokeFunctionRequest_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionRequest_AppDefaultTypeInternal() {}
  union {
    InvokeFunctionRequest_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionRequest_AppDefaultTypeInternal _InvokeFunctionRequest_App_default_instance_;
constexpr InvokeFunctionRequest_Method::InvokeFunctionRequest_Method(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InvokeFunctionRequest_MethodDefaultTypeInternal {
  constexpr InvokeFunctionRequest_MethodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionRequest_MethodDefaultTypeInternal() {}
  union {
    InvokeFunctionRequest_Method _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionRequest_MethodDefaultTypeInternal _InvokeFunctionRequest_Method_default_instance_;
constexpr InvokeFunctionRequest::InvokeFunctionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invocation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeout_(-1)
  , _oneof_case_{}{}
struct InvokeFunctionRequestDefaultTypeInternal {
  constexpr InvokeFunctionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionRequestDefaultTypeInternal() {}
  union {
    InvokeFunctionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionRequestDefaultTypeInternal _InvokeFunctionRequest_default_instance_;
constexpr InvokeFunctionResponse_Error::InvokeFunctionResponse_Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(1)
{}
struct InvokeFunctionResponse_ErrorDefaultTypeInternal {
  constexpr InvokeFunctionResponse_ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionResponse_ErrorDefaultTypeInternal() {}
  union {
    InvokeFunctionResponse_Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionResponse_ErrorDefaultTypeInternal _InvokeFunctionResponse_Error_default_instance_;
constexpr InvokeFunctionResponse_Success::InvokeFunctionResponse_Success(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : json_result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InvokeFunctionResponse_SuccessDefaultTypeInternal {
  constexpr InvokeFunctionResponse_SuccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionResponse_SuccessDefaultTypeInternal() {}
  union {
    InvokeFunctionResponse_Success _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionResponse_SuccessDefaultTypeInternal _InvokeFunctionResponse_Success_default_instance_;
constexpr InvokeFunctionResponse::InvokeFunctionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct InvokeFunctionResponseDefaultTypeInternal {
  constexpr InvokeFunctionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeFunctionResponseDefaultTypeInternal() {}
  union {
    InvokeFunctionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeFunctionResponseDefaultTypeInternal _InvokeFunctionResponse_default_instance_;
constexpr CloseRequest_CloseTabs::CloseRequest_CloseTabs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tab_ids_(){}
struct CloseRequest_CloseTabsDefaultTypeInternal {
  constexpr CloseRequest_CloseTabsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseRequest_CloseTabsDefaultTypeInternal() {}
  union {
    CloseRequest_CloseTabs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseRequest_CloseTabsDefaultTypeInternal _CloseRequest_CloseTabs_default_instance_;
constexpr CloseRequest_CloseSessions::CloseRequest_CloseSessions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_ids_(){}
struct CloseRequest_CloseSessionsDefaultTypeInternal {
  constexpr CloseRequest_CloseSessionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseRequest_CloseSessionsDefaultTypeInternal() {}
  union {
    CloseRequest_CloseSessions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseRequest_CloseSessionsDefaultTypeInternal _CloseRequest_CloseSessions_default_instance_;
constexpr CloseRequest_CloseWindows::CloseRequest_CloseWindows(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : window_ids_(){}
struct CloseRequest_CloseWindowsDefaultTypeInternal {
  constexpr CloseRequest_CloseWindowsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseRequest_CloseWindowsDefaultTypeInternal() {}
  union {
    CloseRequest_CloseWindows _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseRequest_CloseWindowsDefaultTypeInternal _CloseRequest_CloseWindows_default_instance_;
constexpr CloseRequest::CloseRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : force_(false)
  , _oneof_case_{}{}
struct CloseRequestDefaultTypeInternal {
  constexpr CloseRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseRequestDefaultTypeInternal() {}
  union {
    CloseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
constexpr CloseResponse::CloseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statuses_(){}
struct CloseResponseDefaultTypeInternal {
  constexpr CloseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseResponseDefaultTypeInternal() {}
  union {
    CloseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseResponseDefaultTypeInternal _CloseResponse_default_instance_;
constexpr SetBroadcastDomainsRequest::SetBroadcastDomainsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_domains_(){}
struct SetBroadcastDomainsRequestDefaultTypeInternal {
  constexpr SetBroadcastDomainsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBroadcastDomainsRequestDefaultTypeInternal() {}
  union {
    SetBroadcastDomainsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBroadcastDomainsRequestDefaultTypeInternal _SetBroadcastDomainsRequest_default_instance_;
constexpr SetBroadcastDomainsResponse::SetBroadcastDomainsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SetBroadcastDomainsResponseDefaultTypeInternal {
  constexpr SetBroadcastDomainsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBroadcastDomainsResponseDefaultTypeInternal() {}
  union {
    SetBroadcastDomainsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBroadcastDomainsResponseDefaultTypeInternal _SetBroadcastDomainsResponse_default_instance_;
constexpr StatusBarComponentRequest_OpenPopover::StatusBarComponentRequest_OpenPopover(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , html_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(nullptr){}
struct StatusBarComponentRequest_OpenPopoverDefaultTypeInternal {
  constexpr StatusBarComponentRequest_OpenPopoverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusBarComponentRequest_OpenPopoverDefaultTypeInternal() {}
  union {
    StatusBarComponentRequest_OpenPopover _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusBarComponentRequest_OpenPopoverDefaultTypeInternal _StatusBarComponentRequest_OpenPopover_default_instance_;
constexpr StatusBarComponentRequest::StatusBarComponentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct StatusBarComponentRequestDefaultTypeInternal {
  constexpr StatusBarComponentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusBarComponentRequestDefaultTypeInternal() {}
  union {
    StatusBarComponentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusBarComponentRequestDefaultTypeInternal _StatusBarComponentRequest_default_instance_;
constexpr StatusBarComponentResponse::StatusBarComponentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct StatusBarComponentResponseDefaultTypeInternal {
  constexpr StatusBarComponentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusBarComponentResponseDefaultTypeInternal() {}
  union {
    StatusBarComponentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusBarComponentResponseDefaultTypeInternal _StatusBarComponentResponse_default_instance_;
constexpr WindowedCoordRange::WindowedCoordRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coord_range_(nullptr)
  , columns_(nullptr){}
struct WindowedCoordRangeDefaultTypeInternal {
  constexpr WindowedCoordRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WindowedCoordRangeDefaultTypeInternal() {}
  union {
    WindowedCoordRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WindowedCoordRangeDefaultTypeInternal _WindowedCoordRange_default_instance_;
constexpr SubSelection::SubSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : windowed_coord_range_(nullptr)
  , selection_mode_(0)

  , connected_(false){}
struct SubSelectionDefaultTypeInternal {
  constexpr SubSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubSelectionDefaultTypeInternal() {}
  union {
    SubSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubSelectionDefaultTypeInternal _SubSelection_default_instance_;
constexpr Selection::Selection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_selections_(){}
struct SelectionDefaultTypeInternal {
  constexpr SelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionDefaultTypeInternal() {}
  union {
    Selection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionDefaultTypeInternal _Selection_default_instance_;
constexpr SelectionRequest_GetSelectionRequest::SelectionRequest_GetSelectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SelectionRequest_GetSelectionRequestDefaultTypeInternal {
  constexpr SelectionRequest_GetSelectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionRequest_GetSelectionRequestDefaultTypeInternal() {}
  union {
    SelectionRequest_GetSelectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionRequest_GetSelectionRequestDefaultTypeInternal _SelectionRequest_GetSelectionRequest_default_instance_;
constexpr SelectionRequest_SetSelectionRequest::SelectionRequest_SetSelectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selection_(nullptr){}
struct SelectionRequest_SetSelectionRequestDefaultTypeInternal {
  constexpr SelectionRequest_SetSelectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionRequest_SetSelectionRequestDefaultTypeInternal() {}
  union {
    SelectionRequest_SetSelectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionRequest_SetSelectionRequestDefaultTypeInternal _SelectionRequest_SetSelectionRequest_default_instance_;
constexpr SelectionRequest::SelectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SelectionRequestDefaultTypeInternal {
  constexpr SelectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionRequestDefaultTypeInternal() {}
  union {
    SelectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionRequestDefaultTypeInternal _SelectionRequest_default_instance_;
constexpr SelectionResponse_GetSelectionResponse::SelectionResponse_GetSelectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_(nullptr){}
struct SelectionResponse_GetSelectionResponseDefaultTypeInternal {
  constexpr SelectionResponse_GetSelectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionResponse_GetSelectionResponseDefaultTypeInternal() {}
  union {
    SelectionResponse_GetSelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionResponse_GetSelectionResponseDefaultTypeInternal _SelectionResponse_GetSelectionResponse_default_instance_;
constexpr SelectionResponse_SetSelectionResponse::SelectionResponse_SetSelectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SelectionResponse_SetSelectionResponseDefaultTypeInternal {
  constexpr SelectionResponse_SetSelectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionResponse_SetSelectionResponseDefaultTypeInternal() {}
  union {
    SelectionResponse_SetSelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionResponse_SetSelectionResponseDefaultTypeInternal _SelectionResponse_SetSelectionResponse_default_instance_;
constexpr SelectionResponse::SelectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , _oneof_case_{}{}
struct SelectionResponseDefaultTypeInternal {
  constexpr SelectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionResponseDefaultTypeInternal() {}
  union {
    SelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionResponseDefaultTypeInternal _SelectionResponse_default_instance_;
constexpr ColorPresetRequest_ListPresets::ColorPresetRequest_ListPresets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ColorPresetRequest_ListPresetsDefaultTypeInternal {
  constexpr ColorPresetRequest_ListPresetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetRequest_ListPresetsDefaultTypeInternal() {}
  union {
    ColorPresetRequest_ListPresets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetRequest_ListPresetsDefaultTypeInternal _ColorPresetRequest_ListPresets_default_instance_;
constexpr ColorPresetRequest_GetPreset::ColorPresetRequest_GetPreset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ColorPresetRequest_GetPresetDefaultTypeInternal {
  constexpr ColorPresetRequest_GetPresetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetRequest_GetPresetDefaultTypeInternal() {}
  union {
    ColorPresetRequest_GetPreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetRequest_GetPresetDefaultTypeInternal _ColorPresetRequest_GetPreset_default_instance_;
constexpr ColorPresetRequest::ColorPresetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ColorPresetRequestDefaultTypeInternal {
  constexpr ColorPresetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetRequestDefaultTypeInternal() {}
  union {
    ColorPresetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetRequestDefaultTypeInternal _ColorPresetRequest_default_instance_;
constexpr ColorPresetResponse_ListPresets::ColorPresetResponse_ListPresets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(){}
struct ColorPresetResponse_ListPresetsDefaultTypeInternal {
  constexpr ColorPresetResponse_ListPresetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetResponse_ListPresetsDefaultTypeInternal() {}
  union {
    ColorPresetResponse_ListPresets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetResponse_ListPresetsDefaultTypeInternal _ColorPresetResponse_ListPresets_default_instance_;
constexpr ColorPresetResponse_GetPreset_ColorSetting::ColorPresetResponse_GetPreset_ColorSetting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_space_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , red_(0)
  , green_(0)
  , blue_(0)
  , alpha_(0){}
struct ColorPresetResponse_GetPreset_ColorSettingDefaultTypeInternal {
  constexpr ColorPresetResponse_GetPreset_ColorSettingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetResponse_GetPreset_ColorSettingDefaultTypeInternal() {}
  union {
    ColorPresetResponse_GetPreset_ColorSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetResponse_GetPreset_ColorSettingDefaultTypeInternal _ColorPresetResponse_GetPreset_ColorSetting_default_instance_;
constexpr ColorPresetResponse_GetPreset::ColorPresetResponse_GetPreset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_settings_(){}
struct ColorPresetResponse_GetPresetDefaultTypeInternal {
  constexpr ColorPresetResponse_GetPresetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetResponse_GetPresetDefaultTypeInternal() {}
  union {
    ColorPresetResponse_GetPreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetResponse_GetPresetDefaultTypeInternal _ColorPresetResponse_GetPreset_default_instance_;
constexpr ColorPresetResponse::ColorPresetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , _oneof_case_{}{}
struct ColorPresetResponseDefaultTypeInternal {
  constexpr ColorPresetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorPresetResponseDefaultTypeInternal() {}
  union {
    ColorPresetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorPresetResponseDefaultTypeInternal _ColorPresetResponse_default_instance_;
constexpr PreferencesRequest_Request_SetPreference::PreferencesRequest_Request_SetPreference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PreferencesRequest_Request_SetPreferenceDefaultTypeInternal {
  constexpr PreferencesRequest_Request_SetPreferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesRequest_Request_SetPreferenceDefaultTypeInternal() {}
  union {
    PreferencesRequest_Request_SetPreference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesRequest_Request_SetPreferenceDefaultTypeInternal _PreferencesRequest_Request_SetPreference_default_instance_;
constexpr PreferencesRequest_Request_GetPreference::PreferencesRequest_Request_GetPreference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PreferencesRequest_Request_GetPreferenceDefaultTypeInternal {
  constexpr PreferencesRequest_Request_GetPreferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesRequest_Request_GetPreferenceDefaultTypeInternal() {}
  union {
    PreferencesRequest_Request_GetPreference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesRequest_Request_GetPreferenceDefaultTypeInternal _PreferencesRequest_Request_GetPreference_default_instance_;
constexpr PreferencesRequest_Request_SetDefaultProfile::PreferencesRequest_Request_SetDefaultProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PreferencesRequest_Request_SetDefaultProfileDefaultTypeInternal {
  constexpr PreferencesRequest_Request_SetDefaultProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesRequest_Request_SetDefaultProfileDefaultTypeInternal() {}
  union {
    PreferencesRequest_Request_SetDefaultProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesRequest_Request_SetDefaultProfileDefaultTypeInternal _PreferencesRequest_Request_SetDefaultProfile_default_instance_;
constexpr PreferencesRequest_Request_GetDefaultProfile::PreferencesRequest_Request_GetDefaultProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PreferencesRequest_Request_GetDefaultProfileDefaultTypeInternal {
  constexpr PreferencesRequest_Request_GetDefaultProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesRequest_Request_GetDefaultProfileDefaultTypeInternal() {}
  union {
    PreferencesRequest_Request_GetDefaultProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesRequest_Request_GetDefaultProfileDefaultTypeInternal _PreferencesRequest_Request_GetDefaultProfile_default_instance_;
constexpr PreferencesRequest_Request::PreferencesRequest_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PreferencesRequest_RequestDefaultTypeInternal {
  constexpr PreferencesRequest_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesRequest_RequestDefaultTypeInternal() {}
  union {
    PreferencesRequest_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesRequest_RequestDefaultTypeInternal _PreferencesRequest_Request_default_instance_;
constexpr PreferencesRequest::PreferencesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct PreferencesRequestDefaultTypeInternal {
  constexpr PreferencesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesRequestDefaultTypeInternal() {}
  union {
    PreferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesRequestDefaultTypeInternal _PreferencesRequest_default_instance_;
constexpr PreferencesResponse_Result_SetPreferenceResult::PreferencesResponse_Result_SetPreferenceResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct PreferencesResponse_Result_SetPreferenceResultDefaultTypeInternal {
  constexpr PreferencesResponse_Result_SetPreferenceResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponse_Result_SetPreferenceResultDefaultTypeInternal() {}
  union {
    PreferencesResponse_Result_SetPreferenceResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponse_Result_SetPreferenceResultDefaultTypeInternal _PreferencesResponse_Result_SetPreferenceResult_default_instance_;
constexpr PreferencesResponse_Result_GetPreferenceResult::PreferencesResponse_Result_GetPreferenceResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PreferencesResponse_Result_GetPreferenceResultDefaultTypeInternal {
  constexpr PreferencesResponse_Result_GetPreferenceResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponse_Result_GetPreferenceResultDefaultTypeInternal() {}
  union {
    PreferencesResponse_Result_GetPreferenceResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponse_Result_GetPreferenceResultDefaultTypeInternal _PreferencesResponse_Result_GetPreferenceResult_default_instance_;
constexpr PreferencesResponse_Result_SetDefaultProfileResult::PreferencesResponse_Result_SetDefaultProfileResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct PreferencesResponse_Result_SetDefaultProfileResultDefaultTypeInternal {
  constexpr PreferencesResponse_Result_SetDefaultProfileResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponse_Result_SetDefaultProfileResultDefaultTypeInternal() {}
  union {
    PreferencesResponse_Result_SetDefaultProfileResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponse_Result_SetDefaultProfileResultDefaultTypeInternal _PreferencesResponse_Result_SetDefaultProfileResult_default_instance_;
constexpr PreferencesResponse_Result_UnrecognizedResult::PreferencesResponse_Result_UnrecognizedResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PreferencesResponse_Result_UnrecognizedResultDefaultTypeInternal {
  constexpr PreferencesResponse_Result_UnrecognizedResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponse_Result_UnrecognizedResultDefaultTypeInternal() {}
  union {
    PreferencesResponse_Result_UnrecognizedResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponse_Result_UnrecognizedResultDefaultTypeInternal _PreferencesResponse_Result_UnrecognizedResult_default_instance_;
constexpr PreferencesResponse_Result_GetDefaultProfileResult::PreferencesResponse_Result_GetDefaultProfileResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PreferencesResponse_Result_GetDefaultProfileResultDefaultTypeInternal {
  constexpr PreferencesResponse_Result_GetDefaultProfileResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponse_Result_GetDefaultProfileResultDefaultTypeInternal() {}
  union {
    PreferencesResponse_Result_GetDefaultProfileResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponse_Result_GetDefaultProfileResultDefaultTypeInternal _PreferencesResponse_Result_GetDefaultProfileResult_default_instance_;
constexpr PreferencesResponse_Result::PreferencesResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PreferencesResponse_ResultDefaultTypeInternal {
  constexpr PreferencesResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponse_ResultDefaultTypeInternal() {}
  union {
    PreferencesResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponse_ResultDefaultTypeInternal _PreferencesResponse_Result_default_instance_;
constexpr PreferencesResponse::PreferencesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct PreferencesResponseDefaultTypeInternal {
  constexpr PreferencesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreferencesResponseDefaultTypeInternal() {}
  union {
    PreferencesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreferencesResponseDefaultTypeInternal _PreferencesResponse_default_instance_;
constexpr ReorderTabsRequest_Assignment::ReorderTabsRequest_Assignment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tab_ids_()
  , window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReorderTabsRequest_AssignmentDefaultTypeInternal {
  constexpr ReorderTabsRequest_AssignmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderTabsRequest_AssignmentDefaultTypeInternal() {}
  union {
    ReorderTabsRequest_Assignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderTabsRequest_AssignmentDefaultTypeInternal _ReorderTabsRequest_Assignment_default_instance_;
constexpr ReorderTabsRequest::ReorderTabsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assignments_(){}
struct ReorderTabsRequestDefaultTypeInternal {
  constexpr ReorderTabsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderTabsRequestDefaultTypeInternal() {}
  union {
    ReorderTabsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderTabsRequestDefaultTypeInternal _ReorderTabsRequest_default_instance_;
constexpr ReorderTabsResponse::ReorderTabsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct ReorderTabsResponseDefaultTypeInternal {
  constexpr ReorderTabsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderTabsResponseDefaultTypeInternal() {}
  union {
    ReorderTabsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderTabsResponseDefaultTypeInternal _ReorderTabsResponse_default_instance_;
constexpr TmuxRequest_ListConnections::TmuxRequest_ListConnections(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TmuxRequest_ListConnectionsDefaultTypeInternal {
  constexpr TmuxRequest_ListConnectionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxRequest_ListConnectionsDefaultTypeInternal() {}
  union {
    TmuxRequest_ListConnections _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxRequest_ListConnectionsDefaultTypeInternal _TmuxRequest_ListConnections_default_instance_;
constexpr TmuxRequest_SendCommand::TmuxRequest_SendCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TmuxRequest_SendCommandDefaultTypeInternal {
  constexpr TmuxRequest_SendCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxRequest_SendCommandDefaultTypeInternal() {}
  union {
    TmuxRequest_SendCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxRequest_SendCommandDefaultTypeInternal _TmuxRequest_SendCommand_default_instance_;
constexpr TmuxRequest_SetWindowVisible::TmuxRequest_SetWindowVisible(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , visible_(false){}
struct TmuxRequest_SetWindowVisibleDefaultTypeInternal {
  constexpr TmuxRequest_SetWindowVisibleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxRequest_SetWindowVisibleDefaultTypeInternal() {}
  union {
    TmuxRequest_SetWindowVisible _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxRequest_SetWindowVisibleDefaultTypeInternal _TmuxRequest_SetWindowVisible_default_instance_;
constexpr TmuxRequest_CreateWindow::TmuxRequest_CreateWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , affinity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TmuxRequest_CreateWindowDefaultTypeInternal {
  constexpr TmuxRequest_CreateWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxRequest_CreateWindowDefaultTypeInternal() {}
  union {
    TmuxRequest_CreateWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxRequest_CreateWindowDefaultTypeInternal _TmuxRequest_CreateWindow_default_instance_;
constexpr TmuxRequest::TmuxRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TmuxRequestDefaultTypeInternal {
  constexpr TmuxRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxRequestDefaultTypeInternal() {}
  union {
    TmuxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxRequestDefaultTypeInternal _TmuxRequest_default_instance_;
constexpr TmuxResponse_ListConnections_Connection::TmuxResponse_ListConnections_Connection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owning_session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TmuxResponse_ListConnections_ConnectionDefaultTypeInternal {
  constexpr TmuxResponse_ListConnections_ConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxResponse_ListConnections_ConnectionDefaultTypeInternal() {}
  union {
    TmuxResponse_ListConnections_Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxResponse_ListConnections_ConnectionDefaultTypeInternal _TmuxResponse_ListConnections_Connection_default_instance_;
constexpr TmuxResponse_ListConnections::TmuxResponse_ListConnections(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connections_(){}
struct TmuxResponse_ListConnectionsDefaultTypeInternal {
  constexpr TmuxResponse_ListConnectionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxResponse_ListConnectionsDefaultTypeInternal() {}
  union {
    TmuxResponse_ListConnections _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxResponse_ListConnectionsDefaultTypeInternal _TmuxResponse_ListConnections_default_instance_;
constexpr TmuxResponse_SendCommand::TmuxResponse_SendCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TmuxResponse_SendCommandDefaultTypeInternal {
  constexpr TmuxResponse_SendCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxResponse_SendCommandDefaultTypeInternal() {}
  union {
    TmuxResponse_SendCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxResponse_SendCommandDefaultTypeInternal _TmuxResponse_SendCommand_default_instance_;
constexpr TmuxResponse_SetWindowVisible::TmuxResponse_SetWindowVisible(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TmuxResponse_SetWindowVisibleDefaultTypeInternal {
  constexpr TmuxResponse_SetWindowVisibleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxResponse_SetWindowVisibleDefaultTypeInternal() {}
  union {
    TmuxResponse_SetWindowVisible _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxResponse_SetWindowVisibleDefaultTypeInternal _TmuxResponse_SetWindowVisible_default_instance_;
constexpr TmuxResponse_CreateWindow::TmuxResponse_CreateWindow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tab_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TmuxResponse_CreateWindowDefaultTypeInternal {
  constexpr TmuxResponse_CreateWindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxResponse_CreateWindowDefaultTypeInternal() {}
  union {
    TmuxResponse_CreateWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxResponse_CreateWindowDefaultTypeInternal _TmuxResponse_CreateWindow_default_instance_;
constexpr TmuxResponse::TmuxResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , _oneof_case_{}{}
struct TmuxResponseDefaultTypeInternal {
  constexpr TmuxResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TmuxResponseDefaultTypeInternal() {}
  union {
    TmuxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TmuxResponseDefaultTypeInternal _TmuxResponse_default_instance_;
constexpr GetBroadcastDomainsRequest::GetBroadcastDomainsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBroadcastDomainsRequestDefaultTypeInternal {
  constexpr GetBroadcastDomainsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBroadcastDomainsRequestDefaultTypeInternal() {}
  union {
    GetBroadcastDomainsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBroadcastDomainsRequestDefaultTypeInternal _GetBroadcastDomainsRequest_default_instance_;
constexpr BroadcastDomain::BroadcastDomain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_ids_(){}
struct BroadcastDomainDefaultTypeInternal {
  constexpr BroadcastDomainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadcastDomainDefaultTypeInternal() {}
  union {
    BroadcastDomain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadcastDomainDefaultTypeInternal _BroadcastDomain_default_instance_;
constexpr GetBroadcastDomainsResponse::GetBroadcastDomainsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_domains_(){}
struct GetBroadcastDomainsResponseDefaultTypeInternal {
  constexpr GetBroadcastDomainsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBroadcastDomainsResponseDefaultTypeInternal() {}
  union {
    GetBroadcastDomainsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBroadcastDomainsResponseDefaultTypeInternal _GetBroadcastDomainsResponse_default_instance_;
constexpr SetTabLayoutRequest::SetTabLayoutRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tab_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , root_(nullptr){}
struct SetTabLayoutRequestDefaultTypeInternal {
  constexpr SetTabLayoutRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTabLayoutRequestDefaultTypeInternal() {}
  union {
    SetTabLayoutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTabLayoutRequestDefaultTypeInternal _SetTabLayoutRequest_default_instance_;
constexpr SetTabLayoutResponse::SetTabLayoutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SetTabLayoutResponseDefaultTypeInternal {
  constexpr SetTabLayoutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTabLayoutResponseDefaultTypeInternal() {}
  union {
    SetTabLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTabLayoutResponseDefaultTypeInternal _SetTabLayoutResponse_default_instance_;
constexpr MenuItemRequest::MenuItemRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_only_(false){}
struct MenuItemRequestDefaultTypeInternal {
  constexpr MenuItemRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MenuItemRequestDefaultTypeInternal() {}
  union {
    MenuItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MenuItemRequestDefaultTypeInternal _MenuItemRequest_default_instance_;
constexpr MenuItemResponse::MenuItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , checked_(false)
  , enabled_(false){}
struct MenuItemResponseDefaultTypeInternal {
  constexpr MenuItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MenuItemResponseDefaultTypeInternal() {}
  union {
    MenuItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MenuItemResponseDefaultTypeInternal _MenuItemResponse_default_instance_;
constexpr RestartSessionRequest::RestartSessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , only_if_exited_(false){}
struct RestartSessionRequestDefaultTypeInternal {
  constexpr RestartSessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestartSessionRequestDefaultTypeInternal() {}
  union {
    RestartSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestartSessionRequestDefaultTypeInternal _RestartSessionRequest_default_instance_;
constexpr RestartSessionResponse::RestartSessionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct RestartSessionResponseDefaultTypeInternal {
  constexpr RestartSessionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestartSessionResponseDefaultTypeInternal() {}
  union {
    RestartSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestartSessionResponseDefaultTypeInternal _RestartSessionResponse_default_instance_;
constexpr ServerOriginatedRPCResultRequest::ServerOriginatedRPCResultRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ServerOriginatedRPCResultRequestDefaultTypeInternal {
  constexpr ServerOriginatedRPCResultRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerOriginatedRPCResultRequestDefaultTypeInternal() {}
  union {
    ServerOriginatedRPCResultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerOriginatedRPCResultRequestDefaultTypeInternal _ServerOriginatedRPCResultRequest_default_instance_;
constexpr ServerOriginatedRPCResultResponse::ServerOriginatedRPCResultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerOriginatedRPCResultResponseDefaultTypeInternal {
  constexpr ServerOriginatedRPCResultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerOriginatedRPCResultResponseDefaultTypeInternal() {}
  union {
    ServerOriginatedRPCResultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerOriginatedRPCResultResponseDefaultTypeInternal _ServerOriginatedRPCResultResponse_default_instance_;
constexpr ListProfilesRequest::ListProfilesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_()
  , guids_(){}
struct ListProfilesRequestDefaultTypeInternal {
  constexpr ListProfilesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProfilesRequestDefaultTypeInternal() {}
  union {
    ListProfilesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProfilesRequestDefaultTypeInternal _ListProfilesRequest_default_instance_;
constexpr ListProfilesResponse_Profile::ListProfilesResponse_Profile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(){}
struct ListProfilesResponse_ProfileDefaultTypeInternal {
  constexpr ListProfilesResponse_ProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProfilesResponse_ProfileDefaultTypeInternal() {}
  union {
    ListProfilesResponse_Profile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProfilesResponse_ProfileDefaultTypeInternal _ListProfilesResponse_Profile_default_instance_;
constexpr ListProfilesResponse::ListProfilesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profiles_(){}
struct ListProfilesResponseDefaultTypeInternal {
  constexpr ListProfilesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProfilesResponseDefaultTypeInternal() {}
  union {
    ListProfilesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProfilesResponseDefaultTypeInternal _ListProfilesResponse_default_instance_;
constexpr FocusRequest::FocusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FocusRequestDefaultTypeInternal {
  constexpr FocusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FocusRequestDefaultTypeInternal() {}
  union {
    FocusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FocusRequestDefaultTypeInternal _FocusRequest_default_instance_;
constexpr FocusResponse::FocusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_(){}
struct FocusResponseDefaultTypeInternal {
  constexpr FocusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FocusResponseDefaultTypeInternal() {}
  union {
    FocusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FocusResponseDefaultTypeInternal _FocusResponse_default_instance_;
constexpr SavedArrangementRequest::SavedArrangementRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0)
{}
struct SavedArrangementRequestDefaultTypeInternal {
  constexpr SavedArrangementRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedArrangementRequestDefaultTypeInternal() {}
  union {
    SavedArrangementRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedArrangementRequestDefaultTypeInternal _SavedArrangementRequest_default_instance_;
constexpr SavedArrangementResponse::SavedArrangementResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_()
  , status_(0)
{}
struct SavedArrangementResponseDefaultTypeInternal {
  constexpr SavedArrangementResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedArrangementResponseDefaultTypeInternal() {}
  union {
    SavedArrangementResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedArrangementResponseDefaultTypeInternal _SavedArrangementResponse_default_instance_;
constexpr VariableRequest_Set::VariableRequest_Set(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VariableRequest_SetDefaultTypeInternal {
  constexpr VariableRequest_SetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableRequest_SetDefaultTypeInternal() {}
  union {
    VariableRequest_Set _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableRequest_SetDefaultTypeInternal _VariableRequest_Set_default_instance_;
constexpr VariableRequest::VariableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_()
  , get_()
  , _oneof_case_{}{}
struct VariableRequestDefaultTypeInternal {
  constexpr VariableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableRequestDefaultTypeInternal() {}
  union {
    VariableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableRequestDefaultTypeInternal _VariableRequest_default_instance_;
constexpr VariableResponse::VariableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , status_(0)
{}
struct VariableResponseDefaultTypeInternal {
  constexpr VariableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableResponseDefaultTypeInternal() {}
  union {
    VariableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableResponseDefaultTypeInternal _VariableResponse_default_instance_;
constexpr ActivateRequest_App::ActivateRequest_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raise_all_windows_(false)
  , ignoring_other_apps_(false){}
struct ActivateRequest_AppDefaultTypeInternal {
  constexpr ActivateRequest_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivateRequest_AppDefaultTypeInternal() {}
  union {
    ActivateRequest_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivateRequest_AppDefaultTypeInternal _ActivateRequest_App_default_instance_;
constexpr ActivateRequest::ActivateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activate_app_(nullptr)
  , order_window_front_(false)
  , select_tab_(false)
  , select_session_(false)
  , _oneof_case_{}{}
struct ActivateRequestDefaultTypeInternal {
  constexpr ActivateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivateRequestDefaultTypeInternal() {}
  union {
    ActivateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivateRequestDefaultTypeInternal _ActivateRequest_default_instance_;
constexpr ActivateResponse::ActivateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct ActivateResponseDefaultTypeInternal {
  constexpr ActivateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivateResponseDefaultTypeInternal() {}
  union {
    ActivateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivateResponseDefaultTypeInternal _ActivateResponse_default_instance_;
constexpr InjectRequest::InjectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InjectRequestDefaultTypeInternal {
  constexpr InjectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InjectRequestDefaultTypeInternal() {}
  union {
    InjectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InjectRequestDefaultTypeInternal _InjectRequest_default_instance_;
constexpr InjectResponse::InjectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(){}
struct InjectResponseDefaultTypeInternal {
  constexpr InjectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InjectResponseDefaultTypeInternal() {}
  union {
    InjectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InjectResponseDefaultTypeInternal _InjectResponse_default_instance_;
constexpr GetPropertyRequest::GetPropertyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct GetPropertyRequestDefaultTypeInternal {
  constexpr GetPropertyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPropertyRequestDefaultTypeInternal() {}
  union {
    GetPropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPropertyRequestDefaultTypeInternal _GetPropertyRequest_default_instance_;
constexpr GetPropertyResponse::GetPropertyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct GetPropertyResponseDefaultTypeInternal {
  constexpr GetPropertyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPropertyResponseDefaultTypeInternal() {}
  union {
    GetPropertyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPropertyResponseDefaultTypeInternal _GetPropertyResponse_default_instance_;
constexpr SetPropertyRequest::SetPropertyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct SetPropertyRequestDefaultTypeInternal {
  constexpr SetPropertyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPropertyRequestDefaultTypeInternal() {}
  union {
    SetPropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPropertyRequestDefaultTypeInternal _SetPropertyRequest_default_instance_;
constexpr SetPropertyResponse::SetPropertyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SetPropertyResponseDefaultTypeInternal {
  constexpr SetPropertyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPropertyResponseDefaultTypeInternal() {}
  union {
    SetPropertyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPropertyResponseDefaultTypeInternal _SetPropertyResponse_default_instance_;
constexpr RegisterToolRequest::RegisterToolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reveal_if_already_registered_(false)
  , tool_type_(1)
{}
struct RegisterToolRequestDefaultTypeInternal {
  constexpr RegisterToolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterToolRequestDefaultTypeInternal() {}
  union {
    RegisterToolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterToolRequestDefaultTypeInternal _RegisterToolRequest_default_instance_;
constexpr RPCRegistrationRequest_RPCArgumentSignature::RPCRegistrationRequest_RPCArgumentSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RPCRegistrationRequest_RPCArgumentSignatureDefaultTypeInternal {
  constexpr RPCRegistrationRequest_RPCArgumentSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_RPCArgumentSignatureDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_RPCArgumentSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_RPCArgumentSignatureDefaultTypeInternal _RPCRegistrationRequest_RPCArgumentSignature_default_instance_;
constexpr RPCRegistrationRequest_RPCArgument::RPCRegistrationRequest_RPCArgument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RPCRegistrationRequest_RPCArgumentDefaultTypeInternal {
  constexpr RPCRegistrationRequest_RPCArgumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_RPCArgumentDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_RPCArgument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_RPCArgumentDefaultTypeInternal _RPCRegistrationRequest_RPCArgument_default_instance_;
constexpr RPCRegistrationRequest_SessionTitleAttributes::RPCRegistrationRequest_SessionTitleAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RPCRegistrationRequest_SessionTitleAttributesDefaultTypeInternal {
  constexpr RPCRegistrationRequest_SessionTitleAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_SessionTitleAttributesDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_SessionTitleAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_SessionTitleAttributesDefaultTypeInternal _RPCRegistrationRequest_SessionTitleAttributes_default_instance_;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob::RPCRegistrationRequest_StatusBarComponentAttributes_Knob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , placeholder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_default_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(1)
{}
struct RPCRegistrationRequest_StatusBarComponentAttributes_KnobDefaultTypeInternal {
  constexpr RPCRegistrationRequest_StatusBarComponentAttributes_KnobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_StatusBarComponentAttributes_KnobDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_StatusBarComponentAttributes_KnobDefaultTypeInternal _RPCRegistrationRequest_StatusBarComponentAttributes_Knob_default_instance_;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Icon::RPCRegistrationRequest_StatusBarComponentAttributes_Icon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scale_(0){}
struct RPCRegistrationRequest_StatusBarComponentAttributes_IconDefaultTypeInternal {
  constexpr RPCRegistrationRequest_StatusBarComponentAttributes_IconDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_StatusBarComponentAttributes_IconDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_StatusBarComponentAttributes_Icon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_StatusBarComponentAttributes_IconDefaultTypeInternal _RPCRegistrationRequest_StatusBarComponentAttributes_Icon_default_instance_;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes::RPCRegistrationRequest_StatusBarComponentAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : knobs_()
  , icons_()
  , short_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detailed_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exemplar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_cadence_(0)
  , format_(0)
{}
struct RPCRegistrationRequest_StatusBarComponentAttributesDefaultTypeInternal {
  constexpr RPCRegistrationRequest_StatusBarComponentAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_StatusBarComponentAttributesDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_StatusBarComponentAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_StatusBarComponentAttributesDefaultTypeInternal _RPCRegistrationRequest_StatusBarComponentAttributes_default_instance_;
constexpr RPCRegistrationRequest_ContextMenuAttributes::RPCRegistrationRequest_ContextMenuAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RPCRegistrationRequest_ContextMenuAttributesDefaultTypeInternal {
  constexpr RPCRegistrationRequest_ContextMenuAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequest_ContextMenuAttributesDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest_ContextMenuAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequest_ContextMenuAttributesDefaultTypeInternal _RPCRegistrationRequest_ContextMenuAttributes_default_instance_;
constexpr RPCRegistrationRequest::RPCRegistrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , defaults_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeout_(0)
  , role_(1)

  , _oneof_case_{}{}
struct RPCRegistrationRequestDefaultTypeInternal {
  constexpr RPCRegistrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCRegistrationRequestDefaultTypeInternal() {}
  union {
    RPCRegistrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCRegistrationRequestDefaultTypeInternal _RPCRegistrationRequest_default_instance_;
constexpr RegisterToolResponse::RegisterToolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct RegisterToolResponseDefaultTypeInternal {
  constexpr RegisterToolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterToolResponseDefaultTypeInternal() {}
  union {
    RegisterToolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterToolResponseDefaultTypeInternal _RegisterToolResponse_default_instance_;
constexpr KeystrokePattern::KeystrokePattern(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_modifiers_()
  , forbidden_modifiers_()
  , keycodes_()
  , characters_()
  , characters_ignoring_modifiers_(){}
struct KeystrokePatternDefaultTypeInternal {
  constexpr KeystrokePatternDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeystrokePatternDefaultTypeInternal() {}
  union {
    KeystrokePattern _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeystrokePatternDefaultTypeInternal _KeystrokePattern_default_instance_;
constexpr KeystrokeMonitorRequest::KeystrokeMonitorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : patterns_to_ignore_()
  , advanced_(false){}
struct KeystrokeMonitorRequestDefaultTypeInternal {
  constexpr KeystrokeMonitorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeystrokeMonitorRequestDefaultTypeInternal() {}
  union {
    KeystrokeMonitorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeystrokeMonitorRequestDefaultTypeInternal _KeystrokeMonitorRequest_default_instance_;
constexpr KeystrokeFilterRequest::KeystrokeFilterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : patterns_to_ignore_(){}
struct KeystrokeFilterRequestDefaultTypeInternal {
  constexpr KeystrokeFilterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeystrokeFilterRequestDefaultTypeInternal() {}
  union {
    KeystrokeFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeystrokeFilterRequestDefaultTypeInternal _KeystrokeFilterRequest_default_instance_;
constexpr VariableMonitorRequest::VariableMonitorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scope_(1)
{}
struct VariableMonitorRequestDefaultTypeInternal {
  constexpr VariableMonitorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableMonitorRequestDefaultTypeInternal() {}
  union {
    VariableMonitorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableMonitorRequestDefaultTypeInternal _VariableMonitorRequest_default_instance_;
constexpr ProfileChangeRequest::ProfileChangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProfileChangeRequestDefaultTypeInternal {
  constexpr ProfileChangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileChangeRequestDefaultTypeInternal() {}
  union {
    ProfileChangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileChangeRequestDefaultTypeInternal _ProfileChangeRequest_default_instance_;
constexpr PromptMonitorRequest::PromptMonitorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modes_(){}
struct PromptMonitorRequestDefaultTypeInternal {
  constexpr PromptMonitorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PromptMonitorRequestDefaultTypeInternal() {}
  union {
    PromptMonitorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PromptMonitorRequestDefaultTypeInternal _PromptMonitorRequest_default_instance_;
constexpr NotificationRequest::NotificationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subscribe_(false)
  , notification_type_(1)

  , _oneof_case_{}{}
struct NotificationRequestDefaultTypeInternal {
  constexpr NotificationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotificationRequestDefaultTypeInternal() {}
  union {
    NotificationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotificationRequestDefaultTypeInternal _NotificationRequest_default_instance_;
constexpr NotificationResponse::NotificationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct NotificationResponseDefaultTypeInternal {
  constexpr NotificationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotificationResponseDefaultTypeInternal() {}
  union {
    NotificationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotificationResponseDefaultTypeInternal _NotificationResponse_default_instance_;
constexpr Notification::Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keystroke_notification_(nullptr)
  , screen_update_notification_(nullptr)
  , prompt_notification_(nullptr)
  , location_change_notification_(nullptr)
  , custom_escape_sequence_notification_(nullptr)
  , new_session_notification_(nullptr)
  , terminate_session_notification_(nullptr)
  , layout_changed_notification_(nullptr)
  , focus_changed_notification_(nullptr)
  , server_originated_rpc_notification_(nullptr)
  , broadcast_domains_changed_(nullptr)
  , variable_changed_notification_(nullptr)
  , profile_changed_notification_(nullptr){}
struct NotificationDefaultTypeInternal {
  constexpr NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotificationDefaultTypeInternal _Notification_default_instance_;
constexpr ProfileChangedNotification::ProfileChangedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProfileChangedNotificationDefaultTypeInternal {
  constexpr ProfileChangedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileChangedNotificationDefaultTypeInternal() {}
  union {
    ProfileChangedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileChangedNotificationDefaultTypeInternal _ProfileChangedNotification_default_instance_;
constexpr VariableChangedNotification::VariableChangedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_new_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scope_(1)
{}
struct VariableChangedNotificationDefaultTypeInternal {
  constexpr VariableChangedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableChangedNotificationDefaultTypeInternal() {}
  union {
    VariableChangedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableChangedNotificationDefaultTypeInternal _VariableChangedNotification_default_instance_;
constexpr BroadcastDomainsChangedNotification::BroadcastDomainsChangedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_domains_(){}
struct BroadcastDomainsChangedNotificationDefaultTypeInternal {
  constexpr BroadcastDomainsChangedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadcastDomainsChangedNotificationDefaultTypeInternal() {}
  union {
    BroadcastDomainsChangedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadcastDomainsChangedNotificationDefaultTypeInternal _BroadcastDomainsChangedNotification_default_instance_;
constexpr ServerOriginatedRPC_RPCArgument::ServerOriginatedRPC_RPCArgument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServerOriginatedRPC_RPCArgumentDefaultTypeInternal {
  constexpr ServerOriginatedRPC_RPCArgumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerOriginatedRPC_RPCArgumentDefaultTypeInternal() {}
  union {
    ServerOriginatedRPC_RPCArgument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerOriginatedRPC_RPCArgumentDefaultTypeInternal _ServerOriginatedRPC_RPCArgument_default_instance_;
constexpr ServerOriginatedRPC::ServerOriginatedRPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServerOriginatedRPCDefaultTypeInternal {
  constexpr ServerOriginatedRPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerOriginatedRPCDefaultTypeInternal() {}
  union {
    ServerOriginatedRPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerOriginatedRPCDefaultTypeInternal _ServerOriginatedRPC_default_instance_;
constexpr ServerOriginatedRPCNotification::ServerOriginatedRPCNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rpc_(nullptr){}
struct ServerOriginatedRPCNotificationDefaultTypeInternal {
  constexpr ServerOriginatedRPCNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerOriginatedRPCNotificationDefaultTypeInternal() {}
  union {
    ServerOriginatedRPCNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerOriginatedRPCNotificationDefaultTypeInternal _ServerOriginatedRPCNotification_default_instance_;
constexpr KeystrokeNotification::KeystrokeNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modifiers_()
  , characters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , charactersignoringmodifiers_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keycode_(0)
  , action_(0)
{}
struct KeystrokeNotificationDefaultTypeInternal {
  constexpr KeystrokeNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeystrokeNotificationDefaultTypeInternal() {}
  union {
    KeystrokeNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeystrokeNotificationDefaultTypeInternal _KeystrokeNotification_default_instance_;
constexpr ScreenUpdateNotification::ScreenUpdateNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ScreenUpdateNotificationDefaultTypeInternal {
  constexpr ScreenUpdateNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScreenUpdateNotificationDefaultTypeInternal() {}
  union {
    ScreenUpdateNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScreenUpdateNotificationDefaultTypeInternal _ScreenUpdateNotification_default_instance_;
constexpr PromptNotificationPrompt::PromptNotificationPrompt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placeholder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prompt_(nullptr){}
struct PromptNotificationPromptDefaultTypeInternal {
  constexpr PromptNotificationPromptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PromptNotificationPromptDefaultTypeInternal() {}
  union {
    PromptNotificationPrompt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PromptNotificationPromptDefaultTypeInternal _PromptNotificationPrompt_default_instance_;
constexpr PromptNotificationCommandStart::PromptNotificationCommandStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PromptNotificationCommandStartDefaultTypeInternal {
  constexpr PromptNotificationCommandStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PromptNotificationCommandStartDefaultTypeInternal() {}
  union {
    PromptNotificationCommandStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PromptNotificationCommandStartDefaultTypeInternal _PromptNotificationCommandStart_default_instance_;
constexpr PromptNotificationCommandEnd::PromptNotificationCommandEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0){}
struct PromptNotificationCommandEndDefaultTypeInternal {
  constexpr PromptNotificationCommandEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PromptNotificationCommandEndDefaultTypeInternal() {}
  union {
    PromptNotificationCommandEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PromptNotificationCommandEndDefaultTypeInternal _PromptNotificationCommandEnd_default_instance_;
constexpr PromptNotification::PromptNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_prompt_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct PromptNotificationDefaultTypeInternal {
  constexpr PromptNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PromptNotificationDefaultTypeInternal() {}
  union {
    PromptNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PromptNotificationDefaultTypeInternal _PromptNotification_default_instance_;
constexpr LocationChangeNotification::LocationChangeNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocationChangeNotificationDefaultTypeInternal {
  constexpr LocationChangeNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationChangeNotificationDefaultTypeInternal() {}
  union {
    LocationChangeNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationChangeNotificationDefaultTypeInternal _LocationChangeNotification_default_instance_;
constexpr CustomEscapeSequenceNotification::CustomEscapeSequenceNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_identity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CustomEscapeSequenceNotificationDefaultTypeInternal {
  constexpr CustomEscapeSequenceNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomEscapeSequenceNotificationDefaultTypeInternal() {}
  union {
    CustomEscapeSequenceNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomEscapeSequenceNotificationDefaultTypeInternal _CustomEscapeSequenceNotification_default_instance_;
constexpr NewSessionNotification::NewSessionNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NewSessionNotificationDefaultTypeInternal {
  constexpr NewSessionNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewSessionNotificationDefaultTypeInternal() {}
  union {
    NewSessionNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewSessionNotificationDefaultTypeInternal _NewSessionNotification_default_instance_;
constexpr FocusChangedNotification_Window::FocusChangedNotification_Window(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_status_(0)
{}
struct FocusChangedNotification_WindowDefaultTypeInternal {
  constexpr FocusChangedNotification_WindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FocusChangedNotification_WindowDefaultTypeInternal() {}
  union {
    FocusChangedNotification_Window _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FocusChangedNotification_WindowDefaultTypeInternal _FocusChangedNotification_Window_default_instance_;
constexpr FocusChangedNotification::FocusChangedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct FocusChangedNotificationDefaultTypeInternal {
  constexpr FocusChangedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FocusChangedNotificationDefaultTypeInternal() {}
  union {
    FocusChangedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FocusChangedNotificationDefaultTypeInternal _FocusChangedNotification_default_instance_;
constexpr TerminateSessionNotification::TerminateSessionNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TerminateSessionNotificationDefaultTypeInternal {
  constexpr TerminateSessionNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TerminateSessionNotificationDefaultTypeInternal() {}
  union {
    TerminateSessionNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TerminateSessionNotificationDefaultTypeInternal _TerminateSessionNotification_default_instance_;
constexpr LayoutChangedNotification::LayoutChangedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_sessions_response_(nullptr){}
struct LayoutChangedNotificationDefaultTypeInternal {
  constexpr LayoutChangedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayoutChangedNotificationDefaultTypeInternal() {}
  union {
    LayoutChangedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayoutChangedNotificationDefaultTypeInternal _LayoutChangedNotification_default_instance_;
constexpr GetBufferRequest::GetBufferRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_range_(nullptr){}
struct GetBufferRequestDefaultTypeInternal {
  constexpr GetBufferRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBufferRequestDefaultTypeInternal() {}
  union {
    GetBufferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBufferRequestDefaultTypeInternal _GetBufferRequest_default_instance_;
constexpr GetBufferResponse::GetBufferResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_()
  , range_(nullptr)
  , cursor_(nullptr)
  , windowed_coord_range_(nullptr)
  , num_lines_above_screen_(int64_t{0})
  , status_(0)
{}
struct GetBufferResponseDefaultTypeInternal {
  constexpr GetBufferResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBufferResponseDefaultTypeInternal() {}
  union {
    GetBufferResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBufferResponseDefaultTypeInternal _GetBufferResponse_default_instance_;
constexpr GetPromptRequest::GetPromptRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_prompt_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetPromptRequestDefaultTypeInternal {
  constexpr GetPromptRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPromptRequestDefaultTypeInternal() {}
  union {
    GetPromptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPromptRequestDefaultTypeInternal _GetPromptRequest_default_instance_;
constexpr GetPromptResponse::GetPromptResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : working_directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_prompt_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prompt_range_(nullptr)
  , command_range_(nullptr)
  , output_range_(nullptr)
  , status_(0)

  , prompt_state_(0)

  , exit_status_(0u){}
struct GetPromptResponseDefaultTypeInternal {
  constexpr GetPromptResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPromptResponseDefaultTypeInternal() {}
  union {
    GetPromptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPromptResponseDefaultTypeInternal _GetPromptResponse_default_instance_;
constexpr ListPromptsRequest::ListPromptsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_unique_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_unique_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListPromptsRequestDefaultTypeInternal {
  constexpr ListPromptsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPromptsRequestDefaultTypeInternal() {}
  union {
    ListPromptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPromptsRequestDefaultTypeInternal _ListPromptsRequest_default_instance_;
constexpr ListPromptsResponse::ListPromptsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_prompt_id_()
  , status_(0)
{}
struct ListPromptsResponseDefaultTypeInternal {
  constexpr ListPromptsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPromptsResponseDefaultTypeInternal() {}
  union {
    ListPromptsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPromptsResponseDefaultTypeInternal _ListPromptsResponse_default_instance_;
constexpr GetProfilePropertyRequest::GetProfilePropertyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetProfilePropertyRequestDefaultTypeInternal {
  constexpr GetProfilePropertyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProfilePropertyRequestDefaultTypeInternal() {}
  union {
    GetProfilePropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProfilePropertyRequestDefaultTypeInternal _GetProfilePropertyRequest_default_instance_;
constexpr ProfileProperty::ProfileProperty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProfilePropertyDefaultTypeInternal {
  constexpr ProfilePropertyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfilePropertyDefaultTypeInternal() {}
  union {
    ProfileProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfilePropertyDefaultTypeInternal _ProfileProperty_default_instance_;
constexpr GetProfilePropertyResponse::GetProfilePropertyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_()
  , status_(0)
{}
struct GetProfilePropertyResponseDefaultTypeInternal {
  constexpr GetProfilePropertyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProfilePropertyResponseDefaultTypeInternal() {}
  union {
    GetProfilePropertyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProfilePropertyResponseDefaultTypeInternal _GetProfilePropertyResponse_default_instance_;
constexpr SetProfilePropertyRequest_GuidList::SetProfilePropertyRequest_GuidList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guids_(){}
struct SetProfilePropertyRequest_GuidListDefaultTypeInternal {
  constexpr SetProfilePropertyRequest_GuidListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetProfilePropertyRequest_GuidListDefaultTypeInternal() {}
  union {
    SetProfilePropertyRequest_GuidList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetProfilePropertyRequest_GuidListDefaultTypeInternal _SetProfilePropertyRequest_GuidList_default_instance_;
constexpr SetProfilePropertyRequest_Assignment::SetProfilePropertyRequest_Assignment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetProfilePropertyRequest_AssignmentDefaultTypeInternal {
  constexpr SetProfilePropertyRequest_AssignmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetProfilePropertyRequest_AssignmentDefaultTypeInternal() {}
  union {
    SetProfilePropertyRequest_Assignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetProfilePropertyRequest_AssignmentDefaultTypeInternal _SetProfilePropertyRequest_Assignment_default_instance_;
constexpr SetProfilePropertyRequest::SetProfilePropertyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assignments_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct SetProfilePropertyRequestDefaultTypeInternal {
  constexpr SetProfilePropertyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetProfilePropertyRequestDefaultTypeInternal() {}
  union {
    SetProfilePropertyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetProfilePropertyRequestDefaultTypeInternal _SetProfilePropertyRequest_default_instance_;
constexpr SetProfilePropertyResponse::SetProfilePropertyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SetProfilePropertyResponseDefaultTypeInternal {
  constexpr SetProfilePropertyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetProfilePropertyResponseDefaultTypeInternal() {}
  union {
    SetProfilePropertyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetProfilePropertyResponseDefaultTypeInternal _SetProfilePropertyResponse_default_instance_;
constexpr TransactionRequest::TransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_(false){}
struct TransactionRequestDefaultTypeInternal {
  constexpr TransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionRequestDefaultTypeInternal() {}
  union {
    TransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionRequestDefaultTypeInternal _TransactionRequest_default_instance_;
constexpr TransactionResponse::TransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct TransactionResponseDefaultTypeInternal {
  constexpr TransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResponseDefaultTypeInternal() {}
  union {
    TransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
constexpr LineRange::LineRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : windowed_coord_range_(nullptr)
  , screen_contents_only_(false)
  , trailing_lines_(0){}
struct LineRangeDefaultTypeInternal {
  constexpr LineRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineRangeDefaultTypeInternal() {}
  union {
    LineRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineRangeDefaultTypeInternal _LineRange_default_instance_;
constexpr Range::Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(int64_t{0})
  , length_(int64_t{0}){}
struct RangeDefaultTypeInternal {
  constexpr RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDefaultTypeInternal _Range_default_instance_;
constexpr CoordRange::CoordRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct CoordRangeDefaultTypeInternal {
  constexpr CoordRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordRangeDefaultTypeInternal() {}
  union {
    CoordRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordRangeDefaultTypeInternal _CoordRange_default_instance_;
constexpr Coord::Coord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : y_(int64_t{0})
  , x_(0){}
struct CoordDefaultTypeInternal {
  constexpr CoordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordDefaultTypeInternal() {}
  union {
    Coord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordDefaultTypeInternal _Coord_default_instance_;
constexpr LineContents::LineContents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_points_per_cell_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , continuation_(1)
{}
struct LineContentsDefaultTypeInternal {
  constexpr LineContentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineContentsDefaultTypeInternal() {}
  union {
    LineContents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineContentsDefaultTypeInternal _LineContents_default_instance_;
constexpr CodePointsPerCell::CodePointsPerCell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repeats_(0)
  , num_code_points_(1){}
struct CodePointsPerCellDefaultTypeInternal {
  constexpr CodePointsPerCellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CodePointsPerCellDefaultTypeInternal() {}
  union {
    CodePointsPerCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CodePointsPerCellDefaultTypeInternal _CodePointsPerCell_default_instance_;
constexpr ListSessionsRequest::ListSessionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListSessionsRequestDefaultTypeInternal {
  constexpr ListSessionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSessionsRequestDefaultTypeInternal() {}
  union {
    ListSessionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSessionsRequestDefaultTypeInternal _ListSessionsRequest_default_instance_;
constexpr SendTextRequest::SendTextRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suppress_broadcast_(false){}
struct SendTextRequestDefaultTypeInternal {
  constexpr SendTextRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTextRequestDefaultTypeInternal() {}
  union {
    SendTextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTextRequestDefaultTypeInternal _SendTextRequest_default_instance_;
constexpr SendTextResponse::SendTextResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SendTextResponseDefaultTypeInternal {
  constexpr SendTextResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTextResponseDefaultTypeInternal() {}
  union {
    SendTextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTextResponseDefaultTypeInternal _SendTextResponse_default_instance_;
constexpr Size::Size(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct SizeDefaultTypeInternal {
  constexpr SizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SizeDefaultTypeInternal _Size_default_instance_;
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Frame::Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , size_(nullptr){}
struct FrameDefaultTypeInternal {
  constexpr FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameDefaultTypeInternal _Frame_default_instance_;
constexpr SessionSummary::SessionSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_(nullptr)
  , grid_size_(nullptr){}
struct SessionSummaryDefaultTypeInternal {
  constexpr SessionSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionSummaryDefaultTypeInternal() {}
  union {
    SessionSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionSummaryDefaultTypeInternal _SessionSummary_default_instance_;
constexpr SplitTreeNode_SplitTreeLink::SplitTreeNode_SplitTreeLink(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SplitTreeNode_SplitTreeLinkDefaultTypeInternal {
  constexpr SplitTreeNode_SplitTreeLinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SplitTreeNode_SplitTreeLinkDefaultTypeInternal() {}
  union {
    SplitTreeNode_SplitTreeLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SplitTreeNode_SplitTreeLinkDefaultTypeInternal _SplitTreeNode_SplitTreeLink_default_instance_;
constexpr SplitTreeNode::SplitTreeNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : links_()
  , vertical_(false){}
struct SplitTreeNodeDefaultTypeInternal {
  constexpr SplitTreeNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SplitTreeNodeDefaultTypeInternal() {}
  union {
    SplitTreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SplitTreeNodeDefaultTypeInternal _SplitTreeNode_default_instance_;
constexpr ListSessionsResponse_Window::ListSessionsResponse_Window(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tabs_()
  , window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_(nullptr)
  , number_(0){}
struct ListSessionsResponse_WindowDefaultTypeInternal {
  constexpr ListSessionsResponse_WindowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSessionsResponse_WindowDefaultTypeInternal() {}
  union {
    ListSessionsResponse_Window _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSessionsResponse_WindowDefaultTypeInternal _ListSessionsResponse_Window_default_instance_;
constexpr ListSessionsResponse_Tab::ListSessionsResponse_Tab(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minimized_sessions_()
  , tab_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tmux_window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tmux_connection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , root_(nullptr){}
struct ListSessionsResponse_TabDefaultTypeInternal {
  constexpr ListSessionsResponse_TabDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSessionsResponse_TabDefaultTypeInternal() {}
  union {
    ListSessionsResponse_Tab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSessionsResponse_TabDefaultTypeInternal _ListSessionsResponse_Tab_default_instance_;
constexpr ListSessionsResponse::ListSessionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : windows_()
  , buried_sessions_(){}
struct ListSessionsResponseDefaultTypeInternal {
  constexpr ListSessionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSessionsResponseDefaultTypeInternal() {}
  union {
    ListSessionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSessionsResponseDefaultTypeInternal _ListSessionsResponse_default_instance_;
constexpr CreateTabRequest::CreateTabRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_profile_properties_()
  , profile_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tab_index_(0u){}
struct CreateTabRequestDefaultTypeInternal {
  constexpr CreateTabRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTabRequestDefaultTypeInternal() {}
  union {
    CreateTabRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTabRequestDefaultTypeInternal _CreateTabRequest_default_instance_;
constexpr CreateTabResponse::CreateTabResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : window_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , tab_id_(0){}
struct CreateTabResponseDefaultTypeInternal {
  constexpr CreateTabResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTabResponseDefaultTypeInternal() {}
  union {
    CreateTabResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTabResponseDefaultTypeInternal _CreateTabResponse_default_instance_;
constexpr SplitPaneRequest::SplitPaneRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_profile_properties_()
  , session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , profile_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , split_direction_(0)

  , before_(false){}
struct SplitPaneRequestDefaultTypeInternal {
  constexpr SplitPaneRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SplitPaneRequestDefaultTypeInternal() {}
  union {
    SplitPaneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SplitPaneRequestDefaultTypeInternal _SplitPaneRequest_default_instance_;
constexpr SplitPaneResponse::SplitPaneResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_()
  , status_(0)
{}
struct SplitPaneResponseDefaultTypeInternal {
  constexpr SplitPaneResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SplitPaneResponseDefaultTypeInternal() {}
  union {
    SplitPaneResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SplitPaneResponseDefaultTypeInternal _SplitPaneResponse_default_instance_;
}  // namespace iterm2
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_iterm_2dapi_2epb[169];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_iterm_2dapi_2epb[45];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_iterm_2dapi_2epb = nullptr;

const uint32_t TableStruct_iterm_2dapi_2epb::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::iterm2::ClientOriginatedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ClientOriginatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::ClientOriginatedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ClientOriginatedMessage, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::ClientOriginatedMessage, submessage_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedMessage, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedMessage, submessage_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Tab, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Tab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Tab, tab_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Session, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Session, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Window, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Window, window_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Method, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Method, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest_Method, receiver_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest, invocation_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest, timeout_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionRequest, context_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Error, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Error, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Error, error_reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Success, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse_Success, json_result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::InvokeFunctionResponse, disposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest_CloseTabs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest_CloseTabs, tab_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest_CloseSessions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest_CloseSessions, session_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest_CloseWindows, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest_CloseWindows, window_ids_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest, force_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseRequest, target_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CloseResponse, statuses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetBroadcastDomainsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetBroadcastDomainsRequest, broadcast_domains_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetBroadcastDomainsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetBroadcastDomainsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetBroadcastDomainsResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest_OpenPopover, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest_OpenPopover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest_OpenPopover, session_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest_OpenPopover, html_),
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest_OpenPopover, size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest, identifier_),
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentRequest, request_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::StatusBarComponentResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::WindowedCoordRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::WindowedCoordRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::WindowedCoordRange, coord_range_),
  PROTOBUF_FIELD_OFFSET(::iterm2::WindowedCoordRange, columns_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::SubSelection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SubSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SubSelection, windowed_coord_range_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SubSelection, selection_mode_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SubSelection, connected_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::Selection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Selection, sub_selections_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_GetSelectionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_GetSelectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_GetSelectionRequest, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_SetSelectionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_SetSelectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_SetSelectionRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest_SetSelectionRequest, selection_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionRequest, request_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse_GetSelectionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse_GetSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse_GetSelectionResponse, selection_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse_SetSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::SelectionResponse, response_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest_ListPresets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest_GetPreset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest_GetPreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest_GetPreset, name_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_ListPresets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_ListPresets, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, red_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, green_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, blue_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, alpha_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, color_space_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset_ColorSetting, key_),
  2,
  3,
  4,
  5,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse_GetPreset, color_settings_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ColorPresetResponse, response_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetPreference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetPreference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetPreference, key_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetPreference, json_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_GetPreference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_GetPreference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_GetPreference, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetDefaultProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetDefaultProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_SetDefaultProfile, guid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request_GetDefaultProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest_Request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesRequest, requests_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_SetPreferenceResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_SetPreferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_SetPreferenceResult, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_GetPreferenceResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_GetPreferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_GetPreferenceResult, json_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult, status_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_UnrecognizedResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult, guid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse_Result, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PreferencesResponse, results_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsRequest_Assignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsRequest_Assignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsRequest_Assignment, window_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsRequest_Assignment, tab_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsRequest, assignments_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ReorderTabsResponse, status_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_ListConnections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SendCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SendCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SendCommand, connection_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SendCommand, command_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SetWindowVisible, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SetWindowVisible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SetWindowVisible, connection_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SetWindowVisible, window_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_SetWindowVisible, visible_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_CreateWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_CreateWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_CreateWindow, connection_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest_CreateWindow, affinity_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxRequest, payload_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_ListConnections_Connection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_ListConnections_Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_ListConnections_Connection, connection_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_ListConnections_Connection, owning_session_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_ListConnections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_ListConnections, connections_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_SendCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_SendCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_SendCommand, output_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_SetWindowVisible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_CreateWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_CreateWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse_CreateWindow, tab_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TmuxResponse, payload_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBroadcastDomainsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::BroadcastDomain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::BroadcastDomain, session_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBroadcastDomainsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBroadcastDomainsResponse, broadcast_domains_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutRequest, root_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutRequest, tab_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetTabLayoutResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemRequest, identifier_),
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemRequest, query_only_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemResponse, checked_),
  PROTOBUF_FIELD_OFFSET(::iterm2::MenuItemResponse, enabled_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionRequest, only_if_exited_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RestartSessionResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCResultRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCResultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCResultRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCResultRequest, request_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCResultRequest, result_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesRequest, properties_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesRequest, guids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesResponse_Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesResponse_Profile, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListProfilesResponse, profiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusResponse, notifications_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementRequest, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementRequest, action_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementRequest, window_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SavedArrangementResponse, names_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest_Set, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest_Set, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest_Set, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest_Set, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest, set_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest, get_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableResponse, values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest_App, raise_all_windows_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest_App, ignoring_other_apps_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, order_window_front_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, select_tab_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, select_session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, activate_app_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateRequest, identifier_),
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ActivateResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::InjectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InjectRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::InjectRequest, data_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::InjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::InjectResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyRequest, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyRequest, identifier_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPropertyResponse, json_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyRequest, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyRequest, json_value_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyRequest, identifier_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetPropertyResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, identifier_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, reveal_if_already_registered_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, tool_type_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolRequest, url_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgumentSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgumentSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgumentSignature, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgument, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_RPCArgument, path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_SessionTitleAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_SessionTitleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_SessionTitleAttributes, display_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_SessionTitleAttributes, unique_identifier_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, type_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, placeholder_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, json_default_value_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob, key_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon, data_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon, scale_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, short_description_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, detailed_description_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, knobs_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, exemplar_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, update_cadence_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, icons_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes, format_),
  0,
  1,
  ~0u,
  2,
  4,
  3,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_ContextMenuAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_ContextMenuAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_ContextMenuAttributes, display_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest_ContextMenuAttributes, unique_identifier_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, arguments_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, defaults_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, timeout_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, role_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, display_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RPCRegistrationRequest, RoleSpecificAttributes_),
  0,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::RegisterToolResponse, status_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokePattern, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokePattern, required_modifiers_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokePattern, forbidden_modifiers_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokePattern, keycodes_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokePattern, characters_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokePattern, characters_ignoring_modifiers_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeMonitorRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeMonitorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeMonitorRequest, patterns_to_ignore_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeMonitorRequest, advanced_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeFilterRequest, patterns_to_ignore_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableMonitorRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableMonitorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableMonitorRequest, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableMonitorRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableMonitorRequest, identifier_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileChangeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileChangeRequest, guid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptMonitorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptMonitorRequest, modes_),
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, subscribe_),
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, notification_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationRequest, arguments_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::NotificationResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, keystroke_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, screen_update_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, prompt_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, location_change_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, custom_escape_sequence_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, new_session_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, terminate_session_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, layout_changed_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, focus_changed_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, server_originated_rpc_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, broadcast_domains_changed_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, variable_changed_notification_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Notification, profile_changed_notification_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileChangedNotification, guid_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableChangedNotification, scope_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableChangedNotification, identifier_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableChangedNotification, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::VariableChangedNotification, json_new_value_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::BroadcastDomainsChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::BroadcastDomainsChangedNotification, broadcast_domains_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC_RPCArgument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC_RPCArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC_RPCArgument, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC_RPCArgument, json_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC, name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPC, arguments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCNotification, request_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ServerOriginatedRPCNotification, rpc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, characters_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, charactersignoringmodifiers_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, modifiers_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, keycode_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::KeystrokeNotification, action_),
  0,
  1,
  ~0u,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::iterm2::ScreenUpdateNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ScreenUpdateNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ScreenUpdateNotification, session_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationPrompt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationPrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationPrompt, placeholder_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationPrompt, prompt_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationCommandStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationCommandStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationCommandStart, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationCommandEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationCommandEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotificationCommandEnd, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotification, session_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotification, unique_prompt_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::PromptNotification, event_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::LocationChangeNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LocationChangeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::LocationChangeNotification, host_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LocationChangeNotification, user_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LocationChangeNotification, directory_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LocationChangeNotification, session_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::iterm2::CustomEscapeSequenceNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CustomEscapeSequenceNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CustomEscapeSequenceNotification, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CustomEscapeSequenceNotification, sender_identity_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CustomEscapeSequenceNotification, payload_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::NewSessionNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::NewSessionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::NewSessionNotification, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification_Window, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification_Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification_Window, window_status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification_Window, window_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::FocusChangedNotification, event_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TerminateSessionNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TerminateSessionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TerminateSessionNotification, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::LayoutChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LayoutChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::LayoutChangedNotification, list_sessions_response_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferRequest, line_range_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, range_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, contents_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, cursor_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, num_lines_above_screen_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetBufferResponse, windowed_coord_range_),
  4,
  0,
  ~0u,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptRequest, unique_prompt_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, prompt_range_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, command_range_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, output_range_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, working_directory_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, command_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, prompt_state_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, exit_status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetPromptResponse, unique_prompt_id_),
  6,
  3,
  4,
  5,
  0,
  1,
  7,
  8,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsRequest, first_unique_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsRequest, last_unique_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListPromptsResponse, unique_prompt_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyRequest, keys_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileProperty, key_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ProfileProperty, json_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::GetProfilePropertyResponse, properties_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest_GuidList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest_GuidList, guids_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest_Assignment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest_Assignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest_Assignment, key_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest_Assignment, json_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, key_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, json_value_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, assignments_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyRequest, target_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SetProfilePropertyResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::TransactionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TransactionRequest, begin_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::TransactionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::TransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::TransactionResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::LineRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LineRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::LineRange, screen_contents_only_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LineRange, trailing_lines_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LineRange, windowed_coord_range_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::Range, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Range, location_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Range, length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::CoordRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CoordRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CoordRange, start_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CoordRange, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::Coord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Coord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Coord, x_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Coord, y_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::LineContents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LineContents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::LineContents, text_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LineContents, code_points_per_cell_),
  PROTOBUF_FIELD_OFFSET(::iterm2::LineContents, continuation_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::CodePointsPerCell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CodePointsPerCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CodePointsPerCell, num_code_points_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CodePointsPerCell, repeats_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextRequest, text_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextRequest, suppress_broadcast_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SendTextResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::iterm2::Size, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Size, width_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Size, height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Point, x_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::Frame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::Frame, origin_),
  PROTOBUF_FIELD_OFFSET(::iterm2::Frame, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::SessionSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SessionSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SessionSummary, unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SessionSummary, frame_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SessionSummary, grid_size_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SessionSummary, title_),
  0,
  2,
  3,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode_SplitTreeLink, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode_SplitTreeLink, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode_SplitTreeLink, child_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode, vertical_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitTreeNode, links_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Window, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Window, tabs_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Window, window_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Window, frame_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Window, number_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, root_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, tab_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, tmux_window_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, tmux_connection_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse_Tab, minimized_sessions_),
  3,
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse, windows_),
  PROTOBUF_FIELD_OFFSET(::iterm2::ListSessionsResponse, buried_sessions_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, profile_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, window_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, tab_index_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, command_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabRequest, custom_profile_properties_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabResponse, window_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabResponse, tab_id_),
  PROTOBUF_FIELD_OFFSET(::iterm2::CreateTabResponse, session_id_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, session_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, split_direction_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, before_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, profile_name_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneRequest, custom_profile_properties_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneResponse, status_),
  PROTOBUF_FIELD_OFFSET(::iterm2::SplitPaneResponse, session_id_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 42, -1, sizeof(::iterm2::ClientOriginatedMessage)},
  { 77, 121, -1, sizeof(::iterm2::ServerOriginatedMessage)},
  { 158, 165, -1, sizeof(::iterm2::InvokeFunctionRequest_Tab)},
  { 166, 173, -1, sizeof(::iterm2::InvokeFunctionRequest_Session)},
  { 174, 181, -1, sizeof(::iterm2::InvokeFunctionRequest_Window)},
  { 182, -1, -1, sizeof(::iterm2::InvokeFunctionRequest_App)},
  { 188, 195, -1, sizeof(::iterm2::InvokeFunctionRequest_Method)},
  { 196, 210, -1, sizeof(::iterm2::InvokeFunctionRequest)},
  { 217, 225, -1, sizeof(::iterm2::InvokeFunctionResponse_Error)},
  { 227, 234, -1, sizeof(::iterm2::InvokeFunctionResponse_Success)},
  { 235, -1, -1, sizeof(::iterm2::InvokeFunctionResponse)},
  { 244, -1, -1, sizeof(::iterm2::CloseRequest_CloseTabs)},
  { 251, -1, -1, sizeof(::iterm2::CloseRequest_CloseSessions)},
  { 258, -1, -1, sizeof(::iterm2::CloseRequest_CloseWindows)},
  { 265, 276, -1, sizeof(::iterm2::CloseRequest)},
  { 280, -1, -1, sizeof(::iterm2::CloseResponse)},
  { 287, -1, -1, sizeof(::iterm2::SetBroadcastDomainsRequest)},
  { 294, 301, -1, sizeof(::iterm2::SetBroadcastDomainsResponse)},
  { 302, 311, -1, sizeof(::iterm2::StatusBarComponentRequest_OpenPopover)},
  { 314, 323, -1, sizeof(::iterm2::StatusBarComponentRequest)},
  { 325, 332, -1, sizeof(::iterm2::StatusBarComponentResponse)},
  { 333, 341, -1, sizeof(::iterm2::WindowedCoordRange)},
  { 343, 352, -1, sizeof(::iterm2::SubSelection)},
  { 355, -1, -1, sizeof(::iterm2::Selection)},
  { 362, 369, -1, sizeof(::iterm2::SelectionRequest_GetSelectionRequest)},
  { 370, 378, -1, sizeof(::iterm2::SelectionRequest_SetSelectionRequest)},
  { 380, -1, -1, sizeof(::iterm2::SelectionRequest)},
  { 389, 396, -1, sizeof(::iterm2::SelectionResponse_GetSelectionResponse)},
  { 397, -1, -1, sizeof(::iterm2::SelectionResponse_SetSelectionResponse)},
  { 403, 413, -1, sizeof(::iterm2::SelectionResponse)},
  { 416, -1, -1, sizeof(::iterm2::ColorPresetRequest_ListPresets)},
  { 422, 429, -1, sizeof(::iterm2::ColorPresetRequest_GetPreset)},
  { 430, -1, -1, sizeof(::iterm2::ColorPresetRequest)},
  { 439, -1, -1, sizeof(::iterm2::ColorPresetResponse_ListPresets)},
  { 446, 458, -1, sizeof(::iterm2::ColorPresetResponse_GetPreset_ColorSetting)},
  { 464, -1, -1, sizeof(::iterm2::ColorPresetResponse_GetPreset)},
  { 471, 481, -1, sizeof(::iterm2::ColorPresetResponse)},
  { 484, 492, -1, sizeof(::iterm2::PreferencesRequest_Request_SetPreference)},
  { 494, 501, -1, sizeof(::iterm2::PreferencesRequest_Request_GetPreference)},
  { 502, 509, -1, sizeof(::iterm2::PreferencesRequest_Request_SetDefaultProfile)},
  { 510, -1, -1, sizeof(::iterm2::PreferencesRequest_Request_GetDefaultProfile)},
  { 516, -1, -1, sizeof(::iterm2::PreferencesRequest_Request)},
  { 527, -1, -1, sizeof(::iterm2::PreferencesRequest)},
  { 534, 541, -1, sizeof(::iterm2::PreferencesResponse_Result_SetPreferenceResult)},
  { 542, 549, -1, sizeof(::iterm2::PreferencesResponse_Result_GetPreferenceResult)},
  { 550, 557, -1, sizeof(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult)},
  { 558, -1, -1, sizeof(::iterm2::PreferencesResponse_Result_UnrecognizedResult)},
  { 564, 571, -1, sizeof(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult)},
  { 572, -1, -1, sizeof(::iterm2::PreferencesResponse_Result)},
  { 584, -1, -1, sizeof(::iterm2::PreferencesResponse)},
  { 591, 599, -1, sizeof(::iterm2::ReorderTabsRequest_Assignment)},
  { 601, -1, -1, sizeof(::iterm2::ReorderTabsRequest)},
  { 608, 615, -1, sizeof(::iterm2::ReorderTabsResponse)},
  { 616, -1, -1, sizeof(::iterm2::TmuxRequest_ListConnections)},
  { 622, 630, -1, sizeof(::iterm2::TmuxRequest_SendCommand)},
  { 632, 641, -1, sizeof(::iterm2::TmuxRequest_SetWindowVisible)},
  { 644, 652, -1, sizeof(::iterm2::TmuxRequest_CreateWindow)},
  { 654, -1, -1, sizeof(::iterm2::TmuxRequest)},
  { 665, 673, -1, sizeof(::iterm2::TmuxResponse_ListConnections_Connection)},
  { 675, -1, -1, sizeof(::iterm2::TmuxResponse_ListConnections)},
  { 682, 689, -1, sizeof(::iterm2::TmuxResponse_SendCommand)},
  { 690, -1, -1, sizeof(::iterm2::TmuxResponse_SetWindowVisible)},
  { 696, 703, -1, sizeof(::iterm2::TmuxResponse_CreateWindow)},
  { 704, 716, -1, sizeof(::iterm2::TmuxResponse)},
  { 721, -1, -1, sizeof(::iterm2::GetBroadcastDomainsRequest)},
  { 727, -1, -1, sizeof(::iterm2::BroadcastDomain)},
  { 734, -1, -1, sizeof(::iterm2::GetBroadcastDomainsResponse)},
  { 741, 749, -1, sizeof(::iterm2::SetTabLayoutRequest)},
  { 751, 758, -1, sizeof(::iterm2::SetTabLayoutResponse)},
  { 759, 767, -1, sizeof(::iterm2::MenuItemRequest)},
  { 769, 778, -1, sizeof(::iterm2::MenuItemResponse)},
  { 781, 789, -1, sizeof(::iterm2::RestartSessionRequest)},
  { 791, 798, -1, sizeof(::iterm2::RestartSessionResponse)},
  { 799, 809, -1, sizeof(::iterm2::ServerOriginatedRPCResultRequest)},
  { 812, -1, -1, sizeof(::iterm2::ServerOriginatedRPCResultResponse)},
  { 818, -1, -1, sizeof(::iterm2::ListProfilesRequest)},
  { 826, -1, -1, sizeof(::iterm2::ListProfilesResponse_Profile)},
  { 833, -1, -1, sizeof(::iterm2::ListProfilesResponse)},
  { 840, -1, -1, sizeof(::iterm2::FocusRequest)},
  { 846, -1, -1, sizeof(::iterm2::FocusResponse)},
  { 853, 862, -1, sizeof(::iterm2::SavedArrangementRequest)},
  { 865, 873, -1, sizeof(::iterm2::SavedArrangementResponse)},
  { 875, 883, -1, sizeof(::iterm2::VariableRequest_Set)},
  { 885, -1, -1, sizeof(::iterm2::VariableRequest)},
  { 898, 906, -1, sizeof(::iterm2::VariableResponse)},
  { 908, 916, -1, sizeof(::iterm2::ActivateRequest_App)},
  { 918, 932, -1, sizeof(::iterm2::ActivateRequest)},
  { 939, 946, -1, sizeof(::iterm2::ActivateResponse)},
  { 947, 955, -1, sizeof(::iterm2::InjectRequest)},
  { 957, -1, -1, sizeof(::iterm2::InjectResponse)},
  { 964, 974, -1, sizeof(::iterm2::GetPropertyRequest)},
  { 977, 985, -1, sizeof(::iterm2::GetPropertyResponse)},
  { 987, 998, -1, sizeof(::iterm2::SetPropertyRequest)},
  { 1002, 1009, -1, sizeof(::iterm2::SetPropertyResponse)},
  { 1010, 1021, -1, sizeof(::iterm2::RegisterToolRequest)},
  { 1026, 1033, -1, sizeof(::iterm2::RPCRegistrationRequest_RPCArgumentSignature)},
  { 1034, 1042, -1, sizeof(::iterm2::RPCRegistrationRequest_RPCArgument)},
  { 1044, 1052, -1, sizeof(::iterm2::RPCRegistrationRequest_SessionTitleAttributes)},
  { 1054, 1065, -1, sizeof(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob)},
  { 1070, 1078, -1, sizeof(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon)},
  { 1080, 1094, -1, sizeof(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes)},
  { 1102, 1110, -1, sizeof(::iterm2::RPCRegistrationRequest_ContextMenuAttributes)},
  { 1112, 1128, -1, sizeof(::iterm2::RPCRegistrationRequest)},
  { 1137, 1144, -1, sizeof(::iterm2::RegisterToolResponse)},
  { 1145, -1, -1, sizeof(::iterm2::KeystrokePattern)},
  { 1156, 1164, -1, sizeof(::iterm2::KeystrokeMonitorRequest)},
  { 1166, -1, -1, sizeof(::iterm2::KeystrokeFilterRequest)},
  { 1173, 1182, -1, sizeof(::iterm2::VariableMonitorRequest)},
  { 1185, 1192, -1, sizeof(::iterm2::ProfileChangeRequest)},
  { 1193, -1, -1, sizeof(::iterm2::PromptMonitorRequest)},
  { 1200, 1216, -1, sizeof(::iterm2::NotificationRequest)},
  { 1225, 1232, -1, sizeof(::iterm2::NotificationResponse)},
  { 1233, 1252, -1, sizeof(::iterm2::Notification)},
  { 1265, 1272, -1, sizeof(::iterm2::ProfileChangedNotification)},
  { 1273, 1283, -1, sizeof(::iterm2::VariableChangedNotification)},
  { 1287, -1, -1, sizeof(::iterm2::BroadcastDomainsChangedNotification)},
  { 1294, 1302, -1, sizeof(::iterm2::ServerOriginatedRPC_RPCArgument)},
  { 1304, 1312, -1, sizeof(::iterm2::ServerOriginatedRPC)},
  { 1314, 1322, -1, sizeof(::iterm2::ServerOriginatedRPCNotification)},
  { 1324, 1336, -1, sizeof(::iterm2::KeystrokeNotification)},
  { 1342, 1349, -1, sizeof(::iterm2::ScreenUpdateNotification)},
  { 1350, 1358, -1, sizeof(::iterm2::PromptNotificationPrompt)},
  { 1360, 1367, -1, sizeof(::iterm2::PromptNotificationCommandStart)},
  { 1368, 1375, -1, sizeof(::iterm2::PromptNotificationCommandEnd)},
  { 1376, 1388, -1, sizeof(::iterm2::PromptNotification)},
  { 1393, 1403, -1, sizeof(::iterm2::LocationChangeNotification)},
  { 1407, 1416, -1, sizeof(::iterm2::CustomEscapeSequenceNotification)},
  { 1419, 1426, -1, sizeof(::iterm2::NewSessionNotification)},
  { 1427, 1435, -1, sizeof(::iterm2::FocusChangedNotification_Window)},
  { 1437, -1, -1, sizeof(::iterm2::FocusChangedNotification)},
  { 1448, 1455, -1, sizeof(::iterm2::TerminateSessionNotification)},
  { 1456, 1463, -1, sizeof(::iterm2::LayoutChangedNotification)},
  { 1464, 1472, -1, sizeof(::iterm2::GetBufferRequest)},
  { 1474, 1486, -1, sizeof(::iterm2::GetBufferResponse)},
  { 1492, 1500, -1, sizeof(::iterm2::GetPromptRequest)},
  { 1502, 1517, -1, sizeof(::iterm2::GetPromptResponse)},
  { 1526, 1535, -1, sizeof(::iterm2::ListPromptsRequest)},
  { 1538, 1546, -1, sizeof(::iterm2::ListPromptsResponse)},
  { 1548, 1556, -1, sizeof(::iterm2::GetProfilePropertyRequest)},
  { 1558, 1566, -1, sizeof(::iterm2::ProfileProperty)},
  { 1568, 1576, -1, sizeof(::iterm2::GetProfilePropertyResponse)},
  { 1578, -1, -1, sizeof(::iterm2::SetProfilePropertyRequest_GuidList)},
  { 1585, 1593, -1, sizeof(::iterm2::SetProfilePropertyRequest_Assignment)},
  { 1595, 1607, -1, sizeof(::iterm2::SetProfilePropertyRequest)},
  { 1612, 1619, -1, sizeof(::iterm2::SetProfilePropertyResponse)},
  { 1620, 1627, -1, sizeof(::iterm2::TransactionRequest)},
  { 1628, 1635, -1, sizeof(::iterm2::TransactionResponse)},
  { 1636, 1645, -1, sizeof(::iterm2::LineRange)},
  { 1648, 1656, -1, sizeof(::iterm2::Range)},
  { 1658, 1666, -1, sizeof(::iterm2::CoordRange)},
  { 1668, 1676, -1, sizeof(::iterm2::Coord)},
  { 1678, 1687, -1, sizeof(::iterm2::LineContents)},
  { 1690, 1698, -1, sizeof(::iterm2::CodePointsPerCell)},
  { 1700, -1, -1, sizeof(::iterm2::ListSessionsRequest)},
  { 1706, 1715, -1, sizeof(::iterm2::SendTextRequest)},
  { 1718, 1725, -1, sizeof(::iterm2::SendTextResponse)},
  { 1726, 1734, -1, sizeof(::iterm2::Size)},
  { 1736, 1744, -1, sizeof(::iterm2::Point)},
  { 1746, 1754, -1, sizeof(::iterm2::Frame)},
  { 1756, 1766, -1, sizeof(::iterm2::SessionSummary)},
  { 1770, -1, -1, sizeof(::iterm2::SplitTreeNode_SplitTreeLink)},
  { 1779, 1787, -1, sizeof(::iterm2::SplitTreeNode)},
  { 1789, 1799, -1, sizeof(::iterm2::ListSessionsResponse_Window)},
  { 1803, 1814, -1, sizeof(::iterm2::ListSessionsResponse_Tab)},
  { 1819, -1, -1, sizeof(::iterm2::ListSessionsResponse)},
  { 1827, 1838, -1, sizeof(::iterm2::CreateTabRequest)},
  { 1843, 1853, -1, sizeof(::iterm2::CreateTabResponse)},
  { 1857, 1868, -1, sizeof(::iterm2::SplitPaneRequest)},
  { 1873, 1881, -1, sizeof(::iterm2::SplitPaneResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ClientOriginatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ServerOriginatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionRequest_Tab_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionRequest_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionRequest_Window_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionRequest_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionRequest_Method_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionResponse_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionResponse_Success_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InvokeFunctionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CloseRequest_CloseTabs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CloseRequest_CloseSessions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CloseRequest_CloseWindows_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CloseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CloseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetBroadcastDomainsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetBroadcastDomainsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_StatusBarComponentRequest_OpenPopover_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_StatusBarComponentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_StatusBarComponentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_WindowedCoordRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SubSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Selection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SelectionRequest_GetSelectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SelectionRequest_SetSelectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SelectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SelectionResponse_GetSelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SelectionResponse_SetSelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetRequest_ListPresets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetRequest_GetPreset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetResponse_ListPresets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetResponse_GetPreset_ColorSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetResponse_GetPreset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ColorPresetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesRequest_Request_SetPreference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesRequest_Request_GetPreference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesRequest_Request_SetDefaultProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesRequest_Request_GetDefaultProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesRequest_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_Result_SetPreferenceResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_Result_GetPreferenceResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_Result_SetDefaultProfileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_Result_UnrecognizedResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_Result_GetDefaultProfileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PreferencesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ReorderTabsRequest_Assignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ReorderTabsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ReorderTabsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxRequest_ListConnections_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxRequest_SendCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxRequest_SetWindowVisible_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxRequest_CreateWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxResponse_ListConnections_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxResponse_ListConnections_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxResponse_SendCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxResponse_SetWindowVisible_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxResponse_CreateWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TmuxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetBroadcastDomainsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_BroadcastDomain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetBroadcastDomainsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetTabLayoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetTabLayoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_MenuItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_MenuItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RestartSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RestartSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ServerOriginatedRPCResultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ServerOriginatedRPCResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListProfilesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListProfilesResponse_Profile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListProfilesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_FocusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_FocusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SavedArrangementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SavedArrangementResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_VariableRequest_Set_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_VariableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_VariableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ActivateRequest_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ActivateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ActivateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_InjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetPropertyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetPropertyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetPropertyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetPropertyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RegisterToolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_RPCArgumentSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_RPCArgument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_SessionTitleAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_StatusBarComponentAttributes_Knob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_StatusBarComponentAttributes_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_StatusBarComponentAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_ContextMenuAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RPCRegistrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_RegisterToolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_KeystrokePattern_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_KeystrokeMonitorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_KeystrokeFilterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_VariableMonitorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ProfileChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PromptMonitorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_NotificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_NotificationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ProfileChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_VariableChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_BroadcastDomainsChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ServerOriginatedRPC_RPCArgument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ServerOriginatedRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ServerOriginatedRPCNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_KeystrokeNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ScreenUpdateNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PromptNotificationPrompt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PromptNotificationCommandStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PromptNotificationCommandEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_PromptNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_LocationChangeNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CustomEscapeSequenceNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_NewSessionNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_FocusChangedNotification_Window_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_FocusChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TerminateSessionNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_LayoutChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetBufferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetBufferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetPromptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetPromptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListPromptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListPromptsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetProfilePropertyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ProfileProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_GetProfilePropertyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetProfilePropertyRequest_GuidList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetProfilePropertyRequest_Assignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetProfilePropertyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SetProfilePropertyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_TransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_LineRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CoordRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Coord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_LineContents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CodePointsPerCell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListSessionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SendTextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SendTextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Size_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SessionSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SplitTreeNode_SplitTreeLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SplitTreeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListSessionsResponse_Window_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListSessionsResponse_Tab_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_ListSessionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CreateTabRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_CreateTabResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SplitPaneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iterm2::_SplitPaneResponse_default_instance_),
};

const char descriptor_table_protodef_iterm_2dapi_2epb[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014iterm-api.pb\022\006iterm2\"\331\020\n\027ClientOrigina"
  "tedMessage\022\n\n\002id\030\001 \001(\003\0226\n\022get_buffer_req"
  "uest\030d \001(\0132\030.iterm2.GetBufferRequestH\000\0226"
  "\n\022get_prompt_request\030e \001(\0132\030.iterm2.GetP"
  "romptRequestH\000\0229\n\023transaction_request\030f "
  "\001(\0132\032.iterm2.TransactionRequestH\000\022;\n\024not"
  "ification_request\030g \001(\0132\033.iterm2.Notific"
  "ationRequestH\000\022<\n\025register_tool_request\030"
  "h \001(\0132\033.iterm2.RegisterToolRequestH\000\022I\n\034"
  "set_profile_property_request\030i \001(\0132!.ite"
  "rm2.SetProfilePropertyRequestH\000\022<\n\025list_"
  "sessions_request\030j \001(\0132\033.iterm2.ListSess"
  "ionsRequestH\000\0224\n\021send_text_request\030k \001(\013"
  "2\027.iterm2.SendTextRequestH\000\0226\n\022create_ta"
  "b_request\030l \001(\0132\030.iterm2.CreateTabReques"
  "tH\000\0226\n\022split_pane_request\030m \001(\0132\030.iterm2"
  ".SplitPaneRequestH\000\022I\n\034get_profile_prope"
  "rty_request\030n \001(\0132!.iterm2.GetProfilePro"
  "pertyRequestH\000\022:\n\024set_property_request\030o"
  " \001(\0132\032.iterm2.SetPropertyRequestH\000\022:\n\024ge"
  "t_property_request\030p \001(\0132\032.iterm2.GetPro"
  "pertyRequestH\000\022/\n\016inject_request\030q \001(\0132\025"
  ".iterm2.InjectRequestH\000\0223\n\020activate_requ"
  "est\030r \001(\0132\027.iterm2.ActivateRequestH\000\0223\n\020"
  "variable_request\030s \001(\0132\027.iterm2.Variable"
  "RequestH\000\022D\n\031saved_arrangement_request\030t"
  " \001(\0132\037.iterm2.SavedArrangementRequestH\000\022"
  "-\n\rfocus_request\030u \001(\0132\024.iterm2.FocusReq"
  "uestH\000\022<\n\025list_profiles_request\030v \001(\0132\033."
  "iterm2.ListProfilesRequestH\000\022X\n$server_o"
  "riginated_rpc_result_request\030w \001(\0132(.ite"
  "rm2.ServerOriginatedRPCResultRequestH\000\022@"
  "\n\027restart_session_request\030x \001(\0132\035.iterm2"
  ".RestartSessionRequestH\000\0224\n\021menu_item_re"
  "quest\030y \001(\0132\027.iterm2.MenuItemRequestH\000\022="
  "\n\026set_tab_layout_request\030z \001(\0132\033.iterm2."
  "SetTabLayoutRequestH\000\022K\n\035get_broadcast_d"
  "omains_request\030{ \001(\0132\".iterm2.GetBroadca"
  "stDomainsRequestH\000\022+\n\014tmux_request\030| \001(\013"
  "2\023.iterm2.TmuxRequestH\000\022:\n\024reorder_tabs_"
  "request\030} \001(\0132\032.iterm2.ReorderTabsReques"
  "tH\000\0229\n\023preferences_request\030~ \001(\0132\032.iterm"
  "2.PreferencesRequestH\000\022:\n\024color_preset_r"
  "equest\030\177 \001(\0132\032.iterm2.ColorPresetRequest"
  "H\000\0226\n\021selection_request\030\200\001 \001(\0132\030.iterm2."
  "SelectionRequestH\000\022J\n\034status_bar_compone"
  "nt_request\030\201\001 \001(\0132!.iterm2.StatusBarComp"
  "onentRequestH\000\022L\n\035set_broadcast_domains_"
  "request\030\202\001 \001(\0132\".iterm2.SetBroadcastDoma"
  "insRequestH\000\022.\n\rclose_request\030\203\001 \001(\0132\024.i"
  "term2.CloseRequestH\000\022A\n\027invoke_function_"
  "request\030\204\001 \001(\0132\035.iterm2.InvokeFunctionRe"
  "questH\000\022;\n\024list_prompts_request\030\205\001 \001(\0132\032"
  ".iterm2.ListPromptsRequestH\000B\014\n\nsubmessa"
  "ge\"\335\021\n\027ServerOriginatedMessage\022\n\n\002id\030\001 \001"
  "(\003\022\017\n\005error\030\002 \001(\tH\000\0228\n\023get_buffer_respon"
  "se\030d \001(\0132\031.iterm2.GetBufferResponseH\000\0228\n"
  "\023get_prompt_response\030e \001(\0132\031.iterm2.GetP"
  "romptResponseH\000\022;\n\024transaction_response\030"
  "f \001(\0132\033.iterm2.TransactionResponseH\000\022=\n\025"
  "notification_response\030g \001(\0132\034.iterm2.Not"
  "ificationResponseH\000\022>\n\026register_tool_res"
  "ponse\030h \001(\0132\034.iterm2.RegisterToolRespons"
  "eH\000\022K\n\035set_profile_property_response\030i \001"
  "(\0132\".iterm2.SetProfilePropertyResponseH\000"
  "\022>\n\026list_sessions_response\030j \001(\0132\034.iterm"
  "2.ListSessionsResponseH\000\0226\n\022send_text_re"
  "sponse\030k \001(\0132\030.iterm2.SendTextResponseH\000"
  "\0228\n\023create_tab_response\030l \001(\0132\031.iterm2.C"
  "reateTabResponseH\000\0228\n\023split_pane_respons"
  "e\030m \001(\0132\031.iterm2.SplitPaneResponseH\000\022K\n\035"
  "get_profile_property_response\030n \001(\0132\".it"
  "erm2.GetProfilePropertyResponseH\000\022<\n\025set"
  "_property_response\030o \001(\0132\033.iterm2.SetPro"
  "pertyResponseH\000\022<\n\025get_property_response"
  "\030p \001(\0132\033.iterm2.GetPropertyResponseH\000\0221\n"
  "\017inject_response\030q \001(\0132\026.iterm2.InjectRe"
  "sponseH\000\0225\n\021activate_response\030r \001(\0132\030.it"
  "erm2.ActivateResponseH\000\0225\n\021variable_resp"
  "onse\030s \001(\0132\030.iterm2.VariableResponseH\000\022F"
  "\n\032saved_arrangement_response\030t \001(\0132 .ite"
  "rm2.SavedArrangementResponseH\000\022/\n\016focus_"
  "response\030u \001(\0132\025.iterm2.FocusResponseH\000\022"
  ">\n\026list_profiles_response\030v \001(\0132\034.iterm2"
  ".ListProfilesResponseH\000\022Z\n%server_origin"
  "ated_rpc_result_response\030w \001(\0132).iterm2."
  "ServerOriginatedRPCResultResponseH\000\022B\n\030r"
  "estart_session_response\030x \001(\0132\036.iterm2.R"
  "estartSessionResponseH\000\0226\n\022menu_item_res"
  "ponse\030y \001(\0132\030.iterm2.MenuItemResponseH\000\022"
  "\?\n\027set_tab_layout_response\030z \001(\0132\034.iterm"
  "2.SetTabLayoutResponseH\000\022M\n\036get_broadcas"
  "t_domains_response\030{ \001(\0132#.iterm2.GetBro"
  "adcastDomainsResponseH\000\022-\n\rtmux_response"
  "\030| \001(\0132\024.iterm2.TmuxResponseH\000\022<\n\025reorde"
  "r_tabs_response\030} \001(\0132\033.iterm2.ReorderTa"
  "bsResponseH\000\022;\n\024preferences_response\030~ \001"
  "(\0132\033.iterm2.PreferencesResponseH\000\022<\n\025col"
  "or_preset_response\030\177 \001(\0132\033.iterm2.ColorP"
  "resetResponseH\000\0228\n\022selection_response\030\200\001"
  " \001(\0132\031.iterm2.SelectionResponseH\000\022L\n\035sta"
  "tus_bar_component_response\030\201\001 \001(\0132\".iter"
  "m2.StatusBarComponentResponseH\000\022N\n\036set_b"
  "roadcast_domains_response\030\202\001 \001(\0132#.iterm"
  "2.SetBroadcastDomainsResponseH\000\0220\n\016close"
  "_response\030\203\001 \001(\0132\025.iterm2.CloseResponseH"
  "\000\022C\n\030invoke_function_response\030\204\001 \001(\0132\036.i"
  "term2.InvokeFunctionResponseH\000\022=\n\025list_p"
  "rompts_response\030\205\001 \001(\0132\033.iterm2.ListProm"
  "ptsResponseH\000\022-\n\014notification\030\350\007 \001(\0132\024.i"
  "term2.NotificationH\000B\014\n\nsubmessage\"\317\003\n\025I"
  "nvokeFunctionRequest\0220\n\003tab\030\001 \001(\0132!.iter"
  "m2.InvokeFunctionRequest.TabH\000\0228\n\007sessio"
  "n\030\002 \001(\0132%.iterm2.InvokeFunctionRequest.S"
  "essionH\000\0226\n\006window\030\003 \001(\0132$.iterm2.Invoke"
  "FunctionRequest.WindowH\000\0220\n\003app\030\004 \001(\0132!."
  "iterm2.InvokeFunctionRequest.AppH\000\0226\n\006me"
  "thod\030\007 \001(\0132$.iterm2.InvokeFunctionReques"
  "t.MethodH\000\022\022\n\ninvocation\030\005 \001(\t\022\023\n\007timeou"
  "t\030\006 \001(\001:\002-1\032\025\n\003Tab\022\016\n\006tab_id\030\001 \001(\t\032\035\n\007Se"
  "ssion\022\022\n\nsession_id\030\001 \001(\t\032\033\n\006Window\022\021\n\tw"
  "indow_id\030\001 \001(\t\032\005\n\003App\032\032\n\006Method\022\020\n\010recei"
  "ver\030\001 \001(\tB\t\n\007context\"\331\002\n\026InvokeFunctionR"
  "esponse\0225\n\005error\030\001 \001(\0132$.iterm2.InvokeFu"
  "nctionResponse.ErrorH\000\0229\n\007success\030\002 \001(\0132"
  "&.iterm2.InvokeFunctionResponse.SuccessH"
  "\000\032T\n\005Error\0225\n\006status\030\001 \001(\0162%.iterm2.Invo"
  "keFunctionResponse.Status\022\024\n\014error_reaso"
  "n\030\002 \001(\t\032\036\n\007Success\022\023\n\013json_result\030\001 \001(\t\""
  "H\n\006Status\022\013\n\007TIMEOUT\020\001\022\n\n\006FAILED\020\002\022\025\n\021RE"
  "QUEST_MALFORMED\020\003\022\016\n\nINVALID_ID\020\004B\r\n\013dis"
  "position\"\255\002\n\014CloseRequest\022.\n\004tabs\030\001 \001(\0132"
  "\036.iterm2.CloseRequest.CloseTabsH\000\0226\n\010ses"
  "sions\030\002 \001(\0132\".iterm2.CloseRequest.CloseS"
  "essionsH\000\0224\n\007windows\030\003 \001(\0132!.iterm2.Clos"
  "eRequest.CloseWindowsH\000\022\r\n\005force\030\004 \001(\010\032\034"
  "\n\tCloseTabs\022\017\n\007tab_ids\030\001 \003(\t\032$\n\rCloseSes"
  "sions\022\023\n\013session_ids\030\001 \003(\t\032\"\n\014CloseWindo"
  "ws\022\022\n\nwindow_ids\030\001 \003(\tB\010\n\006target\"s\n\rClos"
  "eResponse\022.\n\010statuses\030\001 \003(\0162\034.iterm2.Clo"
  "seResponse.Status\"2\n\006Status\022\006\n\002OK\020\000\022\r\n\tN"
  "OT_FOUND\020\001\022\021\n\rUSER_DECLINED\020\002\"P\n\032SetBroa"
  "dcastDomainsRequest\0222\n\021broadcast_domains"
  "\030\001 \003(\0132\027.iterm2.BroadcastDomain\"\307\001\n\033SetB"
  "roadcastDomainsResponse\022:\n\006status\030\001 \001(\0162"
  "*.iterm2.SetBroadcastDomainsResponse.Sta"
  "tus\"l\n\006Status\022\006\n\002OK\020\000\022\025\n\021SESSION_NOT_FOU"
  "ND\020\001\022\"\n\036BROADCAST_DOMAINS_NOT_DISJOINT\020\002"
  "\022\037\n\033SESSIONS_NOT_IN_SAME_WINDOW\020\003\"\316\001\n\031St"
  "atusBarComponentRequest\022E\n\014open_popover\030"
  "\001 \001(\0132-.iterm2.StatusBarComponentRequest"
  ".OpenPopoverH\000\022\022\n\nidentifier\030\002 \001(\t\032K\n\013Op"
  "enPopover\022\022\n\nsession_id\030\001 \001(\t\022\014\n\004html\030\002 "
  "\001(\t\022\032\n\004size\030\003 \001(\0132\014.iterm2.SizeB\t\n\007reque"
  "st\"\257\001\n\032StatusBarComponentResponse\0229\n\006sta"
  "tus\030\001 \001(\0162).iterm2.StatusBarComponentRes"
  "ponse.Status\"V\n\006Status\022\006\n\002OK\020\000\022\025\n\021SESSIO"
  "N_NOT_FOUND\020\001\022\025\n\021REQUEST_MALFORMED\020\002\022\026\n\022"
  "INVALID_IDENTIFIER\020\003\"]\n\022WindowedCoordRan"
  "ge\022\'\n\013coord_range\030\001 \001(\0132\022.iterm2.CoordRa"
  "nge\022\036\n\007columns\030\002 \001(\0132\r.iterm2.Range\"\212\001\n\014"
  "SubSelection\0228\n\024windowed_coord_range\030\001 \001"
  "(\0132\032.iterm2.WindowedCoordRange\022-\n\016select"
  "ion_mode\030\002 \001(\0162\025.iterm2.SelectionMode\022\021\n"
  "\tconnected\030\003 \001(\010\"9\n\tSelection\022,\n\016sub_sel"
  "ections\030\001 \003(\0132\024.iterm2.SubSelection\"\267\002\n\020"
  "SelectionRequest\022M\n\025get_selection_reques"
  "t\030\001 \001(\0132,.iterm2.SelectionRequest.GetSel"
  "ectionRequestH\000\022M\n\025set_selection_request"
  "\030\002 \001(\0132,.iterm2.SelectionRequest.SetSele"
  "ctionRequestH\000\032)\n\023GetSelectionRequest\022\022\n"
  "\nsession_id\030\001 \001(\t\032O\n\023SetSelectionRequest"
  "\022\022\n\nsession_id\030\001 \001(\t\022$\n\tselection\030\002 \001(\0132"
  "\021.iterm2.SelectionB\t\n\007request\"\234\003\n\021Select"
  "ionResponse\0220\n\006status\030\001 \001(\0162 .iterm2.Sel"
  "ectionResponse.Status\022P\n\026get_selection_r"
  "esponse\030\002 \001(\0132..iterm2.SelectionResponse"
  ".GetSelectionResponseH\000\022P\n\026set_selection"
  "_response\030\003 \001(\0132..iterm2.SelectionRespon"
  "se.SetSelectionResponseH\000\032<\n\024GetSelectio"
  "nResponse\022$\n\tselection\030\002 \001(\0132\021.iterm2.Se"
  "lection\032\026\n\024SetSelectionResponse\"O\n\006Statu"
  "s\022\006\n\002OK\020\000\022\023\n\017INVALID_SESSION\020\001\022\021\n\rINVALI"
  "D_RANGE\020\002\022\025\n\021REQUEST_MALFORMED\020\003B\n\n\010resp"
  "onse\"\305\001\n\022ColorPresetRequest\022>\n\014list_pres"
  "ets\030\001 \001(\0132&.iterm2.ColorPresetRequest.Li"
  "stPresetsH\000\022:\n\nget_preset\030\002 \001(\0132$.iterm2"
  ".ColorPresetRequest.GetPresetH\000\032\r\n\013ListP"
  "resets\032\031\n\tGetPreset\022\014\n\004name\030\001 \001(\tB\t\n\007req"
  "uest\"\364\003\n\023ColorPresetResponse\022\?\n\014list_pre"
  "sets\030\001 \001(\0132\'.iterm2.ColorPresetResponse."
  "ListPresetsH\000\022;\n\nget_preset\030\002 \001(\0132%.iter"
  "m2.ColorPresetResponse.GetPresetH\000\0222\n\006st"
  "atus\030\003 \001(\0162\".iterm2.ColorPresetResponse."
  "Status\032\033\n\013ListPresets\022\014\n\004name\030\001 \003(\t\032\302\001\n\t"
  "GetPreset\022J\n\016color_settings\030\001 \003(\01322.iter"
  "m2.ColorPresetResponse.GetPreset.ColorSe"
  "tting\032i\n\014ColorSetting\022\013\n\003red\030\001 \001(\002\022\r\n\005gr"
  "een\030\002 \001(\002\022\014\n\004blue\030\003 \001(\002\022\r\n\005alpha\030\004 \001(\002\022\023"
  "\n\013color_space\030\005 \001(\t\022\013\n\003key\030\006 \001(\t\"=\n\006Stat"
  "us\022\006\n\002OK\020\000\022\024\n\020PRESET_NOT_FOUND\020\001\022\025\n\021REQU"
  "EST_MALFORMED\020\002B\n\n\010response\"\313\004\n\022Preferen"
  "cesRequest\0224\n\010requests\030\001 \003(\0132\".iterm2.Pr"
  "eferencesRequest.Request\032\376\003\n\007Request\022R\n\026"
  "set_preference_request\030\001 \001(\01320.iterm2.Pr"
  "eferencesRequest.Request.SetPreferenceH\000"
  "\022R\n\026get_preference_request\030\002 \001(\01320.iterm"
  "2.PreferencesRequest.Request.GetPreferen"
  "ceH\000\022[\n\033set_default_profile_request\030\003 \001("
  "\01324.iterm2.PreferencesRequest.Request.Se"
  "tDefaultProfileH\000\022[\n\033get_default_profile"
  "_request\030\004 \001(\01324.iterm2.PreferencesReque"
  "st.Request.GetDefaultProfileH\000\0320\n\rSetPre"
  "ference\022\013\n\003key\030\001 \001(\t\022\022\n\njson_value\030\002 \001(\t"
  "\032\034\n\rGetPreference\022\013\n\003key\030\001 \001(\t\032!\n\021SetDef"
  "aultProfile\022\014\n\004guid\030\001 \001(\t\032\023\n\021GetDefaultP"
  "rofileB\t\n\007request\"\277\007\n\023PreferencesRespons"
  "e\0223\n\007results\030\001 \003(\0132\".iterm2.PreferencesR"
  "esponse.Result\032\362\006\n\006Result\022U\n\024unrecognize"
  "d_request\030\001 \001(\01325.iterm2.PreferencesResp"
  "onse.Result.UnrecognizedResultH\000\022W\n\025set_"
  "preference_result\030\002 \001(\01326.iterm2.Prefere"
  "ncesResponse.Result.SetPreferenceResultH"
  "\000\022W\n\025get_preference_result\030\003 \001(\01326.iterm"
  "2.PreferencesResponse.Result.GetPreferen"
  "ceResultH\000\022`\n\032set_default_profile_result"
  "\030\004 \001(\0132:.iterm2.PreferencesResponse.Resu"
  "lt.SetDefaultProfileResultH\000\022`\n\032get_defa"
  "ult_profile_result\030\005 \001(\0132:.iterm2.Prefer"
  "encesResponse.Result.GetDefaultProfileRe"
  "sultH\000\032\227\001\n\023SetPreferenceResult\022M\n\006status"
  "\030\001 \001(\0162=.iterm2.PreferencesResponse.Resu"
  "lt.SetPreferenceResult.Status\"1\n\006Status\022"
  "\006\n\002OK\020\000\022\014\n\010BAD_JSON\020\001\022\021\n\rINVALID_VALUE\020\002"
  "\032)\n\023GetPreferenceResult\022\022\n\njson_value\030\001 "
  "\001(\t\032\214\001\n\027SetDefaultProfileResult\022Q\n\006statu"
  "s\030\001 \001(\0162A.iterm2.PreferencesResponse.Res"
  "ult.SetDefaultProfileResult.Status\"\036\n\006St"
  "atus\022\006\n\002OK\020\000\022\014\n\010BAD_GUID\020\001\032\024\n\022Unrecogniz"
  "edResult\032\'\n\027GetDefaultProfileResult\022\014\n\004g"
  "uid\030\001 \001(\tB\010\n\006result\"\202\001\n\022ReorderTabsReque"
  "st\022:\n\013assignments\030\003 \003(\0132%.iterm2.Reorder"
  "TabsRequest.Assignment\0320\n\nAssignment\022\021\n\t"
  "window_id\030\001 \001(\t\022\017\n\007tab_ids\030\002 \003(\t\"\236\001\n\023Reo"
  "rderTabsResponse\0222\n\006status\030\004 \001(\0162\".iterm"
  "2.ReorderTabsResponse.Status\"S\n\006Status\022\006"
  "\n\002OK\020\000\022\026\n\022INVALID_ASSIGNMENT\020\001\022\025\n\021INVALI"
  "D_WINDOW_ID\020\002\022\022\n\016INVALID_TAB_ID\020\003\"\343\003\n\013Tm"
  "uxRequest\022\?\n\020list_connections\030\001 \001(\0132#.it"
  "erm2.TmuxRequest.ListConnectionsH\000\0227\n\014se"
  "nd_command\030\002 \001(\0132\037.iterm2.TmuxRequest.Se"
  "ndCommandH\000\022B\n\022set_window_visible\030\003 \001(\0132"
  "$.iterm2.TmuxRequest.SetWindowVisibleH\000\022"
  "9\n\rcreate_window\030\004 \001(\0132 .iterm2.TmuxRequ"
  "est.CreateWindowH\000\032\021\n\017ListConnections\0325\n"
  "\013SendCommand\022\025\n\rconnection_id\030\001 \001(\t\022\017\n\007c"
  "ommand\030\002 \001(\t\032M\n\020SetWindowVisible\022\025\n\rconn"
  "ection_id\030\001 \001(\t\022\021\n\twindow_id\030\002 \001(\t\022\017\n\007vi"
  "sible\030\003 \001(\010\0327\n\014CreateWindow\022\025\n\rconnectio"
  "n_id\030\001 \001(\t\022\020\n\010affinity\030\002 \001(\tB\t\n\007payload\""
  "\211\005\n\014TmuxResponse\022@\n\020list_connections\030\001 \001"
  "(\0132$.iterm2.TmuxResponse.ListConnections"
  "H\000\0228\n\014send_command\030\002 \001(\0132 .iterm2.TmuxRe"
  "sponse.SendCommandH\000\022C\n\022set_window_visib"
  "le\030\003 \001(\0132%.iterm2.TmuxResponse.SetWindow"
  "VisibleH\000\022:\n\rcreate_window\030\005 \001(\0132!.iterm"
  "2.TmuxResponse.CreateWindowH\000\022+\n\006status\030"
  "\004 \001(\0162\033.iterm2.TmuxResponse.Status\032\227\001\n\017L"
  "istConnections\022D\n\013connections\030\001 \003(\0132/.it"
  "erm2.TmuxResponse.ListConnections.Connec"
  "tion\032>\n\nConnection\022\025\n\rconnection_id\030\001 \001("
  "\t\022\031\n\021owning_session_id\030\002 \001(\t\032\035\n\013SendComm"
  "and\022\016\n\006output\030\001 \001(\t\032\022\n\020SetWindowVisible\032"
  "\036\n\014CreateWindow\022\016\n\006tab_id\030\001 \001(\t\"W\n\006Statu"
  "s\022\006\n\002OK\020\000\022\023\n\017INVALID_REQUEST\020\001\022\031\n\025INVALI"
  "D_CONNECTION_ID\020\002\022\025\n\021INVALID_WINDOW_ID\020\003"
  "B\t\n\007payload\"\034\n\032GetBroadcastDomainsReques"
  "t\"&\n\017BroadcastDomain\022\023\n\013session_ids\030\001 \003("
  "\t\"Q\n\033GetBroadcastDomainsResponse\0222\n\021broa"
  "dcast_domains\030\001 \003(\0132\027.iterm2.BroadcastDo"
  "main\"J\n\023SetTabLayoutRequest\022#\n\004root\030\001 \001("
  "\0132\025.iterm2.SplitTreeNode\022\016\n\006tab_id\030\002 \001(\t"
  "\"\217\001\n\024SetTabLayoutResponse\0223\n\006status\030\001 \001("
  "\0162#.iterm2.SetTabLayoutResponse.Status\"B"
  "\n\006Status\022\006\n\002OK\020\000\022\016\n\nBAD_TAB_ID\020\001\022\016\n\nWRON"
  "G_TREE\020\002\022\020\n\014INVALID_SIZE\020\003\"9\n\017MenuItemRe"
  "quest\022\022\n\nidentifier\030\001 \001(\t\022\022\n\nquery_only\030"
  "\002 \001(\010\"\231\001\n\020MenuItemResponse\022/\n\006status\030\001 \001"
  "(\0162\037.iterm2.MenuItemResponse.Status\022\017\n\007c"
  "hecked\030\002 \001(\010\022\017\n\007enabled\030\003 \001(\010\"2\n\006Status\022"
  "\006\n\002OK\020\000\022\022\n\016BAD_IDENTIFIER\020\001\022\014\n\010DISABLED\020"
  "\002\"C\n\025RestartSessionRequest\022\022\n\nsession_id"
  "\030\001 \001(\t\022\026\n\016only_if_exited\030\002 \001(\010\"\225\001\n\026Resta"
  "rtSessionResponse\0225\n\006status\030\001 \001(\0162%.iter"
  "m2.RestartSessionResponse.Status\"D\n\006Stat"
  "us\022\006\n\002OK\020\000\022\025\n\021SESSION_NOT_FOUND\020\001\022\033\n\027SES"
  "SION_NOT_RESTARTABLE\020\002\"p\n ServerOriginat"
  "edRPCResultRequest\022\022\n\nrequest_id\030\001 \001(\t\022\030"
  "\n\016json_exception\030\002 \001(\tH\000\022\024\n\njson_value\030\003"
  " \001(\tH\000B\010\n\006result\"#\n!ServerOriginatedRPCR"
  "esultResponse\"8\n\023ListProfilesRequest\022\022\n\n"
  "properties\030\001 \003(\t\022\r\n\005guids\030\002 \003(\t\"\206\001\n\024List"
  "ProfilesResponse\0226\n\010profiles\030\001 \003(\0132$.ite"
  "rm2.ListProfilesResponse.Profile\0326\n\007Prof"
  "ile\022+\n\nproperties\030\001 \003(\0132\027.iterm2.Profile"
  "Property\"\016\n\014FocusRequest\"H\n\rFocusRespons"
  "e\0227\n\rnotifications\030\001 \003(\0132 .iterm2.FocusC"
  "hangedNotification\"\235\001\n\027SavedArrangementR"
  "equest\022\014\n\004name\030\001 \001(\t\0226\n\006action\030\002 \001(\0162&.i"
  "term2.SavedArrangementRequest.Action\022\021\n\t"
  "window_id\030\003 \001(\t\")\n\006Action\022\013\n\007RESTORE\020\000\022\010"
  "\n\004SAVE\020\001\022\010\n\004LIST\020\002\"\274\001\n\030SavedArrangementR"
  "esponse\0227\n\006status\030\001 \001(\0162\'.iterm2.SavedAr"
  "rangementResponse.Status\022\r\n\005names\030\002 \003(\t\""
  "X\n\006Status\022\006\n\002OK\020\000\022\031\n\025ARRANGEMENT_NOT_FOU"
  "ND\020\001\022\024\n\020WINDOW_NOT_FOUND\020\002\022\025\n\021REQUEST_MA"
  "LFORMED\020\003\"\301\001\n\017VariableRequest\022\024\n\nsession"
  "_id\030\001 \001(\tH\000\022\020\n\006tab_id\030\004 \001(\tH\000\022\r\n\003app\030\005 \001"
  "(\010H\000\022\023\n\twindow_id\030\006 \001(\tH\000\022(\n\003set\030\002 \003(\0132\033"
  ".iterm2.VariableRequest.Set\022\013\n\003get\030\003 \003(\t"
  "\032\"\n\003Set\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\tB\007\n\005"
  "scope\"\345\001\n\020VariableResponse\022/\n\006status\030\001 \001"
  "(\0162\037.iterm2.VariableResponse.Status\022\016\n\006v"
  "alues\030\002 \003(\t\"\217\001\n\006Status\022\006\n\002OK\020\000\022\025\n\021SESSIO"
  "N_NOT_FOUND\020\001\022\020\n\014INVALID_NAME\020\002\022\021\n\rMISSI"
  "NG_SCOPE\020\003\022\021\n\rTAB_NOT_FOUND\020\004\022\030\n\024MULTI_G"
  "ET_DISALLOWED\020\005\022\024\n\020WINDOW_NOT_FOUND\020\006\"\226\002"
  "\n\017ActivateRequest\022\023\n\twindow_id\030\001 \001(\tH\000\022\020"
  "\n\006tab_id\030\002 \001(\tH\000\022\024\n\nsession_id\030\003 \001(\tH\000\022\032"
  "\n\022order_window_front\030\004 \001(\010\022\022\n\nselect_tab"
  "\030\005 \001(\010\022\026\n\016select_session\030\006 \001(\010\0221\n\014activa"
  "te_app\030\007 \001(\0132\033.iterm2.ActivateRequest.Ap"
  "p\032=\n\003App\022\031\n\021raise_all_windows\030\001 \001(\010\022\033\n\023i"
  "gnoring_other_apps\030\002 \001(\010B\014\n\nidentifier\"}"
  "\n\020ActivateResponse\022/\n\006status\030\001 \001(\0162\037.ite"
  "rm2.ActivateResponse.Status\"8\n\006Status\022\006\n"
  "\002OK\020\000\022\022\n\016BAD_IDENTIFIER\020\001\022\022\n\016INVALID_OPT"
  "ION\020\002\"1\n\rInjectRequest\022\022\n\nsession_id\030\001 \003"
  "(\t\022\014\n\004data\030\002 \001(\014\"h\n\016InjectResponse\022-\n\006st"
  "atus\030\001 \003(\0162\035.iterm2.InjectResponse.Statu"
  "s\"\'\n\006Status\022\006\n\002OK\020\000\022\025\n\021SESSION_NOT_FOUND"
  "\020\001\"[\n\022GetPropertyRequest\022\023\n\twindow_id\030\001 "
  "\001(\tH\000\022\024\n\nsession_id\030\003 \001(\tH\000\022\014\n\004name\030\002 \001("
  "\tB\014\n\nidentifier\"\232\001\n\023GetPropertyResponse\022"
  "2\n\006status\030\001 \001(\0162\".iterm2.GetPropertyResp"
  "onse.Status\022\022\n\njson_value\030\002 \001(\t\";\n\006Statu"
  "s\022\006\n\002OK\020\000\022\025\n\021UNRECOGNIZED_NAME\020\001\022\022\n\016INVA"
  "LID_TARGET\020\002\"o\n\022SetPropertyRequest\022\023\n\twi"
  "ndow_id\030\001 \001(\tH\000\022\024\n\nsession_id\030\005 \001(\tH\000\022\014\n"
  "\004name\030\003 \001(\t\022\022\n\njson_value\030\004 \001(\tB\014\n\nident"
  "ifier\"\303\001\n\023SetPropertyResponse\0222\n\006status\030"
  "\001 \001(\0162\".iterm2.SetPropertyResponse.Statu"
  "s\"x\n\006Status\022\006\n\002OK\020\000\022\025\n\021UNRECOGNIZED_NAME"
  "\020\001\022\021\n\rINVALID_VALUE\020\002\022\022\n\016INVALID_TARGET\020"
  "\003\022\014\n\010DEFERRED\020\004\022\016\n\nIMPOSSIBLE\020\005\022\n\n\006FAILE"
  "D\020\006\"\330\001\n\023RegisterToolRequest\022\014\n\004name\030\001 \001("
  "\t\022\022\n\nidentifier\030\002 \001(\t\022+\n\034reveal_if_alrea"
  "dy_registered\030\005 \001(\010:\005false\022F\n\ttool_type\030"
  "\003 \001(\0162$.iterm2.RegisterToolRequest.ToolT"
  "ype:\rWEB_VIEW_TOOL\022\013\n\003URL\030\004 \001(\t\"\035\n\010ToolT"
  "ype\022\021\n\rWEB_VIEW_TOOL\020\001\"\337\014\n\026RPCRegistrati"
  "onRequest\022\014\n\004name\030\001 \001(\t\022F\n\targuments\030\002 \003"
  "(\01323.iterm2.RPCRegistrationRequest.RPCAr"
  "gumentSignature\022<\n\010defaults\030\004 \003(\0132*.iter"
  "m2.RPCRegistrationRequest.RPCArgument\022\017\n"
  "\007timeout\030\003 \001(\002\022:\n\004role\030\005 \001(\0162#.iterm2.RP"
  "CRegistrationRequest.Role:\007GENERIC\022Y\n\030se"
  "ssion_title_attributes\030\007 \001(\01325.iterm2.RP"
  "CRegistrationRequest.SessionTitleAttribu"
  "tesH\000\022f\n\037status_bar_component_attributes"
  "\030\010 \001(\0132;.iterm2.RPCRegistrationRequest.S"
  "tatusBarComponentAttributesH\000\022W\n\027context"
  "_menu_attributes\030\t \001(\01324.iterm2.RPCRegis"
  "trationRequest.ContextMenuAttributesH\000\022\030"
  "\n\014display_name\030\006 \001(\tB\002\030\001\032$\n\024RPCArgumentS"
  "ignature\022\014\n\004name\030\001 \001(\t\032)\n\013RPCArgument\022\014\n"
  "\004name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\032I\n\026SessionTitl"
  "eAttributes\022\024\n\014display_name\030\001 \001(\t\022\031\n\021uni"
  "que_identifier\030\006 \001(\t\032\331\005\n\034StatusBarCompon"
  "entAttributes\022\031\n\021short_description\030\001 \001(\t"
  "\022\034\n\024detailed_description\030\002 \001(\t\022O\n\005knobs\030"
  "\003 \003(\0132@.iterm2.RPCRegistrationRequest.St"
  "atusBarComponentAttributes.Knob\022\020\n\010exemp"
  "lar\030\004 \001(\t\022\026\n\016update_cadence\030\005 \001(\002\022\031\n\021uni"
  "que_identifier\030\006 \001(\t\022O\n\005icons\030\007 \003(\0132@.it"
  "erm2.RPCRegistrationRequest.StatusBarCom"
  "ponentAttributes.Icon\022^\n\006format\030\010 \001(\0162B."
  "iterm2.RPCRegistrationRequest.StatusBarC"
  "omponentAttributes.Format:\nPLAIN_TEXT\032\357\001"
  "\n\004Knob\022\014\n\004name\030\001 \001(\t\022S\n\004type\030\002 \001(\0162E.ite"
  "rm2.RPCRegistrationRequest.StatusBarComp"
  "onentAttributes.Knob.Type\022\023\n\013placeholder"
  "\030\003 \001(\t\022\032\n\022json_default_value\030\004 \001(\t\022\013\n\003ke"
  "y\030\005 \001(\t\"F\n\004Type\022\014\n\010Checkbox\020\001\022\n\n\006String\020"
  "\002\022\031\n\025PositiveFloatingPoint\020\003\022\t\n\005Color\020\004\032"
  "#\n\004Icon\022\014\n\004data\030\001 \001(\014\022\r\n\005scale\030\002 \001(\002\"\"\n\006"
  "Format\022\016\n\nPLAIN_TEXT\020\000\022\010\n\004HTML\020\001\032H\n\025Cont"
  "extMenuAttributes\022\024\n\014display_name\030\001 \001(\t\022"
  "\031\n\021unique_identifier\030\002 \001(\t\"R\n\004Role\022\013\n\007GE"
  "NERIC\020\001\022\021\n\rSESSION_TITLE\020\002\022\030\n\024STATUS_BAR"
  "_COMPONENT\020\003\022\020\n\014CONTEXT_MENU\020\004B\030\n\026RoleSp"
  "ecificAttributes\"\213\001\n\024RegisterToolRespons"
  "e\0223\n\006status\030\001 \001(\0162#.iterm2.RegisterToolR"
  "esponse.Status\">\n\006Status\022\006\n\002OK\020\000\022\025\n\021REQU"
  "EST_MALFORMED\020\001\022\025\n\021PERMISSION_DENIED\020\002\"\276"
  "\001\n\020KeystrokePattern\022-\n\022required_modifier"
  "s\030\001 \003(\0162\021.iterm2.Modifiers\022.\n\023forbidden_"
  "modifiers\030\002 \003(\0162\021.iterm2.Modifiers\022\020\n\010ke"
  "ycodes\030\003 \003(\005\022\022\n\ncharacters\030\004 \003(\t\022%\n\035char"
  "acters_ignoring_modifiers\030\005 \003(\t\"e\n\027Keyst"
  "rokeMonitorRequest\0228\n\022patterns_to_ignore"
  "\030\001 \003(\0132\030.iterm2.KeystrokePatternB\002\030\001\022\020\n\010"
  "advanced\030\002 \001(\010\"N\n\026KeystrokeFilterRequest"
  "\0224\n\022patterns_to_ignore\030\001 \003(\0132\030.iterm2.Ke"
  "ystrokePattern\"`\n\026VariableMonitorRequest"
  "\022\014\n\004name\030\001 \001(\t\022$\n\005scope\030\002 \001(\0162\025.iterm2.V"
  "ariableScope\022\022\n\nidentifier\030\003 \001(\t\"$\n\024Prof"
  "ileChangeRequest\022\014\n\004guid\030\001 \001(\t\"@\n\024Prompt"
  "MonitorRequest\022(\n\005modes\030\001 \003(\0162\031.iterm2.P"
  "romptMonitorMode\"\215\004\n\023NotificationRequest"
  "\022\017\n\007session\030\001 \001(\t\022\021\n\tsubscribe\030\002 \001(\010\0223\n\021"
  "notification_type\030\003 \001(\0162\030.iterm2.Notific"
  "ationType\022B\n\030rpc_registration_request\030\004 "
  "\001(\0132\036.iterm2.RPCRegistrationRequestH\000\022D\n"
  "\031keystroke_monitor_request\030\005 \001(\0132\037.iterm"
  "2.KeystrokeMonitorRequestH\000\022B\n\030variable_"
  "monitor_request\030\006 \001(\0132\036.iterm2.VariableM"
  "onitorRequestH\000\022>\n\026profile_change_reques"
  "t\030\007 \001(\0132\034.iterm2.ProfileChangeRequestH\000\022"
  "B\n\030keystroke_filter_request\030\010 \001(\0132\036.iter"
  "m2.KeystrokeFilterRequestH\000\022>\n\026prompt_mo"
  "nitor_request\030\t \001(\0132\034.iterm2.PromptMonit"
  "orRequestH\000B\013\n\targuments\"\365\001\n\024Notificatio"
  "nResponse\0223\n\006status\030\001 \001(\0162#.iterm2.Notif"
  "icationResponse.Status\"\247\001\n\006Status\022\006\n\002OK\020"
  "\000\022\025\n\021SESSION_NOT_FOUND\020\001\022\025\n\021REQUEST_MALF"
  "ORMED\020\002\022\022\n\016NOT_SUBSCRIBED\020\003\022\026\n\022ALREADY_S"
  "UBSCRIBED\020\004\022#\n\037DUPLICATE_SERVER_ORIGINAT"
  "ED_RPC\020\005\022\026\n\022INVALID_IDENTIFIER\020\006\"\312\007\n\014Not"
  "ification\022=\n\026keystroke_notification\030\001 \001("
  "\0132\035.iterm2.KeystrokeNotification\022D\n\032scre"
  "en_update_notification\030\002 \001(\0132 .iterm2.Sc"
  "reenUpdateNotification\0227\n\023prompt_notific"
  "ation\030\003 \001(\0132\032.iterm2.PromptNotification\022"
  "L\n\034location_change_notification\030\004 \001(\0132\"."
  "iterm2.LocationChangeNotificationB\002\030\001\022U\n"
  "#custom_escape_sequence_notification\030\005 \001"
  "(\0132(.iterm2.CustomEscapeSequenceNotifica"
  "tion\022@\n\030new_session_notification\030\006 \001(\0132\036"
  ".iterm2.NewSessionNotification\022L\n\036termin"
  "ate_session_notification\030\007 \001(\0132$.iterm2."
  "TerminateSessionNotification\022F\n\033layout_c"
  "hanged_notification\030\010 \001(\0132!.iterm2.Layou"
  "tChangedNotification\022D\n\032focus_changed_no"
  "tification\030\t \001(\0132 .iterm2.FocusChangedNo"
  "tification\022S\n\"server_originated_rpc_noti"
  "fication\030\n \001(\0132\'.iterm2.ServerOriginated"
  "RPCNotification\022N\n\031broadcast_domains_cha"
  "nged\030\013 \001(\0132+.iterm2.BroadcastDomainsChan"
  "gedNotification\022J\n\035variable_changed_noti"
  "fication\030\014 \001(\0132#.iterm2.VariableChangedN"
  "otification\022H\n\034profile_changed_notificat"
  "ion\030\r \001(\0132\".iterm2.ProfileChangedNotific"
  "ation\"*\n\032ProfileChangedNotification\022\014\n\004g"
  "uid\030\001 \001(\t\"}\n\033VariableChangedNotification"
  "\022$\n\005scope\030\001 \001(\0162\025.iterm2.VariableScope\022\022"
  "\n\nidentifier\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\026\n\016json"
  "_new_value\030\004 \001(\t\"Y\n#BroadcastDomainsChan"
  "gedNotification\0222\n\021broadcast_domains\030\001 \003"
  "(\0132\027.iterm2.BroadcastDomain\"\220\001\n\023ServerOr"
  "iginatedRPC\022\014\n\004name\030\002 \001(\t\022:\n\targuments\030\003"
  " \003(\0132\'.iterm2.ServerOriginatedRPC.RPCArg"
  "ument\032/\n\013RPCArgument\022\014\n\004name\030\001 \001(\t\022\022\n\njs"
  "on_value\030\002 \001(\t\"_\n\037ServerOriginatedRPCNot"
  "ification\022\022\n\nrequest_id\030\001 \001(\t\022(\n\003rpc\030\002 \001"
  "(\0132\033.iterm2.ServerOriginatedRPC\"\205\002\n\025Keys"
  "trokeNotification\022\022\n\ncharacters\030\001 \001(\t\022#\n"
  "\033charactersIgnoringModifiers\030\002 \001(\t\022$\n\tmo"
  "difiers\030\003 \003(\0162\021.iterm2.Modifiers\022\017\n\007keyC"
  "ode\030\004 \001(\005\022\017\n\007session\030\005 \001(\t\0224\n\006action\030\006 \001"
  "(\0162$.iterm2.KeystrokeNotification.Action"
  "\"5\n\006Action\022\014\n\010KEY_DOWN\020\000\022\n\n\006KEY_UP\020\001\022\021\n\r"
  "FLAGS_CHANGED\020\002\"+\n\030ScreenUpdateNotificat"
  "ion\022\017\n\007session\030\001 \001(\t\"Z\n\030PromptNotificati"
  "onPrompt\022\023\n\013placeholder\030\001 \001(\t\022)\n\006prompt\030"
  "\002 \001(\0132\031.iterm2.GetPromptResponse\"1\n\036Prom"
  "ptNotificationCommandStart\022\017\n\007command\030\001 "
  "\001(\t\".\n\034PromptNotificationCommandEnd\022\016\n\006s"
  "tatus\030\001 \001(\005\"\372\001\n\022PromptNotification\022\017\n\007se"
  "ssion\030\001 \001(\t\0222\n\006prompt\030\002 \001(\0132 .iterm2.Pro"
  "mptNotificationPromptH\000\022\?\n\rcommand_start"
  "\030\003 \001(\0132&.iterm2.PromptNotificationComman"
  "dStartH\000\022;\n\013command_end\030\004 \001(\0132$.iterm2.P"
  "romptNotificationCommandEndH\000\022\030\n\020unique_"
  "prompt_id\030\005 \001(\tB\007\n\005event\"f\n\032LocationChan"
  "geNotification\022\021\n\thost_name\030\001 \001(\t\022\021\n\tuse"
  "r_name\030\002 \001(\t\022\021\n\tdirectory\030\003 \001(\t\022\017\n\007sessi"
  "on\030\004 \001(\t\"]\n CustomEscapeSequenceNotifica"
  "tion\022\017\n\007session\030\001 \001(\t\022\027\n\017sender_identity"
  "\030\002 \001(\t\022\017\n\007payload\030\003 \001(\t\",\n\026NewSessionNot"
  "ification\022\022\n\nsession_id\030\001 \001(\t\"\204\003\n\030FocusC"
  "hangedNotification\022\034\n\022application_active"
  "\030\001 \001(\010H\000\0229\n\006window\030\002 \001(\0132\'.iterm2.FocusC"
  "hangedNotification.WindowH\000\022\026\n\014selected_"
  "tab\030\003 \001(\tH\000\022\021\n\007session\030\004 \001(\tH\000\032\332\001\n\006Windo"
  "w\022K\n\rwindow_status\030\001 \001(\01624.iterm2.FocusC"
  "hangedNotification.Window.WindowStatus\022\021"
  "\n\twindow_id\030\002 \001(\t\"p\n\014WindowStatus\022\036\n\032TER"
  "MINAL_WINDOW_BECAME_KEY\020\000\022\036\n\032TERMINAL_WI"
  "NDOW_IS_CURRENT\020\001\022 \n\034TERMINAL_WINDOW_RES"
  "IGNED_KEY\020\002B\007\n\005event\"2\n\034TerminateSession"
  "Notification\022\022\n\nsession_id\030\001 \001(\t\"Y\n\031Layo"
  "utChangedNotification\022<\n\026list_sessions_r"
  "esponse\030\001 \001(\0132\034.iterm2.ListSessionsRespo"
  "nse\"J\n\020GetBufferRequest\022\017\n\007session\030\001 \001(\t"
  "\022%\n\nline_range\030\002 \001(\0132\021.iterm2.LineRange\""
  "\350\002\n\021GetBufferResponse\0224\n\006status\030\001 \001(\0162 ."
  "iterm2.GetBufferResponse.Status:\002OK\022 \n\005r"
  "ange\030\002 \001(\0132\r.iterm2.RangeB\002\030\001\022&\n\010content"
  "s\030\003 \003(\0132\024.iterm2.LineContents\022\035\n\006cursor\030"
  "\004 \001(\0132\r.iterm2.Coord\022\"\n\026num_lines_above_"
  "screen\030\005 \001(\003B\002\030\001\0228\n\024windowed_coord_range"
  "\030\006 \001(\0132\032.iterm2.WindowedCoordRange\"V\n\006St"
  "atus\022\006\n\002OK\020\000\022\025\n\021SESSION_NOT_FOUND\020\001\022\026\n\022I"
  "NVALID_LINE_RANGE\020\002\022\025\n\021REQUEST_MALFORMED"
  "\020\003\"=\n\020GetPromptRequest\022\017\n\007session\030\001 \001(\t\022"
  "\030\n\020unique_prompt_id\030\002 \001(\t\"\343\003\n\021GetPromptR"
  "esponse\0224\n\006status\030\001 \001(\0162 .iterm2.GetProm"
  "ptResponse.Status:\002OK\022(\n\014prompt_range\030\002 "
  "\001(\0132\022.iterm2.CoordRange\022)\n\rcommand_range"
  "\030\003 \001(\0132\022.iterm2.CoordRange\022(\n\014output_ran"
  "ge\030\004 \001(\0132\022.iterm2.CoordRange\022\031\n\021working_"
  "directory\030\005 \001(\t\022\017\n\007command\030\006 \001(\t\0225\n\014prom"
  "pt_state\030\007 \001(\0162\037.iterm2.GetPromptRespons"
  "e.State\022\023\n\013exit_status\030\t \001(\r\022\030\n\020unique_p"
  "rompt_id\030\n \001(\t\"V\n\006Status\022\006\n\002OK\020\000\022\025\n\021SESS"
  "ION_NOT_FOUND\020\001\022\025\n\021REQUEST_MALFORMED\020\002\022\026"
  "\n\022PROMPT_UNAVAILABLE\020\003\"/\n\005State\022\013\n\007EDITI"
  "NG\020\000\022\013\n\007RUNNING\020\001\022\014\n\010FINISHED\020\002\"V\n\022ListP"
  "romptsRequest\022\017\n\007session\030\001 \001(\t\022\027\n\017first_"
  "unique_id\030\002 \001(\t\022\026\n\016last_unique_id\030\003 \001(\t\""
  "\220\001\n\023ListPromptsResponse\0226\n\006status\030\001 \001(\0162"
  "\".iterm2.ListPromptsResponse.Status:\002OK\022"
  "\030\n\020unique_prompt_id\030\002 \003(\t\"\'\n\006Status\022\006\n\002O"
  "K\020\000\022\025\n\021SESSION_NOT_FOUND\020\001\":\n\031GetProfile"
  "PropertyRequest\022\017\n\007session\030\001 \001(\t\022\014\n\004keys"
  "\030\002 \003(\t\"2\n\017ProfileProperty\022\013\n\003key\030\001 \001(\t\022\022"
  "\n\njson_value\030\002 \001(\t\"\323\001\n\032GetProfilePropert"
  "yResponse\022=\n\006status\030\001 \001(\0162).iterm2.GetPr"
  "ofilePropertyResponse.Status:\002OK\022+\n\nprop"
  "erties\030\003 \003(\0132\027.iterm2.ProfileProperty\"I\n"
  "\006Status\022\006\n\002OK\020\000\022\025\n\021SESSION_NOT_FOUND\020\001\022\025"
  "\n\021REQUEST_MALFORMED\020\002\022\t\n\005ERROR\020\003\"\247\002\n\031Set"
  "ProfilePropertyRequest\022\021\n\007session\030\001 \001(\tH"
  "\000\022\?\n\tguid_list\030\002 \001(\0132*.iterm2.SetProfile"
  "PropertyRequest.GuidListH\000\022\013\n\003key\030\003 \001(\t\022"
  "\022\n\njson_value\030\004 \001(\t\022A\n\013assignments\030\005 \003(\013"
  "2,.iterm2.SetProfilePropertyRequest.Assi"
  "gnment\032\031\n\010GuidList\022\r\n\005guids\030\001 \003(\t\032-\n\nAss"
  "ignment\022\013\n\003key\030\001 \001(\t\022\022\n\njson_value\030\002 \001(\t"
  "B\010\n\006target\"\251\001\n\032SetProfilePropertyRespons"
  "e\022=\n\006status\030\001 \001(\0162).iterm2.SetProfilePro"
  "pertyResponse.Status:\002OK\"L\n\006Status\022\006\n\002OK"
  "\020\000\022\025\n\021SESSION_NOT_FOUND\020\001\022\025\n\021REQUEST_MAL"
  "FORMED\020\002\022\014\n\010BAD_GUID\020\003\"#\n\022TransactionReq"
  "uest\022\r\n\005begin\030\001 \001(\010\"\217\001\n\023TransactionRespo"
  "nse\0226\n\006status\030\001 \001(\0162\".iterm2.Transaction"
  "Response.Status:\002OK\"@\n\006Status\022\006\n\002OK\020\000\022\022\n"
  "\016NO_TRANSACTION\020\001\022\032\n\026ALREADY_IN_TRANSACT"
  "ION\020\002\"{\n\tLineRange\022\034\n\024screen_contents_on"
  "ly\030\001 \001(\010\022\026\n\016trailing_lines\030\002 \001(\005\0228\n\024wind"
  "owed_coord_range\030\003 \001(\0132\032.iterm2.Windowed"
  "CoordRange\")\n\005Range\022\020\n\010location\030\001 \001(\003\022\016\n"
  "\006length\030\002 \001(\003\"F\n\nCoordRange\022\034\n\005start\030\001 \001"
  "(\0132\r.iterm2.Coord\022\032\n\003end\030\002 \001(\0132\r.iterm2."
  "Coord\"\035\n\005Coord\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\003\"\353\001\n"
  "\014LineContents\022\014\n\004text\030\001 \001(\t\0227\n\024code_poin"
  "ts_per_cell\030\002 \003(\0132\031.iterm2.CodePointsPer"
  "Cell\022N\n\014continuation\030\003 \001(\0162!.iterm2.Line"
  "Contents.Continuation:\025CONTINUATION_HARD"
  "_EOL\"D\n\014Continuation\022\031\n\025CONTINUATION_HAR"
  "D_EOL\020\001\022\031\n\025CONTINUATION_SOFT_EOL\020\002\"@\n\021Co"
  "dePointsPerCell\022\032\n\017num_code_points\030\001 \001(\005"
  ":\0011\022\017\n\007repeats\030\002 \001(\005\"\025\n\023ListSessionsRequ"
  "est\"L\n\017SendTextRequest\022\017\n\007session\030\001 \001(\t\022"
  "\014\n\004text\030\002 \001(\t\022\032\n\022suppress_broadcast\030\003 \001("
  "\010\"l\n\020SendTextResponse\022/\n\006status\030\001 \001(\0162\037."
  "iterm2.SendTextResponse.Status\"\'\n\006Status"
  "\022\006\n\002OK\020\000\022\025\n\021SESSION_NOT_FOUND\020\001\"%\n\004Size\022"
  "\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\"\035\n\005Point\022"
  "\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"B\n\005Frame\022\035\n\006origin"
  "\030\001 \001(\0132\r.iterm2.Point\022\032\n\004size\030\002 \001(\0132\014.it"
  "erm2.Size\"y\n\016SessionSummary\022\031\n\021unique_id"
  "entifier\030\001 \001(\t\022\034\n\005frame\030\002 \001(\0132\r.iterm2.F"
  "rame\022\037\n\tgrid_size\030\003 \001(\0132\014.iterm2.Size\022\r\n"
  "\005title\030\004 \001(\t\"\301\001\n\rSplitTreeNode\022\020\n\010vertic"
  "al\030\001 \001(\010\0222\n\005links\030\002 \003(\0132#.iterm2.SplitTr"
  "eeNode.SplitTreeLink\032j\n\rSplitTreeLink\022)\n"
  "\007session\030\001 \001(\0132\026.iterm2.SessionSummaryH\000"
  "\022%\n\004node\030\002 \001(\0132\025.iterm2.SplitTreeNodeH\000B"
  "\007\n\005child\"\235\003\n\024ListSessionsResponse\0224\n\007win"
  "dows\030\001 \003(\0132#.iterm2.ListSessionsResponse"
  ".Window\022/\n\017buried_sessions\030\002 \003(\0132\026.iterm"
  "2.SessionSummary\032y\n\006Window\022.\n\004tabs\030\001 \003(\013"
  "2 .iterm2.ListSessionsResponse.Tab\022\021\n\twi"
  "ndow_id\030\002 \001(\t\022\034\n\005frame\030\003 \001(\0132\r.iterm2.Fr"
  "ame\022\016\n\006number\030\004 \001(\005\032\242\001\n\003Tab\022#\n\004root\030\003 \001("
  "\0132\025.iterm2.SplitTreeNode\022\016\n\006tab_id\030\002 \001(\t"
  "\022\026\n\016tmux_window_id\030\004 \001(\t\022\032\n\022tmux_connect"
  "ion_id\030\005 \001(\t\0222\n\022minimized_sessions\030\006 \003(\013"
  "2\026.iterm2.SessionSummary\"\237\001\n\020CreateTabRe"
  "quest\022\024\n\014profile_name\030\001 \001(\t\022\021\n\twindow_id"
  "\030\002 \001(\t\022\021\n\ttab_index\030\003 \001(\r\022\023\n\007command\030\004 \001"
  "(\tB\002\030\001\022:\n\031custom_profile_properties\030\005 \003("
  "\0132\027.iterm2.ProfileProperty\"\360\001\n\021CreateTab"
  "Response\0220\n\006status\030\001 \001(\0162 .iterm2.Create"
  "TabResponse.Status\022\021\n\twindow_id\030\002 \001(\t\022\016\n"
  "\006tab_id\030\003 \001(\005\022\022\n\nsession_id\030\004 \001(\t\"r\n\006Sta"
  "tus\022\006\n\002OK\020\000\022\030\n\024INVALID_PROFILE_NAME\020\001\022\025\n"
  "\021INVALID_WINDOW_ID\020\002\022\025\n\021INVALID_TAB_INDE"
  "X\020\003\022\030\n\024MISSING_SUBSTITUTION\020\004\"\376\001\n\020SplitP"
  "aneRequest\022\017\n\007session\030\001 \001(\t\022@\n\017split_dir"
  "ection\030\002 \001(\0162\'.iterm2.SplitPaneRequest.S"
  "plitDirection\022\025\n\006before\030\003 \001(\010:\005false\022\024\n\014"
  "profile_name\030\004 \001(\t\022:\n\031custom_profile_pro"
  "perties\030\005 \003(\0132\027.iterm2.ProfileProperty\"."
  "\n\016SplitDirection\022\014\n\010VERTICAL\020\000\022\016\n\nHORIZO"
  "NTAL\020\001\"\325\001\n\021SplitPaneResponse\0220\n\006status\030\001"
  " \001(\0162 .iterm2.SplitPaneResponse.Status\022\022"
  "\n\nsession_id\030\002 \003(\t\"z\n\006Status\022\006\n\002OK\020\000\022\025\n\021"
  "SESSION_NOT_FOUND\020\001\022\030\n\024INVALID_PROFILE_N"
  "AME\020\002\022\020\n\014CANNOT_SPLIT\020\003\022%\n!MALFORMED_CUS"
  "TOM_PROFILE_PROPERTY\020\004*V\n\rSelectionMode\022"
  "\r\n\tCHARACTER\020\000\022\010\n\004WORD\020\001\022\010\n\004LINE\020\002\022\t\n\005SM"
  "ART\020\003\022\007\n\003BOX\020\004\022\016\n\nWHOLE_LINE\020\005*\264\003\n\020Notif"
  "icationType\022\027\n\023NOTIFY_ON_KEYSTROKE\020\001\022\033\n\027"
  "NOTIFY_ON_SCREEN_UPDATE\020\002\022\024\n\020NOTIFY_ON_P"
  "ROMPT\020\003\022!\n\031NOTIFY_ON_LOCATION_CHANGE\020\004\032\002"
  "\010\001\022$\n NOTIFY_ON_CUSTOM_ESCAPE_SEQUENCE\020\005"
  "\022\035\n\031NOTIFY_ON_VARIABLE_CHANGE\020\014\022\024\n\020KEYST"
  "ROKE_FILTER\020\016\022\031\n\025NOTIFY_ON_NEW_SESSION\020\006"
  "\022\037\n\033NOTIFY_ON_TERMINATE_SESSION\020\007\022\033\n\027NOT"
  "IFY_ON_LAYOUT_CHANGE\020\010\022\032\n\026NOTIFY_ON_FOCU"
  "S_CHANGE\020\t\022#\n\037NOTIFY_ON_SERVER_ORIGINATE"
  "D_RPC\020\n\022\036\n\032NOTIFY_ON_BROADCAST_CHANGE\020\013\022"
  "\034\n\030NOTIFY_ON_PROFILE_CHANGE\020\r*V\n\tModifie"
  "rs\022\013\n\007CONTROL\020\001\022\n\n\006OPTION\020\002\022\013\n\007COMMAND\020\003"
  "\022\t\n\005SHIFT\020\004\022\014\n\010FUNCTION\020\005\022\n\n\006NUMPAD\020\006*:\n"
  "\rVariableScope\022\013\n\007SESSION\020\001\022\007\n\003TAB\020\002\022\n\n\006"
  "WINDOW\020\003\022\007\n\003APP\020\004*C\n\021PromptMonitorMode\022\n"
  "\n\006PROMPT\020\001\022\021\n\rCOMMAND_START\020\002\022\017\n\013COMMAND"
  "_END\020\003B\006\242\002\003ITM"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_iterm_2dapi_2epb_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_iterm_2dapi_2epb = {
  false, false, 26054, descriptor_table_protodef_iterm_2dapi_2epb, "iterm-api.pb", 
  &descriptor_table_iterm_2dapi_2epb_once, nullptr, 0, 169,
  schemas, file_default_instances, TableStruct_iterm_2dapi_2epb::offsets,
  file_level_metadata_iterm_2dapi_2epb, file_level_enum_descriptors_iterm_2dapi_2epb, file_level_service_descriptors_iterm_2dapi_2epb,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_iterm_2dapi_2epb_getter() {
  return &descriptor_table_iterm_2dapi_2epb;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_iterm_2dapi_2epb(&descriptor_table_iterm_2dapi_2epb);
namespace iterm2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvokeFunctionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[0];
}
bool InvokeFunctionResponse_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse::TIMEOUT;
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse::FAILED;
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse::REQUEST_MALFORMED;
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse::INVALID_ID;
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse::Status_MIN;
constexpr InvokeFunctionResponse_Status InvokeFunctionResponse::Status_MAX;
constexpr int InvokeFunctionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloseResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[1];
}
bool CloseResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CloseResponse_Status CloseResponse::OK;
constexpr CloseResponse_Status CloseResponse::NOT_FOUND;
constexpr CloseResponse_Status CloseResponse::USER_DECLINED;
constexpr CloseResponse_Status CloseResponse::Status_MIN;
constexpr CloseResponse_Status CloseResponse::Status_MAX;
constexpr int CloseResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetBroadcastDomainsResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[2];
}
bool SetBroadcastDomainsResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::OK;
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::SESSION_NOT_FOUND;
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::BROADCAST_DOMAINS_NOT_DISJOINT;
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::SESSIONS_NOT_IN_SAME_WINDOW;
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::Status_MIN;
constexpr SetBroadcastDomainsResponse_Status SetBroadcastDomainsResponse::Status_MAX;
constexpr int SetBroadcastDomainsResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusBarComponentResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[3];
}
bool StatusBarComponentResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse::OK;
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse::SESSION_NOT_FOUND;
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse::REQUEST_MALFORMED;
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse::INVALID_IDENTIFIER;
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse::Status_MIN;
constexpr StatusBarComponentResponse_Status StatusBarComponentResponse::Status_MAX;
constexpr int StatusBarComponentResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[4];
}
bool SelectionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SelectionResponse_Status SelectionResponse::OK;
constexpr SelectionResponse_Status SelectionResponse::INVALID_SESSION;
constexpr SelectionResponse_Status SelectionResponse::INVALID_RANGE;
constexpr SelectionResponse_Status SelectionResponse::REQUEST_MALFORMED;
constexpr SelectionResponse_Status SelectionResponse::Status_MIN;
constexpr SelectionResponse_Status SelectionResponse::Status_MAX;
constexpr int SelectionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorPresetResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[5];
}
bool ColorPresetResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ColorPresetResponse_Status ColorPresetResponse::OK;
constexpr ColorPresetResponse_Status ColorPresetResponse::PRESET_NOT_FOUND;
constexpr ColorPresetResponse_Status ColorPresetResponse::REQUEST_MALFORMED;
constexpr ColorPresetResponse_Status ColorPresetResponse::Status_MIN;
constexpr ColorPresetResponse_Status ColorPresetResponse::Status_MAX;
constexpr int ColorPresetResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreferencesResponse_Result_SetPreferenceResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[6];
}
bool PreferencesResponse_Result_SetPreferenceResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::OK;
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::BAD_JSON;
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::INVALID_VALUE;
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::Status_MIN;
constexpr PreferencesResponse_Result_SetPreferenceResult_Status PreferencesResponse_Result_SetPreferenceResult::Status_MAX;
constexpr int PreferencesResponse_Result_SetPreferenceResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreferencesResponse_Result_SetDefaultProfileResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[7];
}
bool PreferencesResponse_Result_SetDefaultProfileResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult::OK;
constexpr PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult::BAD_GUID;
constexpr PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult::Status_MIN;
constexpr PreferencesResponse_Result_SetDefaultProfileResult_Status PreferencesResponse_Result_SetDefaultProfileResult::Status_MAX;
constexpr int PreferencesResponse_Result_SetDefaultProfileResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReorderTabsResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[8];
}
bool ReorderTabsResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReorderTabsResponse_Status ReorderTabsResponse::OK;
constexpr ReorderTabsResponse_Status ReorderTabsResponse::INVALID_ASSIGNMENT;
constexpr ReorderTabsResponse_Status ReorderTabsResponse::INVALID_WINDOW_ID;
constexpr ReorderTabsResponse_Status ReorderTabsResponse::INVALID_TAB_ID;
constexpr ReorderTabsResponse_Status ReorderTabsResponse::Status_MIN;
constexpr ReorderTabsResponse_Status ReorderTabsResponse::Status_MAX;
constexpr int ReorderTabsResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TmuxResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[9];
}
bool TmuxResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TmuxResponse_Status TmuxResponse::OK;
constexpr TmuxResponse_Status TmuxResponse::INVALID_REQUEST;
constexpr TmuxResponse_Status TmuxResponse::INVALID_CONNECTION_ID;
constexpr TmuxResponse_Status TmuxResponse::INVALID_WINDOW_ID;
constexpr TmuxResponse_Status TmuxResponse::Status_MIN;
constexpr TmuxResponse_Status TmuxResponse::Status_MAX;
constexpr int TmuxResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetTabLayoutResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[10];
}
bool SetTabLayoutResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse::OK;
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse::BAD_TAB_ID;
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse::WRONG_TREE;
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse::INVALID_SIZE;
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse::Status_MIN;
constexpr SetTabLayoutResponse_Status SetTabLayoutResponse::Status_MAX;
constexpr int SetTabLayoutResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MenuItemResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[11];
}
bool MenuItemResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MenuItemResponse_Status MenuItemResponse::OK;
constexpr MenuItemResponse_Status MenuItemResponse::BAD_IDENTIFIER;
constexpr MenuItemResponse_Status MenuItemResponse::DISABLED;
constexpr MenuItemResponse_Status MenuItemResponse::Status_MIN;
constexpr MenuItemResponse_Status MenuItemResponse::Status_MAX;
constexpr int MenuItemResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestartSessionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[12];
}
bool RestartSessionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RestartSessionResponse_Status RestartSessionResponse::OK;
constexpr RestartSessionResponse_Status RestartSessionResponse::SESSION_NOT_FOUND;
constexpr RestartSessionResponse_Status RestartSessionResponse::SESSION_NOT_RESTARTABLE;
constexpr RestartSessionResponse_Status RestartSessionResponse::Status_MIN;
constexpr RestartSessionResponse_Status RestartSessionResponse::Status_MAX;
constexpr int RestartSessionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SavedArrangementRequest_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[13];
}
bool SavedArrangementRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SavedArrangementRequest_Action SavedArrangementRequest::RESTORE;
constexpr SavedArrangementRequest_Action SavedArrangementRequest::SAVE;
constexpr SavedArrangementRequest_Action SavedArrangementRequest::LIST;
constexpr SavedArrangementRequest_Action SavedArrangementRequest::Action_MIN;
constexpr SavedArrangementRequest_Action SavedArrangementRequest::Action_MAX;
constexpr int SavedArrangementRequest::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SavedArrangementResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[14];
}
bool SavedArrangementResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SavedArrangementResponse_Status SavedArrangementResponse::OK;
constexpr SavedArrangementResponse_Status SavedArrangementResponse::ARRANGEMENT_NOT_FOUND;
constexpr SavedArrangementResponse_Status SavedArrangementResponse::WINDOW_NOT_FOUND;
constexpr SavedArrangementResponse_Status SavedArrangementResponse::REQUEST_MALFORMED;
constexpr SavedArrangementResponse_Status SavedArrangementResponse::Status_MIN;
constexpr SavedArrangementResponse_Status SavedArrangementResponse::Status_MAX;
constexpr int SavedArrangementResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[15];
}
bool VariableResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VariableResponse_Status VariableResponse::OK;
constexpr VariableResponse_Status VariableResponse::SESSION_NOT_FOUND;
constexpr VariableResponse_Status VariableResponse::INVALID_NAME;
constexpr VariableResponse_Status VariableResponse::MISSING_SCOPE;
constexpr VariableResponse_Status VariableResponse::TAB_NOT_FOUND;
constexpr VariableResponse_Status VariableResponse::MULTI_GET_DISALLOWED;
constexpr VariableResponse_Status VariableResponse::WINDOW_NOT_FOUND;
constexpr VariableResponse_Status VariableResponse::Status_MIN;
constexpr VariableResponse_Status VariableResponse::Status_MAX;
constexpr int VariableResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivateResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[16];
}
bool ActivateResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActivateResponse_Status ActivateResponse::OK;
constexpr ActivateResponse_Status ActivateResponse::BAD_IDENTIFIER;
constexpr ActivateResponse_Status ActivateResponse::INVALID_OPTION;
constexpr ActivateResponse_Status ActivateResponse::Status_MIN;
constexpr ActivateResponse_Status ActivateResponse::Status_MAX;
constexpr int ActivateResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InjectResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[17];
}
bool InjectResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InjectResponse_Status InjectResponse::OK;
constexpr InjectResponse_Status InjectResponse::SESSION_NOT_FOUND;
constexpr InjectResponse_Status InjectResponse::Status_MIN;
constexpr InjectResponse_Status InjectResponse::Status_MAX;
constexpr int InjectResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPropertyResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[18];
}
bool GetPropertyResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetPropertyResponse_Status GetPropertyResponse::OK;
constexpr GetPropertyResponse_Status GetPropertyResponse::UNRECOGNIZED_NAME;
constexpr GetPropertyResponse_Status GetPropertyResponse::INVALID_TARGET;
constexpr GetPropertyResponse_Status GetPropertyResponse::Status_MIN;
constexpr GetPropertyResponse_Status GetPropertyResponse::Status_MAX;
constexpr int GetPropertyResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPropertyResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[19];
}
bool SetPropertyResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetPropertyResponse_Status SetPropertyResponse::OK;
constexpr SetPropertyResponse_Status SetPropertyResponse::UNRECOGNIZED_NAME;
constexpr SetPropertyResponse_Status SetPropertyResponse::INVALID_VALUE;
constexpr SetPropertyResponse_Status SetPropertyResponse::INVALID_TARGET;
constexpr SetPropertyResponse_Status SetPropertyResponse::DEFERRED;
constexpr SetPropertyResponse_Status SetPropertyResponse::IMPOSSIBLE;
constexpr SetPropertyResponse_Status SetPropertyResponse::FAILED;
constexpr SetPropertyResponse_Status SetPropertyResponse::Status_MIN;
constexpr SetPropertyResponse_Status SetPropertyResponse::Status_MAX;
constexpr int SetPropertyResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterToolRequest_ToolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[20];
}
bool RegisterToolRequest_ToolType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RegisterToolRequest_ToolType RegisterToolRequest::WEB_VIEW_TOOL;
constexpr RegisterToolRequest_ToolType RegisterToolRequest::ToolType_MIN;
constexpr RegisterToolRequest_ToolType RegisterToolRequest::ToolType_MAX;
constexpr int RegisterToolRequest::ToolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[21];
}
bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::Checkbox;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::String;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::PositiveFloatingPoint;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::Color;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::Type_MIN;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type RPCRegistrationRequest_StatusBarComponentAttributes_Knob::Type_MAX;
constexpr int RPCRegistrationRequest_StatusBarComponentAttributes_Knob::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCRegistrationRequest_StatusBarComponentAttributes_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[22];
}
bool RPCRegistrationRequest_StatusBarComponentAttributes_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes::PLAIN_TEXT;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes::HTML;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes::Format_MIN;
constexpr RPCRegistrationRequest_StatusBarComponentAttributes_Format RPCRegistrationRequest_StatusBarComponentAttributes::Format_MAX;
constexpr int RPCRegistrationRequest_StatusBarComponentAttributes::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RPCRegistrationRequest_Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[23];
}
bool RPCRegistrationRequest_Role_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest::GENERIC;
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest::SESSION_TITLE;
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest::STATUS_BAR_COMPONENT;
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest::CONTEXT_MENU;
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest::Role_MIN;
constexpr RPCRegistrationRequest_Role RPCRegistrationRequest::Role_MAX;
constexpr int RPCRegistrationRequest::Role_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterToolResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[24];
}
bool RegisterToolResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RegisterToolResponse_Status RegisterToolResponse::OK;
constexpr RegisterToolResponse_Status RegisterToolResponse::REQUEST_MALFORMED;
constexpr RegisterToolResponse_Status RegisterToolResponse::PERMISSION_DENIED;
constexpr RegisterToolResponse_Status RegisterToolResponse::Status_MIN;
constexpr RegisterToolResponse_Status RegisterToolResponse::Status_MAX;
constexpr int RegisterToolResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[25];
}
bool NotificationResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NotificationResponse_Status NotificationResponse::OK;
constexpr NotificationResponse_Status NotificationResponse::SESSION_NOT_FOUND;
constexpr NotificationResponse_Status NotificationResponse::REQUEST_MALFORMED;
constexpr NotificationResponse_Status NotificationResponse::NOT_SUBSCRIBED;
constexpr NotificationResponse_Status NotificationResponse::ALREADY_SUBSCRIBED;
constexpr NotificationResponse_Status NotificationResponse::DUPLICATE_SERVER_ORIGINATED_RPC;
constexpr NotificationResponse_Status NotificationResponse::INVALID_IDENTIFIER;
constexpr NotificationResponse_Status NotificationResponse::Status_MIN;
constexpr NotificationResponse_Status NotificationResponse::Status_MAX;
constexpr int NotificationResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeystrokeNotification_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[26];
}
bool KeystrokeNotification_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr KeystrokeNotification_Action KeystrokeNotification::KEY_DOWN;
constexpr KeystrokeNotification_Action KeystrokeNotification::KEY_UP;
constexpr KeystrokeNotification_Action KeystrokeNotification::FLAGS_CHANGED;
constexpr KeystrokeNotification_Action KeystrokeNotification::Action_MIN;
constexpr KeystrokeNotification_Action KeystrokeNotification::Action_MAX;
constexpr int KeystrokeNotification::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FocusChangedNotification_Window_WindowStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[27];
}
bool FocusChangedNotification_Window_WindowStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::TERMINAL_WINDOW_BECAME_KEY;
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::TERMINAL_WINDOW_IS_CURRENT;
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::TERMINAL_WINDOW_RESIGNED_KEY;
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::WindowStatus_MIN;
constexpr FocusChangedNotification_Window_WindowStatus FocusChangedNotification_Window::WindowStatus_MAX;
constexpr int FocusChangedNotification_Window::WindowStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetBufferResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[28];
}
bool GetBufferResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetBufferResponse_Status GetBufferResponse::OK;
constexpr GetBufferResponse_Status GetBufferResponse::SESSION_NOT_FOUND;
constexpr GetBufferResponse_Status GetBufferResponse::INVALID_LINE_RANGE;
constexpr GetBufferResponse_Status GetBufferResponse::REQUEST_MALFORMED;
constexpr GetBufferResponse_Status GetBufferResponse::Status_MIN;
constexpr GetBufferResponse_Status GetBufferResponse::Status_MAX;
constexpr int GetBufferResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPromptResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[29];
}
bool GetPromptResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetPromptResponse_Status GetPromptResponse::OK;
constexpr GetPromptResponse_Status GetPromptResponse::SESSION_NOT_FOUND;
constexpr GetPromptResponse_Status GetPromptResponse::REQUEST_MALFORMED;
constexpr GetPromptResponse_Status GetPromptResponse::PROMPT_UNAVAILABLE;
constexpr GetPromptResponse_Status GetPromptResponse::Status_MIN;
constexpr GetPromptResponse_Status GetPromptResponse::Status_MAX;
constexpr int GetPromptResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPromptResponse_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[30];
}
bool GetPromptResponse_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetPromptResponse_State GetPromptResponse::EDITING;
constexpr GetPromptResponse_State GetPromptResponse::RUNNING;
constexpr GetPromptResponse_State GetPromptResponse::FINISHED;
constexpr GetPromptResponse_State GetPromptResponse::State_MIN;
constexpr GetPromptResponse_State GetPromptResponse::State_MAX;
constexpr int GetPromptResponse::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListPromptsResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[31];
}
bool ListPromptsResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ListPromptsResponse_Status ListPromptsResponse::OK;
constexpr ListPromptsResponse_Status ListPromptsResponse::SESSION_NOT_FOUND;
constexpr ListPromptsResponse_Status ListPromptsResponse::Status_MIN;
constexpr ListPromptsResponse_Status ListPromptsResponse::Status_MAX;
constexpr int ListPromptsResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetProfilePropertyResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[32];
}
bool GetProfilePropertyResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse::OK;
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse::SESSION_NOT_FOUND;
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse::REQUEST_MALFORMED;
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse::ERROR;
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse::Status_MIN;
constexpr GetProfilePropertyResponse_Status GetProfilePropertyResponse::Status_MAX;
constexpr int GetProfilePropertyResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetProfilePropertyResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[33];
}
bool SetProfilePropertyResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse::OK;
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse::SESSION_NOT_FOUND;
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse::REQUEST_MALFORMED;
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse::BAD_GUID;
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse::Status_MIN;
constexpr SetProfilePropertyResponse_Status SetProfilePropertyResponse::Status_MAX;
constexpr int SetProfilePropertyResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[34];
}
bool TransactionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionResponse_Status TransactionResponse::OK;
constexpr TransactionResponse_Status TransactionResponse::NO_TRANSACTION;
constexpr TransactionResponse_Status TransactionResponse::ALREADY_IN_TRANSACTION;
constexpr TransactionResponse_Status TransactionResponse::Status_MIN;
constexpr TransactionResponse_Status TransactionResponse::Status_MAX;
constexpr int TransactionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineContents_Continuation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[35];
}
bool LineContents_Continuation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LineContents_Continuation LineContents::CONTINUATION_HARD_EOL;
constexpr LineContents_Continuation LineContents::CONTINUATION_SOFT_EOL;
constexpr LineContents_Continuation LineContents::Continuation_MIN;
constexpr LineContents_Continuation LineContents::Continuation_MAX;
constexpr int LineContents::Continuation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SendTextResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[36];
}
bool SendTextResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SendTextResponse_Status SendTextResponse::OK;
constexpr SendTextResponse_Status SendTextResponse::SESSION_NOT_FOUND;
constexpr SendTextResponse_Status SendTextResponse::Status_MIN;
constexpr SendTextResponse_Status SendTextResponse::Status_MAX;
constexpr int SendTextResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateTabResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[37];
}
bool CreateTabResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CreateTabResponse_Status CreateTabResponse::OK;
constexpr CreateTabResponse_Status CreateTabResponse::INVALID_PROFILE_NAME;
constexpr CreateTabResponse_Status CreateTabResponse::INVALID_WINDOW_ID;
constexpr CreateTabResponse_Status CreateTabResponse::INVALID_TAB_INDEX;
constexpr CreateTabResponse_Status CreateTabResponse::MISSING_SUBSTITUTION;
constexpr CreateTabResponse_Status CreateTabResponse::Status_MIN;
constexpr CreateTabResponse_Status CreateTabResponse::Status_MAX;
constexpr int CreateTabResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SplitPaneRequest_SplitDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[38];
}
bool SplitPaneRequest_SplitDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SplitPaneRequest_SplitDirection SplitPaneRequest::VERTICAL;
constexpr SplitPaneRequest_SplitDirection SplitPaneRequest::HORIZONTAL;
constexpr SplitPaneRequest_SplitDirection SplitPaneRequest::SplitDirection_MIN;
constexpr SplitPaneRequest_SplitDirection SplitPaneRequest::SplitDirection_MAX;
constexpr int SplitPaneRequest::SplitDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SplitPaneResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[39];
}
bool SplitPaneResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SplitPaneResponse_Status SplitPaneResponse::OK;
constexpr SplitPaneResponse_Status SplitPaneResponse::SESSION_NOT_FOUND;
constexpr SplitPaneResponse_Status SplitPaneResponse::INVALID_PROFILE_NAME;
constexpr SplitPaneResponse_Status SplitPaneResponse::CANNOT_SPLIT;
constexpr SplitPaneResponse_Status SplitPaneResponse::MALFORMED_CUSTOM_PROFILE_PROPERTY;
constexpr SplitPaneResponse_Status SplitPaneResponse::Status_MIN;
constexpr SplitPaneResponse_Status SplitPaneResponse::Status_MAX;
constexpr int SplitPaneResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[40];
}
bool SelectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[41];
}
bool NotificationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Modifiers_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[42];
}
bool Modifiers_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[43];
}
bool VariableScope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PromptMonitorMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_iterm_2dapi_2epb);
  return file_level_enum_descriptors_iterm_2dapi_2epb[44];
}
bool PromptMonitorMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ClientOriginatedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientOriginatedMessage>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::GetBufferRequest& get_buffer_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::GetPromptRequest& get_prompt_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::TransactionRequest& transaction_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::NotificationRequest& notification_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::RegisterToolRequest& register_tool_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SetProfilePropertyRequest& set_profile_property_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ListSessionsRequest& list_sessions_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SendTextRequest& send_text_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::CreateTabRequest& create_tab_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SplitPaneRequest& split_pane_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::GetProfilePropertyRequest& get_profile_property_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SetPropertyRequest& set_property_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::GetPropertyRequest& get_property_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::InjectRequest& inject_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ActivateRequest& activate_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::VariableRequest& variable_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SavedArrangementRequest& saved_arrangement_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::FocusRequest& focus_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ListProfilesRequest& list_profiles_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ServerOriginatedRPCResultRequest& server_originated_rpc_result_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::RestartSessionRequest& restart_session_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::MenuItemRequest& menu_item_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SetTabLayoutRequest& set_tab_layout_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::GetBroadcastDomainsRequest& get_broadcast_domains_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::TmuxRequest& tmux_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ReorderTabsRequest& reorder_tabs_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::PreferencesRequest& preferences_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ColorPresetRequest& color_preset_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SelectionRequest& selection_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::StatusBarComponentRequest& status_bar_component_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::SetBroadcastDomainsRequest& set_broadcast_domains_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::CloseRequest& close_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::InvokeFunctionRequest& invoke_function_request(const ClientOriginatedMessage* msg);
  static const ::iterm2::ListPromptsRequest& list_prompts_request(const ClientOriginatedMessage* msg);
};

const ::iterm2::GetBufferRequest&
ClientOriginatedMessage::_Internal::get_buffer_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.get_buffer_request_;
}
const ::iterm2::GetPromptRequest&
ClientOriginatedMessage::_Internal::get_prompt_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.get_prompt_request_;
}
const ::iterm2::TransactionRequest&
ClientOriginatedMessage::_Internal::transaction_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.transaction_request_;
}
const ::iterm2::NotificationRequest&
ClientOriginatedMessage::_Internal::notification_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.notification_request_;
}
const ::iterm2::RegisterToolRequest&
ClientOriginatedMessage::_Internal::register_tool_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.register_tool_request_;
}
const ::iterm2::SetProfilePropertyRequest&
ClientOriginatedMessage::_Internal::set_profile_property_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.set_profile_property_request_;
}
const ::iterm2::ListSessionsRequest&
ClientOriginatedMessage::_Internal::list_sessions_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.list_sessions_request_;
}
const ::iterm2::SendTextRequest&
ClientOriginatedMessage::_Internal::send_text_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.send_text_request_;
}
const ::iterm2::CreateTabRequest&
ClientOriginatedMessage::_Internal::create_tab_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.create_tab_request_;
}
const ::iterm2::SplitPaneRequest&
ClientOriginatedMessage::_Internal::split_pane_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.split_pane_request_;
}
const ::iterm2::GetProfilePropertyRequest&
ClientOriginatedMessage::_Internal::get_profile_property_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.get_profile_property_request_;
}
const ::iterm2::SetPropertyRequest&
ClientOriginatedMessage::_Internal::set_property_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.set_property_request_;
}
const ::iterm2::GetPropertyRequest&
ClientOriginatedMessage::_Internal::get_property_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.get_property_request_;
}
const ::iterm2::InjectRequest&
ClientOriginatedMessage::_Internal::inject_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.inject_request_;
}
const ::iterm2::ActivateRequest&
ClientOriginatedMessage::_Internal::activate_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.activate_request_;
}
const ::iterm2::VariableRequest&
ClientOriginatedMessage::_Internal::variable_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.variable_request_;
}
const ::iterm2::SavedArrangementRequest&
ClientOriginatedMessage::_Internal::saved_arrangement_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.saved_arrangement_request_;
}
const ::iterm2::FocusRequest&
ClientOriginatedMessage::_Internal::focus_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.focus_request_;
}
const ::iterm2::ListProfilesRequest&
ClientOriginatedMessage::_Internal::list_profiles_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.list_profiles_request_;
}
const ::iterm2::ServerOriginatedRPCResultRequest&
ClientOriginatedMessage::_Internal::server_originated_rpc_result_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.server_originated_rpc_result_request_;
}
const ::iterm2::RestartSessionRequest&
ClientOriginatedMessage::_Internal::restart_session_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.restart_session_request_;
}
const ::iterm2::MenuItemRequest&
ClientOriginatedMessage::_Internal::menu_item_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.menu_item_request_;
}
const ::iterm2::SetTabLayoutRequest&
ClientOriginatedMessage::_Internal::set_tab_layout_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.set_tab_layout_request_;
}
const ::iterm2::GetBroadcastDomainsRequest&
ClientOriginatedMessage::_Internal::get_broadcast_domains_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.get_broadcast_domains_request_;
}
const ::iterm2::TmuxRequest&
ClientOriginatedMessage::_Internal::tmux_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.tmux_request_;
}
const ::iterm2::ReorderTabsRequest&
ClientOriginatedMessage::_Internal::reorder_tabs_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.reorder_tabs_request_;
}
const ::iterm2::PreferencesRequest&
ClientOriginatedMessage::_Internal::preferences_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.preferences_request_;
}
const ::iterm2::ColorPresetRequest&
ClientOriginatedMessage::_Internal::color_preset_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.color_preset_request_;
}
const ::iterm2::SelectionRequest&
ClientOriginatedMessage::_Internal::selection_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.selection_request_;
}
const ::iterm2::StatusBarComponentRequest&
ClientOriginatedMessage::_Internal::status_bar_component_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.status_bar_component_request_;
}
const ::iterm2::SetBroadcastDomainsRequest&
ClientOriginatedMessage::_Internal::set_broadcast_domains_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.set_broadcast_domains_request_;
}
const ::iterm2::CloseRequest&
ClientOriginatedMessage::_Internal::close_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.close_request_;
}
const ::iterm2::InvokeFunctionRequest&
ClientOriginatedMessage::_Internal::invoke_function_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.invoke_function_request_;
}
const ::iterm2::ListPromptsRequest&
ClientOriginatedMessage::_Internal::list_prompts_request(const ClientOriginatedMessage* msg) {
  return *msg->submessage_.list_prompts_request_;
}
void ClientOriginatedMessage::set_allocated_get_buffer_request(::iterm2::GetBufferRequest* get_buffer_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_buffer_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetBufferRequest>::GetOwningArena(get_buffer_request);
    if (message_arena != submessage_arena) {
      get_buffer_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_buffer_request, submessage_arena);
    }
    set_has_get_buffer_request();
    submessage_.get_buffer_request_ = get_buffer_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.get_buffer_request)
}
void ClientOriginatedMessage::set_allocated_get_prompt_request(::iterm2::GetPromptRequest* get_prompt_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_prompt_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetPromptRequest>::GetOwningArena(get_prompt_request);
    if (message_arena != submessage_arena) {
      get_prompt_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_prompt_request, submessage_arena);
    }
    set_has_get_prompt_request();
    submessage_.get_prompt_request_ = get_prompt_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.get_prompt_request)
}
void ClientOriginatedMessage::set_allocated_transaction_request(::iterm2::TransactionRequest* transaction_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (transaction_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TransactionRequest>::GetOwningArena(transaction_request);
    if (message_arena != submessage_arena) {
      transaction_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_request, submessage_arena);
    }
    set_has_transaction_request();
    submessage_.transaction_request_ = transaction_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.transaction_request)
}
void ClientOriginatedMessage::set_allocated_notification_request(::iterm2::NotificationRequest* notification_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (notification_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::NotificationRequest>::GetOwningArena(notification_request);
    if (message_arena != submessage_arena) {
      notification_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_request, submessage_arena);
    }
    set_has_notification_request();
    submessage_.notification_request_ = notification_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.notification_request)
}
void ClientOriginatedMessage::set_allocated_register_tool_request(::iterm2::RegisterToolRequest* register_tool_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (register_tool_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RegisterToolRequest>::GetOwningArena(register_tool_request);
    if (message_arena != submessage_arena) {
      register_tool_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_tool_request, submessage_arena);
    }
    set_has_register_tool_request();
    submessage_.register_tool_request_ = register_tool_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.register_tool_request)
}
void ClientOriginatedMessage::set_allocated_set_profile_property_request(::iterm2::SetProfilePropertyRequest* set_profile_property_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_profile_property_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetProfilePropertyRequest>::GetOwningArena(set_profile_property_request);
    if (message_arena != submessage_arena) {
      set_profile_property_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_profile_property_request, submessage_arena);
    }
    set_has_set_profile_property_request();
    submessage_.set_profile_property_request_ = set_profile_property_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.set_profile_property_request)
}
void ClientOriginatedMessage::set_allocated_list_sessions_request(::iterm2::ListSessionsRequest* list_sessions_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (list_sessions_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListSessionsRequest>::GetOwningArena(list_sessions_request);
    if (message_arena != submessage_arena) {
      list_sessions_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_sessions_request, submessage_arena);
    }
    set_has_list_sessions_request();
    submessage_.list_sessions_request_ = list_sessions_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.list_sessions_request)
}
void ClientOriginatedMessage::set_allocated_send_text_request(::iterm2::SendTextRequest* send_text_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (send_text_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SendTextRequest>::GetOwningArena(send_text_request);
    if (message_arena != submessage_arena) {
      send_text_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_text_request, submessage_arena);
    }
    set_has_send_text_request();
    submessage_.send_text_request_ = send_text_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.send_text_request)
}
void ClientOriginatedMessage::set_allocated_create_tab_request(::iterm2::CreateTabRequest* create_tab_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (create_tab_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CreateTabRequest>::GetOwningArena(create_tab_request);
    if (message_arena != submessage_arena) {
      create_tab_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_tab_request, submessage_arena);
    }
    set_has_create_tab_request();
    submessage_.create_tab_request_ = create_tab_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.create_tab_request)
}
void ClientOriginatedMessage::set_allocated_split_pane_request(::iterm2::SplitPaneRequest* split_pane_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (split_pane_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SplitPaneRequest>::GetOwningArena(split_pane_request);
    if (message_arena != submessage_arena) {
      split_pane_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_pane_request, submessage_arena);
    }
    set_has_split_pane_request();
    submessage_.split_pane_request_ = split_pane_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.split_pane_request)
}
void ClientOriginatedMessage::set_allocated_get_profile_property_request(::iterm2::GetProfilePropertyRequest* get_profile_property_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_profile_property_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetProfilePropertyRequest>::GetOwningArena(get_profile_property_request);
    if (message_arena != submessage_arena) {
      get_profile_property_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_profile_property_request, submessage_arena);
    }
    set_has_get_profile_property_request();
    submessage_.get_profile_property_request_ = get_profile_property_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.get_profile_property_request)
}
void ClientOriginatedMessage::set_allocated_set_property_request(::iterm2::SetPropertyRequest* set_property_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_property_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetPropertyRequest>::GetOwningArena(set_property_request);
    if (message_arena != submessage_arena) {
      set_property_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_property_request, submessage_arena);
    }
    set_has_set_property_request();
    submessage_.set_property_request_ = set_property_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.set_property_request)
}
void ClientOriginatedMessage::set_allocated_get_property_request(::iterm2::GetPropertyRequest* get_property_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_property_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetPropertyRequest>::GetOwningArena(get_property_request);
    if (message_arena != submessage_arena) {
      get_property_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_property_request, submessage_arena);
    }
    set_has_get_property_request();
    submessage_.get_property_request_ = get_property_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.get_property_request)
}
void ClientOriginatedMessage::set_allocated_inject_request(::iterm2::InjectRequest* inject_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (inject_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InjectRequest>::GetOwningArena(inject_request);
    if (message_arena != submessage_arena) {
      inject_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inject_request, submessage_arena);
    }
    set_has_inject_request();
    submessage_.inject_request_ = inject_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.inject_request)
}
void ClientOriginatedMessage::set_allocated_activate_request(::iterm2::ActivateRequest* activate_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (activate_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ActivateRequest>::GetOwningArena(activate_request);
    if (message_arena != submessage_arena) {
      activate_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_request, submessage_arena);
    }
    set_has_activate_request();
    submessage_.activate_request_ = activate_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.activate_request)
}
void ClientOriginatedMessage::set_allocated_variable_request(::iterm2::VariableRequest* variable_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (variable_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::VariableRequest>::GetOwningArena(variable_request);
    if (message_arena != submessage_arena) {
      variable_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_request, submessage_arena);
    }
    set_has_variable_request();
    submessage_.variable_request_ = variable_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.variable_request)
}
void ClientOriginatedMessage::set_allocated_saved_arrangement_request(::iterm2::SavedArrangementRequest* saved_arrangement_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (saved_arrangement_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SavedArrangementRequest>::GetOwningArena(saved_arrangement_request);
    if (message_arena != submessage_arena) {
      saved_arrangement_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_arrangement_request, submessage_arena);
    }
    set_has_saved_arrangement_request();
    submessage_.saved_arrangement_request_ = saved_arrangement_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.saved_arrangement_request)
}
void ClientOriginatedMessage::set_allocated_focus_request(::iterm2::FocusRequest* focus_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (focus_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::FocusRequest>::GetOwningArena(focus_request);
    if (message_arena != submessage_arena) {
      focus_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus_request, submessage_arena);
    }
    set_has_focus_request();
    submessage_.focus_request_ = focus_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.focus_request)
}
void ClientOriginatedMessage::set_allocated_list_profiles_request(::iterm2::ListProfilesRequest* list_profiles_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (list_profiles_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListProfilesRequest>::GetOwningArena(list_profiles_request);
    if (message_arena != submessage_arena) {
      list_profiles_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_profiles_request, submessage_arena);
    }
    set_has_list_profiles_request();
    submessage_.list_profiles_request_ = list_profiles_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.list_profiles_request)
}
void ClientOriginatedMessage::set_allocated_server_originated_rpc_result_request(::iterm2::ServerOriginatedRPCResultRequest* server_originated_rpc_result_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (server_originated_rpc_result_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ServerOriginatedRPCResultRequest>::GetOwningArena(server_originated_rpc_result_request);
    if (message_arena != submessage_arena) {
      server_originated_rpc_result_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_originated_rpc_result_request, submessage_arena);
    }
    set_has_server_originated_rpc_result_request();
    submessage_.server_originated_rpc_result_request_ = server_originated_rpc_result_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.server_originated_rpc_result_request)
}
void ClientOriginatedMessage::set_allocated_restart_session_request(::iterm2::RestartSessionRequest* restart_session_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (restart_session_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RestartSessionRequest>::GetOwningArena(restart_session_request);
    if (message_arena != submessage_arena) {
      restart_session_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_session_request, submessage_arena);
    }
    set_has_restart_session_request();
    submessage_.restart_session_request_ = restart_session_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.restart_session_request)
}
void ClientOriginatedMessage::set_allocated_menu_item_request(::iterm2::MenuItemRequest* menu_item_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (menu_item_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::MenuItemRequest>::GetOwningArena(menu_item_request);
    if (message_arena != submessage_arena) {
      menu_item_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, menu_item_request, submessage_arena);
    }
    set_has_menu_item_request();
    submessage_.menu_item_request_ = menu_item_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.menu_item_request)
}
void ClientOriginatedMessage::set_allocated_set_tab_layout_request(::iterm2::SetTabLayoutRequest* set_tab_layout_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_tab_layout_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetTabLayoutRequest>::GetOwningArena(set_tab_layout_request);
    if (message_arena != submessage_arena) {
      set_tab_layout_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tab_layout_request, submessage_arena);
    }
    set_has_set_tab_layout_request();
    submessage_.set_tab_layout_request_ = set_tab_layout_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.set_tab_layout_request)
}
void ClientOriginatedMessage::set_allocated_get_broadcast_domains_request(::iterm2::GetBroadcastDomainsRequest* get_broadcast_domains_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_broadcast_domains_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetBroadcastDomainsRequest>::GetOwningArena(get_broadcast_domains_request);
    if (message_arena != submessage_arena) {
      get_broadcast_domains_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_broadcast_domains_request, submessage_arena);
    }
    set_has_get_broadcast_domains_request();
    submessage_.get_broadcast_domains_request_ = get_broadcast_domains_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.get_broadcast_domains_request)
}
void ClientOriginatedMessage::set_allocated_tmux_request(::iterm2::TmuxRequest* tmux_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (tmux_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxRequest>::GetOwningArena(tmux_request);
    if (message_arena != submessage_arena) {
      tmux_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tmux_request, submessage_arena);
    }
    set_has_tmux_request();
    submessage_.tmux_request_ = tmux_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.tmux_request)
}
void ClientOriginatedMessage::set_allocated_reorder_tabs_request(::iterm2::ReorderTabsRequest* reorder_tabs_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (reorder_tabs_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ReorderTabsRequest>::GetOwningArena(reorder_tabs_request);
    if (message_arena != submessage_arena) {
      reorder_tabs_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reorder_tabs_request, submessage_arena);
    }
    set_has_reorder_tabs_request();
    submessage_.reorder_tabs_request_ = reorder_tabs_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.reorder_tabs_request)
}
void ClientOriginatedMessage::set_allocated_preferences_request(::iterm2::PreferencesRequest* preferences_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (preferences_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesRequest>::GetOwningArena(preferences_request);
    if (message_arena != submessage_arena) {
      preferences_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences_request, submessage_arena);
    }
    set_has_preferences_request();
    submessage_.preferences_request_ = preferences_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.preferences_request)
}
void ClientOriginatedMessage::set_allocated_color_preset_request(::iterm2::ColorPresetRequest* color_preset_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (color_preset_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ColorPresetRequest>::GetOwningArena(color_preset_request);
    if (message_arena != submessage_arena) {
      color_preset_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_preset_request, submessage_arena);
    }
    set_has_color_preset_request();
    submessage_.color_preset_request_ = color_preset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.color_preset_request)
}
void ClientOriginatedMessage::set_allocated_selection_request(::iterm2::SelectionRequest* selection_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (selection_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SelectionRequest>::GetOwningArena(selection_request);
    if (message_arena != submessage_arena) {
      selection_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_request, submessage_arena);
    }
    set_has_selection_request();
    submessage_.selection_request_ = selection_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.selection_request)
}
void ClientOriginatedMessage::set_allocated_status_bar_component_request(::iterm2::StatusBarComponentRequest* status_bar_component_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (status_bar_component_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::StatusBarComponentRequest>::GetOwningArena(status_bar_component_request);
    if (message_arena != submessage_arena) {
      status_bar_component_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_bar_component_request, submessage_arena);
    }
    set_has_status_bar_component_request();
    submessage_.status_bar_component_request_ = status_bar_component_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.status_bar_component_request)
}
void ClientOriginatedMessage::set_allocated_set_broadcast_domains_request(::iterm2::SetBroadcastDomainsRequest* set_broadcast_domains_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_broadcast_domains_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetBroadcastDomainsRequest>::GetOwningArena(set_broadcast_domains_request);
    if (message_arena != submessage_arena) {
      set_broadcast_domains_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_broadcast_domains_request, submessage_arena);
    }
    set_has_set_broadcast_domains_request();
    submessage_.set_broadcast_domains_request_ = set_broadcast_domains_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.set_broadcast_domains_request)
}
void ClientOriginatedMessage::set_allocated_close_request(::iterm2::CloseRequest* close_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (close_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CloseRequest>::GetOwningArena(close_request);
    if (message_arena != submessage_arena) {
      close_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_request, submessage_arena);
    }
    set_has_close_request();
    submessage_.close_request_ = close_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.close_request)
}
void ClientOriginatedMessage::set_allocated_invoke_function_request(::iterm2::InvokeFunctionRequest* invoke_function_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (invoke_function_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionRequest>::GetOwningArena(invoke_function_request);
    if (message_arena != submessage_arena) {
      invoke_function_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke_function_request, submessage_arena);
    }
    set_has_invoke_function_request();
    submessage_.invoke_function_request_ = invoke_function_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.invoke_function_request)
}
void ClientOriginatedMessage::set_allocated_list_prompts_request(::iterm2::ListPromptsRequest* list_prompts_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (list_prompts_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListPromptsRequest>::GetOwningArena(list_prompts_request);
    if (message_arena != submessage_arena) {
      list_prompts_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_prompts_request, submessage_arena);
    }
    set_has_list_prompts_request();
    submessage_.list_prompts_request_ = list_prompts_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ClientOriginatedMessage.list_prompts_request)
}
ClientOriginatedMessage::ClientOriginatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ClientOriginatedMessage)
}
ClientOriginatedMessage::ClientOriginatedMessage(const ClientOriginatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  clear_has_submessage();
  switch (from.submessage_case()) {
    case kGetBufferRequest: {
      _internal_mutable_get_buffer_request()->::iterm2::GetBufferRequest::MergeFrom(from._internal_get_buffer_request());
      break;
    }
    case kGetPromptRequest: {
      _internal_mutable_get_prompt_request()->::iterm2::GetPromptRequest::MergeFrom(from._internal_get_prompt_request());
      break;
    }
    case kTransactionRequest: {
      _internal_mutable_transaction_request()->::iterm2::TransactionRequest::MergeFrom(from._internal_transaction_request());
      break;
    }
    case kNotificationRequest: {
      _internal_mutable_notification_request()->::iterm2::NotificationRequest::MergeFrom(from._internal_notification_request());
      break;
    }
    case kRegisterToolRequest: {
      _internal_mutable_register_tool_request()->::iterm2::RegisterToolRequest::MergeFrom(from._internal_register_tool_request());
      break;
    }
    case kSetProfilePropertyRequest: {
      _internal_mutable_set_profile_property_request()->::iterm2::SetProfilePropertyRequest::MergeFrom(from._internal_set_profile_property_request());
      break;
    }
    case kListSessionsRequest: {
      _internal_mutable_list_sessions_request()->::iterm2::ListSessionsRequest::MergeFrom(from._internal_list_sessions_request());
      break;
    }
    case kSendTextRequest: {
      _internal_mutable_send_text_request()->::iterm2::SendTextRequest::MergeFrom(from._internal_send_text_request());
      break;
    }
    case kCreateTabRequest: {
      _internal_mutable_create_tab_request()->::iterm2::CreateTabRequest::MergeFrom(from._internal_create_tab_request());
      break;
    }
    case kSplitPaneRequest: {
      _internal_mutable_split_pane_request()->::iterm2::SplitPaneRequest::MergeFrom(from._internal_split_pane_request());
      break;
    }
    case kGetProfilePropertyRequest: {
      _internal_mutable_get_profile_property_request()->::iterm2::GetProfilePropertyRequest::MergeFrom(from._internal_get_profile_property_request());
      break;
    }
    case kSetPropertyRequest: {
      _internal_mutable_set_property_request()->::iterm2::SetPropertyRequest::MergeFrom(from._internal_set_property_request());
      break;
    }
    case kGetPropertyRequest: {
      _internal_mutable_get_property_request()->::iterm2::GetPropertyRequest::MergeFrom(from._internal_get_property_request());
      break;
    }
    case kInjectRequest: {
      _internal_mutable_inject_request()->::iterm2::InjectRequest::MergeFrom(from._internal_inject_request());
      break;
    }
    case kActivateRequest: {
      _internal_mutable_activate_request()->::iterm2::ActivateRequest::MergeFrom(from._internal_activate_request());
      break;
    }
    case kVariableRequest: {
      _internal_mutable_variable_request()->::iterm2::VariableRequest::MergeFrom(from._internal_variable_request());
      break;
    }
    case kSavedArrangementRequest: {
      _internal_mutable_saved_arrangement_request()->::iterm2::SavedArrangementRequest::MergeFrom(from._internal_saved_arrangement_request());
      break;
    }
    case kFocusRequest: {
      _internal_mutable_focus_request()->::iterm2::FocusRequest::MergeFrom(from._internal_focus_request());
      break;
    }
    case kListProfilesRequest: {
      _internal_mutable_list_profiles_request()->::iterm2::ListProfilesRequest::MergeFrom(from._internal_list_profiles_request());
      break;
    }
    case kServerOriginatedRpcResultRequest: {
      _internal_mutable_server_originated_rpc_result_request()->::iterm2::ServerOriginatedRPCResultRequest::MergeFrom(from._internal_server_originated_rpc_result_request());
      break;
    }
    case kRestartSessionRequest: {
      _internal_mutable_restart_session_request()->::iterm2::RestartSessionRequest::MergeFrom(from._internal_restart_session_request());
      break;
    }
    case kMenuItemRequest: {
      _internal_mutable_menu_item_request()->::iterm2::MenuItemRequest::MergeFrom(from._internal_menu_item_request());
      break;
    }
    case kSetTabLayoutRequest: {
      _internal_mutable_set_tab_layout_request()->::iterm2::SetTabLayoutRequest::MergeFrom(from._internal_set_tab_layout_request());
      break;
    }
    case kGetBroadcastDomainsRequest: {
      _internal_mutable_get_broadcast_domains_request()->::iterm2::GetBroadcastDomainsRequest::MergeFrom(from._internal_get_broadcast_domains_request());
      break;
    }
    case kTmuxRequest: {
      _internal_mutable_tmux_request()->::iterm2::TmuxRequest::MergeFrom(from._internal_tmux_request());
      break;
    }
    case kReorderTabsRequest: {
      _internal_mutable_reorder_tabs_request()->::iterm2::ReorderTabsRequest::MergeFrom(from._internal_reorder_tabs_request());
      break;
    }
    case kPreferencesRequest: {
      _internal_mutable_preferences_request()->::iterm2::PreferencesRequest::MergeFrom(from._internal_preferences_request());
      break;
    }
    case kColorPresetRequest: {
      _internal_mutable_color_preset_request()->::iterm2::ColorPresetRequest::MergeFrom(from._internal_color_preset_request());
      break;
    }
    case kSelectionRequest: {
      _internal_mutable_selection_request()->::iterm2::SelectionRequest::MergeFrom(from._internal_selection_request());
      break;
    }
    case kStatusBarComponentRequest: {
      _internal_mutable_status_bar_component_request()->::iterm2::StatusBarComponentRequest::MergeFrom(from._internal_status_bar_component_request());
      break;
    }
    case kSetBroadcastDomainsRequest: {
      _internal_mutable_set_broadcast_domains_request()->::iterm2::SetBroadcastDomainsRequest::MergeFrom(from._internal_set_broadcast_domains_request());
      break;
    }
    case kCloseRequest: {
      _internal_mutable_close_request()->::iterm2::CloseRequest::MergeFrom(from._internal_close_request());
      break;
    }
    case kInvokeFunctionRequest: {
      _internal_mutable_invoke_function_request()->::iterm2::InvokeFunctionRequest::MergeFrom(from._internal_invoke_function_request());
      break;
    }
    case kListPromptsRequest: {
      _internal_mutable_list_prompts_request()->::iterm2::ListPromptsRequest::MergeFrom(from._internal_list_prompts_request());
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ClientOriginatedMessage)
}

inline void ClientOriginatedMessage::SharedCtor() {
id_ = int64_t{0};
clear_has_submessage();
}

ClientOriginatedMessage::~ClientOriginatedMessage() {
  // @@protoc_insertion_point(destructor:iterm2.ClientOriginatedMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientOriginatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_submessage()) {
    clear_submessage();
  }
}

void ClientOriginatedMessage::ArenaDtor(void* object) {
  ClientOriginatedMessage* _this = reinterpret_cast< ClientOriginatedMessage* >(object);
  (void)_this;
}
void ClientOriginatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientOriginatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientOriginatedMessage::clear_submessage() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.ClientOriginatedMessage)
  switch (submessage_case()) {
    case kGetBufferRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_buffer_request_;
      }
      break;
    }
    case kGetPromptRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_prompt_request_;
      }
      break;
    }
    case kTransactionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.transaction_request_;
      }
      break;
    }
    case kNotificationRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.notification_request_;
      }
      break;
    }
    case kRegisterToolRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.register_tool_request_;
      }
      break;
    }
    case kSetProfilePropertyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_profile_property_request_;
      }
      break;
    }
    case kListSessionsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.list_sessions_request_;
      }
      break;
    }
    case kSendTextRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.send_text_request_;
      }
      break;
    }
    case kCreateTabRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.create_tab_request_;
      }
      break;
    }
    case kSplitPaneRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.split_pane_request_;
      }
      break;
    }
    case kGetProfilePropertyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_profile_property_request_;
      }
      break;
    }
    case kSetPropertyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_property_request_;
      }
      break;
    }
    case kGetPropertyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_property_request_;
      }
      break;
    }
    case kInjectRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.inject_request_;
      }
      break;
    }
    case kActivateRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.activate_request_;
      }
      break;
    }
    case kVariableRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.variable_request_;
      }
      break;
    }
    case kSavedArrangementRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.saved_arrangement_request_;
      }
      break;
    }
    case kFocusRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.focus_request_;
      }
      break;
    }
    case kListProfilesRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.list_profiles_request_;
      }
      break;
    }
    case kServerOriginatedRpcResultRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.server_originated_rpc_result_request_;
      }
      break;
    }
    case kRestartSessionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.restart_session_request_;
      }
      break;
    }
    case kMenuItemRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.menu_item_request_;
      }
      break;
    }
    case kSetTabLayoutRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_tab_layout_request_;
      }
      break;
    }
    case kGetBroadcastDomainsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_broadcast_domains_request_;
      }
      break;
    }
    case kTmuxRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.tmux_request_;
      }
      break;
    }
    case kReorderTabsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.reorder_tabs_request_;
      }
      break;
    }
    case kPreferencesRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.preferences_request_;
      }
      break;
    }
    case kColorPresetRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.color_preset_request_;
      }
      break;
    }
    case kSelectionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.selection_request_;
      }
      break;
    }
    case kStatusBarComponentRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.status_bar_component_request_;
      }
      break;
    }
    case kSetBroadcastDomainsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_broadcast_domains_request_;
      }
      break;
    }
    case kCloseRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.close_request_;
      }
      break;
    }
    case kInvokeFunctionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.invoke_function_request_;
      }
      break;
    }
    case kListPromptsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.list_prompts_request_;
      }
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBMESSAGE_NOT_SET;
}


void ClientOriginatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ClientOriginatedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  clear_submessage();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientOriginatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetBufferRequest get_buffer_request = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_buffer_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetPromptRequest get_prompt_request = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_prompt_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TransactionRequest transaction_request = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.NotificationRequest notification_request = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RegisterToolRequest register_tool_request = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_tool_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetProfilePropertyRequest set_profile_property_request = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_profile_property_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ListSessionsRequest list_sessions_request = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_sessions_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SendTextRequest send_text_request = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_text_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.CreateTabRequest create_tab_request = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_tab_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SplitPaneRequest split_pane_request = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_split_pane_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetProfilePropertyRequest get_profile_property_request = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_profile_property_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetPropertyRequest set_property_request = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_property_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetPropertyRequest get_property_request = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_property_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InjectRequest inject_request = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_inject_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ActivateRequest activate_request = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_activate_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.VariableRequest variable_request = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SavedArrangementRequest saved_arrangement_request = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_arrangement_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.FocusRequest focus_request = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_focus_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ListProfilesRequest list_profiles_request = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_profiles_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ServerOriginatedRPCResultRequest server_originated_rpc_result_request = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_originated_rpc_result_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RestartSessionRequest restart_session_request = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart_session_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.MenuItemRequest menu_item_request = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_menu_item_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetTabLayoutRequest set_tab_layout_request = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tab_layout_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetBroadcastDomainsRequest get_broadcast_domains_request = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_broadcast_domains_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxRequest tmux_request = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tmux_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ReorderTabsRequest reorder_tabs_request = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_reorder_tabs_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesRequest preferences_request = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ColorPresetRequest color_preset_request = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_preset_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SelectionRequest selection_request = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.StatusBarComponentRequest status_bar_component_request = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_bar_component_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetBroadcastDomainsRequest set_broadcast_domains_request = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_broadcast_domains_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.CloseRequest close_request = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionRequest invoke_function_request = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke_function_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ListPromptsRequest list_prompts_request = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_prompts_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientOriginatedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ClientOriginatedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  switch (submessage_case()) {
    case kGetBufferRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          100, _Internal::get_buffer_request(this), target, stream);
      break;
    }
    case kGetPromptRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          101, _Internal::get_prompt_request(this), target, stream);
      break;
    }
    case kTransactionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          102, _Internal::transaction_request(this), target, stream);
      break;
    }
    case kNotificationRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          103, _Internal::notification_request(this), target, stream);
      break;
    }
    case kRegisterToolRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          104, _Internal::register_tool_request(this), target, stream);
      break;
    }
    case kSetProfilePropertyRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          105, _Internal::set_profile_property_request(this), target, stream);
      break;
    }
    case kListSessionsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          106, _Internal::list_sessions_request(this), target, stream);
      break;
    }
    case kSendTextRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          107, _Internal::send_text_request(this), target, stream);
      break;
    }
    case kCreateTabRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          108, _Internal::create_tab_request(this), target, stream);
      break;
    }
    case kSplitPaneRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          109, _Internal::split_pane_request(this), target, stream);
      break;
    }
    case kGetProfilePropertyRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          110, _Internal::get_profile_property_request(this), target, stream);
      break;
    }
    case kSetPropertyRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          111, _Internal::set_property_request(this), target, stream);
      break;
    }
    case kGetPropertyRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          112, _Internal::get_property_request(this), target, stream);
      break;
    }
    case kInjectRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          113, _Internal::inject_request(this), target, stream);
      break;
    }
    case kActivateRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          114, _Internal::activate_request(this), target, stream);
      break;
    }
    case kVariableRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          115, _Internal::variable_request(this), target, stream);
      break;
    }
    case kSavedArrangementRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          116, _Internal::saved_arrangement_request(this), target, stream);
      break;
    }
    case kFocusRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          117, _Internal::focus_request(this), target, stream);
      break;
    }
    case kListProfilesRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          118, _Internal::list_profiles_request(this), target, stream);
      break;
    }
    case kServerOriginatedRpcResultRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          119, _Internal::server_originated_rpc_result_request(this), target, stream);
      break;
    }
    case kRestartSessionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          120, _Internal::restart_session_request(this), target, stream);
      break;
    }
    case kMenuItemRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          121, _Internal::menu_item_request(this), target, stream);
      break;
    }
    case kSetTabLayoutRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          122, _Internal::set_tab_layout_request(this), target, stream);
      break;
    }
    case kGetBroadcastDomainsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          123, _Internal::get_broadcast_domains_request(this), target, stream);
      break;
    }
    case kTmuxRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          124, _Internal::tmux_request(this), target, stream);
      break;
    }
    case kReorderTabsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          125, _Internal::reorder_tabs_request(this), target, stream);
      break;
    }
    case kPreferencesRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          126, _Internal::preferences_request(this), target, stream);
      break;
    }
    case kColorPresetRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          127, _Internal::color_preset_request(this), target, stream);
      break;
    }
    case kSelectionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          128, _Internal::selection_request(this), target, stream);
      break;
    }
    case kStatusBarComponentRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          129, _Internal::status_bar_component_request(this), target, stream);
      break;
    }
    case kSetBroadcastDomainsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          130, _Internal::set_broadcast_domains_request(this), target, stream);
      break;
    }
    case kCloseRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          131, _Internal::close_request(this), target, stream);
      break;
    }
    case kInvokeFunctionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          132, _Internal::invoke_function_request(this), target, stream);
      break;
    }
    case kListPromptsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          133, _Internal::list_prompts_request(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ClientOriginatedMessage)
  return target;
}

size_t ClientOriginatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ClientOriginatedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  switch (submessage_case()) {
    // .iterm2.GetBufferRequest get_buffer_request = 100;
    case kGetBufferRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_buffer_request_);
      break;
    }
    // .iterm2.GetPromptRequest get_prompt_request = 101;
    case kGetPromptRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_prompt_request_);
      break;
    }
    // .iterm2.TransactionRequest transaction_request = 102;
    case kTransactionRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.transaction_request_);
      break;
    }
    // .iterm2.NotificationRequest notification_request = 103;
    case kNotificationRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.notification_request_);
      break;
    }
    // .iterm2.RegisterToolRequest register_tool_request = 104;
    case kRegisterToolRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.register_tool_request_);
      break;
    }
    // .iterm2.SetProfilePropertyRequest set_profile_property_request = 105;
    case kSetProfilePropertyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_profile_property_request_);
      break;
    }
    // .iterm2.ListSessionsRequest list_sessions_request = 106;
    case kListSessionsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.list_sessions_request_);
      break;
    }
    // .iterm2.SendTextRequest send_text_request = 107;
    case kSendTextRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.send_text_request_);
      break;
    }
    // .iterm2.CreateTabRequest create_tab_request = 108;
    case kCreateTabRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.create_tab_request_);
      break;
    }
    // .iterm2.SplitPaneRequest split_pane_request = 109;
    case kSplitPaneRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.split_pane_request_);
      break;
    }
    // .iterm2.GetProfilePropertyRequest get_profile_property_request = 110;
    case kGetProfilePropertyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_profile_property_request_);
      break;
    }
    // .iterm2.SetPropertyRequest set_property_request = 111;
    case kSetPropertyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_property_request_);
      break;
    }
    // .iterm2.GetPropertyRequest get_property_request = 112;
    case kGetPropertyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_property_request_);
      break;
    }
    // .iterm2.InjectRequest inject_request = 113;
    case kInjectRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.inject_request_);
      break;
    }
    // .iterm2.ActivateRequest activate_request = 114;
    case kActivateRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.activate_request_);
      break;
    }
    // .iterm2.VariableRequest variable_request = 115;
    case kVariableRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.variable_request_);
      break;
    }
    // .iterm2.SavedArrangementRequest saved_arrangement_request = 116;
    case kSavedArrangementRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.saved_arrangement_request_);
      break;
    }
    // .iterm2.FocusRequest focus_request = 117;
    case kFocusRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.focus_request_);
      break;
    }
    // .iterm2.ListProfilesRequest list_profiles_request = 118;
    case kListProfilesRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.list_profiles_request_);
      break;
    }
    // .iterm2.ServerOriginatedRPCResultRequest server_originated_rpc_result_request = 119;
    case kServerOriginatedRpcResultRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.server_originated_rpc_result_request_);
      break;
    }
    // .iterm2.RestartSessionRequest restart_session_request = 120;
    case kRestartSessionRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.restart_session_request_);
      break;
    }
    // .iterm2.MenuItemRequest menu_item_request = 121;
    case kMenuItemRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.menu_item_request_);
      break;
    }
    // .iterm2.SetTabLayoutRequest set_tab_layout_request = 122;
    case kSetTabLayoutRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_tab_layout_request_);
      break;
    }
    // .iterm2.GetBroadcastDomainsRequest get_broadcast_domains_request = 123;
    case kGetBroadcastDomainsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_broadcast_domains_request_);
      break;
    }
    // .iterm2.TmuxRequest tmux_request = 124;
    case kTmuxRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.tmux_request_);
      break;
    }
    // .iterm2.ReorderTabsRequest reorder_tabs_request = 125;
    case kReorderTabsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.reorder_tabs_request_);
      break;
    }
    // .iterm2.PreferencesRequest preferences_request = 126;
    case kPreferencesRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.preferences_request_);
      break;
    }
    // .iterm2.ColorPresetRequest color_preset_request = 127;
    case kColorPresetRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.color_preset_request_);
      break;
    }
    // .iterm2.SelectionRequest selection_request = 128;
    case kSelectionRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.selection_request_);
      break;
    }
    // .iterm2.StatusBarComponentRequest status_bar_component_request = 129;
    case kStatusBarComponentRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.status_bar_component_request_);
      break;
    }
    // .iterm2.SetBroadcastDomainsRequest set_broadcast_domains_request = 130;
    case kSetBroadcastDomainsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_broadcast_domains_request_);
      break;
    }
    // .iterm2.CloseRequest close_request = 131;
    case kCloseRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.close_request_);
      break;
    }
    // .iterm2.InvokeFunctionRequest invoke_function_request = 132;
    case kInvokeFunctionRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.invoke_function_request_);
      break;
    }
    // .iterm2.ListPromptsRequest list_prompts_request = 133;
    case kListPromptsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.list_prompts_request_);
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientOriginatedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientOriginatedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientOriginatedMessage::GetClassData() const { return &_class_data_; }

void ClientOriginatedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientOriginatedMessage *>(to)->MergeFrom(
      static_cast<const ClientOriginatedMessage &>(from));
}


void ClientOriginatedMessage::MergeFrom(const ClientOriginatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ClientOriginatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  switch (from.submessage_case()) {
    case kGetBufferRequest: {
      _internal_mutable_get_buffer_request()->::iterm2::GetBufferRequest::MergeFrom(from._internal_get_buffer_request());
      break;
    }
    case kGetPromptRequest: {
      _internal_mutable_get_prompt_request()->::iterm2::GetPromptRequest::MergeFrom(from._internal_get_prompt_request());
      break;
    }
    case kTransactionRequest: {
      _internal_mutable_transaction_request()->::iterm2::TransactionRequest::MergeFrom(from._internal_transaction_request());
      break;
    }
    case kNotificationRequest: {
      _internal_mutable_notification_request()->::iterm2::NotificationRequest::MergeFrom(from._internal_notification_request());
      break;
    }
    case kRegisterToolRequest: {
      _internal_mutable_register_tool_request()->::iterm2::RegisterToolRequest::MergeFrom(from._internal_register_tool_request());
      break;
    }
    case kSetProfilePropertyRequest: {
      _internal_mutable_set_profile_property_request()->::iterm2::SetProfilePropertyRequest::MergeFrom(from._internal_set_profile_property_request());
      break;
    }
    case kListSessionsRequest: {
      _internal_mutable_list_sessions_request()->::iterm2::ListSessionsRequest::MergeFrom(from._internal_list_sessions_request());
      break;
    }
    case kSendTextRequest: {
      _internal_mutable_send_text_request()->::iterm2::SendTextRequest::MergeFrom(from._internal_send_text_request());
      break;
    }
    case kCreateTabRequest: {
      _internal_mutable_create_tab_request()->::iterm2::CreateTabRequest::MergeFrom(from._internal_create_tab_request());
      break;
    }
    case kSplitPaneRequest: {
      _internal_mutable_split_pane_request()->::iterm2::SplitPaneRequest::MergeFrom(from._internal_split_pane_request());
      break;
    }
    case kGetProfilePropertyRequest: {
      _internal_mutable_get_profile_property_request()->::iterm2::GetProfilePropertyRequest::MergeFrom(from._internal_get_profile_property_request());
      break;
    }
    case kSetPropertyRequest: {
      _internal_mutable_set_property_request()->::iterm2::SetPropertyRequest::MergeFrom(from._internal_set_property_request());
      break;
    }
    case kGetPropertyRequest: {
      _internal_mutable_get_property_request()->::iterm2::GetPropertyRequest::MergeFrom(from._internal_get_property_request());
      break;
    }
    case kInjectRequest: {
      _internal_mutable_inject_request()->::iterm2::InjectRequest::MergeFrom(from._internal_inject_request());
      break;
    }
    case kActivateRequest: {
      _internal_mutable_activate_request()->::iterm2::ActivateRequest::MergeFrom(from._internal_activate_request());
      break;
    }
    case kVariableRequest: {
      _internal_mutable_variable_request()->::iterm2::VariableRequest::MergeFrom(from._internal_variable_request());
      break;
    }
    case kSavedArrangementRequest: {
      _internal_mutable_saved_arrangement_request()->::iterm2::SavedArrangementRequest::MergeFrom(from._internal_saved_arrangement_request());
      break;
    }
    case kFocusRequest: {
      _internal_mutable_focus_request()->::iterm2::FocusRequest::MergeFrom(from._internal_focus_request());
      break;
    }
    case kListProfilesRequest: {
      _internal_mutable_list_profiles_request()->::iterm2::ListProfilesRequest::MergeFrom(from._internal_list_profiles_request());
      break;
    }
    case kServerOriginatedRpcResultRequest: {
      _internal_mutable_server_originated_rpc_result_request()->::iterm2::ServerOriginatedRPCResultRequest::MergeFrom(from._internal_server_originated_rpc_result_request());
      break;
    }
    case kRestartSessionRequest: {
      _internal_mutable_restart_session_request()->::iterm2::RestartSessionRequest::MergeFrom(from._internal_restart_session_request());
      break;
    }
    case kMenuItemRequest: {
      _internal_mutable_menu_item_request()->::iterm2::MenuItemRequest::MergeFrom(from._internal_menu_item_request());
      break;
    }
    case kSetTabLayoutRequest: {
      _internal_mutable_set_tab_layout_request()->::iterm2::SetTabLayoutRequest::MergeFrom(from._internal_set_tab_layout_request());
      break;
    }
    case kGetBroadcastDomainsRequest: {
      _internal_mutable_get_broadcast_domains_request()->::iterm2::GetBroadcastDomainsRequest::MergeFrom(from._internal_get_broadcast_domains_request());
      break;
    }
    case kTmuxRequest: {
      _internal_mutable_tmux_request()->::iterm2::TmuxRequest::MergeFrom(from._internal_tmux_request());
      break;
    }
    case kReorderTabsRequest: {
      _internal_mutable_reorder_tabs_request()->::iterm2::ReorderTabsRequest::MergeFrom(from._internal_reorder_tabs_request());
      break;
    }
    case kPreferencesRequest: {
      _internal_mutable_preferences_request()->::iterm2::PreferencesRequest::MergeFrom(from._internal_preferences_request());
      break;
    }
    case kColorPresetRequest: {
      _internal_mutable_color_preset_request()->::iterm2::ColorPresetRequest::MergeFrom(from._internal_color_preset_request());
      break;
    }
    case kSelectionRequest: {
      _internal_mutable_selection_request()->::iterm2::SelectionRequest::MergeFrom(from._internal_selection_request());
      break;
    }
    case kStatusBarComponentRequest: {
      _internal_mutable_status_bar_component_request()->::iterm2::StatusBarComponentRequest::MergeFrom(from._internal_status_bar_component_request());
      break;
    }
    case kSetBroadcastDomainsRequest: {
      _internal_mutable_set_broadcast_domains_request()->::iterm2::SetBroadcastDomainsRequest::MergeFrom(from._internal_set_broadcast_domains_request());
      break;
    }
    case kCloseRequest: {
      _internal_mutable_close_request()->::iterm2::CloseRequest::MergeFrom(from._internal_close_request());
      break;
    }
    case kInvokeFunctionRequest: {
      _internal_mutable_invoke_function_request()->::iterm2::InvokeFunctionRequest::MergeFrom(from._internal_invoke_function_request());
      break;
    }
    case kListPromptsRequest: {
      _internal_mutable_list_prompts_request()->::iterm2::ListPromptsRequest::MergeFrom(from._internal_list_prompts_request());
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientOriginatedMessage::CopyFrom(const ClientOriginatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ClientOriginatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOriginatedMessage::IsInitialized() const {
  return true;
}

void ClientOriginatedMessage::InternalSwap(ClientOriginatedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(submessage_, other->submessage_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientOriginatedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[0]);
}

// ===================================================================

class ServerOriginatedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerOriginatedMessage>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::GetBufferResponse& get_buffer_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::GetPromptResponse& get_prompt_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::TransactionResponse& transaction_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::NotificationResponse& notification_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::RegisterToolResponse& register_tool_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SetProfilePropertyResponse& set_profile_property_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ListSessionsResponse& list_sessions_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SendTextResponse& send_text_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::CreateTabResponse& create_tab_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SplitPaneResponse& split_pane_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::GetProfilePropertyResponse& get_profile_property_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SetPropertyResponse& set_property_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::GetPropertyResponse& get_property_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::InjectResponse& inject_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ActivateResponse& activate_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::VariableResponse& variable_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SavedArrangementResponse& saved_arrangement_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::FocusResponse& focus_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ListProfilesResponse& list_profiles_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ServerOriginatedRPCResultResponse& server_originated_rpc_result_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::RestartSessionResponse& restart_session_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::MenuItemResponse& menu_item_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SetTabLayoutResponse& set_tab_layout_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::GetBroadcastDomainsResponse& get_broadcast_domains_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::TmuxResponse& tmux_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ReorderTabsResponse& reorder_tabs_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::PreferencesResponse& preferences_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ColorPresetResponse& color_preset_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SelectionResponse& selection_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::StatusBarComponentResponse& status_bar_component_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::SetBroadcastDomainsResponse& set_broadcast_domains_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::CloseResponse& close_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::InvokeFunctionResponse& invoke_function_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::ListPromptsResponse& list_prompts_response(const ServerOriginatedMessage* msg);
  static const ::iterm2::Notification& notification(const ServerOriginatedMessage* msg);
};

const ::iterm2::GetBufferResponse&
ServerOriginatedMessage::_Internal::get_buffer_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.get_buffer_response_;
}
const ::iterm2::GetPromptResponse&
ServerOriginatedMessage::_Internal::get_prompt_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.get_prompt_response_;
}
const ::iterm2::TransactionResponse&
ServerOriginatedMessage::_Internal::transaction_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.transaction_response_;
}
const ::iterm2::NotificationResponse&
ServerOriginatedMessage::_Internal::notification_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.notification_response_;
}
const ::iterm2::RegisterToolResponse&
ServerOriginatedMessage::_Internal::register_tool_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.register_tool_response_;
}
const ::iterm2::SetProfilePropertyResponse&
ServerOriginatedMessage::_Internal::set_profile_property_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.set_profile_property_response_;
}
const ::iterm2::ListSessionsResponse&
ServerOriginatedMessage::_Internal::list_sessions_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.list_sessions_response_;
}
const ::iterm2::SendTextResponse&
ServerOriginatedMessage::_Internal::send_text_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.send_text_response_;
}
const ::iterm2::CreateTabResponse&
ServerOriginatedMessage::_Internal::create_tab_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.create_tab_response_;
}
const ::iterm2::SplitPaneResponse&
ServerOriginatedMessage::_Internal::split_pane_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.split_pane_response_;
}
const ::iterm2::GetProfilePropertyResponse&
ServerOriginatedMessage::_Internal::get_profile_property_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.get_profile_property_response_;
}
const ::iterm2::SetPropertyResponse&
ServerOriginatedMessage::_Internal::set_property_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.set_property_response_;
}
const ::iterm2::GetPropertyResponse&
ServerOriginatedMessage::_Internal::get_property_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.get_property_response_;
}
const ::iterm2::InjectResponse&
ServerOriginatedMessage::_Internal::inject_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.inject_response_;
}
const ::iterm2::ActivateResponse&
ServerOriginatedMessage::_Internal::activate_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.activate_response_;
}
const ::iterm2::VariableResponse&
ServerOriginatedMessage::_Internal::variable_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.variable_response_;
}
const ::iterm2::SavedArrangementResponse&
ServerOriginatedMessage::_Internal::saved_arrangement_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.saved_arrangement_response_;
}
const ::iterm2::FocusResponse&
ServerOriginatedMessage::_Internal::focus_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.focus_response_;
}
const ::iterm2::ListProfilesResponse&
ServerOriginatedMessage::_Internal::list_profiles_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.list_profiles_response_;
}
const ::iterm2::ServerOriginatedRPCResultResponse&
ServerOriginatedMessage::_Internal::server_originated_rpc_result_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.server_originated_rpc_result_response_;
}
const ::iterm2::RestartSessionResponse&
ServerOriginatedMessage::_Internal::restart_session_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.restart_session_response_;
}
const ::iterm2::MenuItemResponse&
ServerOriginatedMessage::_Internal::menu_item_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.menu_item_response_;
}
const ::iterm2::SetTabLayoutResponse&
ServerOriginatedMessage::_Internal::set_tab_layout_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.set_tab_layout_response_;
}
const ::iterm2::GetBroadcastDomainsResponse&
ServerOriginatedMessage::_Internal::get_broadcast_domains_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.get_broadcast_domains_response_;
}
const ::iterm2::TmuxResponse&
ServerOriginatedMessage::_Internal::tmux_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.tmux_response_;
}
const ::iterm2::ReorderTabsResponse&
ServerOriginatedMessage::_Internal::reorder_tabs_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.reorder_tabs_response_;
}
const ::iterm2::PreferencesResponse&
ServerOriginatedMessage::_Internal::preferences_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.preferences_response_;
}
const ::iterm2::ColorPresetResponse&
ServerOriginatedMessage::_Internal::color_preset_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.color_preset_response_;
}
const ::iterm2::SelectionResponse&
ServerOriginatedMessage::_Internal::selection_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.selection_response_;
}
const ::iterm2::StatusBarComponentResponse&
ServerOriginatedMessage::_Internal::status_bar_component_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.status_bar_component_response_;
}
const ::iterm2::SetBroadcastDomainsResponse&
ServerOriginatedMessage::_Internal::set_broadcast_domains_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.set_broadcast_domains_response_;
}
const ::iterm2::CloseResponse&
ServerOriginatedMessage::_Internal::close_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.close_response_;
}
const ::iterm2::InvokeFunctionResponse&
ServerOriginatedMessage::_Internal::invoke_function_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.invoke_function_response_;
}
const ::iterm2::ListPromptsResponse&
ServerOriginatedMessage::_Internal::list_prompts_response(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.list_prompts_response_;
}
const ::iterm2::Notification&
ServerOriginatedMessage::_Internal::notification(const ServerOriginatedMessage* msg) {
  return *msg->submessage_.notification_;
}
void ServerOriginatedMessage::set_allocated_get_buffer_response(::iterm2::GetBufferResponse* get_buffer_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_buffer_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetBufferResponse>::GetOwningArena(get_buffer_response);
    if (message_arena != submessage_arena) {
      get_buffer_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_buffer_response, submessage_arena);
    }
    set_has_get_buffer_response();
    submessage_.get_buffer_response_ = get_buffer_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.get_buffer_response)
}
void ServerOriginatedMessage::set_allocated_get_prompt_response(::iterm2::GetPromptResponse* get_prompt_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_prompt_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetPromptResponse>::GetOwningArena(get_prompt_response);
    if (message_arena != submessage_arena) {
      get_prompt_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_prompt_response, submessage_arena);
    }
    set_has_get_prompt_response();
    submessage_.get_prompt_response_ = get_prompt_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.get_prompt_response)
}
void ServerOriginatedMessage::set_allocated_transaction_response(::iterm2::TransactionResponse* transaction_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (transaction_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TransactionResponse>::GetOwningArena(transaction_response);
    if (message_arena != submessage_arena) {
      transaction_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_response, submessage_arena);
    }
    set_has_transaction_response();
    submessage_.transaction_response_ = transaction_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.transaction_response)
}
void ServerOriginatedMessage::set_allocated_notification_response(::iterm2::NotificationResponse* notification_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (notification_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::NotificationResponse>::GetOwningArena(notification_response);
    if (message_arena != submessage_arena) {
      notification_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_response, submessage_arena);
    }
    set_has_notification_response();
    submessage_.notification_response_ = notification_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.notification_response)
}
void ServerOriginatedMessage::set_allocated_register_tool_response(::iterm2::RegisterToolResponse* register_tool_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (register_tool_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RegisterToolResponse>::GetOwningArena(register_tool_response);
    if (message_arena != submessage_arena) {
      register_tool_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_tool_response, submessage_arena);
    }
    set_has_register_tool_response();
    submessage_.register_tool_response_ = register_tool_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.register_tool_response)
}
void ServerOriginatedMessage::set_allocated_set_profile_property_response(::iterm2::SetProfilePropertyResponse* set_profile_property_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_profile_property_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetProfilePropertyResponse>::GetOwningArena(set_profile_property_response);
    if (message_arena != submessage_arena) {
      set_profile_property_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_profile_property_response, submessage_arena);
    }
    set_has_set_profile_property_response();
    submessage_.set_profile_property_response_ = set_profile_property_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.set_profile_property_response)
}
void ServerOriginatedMessage::set_allocated_list_sessions_response(::iterm2::ListSessionsResponse* list_sessions_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (list_sessions_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListSessionsResponse>::GetOwningArena(list_sessions_response);
    if (message_arena != submessage_arena) {
      list_sessions_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_sessions_response, submessage_arena);
    }
    set_has_list_sessions_response();
    submessage_.list_sessions_response_ = list_sessions_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.list_sessions_response)
}
void ServerOriginatedMessage::set_allocated_send_text_response(::iterm2::SendTextResponse* send_text_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (send_text_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SendTextResponse>::GetOwningArena(send_text_response);
    if (message_arena != submessage_arena) {
      send_text_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_text_response, submessage_arena);
    }
    set_has_send_text_response();
    submessage_.send_text_response_ = send_text_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.send_text_response)
}
void ServerOriginatedMessage::set_allocated_create_tab_response(::iterm2::CreateTabResponse* create_tab_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (create_tab_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CreateTabResponse>::GetOwningArena(create_tab_response);
    if (message_arena != submessage_arena) {
      create_tab_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_tab_response, submessage_arena);
    }
    set_has_create_tab_response();
    submessage_.create_tab_response_ = create_tab_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.create_tab_response)
}
void ServerOriginatedMessage::set_allocated_split_pane_response(::iterm2::SplitPaneResponse* split_pane_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (split_pane_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SplitPaneResponse>::GetOwningArena(split_pane_response);
    if (message_arena != submessage_arena) {
      split_pane_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_pane_response, submessage_arena);
    }
    set_has_split_pane_response();
    submessage_.split_pane_response_ = split_pane_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.split_pane_response)
}
void ServerOriginatedMessage::set_allocated_get_profile_property_response(::iterm2::GetProfilePropertyResponse* get_profile_property_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_profile_property_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetProfilePropertyResponse>::GetOwningArena(get_profile_property_response);
    if (message_arena != submessage_arena) {
      get_profile_property_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_profile_property_response, submessage_arena);
    }
    set_has_get_profile_property_response();
    submessage_.get_profile_property_response_ = get_profile_property_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.get_profile_property_response)
}
void ServerOriginatedMessage::set_allocated_set_property_response(::iterm2::SetPropertyResponse* set_property_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_property_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetPropertyResponse>::GetOwningArena(set_property_response);
    if (message_arena != submessage_arena) {
      set_property_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_property_response, submessage_arena);
    }
    set_has_set_property_response();
    submessage_.set_property_response_ = set_property_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.set_property_response)
}
void ServerOriginatedMessage::set_allocated_get_property_response(::iterm2::GetPropertyResponse* get_property_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_property_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetPropertyResponse>::GetOwningArena(get_property_response);
    if (message_arena != submessage_arena) {
      get_property_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_property_response, submessage_arena);
    }
    set_has_get_property_response();
    submessage_.get_property_response_ = get_property_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.get_property_response)
}
void ServerOriginatedMessage::set_allocated_inject_response(::iterm2::InjectResponse* inject_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (inject_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InjectResponse>::GetOwningArena(inject_response);
    if (message_arena != submessage_arena) {
      inject_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inject_response, submessage_arena);
    }
    set_has_inject_response();
    submessage_.inject_response_ = inject_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.inject_response)
}
void ServerOriginatedMessage::set_allocated_activate_response(::iterm2::ActivateResponse* activate_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (activate_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ActivateResponse>::GetOwningArena(activate_response);
    if (message_arena != submessage_arena) {
      activate_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_response, submessage_arena);
    }
    set_has_activate_response();
    submessage_.activate_response_ = activate_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.activate_response)
}
void ServerOriginatedMessage::set_allocated_variable_response(::iterm2::VariableResponse* variable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (variable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::VariableResponse>::GetOwningArena(variable_response);
    if (message_arena != submessage_arena) {
      variable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_response, submessage_arena);
    }
    set_has_variable_response();
    submessage_.variable_response_ = variable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.variable_response)
}
void ServerOriginatedMessage::set_allocated_saved_arrangement_response(::iterm2::SavedArrangementResponse* saved_arrangement_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (saved_arrangement_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SavedArrangementResponse>::GetOwningArena(saved_arrangement_response);
    if (message_arena != submessage_arena) {
      saved_arrangement_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_arrangement_response, submessage_arena);
    }
    set_has_saved_arrangement_response();
    submessage_.saved_arrangement_response_ = saved_arrangement_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.saved_arrangement_response)
}
void ServerOriginatedMessage::set_allocated_focus_response(::iterm2::FocusResponse* focus_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (focus_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::FocusResponse>::GetOwningArena(focus_response);
    if (message_arena != submessage_arena) {
      focus_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focus_response, submessage_arena);
    }
    set_has_focus_response();
    submessage_.focus_response_ = focus_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.focus_response)
}
void ServerOriginatedMessage::set_allocated_list_profiles_response(::iterm2::ListProfilesResponse* list_profiles_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (list_profiles_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListProfilesResponse>::GetOwningArena(list_profiles_response);
    if (message_arena != submessage_arena) {
      list_profiles_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_profiles_response, submessage_arena);
    }
    set_has_list_profiles_response();
    submessage_.list_profiles_response_ = list_profiles_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.list_profiles_response)
}
void ServerOriginatedMessage::set_allocated_server_originated_rpc_result_response(::iterm2::ServerOriginatedRPCResultResponse* server_originated_rpc_result_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (server_originated_rpc_result_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ServerOriginatedRPCResultResponse>::GetOwningArena(server_originated_rpc_result_response);
    if (message_arena != submessage_arena) {
      server_originated_rpc_result_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_originated_rpc_result_response, submessage_arena);
    }
    set_has_server_originated_rpc_result_response();
    submessage_.server_originated_rpc_result_response_ = server_originated_rpc_result_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.server_originated_rpc_result_response)
}
void ServerOriginatedMessage::set_allocated_restart_session_response(::iterm2::RestartSessionResponse* restart_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (restart_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RestartSessionResponse>::GetOwningArena(restart_session_response);
    if (message_arena != submessage_arena) {
      restart_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_session_response, submessage_arena);
    }
    set_has_restart_session_response();
    submessage_.restart_session_response_ = restart_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.restart_session_response)
}
void ServerOriginatedMessage::set_allocated_menu_item_response(::iterm2::MenuItemResponse* menu_item_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (menu_item_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::MenuItemResponse>::GetOwningArena(menu_item_response);
    if (message_arena != submessage_arena) {
      menu_item_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, menu_item_response, submessage_arena);
    }
    set_has_menu_item_response();
    submessage_.menu_item_response_ = menu_item_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.menu_item_response)
}
void ServerOriginatedMessage::set_allocated_set_tab_layout_response(::iterm2::SetTabLayoutResponse* set_tab_layout_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_tab_layout_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetTabLayoutResponse>::GetOwningArena(set_tab_layout_response);
    if (message_arena != submessage_arena) {
      set_tab_layout_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_tab_layout_response, submessage_arena);
    }
    set_has_set_tab_layout_response();
    submessage_.set_tab_layout_response_ = set_tab_layout_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.set_tab_layout_response)
}
void ServerOriginatedMessage::set_allocated_get_broadcast_domains_response(::iterm2::GetBroadcastDomainsResponse* get_broadcast_domains_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (get_broadcast_domains_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::GetBroadcastDomainsResponse>::GetOwningArena(get_broadcast_domains_response);
    if (message_arena != submessage_arena) {
      get_broadcast_domains_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_broadcast_domains_response, submessage_arena);
    }
    set_has_get_broadcast_domains_response();
    submessage_.get_broadcast_domains_response_ = get_broadcast_domains_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.get_broadcast_domains_response)
}
void ServerOriginatedMessage::set_allocated_tmux_response(::iterm2::TmuxResponse* tmux_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (tmux_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxResponse>::GetOwningArena(tmux_response);
    if (message_arena != submessage_arena) {
      tmux_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tmux_response, submessage_arena);
    }
    set_has_tmux_response();
    submessage_.tmux_response_ = tmux_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.tmux_response)
}
void ServerOriginatedMessage::set_allocated_reorder_tabs_response(::iterm2::ReorderTabsResponse* reorder_tabs_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (reorder_tabs_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ReorderTabsResponse>::GetOwningArena(reorder_tabs_response);
    if (message_arena != submessage_arena) {
      reorder_tabs_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reorder_tabs_response, submessage_arena);
    }
    set_has_reorder_tabs_response();
    submessage_.reorder_tabs_response_ = reorder_tabs_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.reorder_tabs_response)
}
void ServerOriginatedMessage::set_allocated_preferences_response(::iterm2::PreferencesResponse* preferences_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (preferences_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesResponse>::GetOwningArena(preferences_response);
    if (message_arena != submessage_arena) {
      preferences_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences_response, submessage_arena);
    }
    set_has_preferences_response();
    submessage_.preferences_response_ = preferences_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.preferences_response)
}
void ServerOriginatedMessage::set_allocated_color_preset_response(::iterm2::ColorPresetResponse* color_preset_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (color_preset_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ColorPresetResponse>::GetOwningArena(color_preset_response);
    if (message_arena != submessage_arena) {
      color_preset_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_preset_response, submessage_arena);
    }
    set_has_color_preset_response();
    submessage_.color_preset_response_ = color_preset_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.color_preset_response)
}
void ServerOriginatedMessage::set_allocated_selection_response(::iterm2::SelectionResponse* selection_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (selection_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SelectionResponse>::GetOwningArena(selection_response);
    if (message_arena != submessage_arena) {
      selection_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_response, submessage_arena);
    }
    set_has_selection_response();
    submessage_.selection_response_ = selection_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.selection_response)
}
void ServerOriginatedMessage::set_allocated_status_bar_component_response(::iterm2::StatusBarComponentResponse* status_bar_component_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (status_bar_component_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::StatusBarComponentResponse>::GetOwningArena(status_bar_component_response);
    if (message_arena != submessage_arena) {
      status_bar_component_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_bar_component_response, submessage_arena);
    }
    set_has_status_bar_component_response();
    submessage_.status_bar_component_response_ = status_bar_component_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.status_bar_component_response)
}
void ServerOriginatedMessage::set_allocated_set_broadcast_domains_response(::iterm2::SetBroadcastDomainsResponse* set_broadcast_domains_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (set_broadcast_domains_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetBroadcastDomainsResponse>::GetOwningArena(set_broadcast_domains_response);
    if (message_arena != submessage_arena) {
      set_broadcast_domains_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_broadcast_domains_response, submessage_arena);
    }
    set_has_set_broadcast_domains_response();
    submessage_.set_broadcast_domains_response_ = set_broadcast_domains_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.set_broadcast_domains_response)
}
void ServerOriginatedMessage::set_allocated_close_response(::iterm2::CloseResponse* close_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (close_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CloseResponse>::GetOwningArena(close_response);
    if (message_arena != submessage_arena) {
      close_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_response, submessage_arena);
    }
    set_has_close_response();
    submessage_.close_response_ = close_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.close_response)
}
void ServerOriginatedMessage::set_allocated_invoke_function_response(::iterm2::InvokeFunctionResponse* invoke_function_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (invoke_function_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionResponse>::GetOwningArena(invoke_function_response);
    if (message_arena != submessage_arena) {
      invoke_function_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke_function_response, submessage_arena);
    }
    set_has_invoke_function_response();
    submessage_.invoke_function_response_ = invoke_function_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.invoke_function_response)
}
void ServerOriginatedMessage::set_allocated_list_prompts_response(::iterm2::ListPromptsResponse* list_prompts_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (list_prompts_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ListPromptsResponse>::GetOwningArena(list_prompts_response);
    if (message_arena != submessage_arena) {
      list_prompts_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_prompts_response, submessage_arena);
    }
    set_has_list_prompts_response();
    submessage_.list_prompts_response_ = list_prompts_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.list_prompts_response)
}
void ServerOriginatedMessage::set_allocated_notification(::iterm2::Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_submessage();
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::Notification>::GetOwningArena(notification);
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    set_has_notification();
    submessage_.notification_ = notification;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ServerOriginatedMessage.notification)
}
ServerOriginatedMessage::ServerOriginatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ServerOriginatedMessage)
}
ServerOriginatedMessage::ServerOriginatedMessage(const ServerOriginatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  clear_has_submessage();
  switch (from.submessage_case()) {
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case kGetBufferResponse: {
      _internal_mutable_get_buffer_response()->::iterm2::GetBufferResponse::MergeFrom(from._internal_get_buffer_response());
      break;
    }
    case kGetPromptResponse: {
      _internal_mutable_get_prompt_response()->::iterm2::GetPromptResponse::MergeFrom(from._internal_get_prompt_response());
      break;
    }
    case kTransactionResponse: {
      _internal_mutable_transaction_response()->::iterm2::TransactionResponse::MergeFrom(from._internal_transaction_response());
      break;
    }
    case kNotificationResponse: {
      _internal_mutable_notification_response()->::iterm2::NotificationResponse::MergeFrom(from._internal_notification_response());
      break;
    }
    case kRegisterToolResponse: {
      _internal_mutable_register_tool_response()->::iterm2::RegisterToolResponse::MergeFrom(from._internal_register_tool_response());
      break;
    }
    case kSetProfilePropertyResponse: {
      _internal_mutable_set_profile_property_response()->::iterm2::SetProfilePropertyResponse::MergeFrom(from._internal_set_profile_property_response());
      break;
    }
    case kListSessionsResponse: {
      _internal_mutable_list_sessions_response()->::iterm2::ListSessionsResponse::MergeFrom(from._internal_list_sessions_response());
      break;
    }
    case kSendTextResponse: {
      _internal_mutable_send_text_response()->::iterm2::SendTextResponse::MergeFrom(from._internal_send_text_response());
      break;
    }
    case kCreateTabResponse: {
      _internal_mutable_create_tab_response()->::iterm2::CreateTabResponse::MergeFrom(from._internal_create_tab_response());
      break;
    }
    case kSplitPaneResponse: {
      _internal_mutable_split_pane_response()->::iterm2::SplitPaneResponse::MergeFrom(from._internal_split_pane_response());
      break;
    }
    case kGetProfilePropertyResponse: {
      _internal_mutable_get_profile_property_response()->::iterm2::GetProfilePropertyResponse::MergeFrom(from._internal_get_profile_property_response());
      break;
    }
    case kSetPropertyResponse: {
      _internal_mutable_set_property_response()->::iterm2::SetPropertyResponse::MergeFrom(from._internal_set_property_response());
      break;
    }
    case kGetPropertyResponse: {
      _internal_mutable_get_property_response()->::iterm2::GetPropertyResponse::MergeFrom(from._internal_get_property_response());
      break;
    }
    case kInjectResponse: {
      _internal_mutable_inject_response()->::iterm2::InjectResponse::MergeFrom(from._internal_inject_response());
      break;
    }
    case kActivateResponse: {
      _internal_mutable_activate_response()->::iterm2::ActivateResponse::MergeFrom(from._internal_activate_response());
      break;
    }
    case kVariableResponse: {
      _internal_mutable_variable_response()->::iterm2::VariableResponse::MergeFrom(from._internal_variable_response());
      break;
    }
    case kSavedArrangementResponse: {
      _internal_mutable_saved_arrangement_response()->::iterm2::SavedArrangementResponse::MergeFrom(from._internal_saved_arrangement_response());
      break;
    }
    case kFocusResponse: {
      _internal_mutable_focus_response()->::iterm2::FocusResponse::MergeFrom(from._internal_focus_response());
      break;
    }
    case kListProfilesResponse: {
      _internal_mutable_list_profiles_response()->::iterm2::ListProfilesResponse::MergeFrom(from._internal_list_profiles_response());
      break;
    }
    case kServerOriginatedRpcResultResponse: {
      _internal_mutable_server_originated_rpc_result_response()->::iterm2::ServerOriginatedRPCResultResponse::MergeFrom(from._internal_server_originated_rpc_result_response());
      break;
    }
    case kRestartSessionResponse: {
      _internal_mutable_restart_session_response()->::iterm2::RestartSessionResponse::MergeFrom(from._internal_restart_session_response());
      break;
    }
    case kMenuItemResponse: {
      _internal_mutable_menu_item_response()->::iterm2::MenuItemResponse::MergeFrom(from._internal_menu_item_response());
      break;
    }
    case kSetTabLayoutResponse: {
      _internal_mutable_set_tab_layout_response()->::iterm2::SetTabLayoutResponse::MergeFrom(from._internal_set_tab_layout_response());
      break;
    }
    case kGetBroadcastDomainsResponse: {
      _internal_mutable_get_broadcast_domains_response()->::iterm2::GetBroadcastDomainsResponse::MergeFrom(from._internal_get_broadcast_domains_response());
      break;
    }
    case kTmuxResponse: {
      _internal_mutable_tmux_response()->::iterm2::TmuxResponse::MergeFrom(from._internal_tmux_response());
      break;
    }
    case kReorderTabsResponse: {
      _internal_mutable_reorder_tabs_response()->::iterm2::ReorderTabsResponse::MergeFrom(from._internal_reorder_tabs_response());
      break;
    }
    case kPreferencesResponse: {
      _internal_mutable_preferences_response()->::iterm2::PreferencesResponse::MergeFrom(from._internal_preferences_response());
      break;
    }
    case kColorPresetResponse: {
      _internal_mutable_color_preset_response()->::iterm2::ColorPresetResponse::MergeFrom(from._internal_color_preset_response());
      break;
    }
    case kSelectionResponse: {
      _internal_mutable_selection_response()->::iterm2::SelectionResponse::MergeFrom(from._internal_selection_response());
      break;
    }
    case kStatusBarComponentResponse: {
      _internal_mutable_status_bar_component_response()->::iterm2::StatusBarComponentResponse::MergeFrom(from._internal_status_bar_component_response());
      break;
    }
    case kSetBroadcastDomainsResponse: {
      _internal_mutable_set_broadcast_domains_response()->::iterm2::SetBroadcastDomainsResponse::MergeFrom(from._internal_set_broadcast_domains_response());
      break;
    }
    case kCloseResponse: {
      _internal_mutable_close_response()->::iterm2::CloseResponse::MergeFrom(from._internal_close_response());
      break;
    }
    case kInvokeFunctionResponse: {
      _internal_mutable_invoke_function_response()->::iterm2::InvokeFunctionResponse::MergeFrom(from._internal_invoke_function_response());
      break;
    }
    case kListPromptsResponse: {
      _internal_mutable_list_prompts_response()->::iterm2::ListPromptsResponse::MergeFrom(from._internal_list_prompts_response());
      break;
    }
    case kNotification: {
      _internal_mutable_notification()->::iterm2::Notification::MergeFrom(from._internal_notification());
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ServerOriginatedMessage)
}

inline void ServerOriginatedMessage::SharedCtor() {
id_ = int64_t{0};
clear_has_submessage();
}

ServerOriginatedMessage::~ServerOriginatedMessage() {
  // @@protoc_insertion_point(destructor:iterm2.ServerOriginatedMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerOriginatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_submessage()) {
    clear_submessage();
  }
}

void ServerOriginatedMessage::ArenaDtor(void* object) {
  ServerOriginatedMessage* _this = reinterpret_cast< ServerOriginatedMessage* >(object);
  (void)_this;
}
void ServerOriginatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerOriginatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerOriginatedMessage::clear_submessage() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.ServerOriginatedMessage)
  switch (submessage_case()) {
    case kError: {
      submessage_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kGetBufferResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_buffer_response_;
      }
      break;
    }
    case kGetPromptResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_prompt_response_;
      }
      break;
    }
    case kTransactionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.transaction_response_;
      }
      break;
    }
    case kNotificationResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.notification_response_;
      }
      break;
    }
    case kRegisterToolResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.register_tool_response_;
      }
      break;
    }
    case kSetProfilePropertyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_profile_property_response_;
      }
      break;
    }
    case kListSessionsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.list_sessions_response_;
      }
      break;
    }
    case kSendTextResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.send_text_response_;
      }
      break;
    }
    case kCreateTabResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.create_tab_response_;
      }
      break;
    }
    case kSplitPaneResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.split_pane_response_;
      }
      break;
    }
    case kGetProfilePropertyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_profile_property_response_;
      }
      break;
    }
    case kSetPropertyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_property_response_;
      }
      break;
    }
    case kGetPropertyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_property_response_;
      }
      break;
    }
    case kInjectResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.inject_response_;
      }
      break;
    }
    case kActivateResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.activate_response_;
      }
      break;
    }
    case kVariableResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.variable_response_;
      }
      break;
    }
    case kSavedArrangementResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.saved_arrangement_response_;
      }
      break;
    }
    case kFocusResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.focus_response_;
      }
      break;
    }
    case kListProfilesResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.list_profiles_response_;
      }
      break;
    }
    case kServerOriginatedRpcResultResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.server_originated_rpc_result_response_;
      }
      break;
    }
    case kRestartSessionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.restart_session_response_;
      }
      break;
    }
    case kMenuItemResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.menu_item_response_;
      }
      break;
    }
    case kSetTabLayoutResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_tab_layout_response_;
      }
      break;
    }
    case kGetBroadcastDomainsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.get_broadcast_domains_response_;
      }
      break;
    }
    case kTmuxResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.tmux_response_;
      }
      break;
    }
    case kReorderTabsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.reorder_tabs_response_;
      }
      break;
    }
    case kPreferencesResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.preferences_response_;
      }
      break;
    }
    case kColorPresetResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.color_preset_response_;
      }
      break;
    }
    case kSelectionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.selection_response_;
      }
      break;
    }
    case kStatusBarComponentResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.status_bar_component_response_;
      }
      break;
    }
    case kSetBroadcastDomainsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.set_broadcast_domains_response_;
      }
      break;
    }
    case kCloseResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.close_response_;
      }
      break;
    }
    case kInvokeFunctionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.invoke_function_response_;
      }
      break;
    }
    case kListPromptsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.list_prompts_response_;
      }
      break;
    }
    case kNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete submessage_.notification_;
      }
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBMESSAGE_NOT_SET;
}


void ServerOriginatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ServerOriginatedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  clear_submessage();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerOriginatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedMessage.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetBufferResponse get_buffer_response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_buffer_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetPromptResponse get_prompt_response = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_prompt_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TransactionResponse transaction_response = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.NotificationResponse notification_response = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RegisterToolResponse register_tool_response = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_tool_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetProfilePropertyResponse set_profile_property_response = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_profile_property_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ListSessionsResponse list_sessions_response = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_sessions_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SendTextResponse send_text_response = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_text_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.CreateTabResponse create_tab_response = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_tab_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SplitPaneResponse split_pane_response = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_split_pane_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetProfilePropertyResponse get_profile_property_response = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_profile_property_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetPropertyResponse set_property_response = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_property_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetPropertyResponse get_property_response = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_property_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InjectResponse inject_response = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_inject_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ActivateResponse activate_response = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_activate_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.VariableResponse variable_response = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SavedArrangementResponse saved_arrangement_response = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_arrangement_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.FocusResponse focus_response = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_focus_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ListProfilesResponse list_profiles_response = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_profiles_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ServerOriginatedRPCResultResponse server_originated_rpc_result_response = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_originated_rpc_result_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RestartSessionResponse restart_session_response = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart_session_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.MenuItemResponse menu_item_response = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_menu_item_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetTabLayoutResponse set_tab_layout_response = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_tab_layout_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.GetBroadcastDomainsResponse get_broadcast_domains_response = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_broadcast_domains_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxResponse tmux_response = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tmux_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ReorderTabsResponse reorder_tabs_response = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_reorder_tabs_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesResponse preferences_response = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ColorPresetResponse color_preset_response = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_preset_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SelectionResponse selection_response = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.StatusBarComponentResponse status_bar_component_response = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_bar_component_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetBroadcastDomainsResponse set_broadcast_domains_response = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_broadcast_domains_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.CloseResponse close_response = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionResponse invoke_function_response = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke_function_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ListPromptsResponse list_prompts_response = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_prompts_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.Notification notification = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerOriginatedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ServerOriginatedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  switch (submessage_case()) {
    case kError: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.ServerOriginatedMessage.error");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_error(), target);
      break;
    }
    case kGetBufferResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          100, _Internal::get_buffer_response(this), target, stream);
      break;
    }
    case kGetPromptResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          101, _Internal::get_prompt_response(this), target, stream);
      break;
    }
    case kTransactionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          102, _Internal::transaction_response(this), target, stream);
      break;
    }
    case kNotificationResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          103, _Internal::notification_response(this), target, stream);
      break;
    }
    case kRegisterToolResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          104, _Internal::register_tool_response(this), target, stream);
      break;
    }
    case kSetProfilePropertyResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          105, _Internal::set_profile_property_response(this), target, stream);
      break;
    }
    case kListSessionsResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          106, _Internal::list_sessions_response(this), target, stream);
      break;
    }
    case kSendTextResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          107, _Internal::send_text_response(this), target, stream);
      break;
    }
    case kCreateTabResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          108, _Internal::create_tab_response(this), target, stream);
      break;
    }
    case kSplitPaneResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          109, _Internal::split_pane_response(this), target, stream);
      break;
    }
    case kGetProfilePropertyResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          110, _Internal::get_profile_property_response(this), target, stream);
      break;
    }
    case kSetPropertyResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          111, _Internal::set_property_response(this), target, stream);
      break;
    }
    case kGetPropertyResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          112, _Internal::get_property_response(this), target, stream);
      break;
    }
    case kInjectResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          113, _Internal::inject_response(this), target, stream);
      break;
    }
    case kActivateResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          114, _Internal::activate_response(this), target, stream);
      break;
    }
    case kVariableResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          115, _Internal::variable_response(this), target, stream);
      break;
    }
    case kSavedArrangementResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          116, _Internal::saved_arrangement_response(this), target, stream);
      break;
    }
    case kFocusResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          117, _Internal::focus_response(this), target, stream);
      break;
    }
    case kListProfilesResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          118, _Internal::list_profiles_response(this), target, stream);
      break;
    }
    case kServerOriginatedRpcResultResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          119, _Internal::server_originated_rpc_result_response(this), target, stream);
      break;
    }
    case kRestartSessionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          120, _Internal::restart_session_response(this), target, stream);
      break;
    }
    case kMenuItemResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          121, _Internal::menu_item_response(this), target, stream);
      break;
    }
    case kSetTabLayoutResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          122, _Internal::set_tab_layout_response(this), target, stream);
      break;
    }
    case kGetBroadcastDomainsResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          123, _Internal::get_broadcast_domains_response(this), target, stream);
      break;
    }
    case kTmuxResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          124, _Internal::tmux_response(this), target, stream);
      break;
    }
    case kReorderTabsResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          125, _Internal::reorder_tabs_response(this), target, stream);
      break;
    }
    case kPreferencesResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          126, _Internal::preferences_response(this), target, stream);
      break;
    }
    case kColorPresetResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          127, _Internal::color_preset_response(this), target, stream);
      break;
    }
    case kSelectionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          128, _Internal::selection_response(this), target, stream);
      break;
    }
    case kStatusBarComponentResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          129, _Internal::status_bar_component_response(this), target, stream);
      break;
    }
    case kSetBroadcastDomainsResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          130, _Internal::set_broadcast_domains_response(this), target, stream);
      break;
    }
    case kCloseResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          131, _Internal::close_response(this), target, stream);
      break;
    }
    case kInvokeFunctionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          132, _Internal::invoke_function_response(this), target, stream);
      break;
    }
    case kListPromptsResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          133, _Internal::list_prompts_response(this), target, stream);
      break;
    }
    case kNotification: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1000, _Internal::notification(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ServerOriginatedMessage)
  return target;
}

size_t ServerOriginatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ServerOriginatedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  switch (submessage_case()) {
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    // .iterm2.GetBufferResponse get_buffer_response = 100;
    case kGetBufferResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_buffer_response_);
      break;
    }
    // .iterm2.GetPromptResponse get_prompt_response = 101;
    case kGetPromptResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_prompt_response_);
      break;
    }
    // .iterm2.TransactionResponse transaction_response = 102;
    case kTransactionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.transaction_response_);
      break;
    }
    // .iterm2.NotificationResponse notification_response = 103;
    case kNotificationResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.notification_response_);
      break;
    }
    // .iterm2.RegisterToolResponse register_tool_response = 104;
    case kRegisterToolResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.register_tool_response_);
      break;
    }
    // .iterm2.SetProfilePropertyResponse set_profile_property_response = 105;
    case kSetProfilePropertyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_profile_property_response_);
      break;
    }
    // .iterm2.ListSessionsResponse list_sessions_response = 106;
    case kListSessionsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.list_sessions_response_);
      break;
    }
    // .iterm2.SendTextResponse send_text_response = 107;
    case kSendTextResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.send_text_response_);
      break;
    }
    // .iterm2.CreateTabResponse create_tab_response = 108;
    case kCreateTabResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.create_tab_response_);
      break;
    }
    // .iterm2.SplitPaneResponse split_pane_response = 109;
    case kSplitPaneResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.split_pane_response_);
      break;
    }
    // .iterm2.GetProfilePropertyResponse get_profile_property_response = 110;
    case kGetProfilePropertyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_profile_property_response_);
      break;
    }
    // .iterm2.SetPropertyResponse set_property_response = 111;
    case kSetPropertyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_property_response_);
      break;
    }
    // .iterm2.GetPropertyResponse get_property_response = 112;
    case kGetPropertyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_property_response_);
      break;
    }
    // .iterm2.InjectResponse inject_response = 113;
    case kInjectResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.inject_response_);
      break;
    }
    // .iterm2.ActivateResponse activate_response = 114;
    case kActivateResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.activate_response_);
      break;
    }
    // .iterm2.VariableResponse variable_response = 115;
    case kVariableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.variable_response_);
      break;
    }
    // .iterm2.SavedArrangementResponse saved_arrangement_response = 116;
    case kSavedArrangementResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.saved_arrangement_response_);
      break;
    }
    // .iterm2.FocusResponse focus_response = 117;
    case kFocusResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.focus_response_);
      break;
    }
    // .iterm2.ListProfilesResponse list_profiles_response = 118;
    case kListProfilesResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.list_profiles_response_);
      break;
    }
    // .iterm2.ServerOriginatedRPCResultResponse server_originated_rpc_result_response = 119;
    case kServerOriginatedRpcResultResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.server_originated_rpc_result_response_);
      break;
    }
    // .iterm2.RestartSessionResponse restart_session_response = 120;
    case kRestartSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.restart_session_response_);
      break;
    }
    // .iterm2.MenuItemResponse menu_item_response = 121;
    case kMenuItemResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.menu_item_response_);
      break;
    }
    // .iterm2.SetTabLayoutResponse set_tab_layout_response = 122;
    case kSetTabLayoutResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_tab_layout_response_);
      break;
    }
    // .iterm2.GetBroadcastDomainsResponse get_broadcast_domains_response = 123;
    case kGetBroadcastDomainsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.get_broadcast_domains_response_);
      break;
    }
    // .iterm2.TmuxResponse tmux_response = 124;
    case kTmuxResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.tmux_response_);
      break;
    }
    // .iterm2.ReorderTabsResponse reorder_tabs_response = 125;
    case kReorderTabsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.reorder_tabs_response_);
      break;
    }
    // .iterm2.PreferencesResponse preferences_response = 126;
    case kPreferencesResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.preferences_response_);
      break;
    }
    // .iterm2.ColorPresetResponse color_preset_response = 127;
    case kColorPresetResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.color_preset_response_);
      break;
    }
    // .iterm2.SelectionResponse selection_response = 128;
    case kSelectionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.selection_response_);
      break;
    }
    // .iterm2.StatusBarComponentResponse status_bar_component_response = 129;
    case kStatusBarComponentResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.status_bar_component_response_);
      break;
    }
    // .iterm2.SetBroadcastDomainsResponse set_broadcast_domains_response = 130;
    case kSetBroadcastDomainsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.set_broadcast_domains_response_);
      break;
    }
    // .iterm2.CloseResponse close_response = 131;
    case kCloseResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.close_response_);
      break;
    }
    // .iterm2.InvokeFunctionResponse invoke_function_response = 132;
    case kInvokeFunctionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.invoke_function_response_);
      break;
    }
    // .iterm2.ListPromptsResponse list_prompts_response = 133;
    case kListPromptsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.list_prompts_response_);
      break;
    }
    // .iterm2.Notification notification = 1000;
    case kNotification: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submessage_.notification_);
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerOriginatedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerOriginatedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerOriginatedMessage::GetClassData() const { return &_class_data_; }

void ServerOriginatedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerOriginatedMessage *>(to)->MergeFrom(
      static_cast<const ServerOriginatedMessage &>(from));
}


void ServerOriginatedMessage::MergeFrom(const ServerOriginatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ServerOriginatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  switch (from.submessage_case()) {
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case kGetBufferResponse: {
      _internal_mutable_get_buffer_response()->::iterm2::GetBufferResponse::MergeFrom(from._internal_get_buffer_response());
      break;
    }
    case kGetPromptResponse: {
      _internal_mutable_get_prompt_response()->::iterm2::GetPromptResponse::MergeFrom(from._internal_get_prompt_response());
      break;
    }
    case kTransactionResponse: {
      _internal_mutable_transaction_response()->::iterm2::TransactionResponse::MergeFrom(from._internal_transaction_response());
      break;
    }
    case kNotificationResponse: {
      _internal_mutable_notification_response()->::iterm2::NotificationResponse::MergeFrom(from._internal_notification_response());
      break;
    }
    case kRegisterToolResponse: {
      _internal_mutable_register_tool_response()->::iterm2::RegisterToolResponse::MergeFrom(from._internal_register_tool_response());
      break;
    }
    case kSetProfilePropertyResponse: {
      _internal_mutable_set_profile_property_response()->::iterm2::SetProfilePropertyResponse::MergeFrom(from._internal_set_profile_property_response());
      break;
    }
    case kListSessionsResponse: {
      _internal_mutable_list_sessions_response()->::iterm2::ListSessionsResponse::MergeFrom(from._internal_list_sessions_response());
      break;
    }
    case kSendTextResponse: {
      _internal_mutable_send_text_response()->::iterm2::SendTextResponse::MergeFrom(from._internal_send_text_response());
      break;
    }
    case kCreateTabResponse: {
      _internal_mutable_create_tab_response()->::iterm2::CreateTabResponse::MergeFrom(from._internal_create_tab_response());
      break;
    }
    case kSplitPaneResponse: {
      _internal_mutable_split_pane_response()->::iterm2::SplitPaneResponse::MergeFrom(from._internal_split_pane_response());
      break;
    }
    case kGetProfilePropertyResponse: {
      _internal_mutable_get_profile_property_response()->::iterm2::GetProfilePropertyResponse::MergeFrom(from._internal_get_profile_property_response());
      break;
    }
    case kSetPropertyResponse: {
      _internal_mutable_set_property_response()->::iterm2::SetPropertyResponse::MergeFrom(from._internal_set_property_response());
      break;
    }
    case kGetPropertyResponse: {
      _internal_mutable_get_property_response()->::iterm2::GetPropertyResponse::MergeFrom(from._internal_get_property_response());
      break;
    }
    case kInjectResponse: {
      _internal_mutable_inject_response()->::iterm2::InjectResponse::MergeFrom(from._internal_inject_response());
      break;
    }
    case kActivateResponse: {
      _internal_mutable_activate_response()->::iterm2::ActivateResponse::MergeFrom(from._internal_activate_response());
      break;
    }
    case kVariableResponse: {
      _internal_mutable_variable_response()->::iterm2::VariableResponse::MergeFrom(from._internal_variable_response());
      break;
    }
    case kSavedArrangementResponse: {
      _internal_mutable_saved_arrangement_response()->::iterm2::SavedArrangementResponse::MergeFrom(from._internal_saved_arrangement_response());
      break;
    }
    case kFocusResponse: {
      _internal_mutable_focus_response()->::iterm2::FocusResponse::MergeFrom(from._internal_focus_response());
      break;
    }
    case kListProfilesResponse: {
      _internal_mutable_list_profiles_response()->::iterm2::ListProfilesResponse::MergeFrom(from._internal_list_profiles_response());
      break;
    }
    case kServerOriginatedRpcResultResponse: {
      _internal_mutable_server_originated_rpc_result_response()->::iterm2::ServerOriginatedRPCResultResponse::MergeFrom(from._internal_server_originated_rpc_result_response());
      break;
    }
    case kRestartSessionResponse: {
      _internal_mutable_restart_session_response()->::iterm2::RestartSessionResponse::MergeFrom(from._internal_restart_session_response());
      break;
    }
    case kMenuItemResponse: {
      _internal_mutable_menu_item_response()->::iterm2::MenuItemResponse::MergeFrom(from._internal_menu_item_response());
      break;
    }
    case kSetTabLayoutResponse: {
      _internal_mutable_set_tab_layout_response()->::iterm2::SetTabLayoutResponse::MergeFrom(from._internal_set_tab_layout_response());
      break;
    }
    case kGetBroadcastDomainsResponse: {
      _internal_mutable_get_broadcast_domains_response()->::iterm2::GetBroadcastDomainsResponse::MergeFrom(from._internal_get_broadcast_domains_response());
      break;
    }
    case kTmuxResponse: {
      _internal_mutable_tmux_response()->::iterm2::TmuxResponse::MergeFrom(from._internal_tmux_response());
      break;
    }
    case kReorderTabsResponse: {
      _internal_mutable_reorder_tabs_response()->::iterm2::ReorderTabsResponse::MergeFrom(from._internal_reorder_tabs_response());
      break;
    }
    case kPreferencesResponse: {
      _internal_mutable_preferences_response()->::iterm2::PreferencesResponse::MergeFrom(from._internal_preferences_response());
      break;
    }
    case kColorPresetResponse: {
      _internal_mutable_color_preset_response()->::iterm2::ColorPresetResponse::MergeFrom(from._internal_color_preset_response());
      break;
    }
    case kSelectionResponse: {
      _internal_mutable_selection_response()->::iterm2::SelectionResponse::MergeFrom(from._internal_selection_response());
      break;
    }
    case kStatusBarComponentResponse: {
      _internal_mutable_status_bar_component_response()->::iterm2::StatusBarComponentResponse::MergeFrom(from._internal_status_bar_component_response());
      break;
    }
    case kSetBroadcastDomainsResponse: {
      _internal_mutable_set_broadcast_domains_response()->::iterm2::SetBroadcastDomainsResponse::MergeFrom(from._internal_set_broadcast_domains_response());
      break;
    }
    case kCloseResponse: {
      _internal_mutable_close_response()->::iterm2::CloseResponse::MergeFrom(from._internal_close_response());
      break;
    }
    case kInvokeFunctionResponse: {
      _internal_mutable_invoke_function_response()->::iterm2::InvokeFunctionResponse::MergeFrom(from._internal_invoke_function_response());
      break;
    }
    case kListPromptsResponse: {
      _internal_mutable_list_prompts_response()->::iterm2::ListPromptsResponse::MergeFrom(from._internal_list_prompts_response());
      break;
    }
    case kNotification: {
      _internal_mutable_notification()->::iterm2::Notification::MergeFrom(from._internal_notification());
      break;
    }
    case SUBMESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerOriginatedMessage::CopyFrom(const ServerOriginatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ServerOriginatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOriginatedMessage::IsInitialized() const {
  return true;
}

void ServerOriginatedMessage::InternalSwap(ServerOriginatedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(submessage_, other->submessage_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerOriginatedMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[1]);
}

// ===================================================================

class InvokeFunctionRequest_Tab::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionRequest_Tab>()._has_bits_);
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvokeFunctionRequest_Tab::InvokeFunctionRequest_Tab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionRequest.Tab)
}
InvokeFunctionRequest_Tab::InvokeFunctionRequest_Tab(const InvokeFunctionRequest_Tab& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tab_id()) {
    tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tab_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionRequest.Tab)
}

inline void InvokeFunctionRequest_Tab::SharedCtor() {
tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeFunctionRequest_Tab::~InvokeFunctionRequest_Tab() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionRequest.Tab)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionRequest_Tab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeFunctionRequest_Tab::ArenaDtor(void* object) {
  InvokeFunctionRequest_Tab* _this = reinterpret_cast< InvokeFunctionRequest_Tab* >(object);
  (void)_this;
}
void InvokeFunctionRequest_Tab::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionRequest_Tab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionRequest_Tab::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionRequest.Tab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tab_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionRequest_Tab::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tab_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionRequest.Tab.tab_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionRequest_Tab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionRequest.Tab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tab_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tab_id().data(), static_cast<int>(this->_internal_tab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionRequest.Tab.tab_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tab_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionRequest.Tab)
  return target;
}

size_t InvokeFunctionRequest_Tab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionRequest.Tab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tab_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tab_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionRequest_Tab::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionRequest_Tab::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionRequest_Tab::GetClassData() const { return &_class_data_; }

void InvokeFunctionRequest_Tab::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionRequest_Tab *>(to)->MergeFrom(
      static_cast<const InvokeFunctionRequest_Tab &>(from));
}


void InvokeFunctionRequest_Tab::MergeFrom(const InvokeFunctionRequest_Tab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionRequest.Tab)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tab_id()) {
    _internal_set_tab_id(from._internal_tab_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionRequest_Tab::CopyFrom(const InvokeFunctionRequest_Tab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionRequest.Tab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionRequest_Tab::IsInitialized() const {
  return true;
}

void InvokeFunctionRequest_Tab::InternalSwap(InvokeFunctionRequest_Tab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tab_id_, lhs_arena,
      &other->tab_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionRequest_Tab::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[2]);
}

// ===================================================================

class InvokeFunctionRequest_Session::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionRequest_Session>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvokeFunctionRequest_Session::InvokeFunctionRequest_Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionRequest.Session)
}
InvokeFunctionRequest_Session::InvokeFunctionRequest_Session(const InvokeFunctionRequest_Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionRequest.Session)
}

inline void InvokeFunctionRequest_Session::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeFunctionRequest_Session::~InvokeFunctionRequest_Session() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionRequest.Session)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionRequest_Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeFunctionRequest_Session::ArenaDtor(void* object) {
  InvokeFunctionRequest_Session* _this = reinterpret_cast< InvokeFunctionRequest_Session* >(object);
  (void)_this;
}
void InvokeFunctionRequest_Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionRequest_Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionRequest_Session::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionRequest.Session)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionRequest_Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionRequest.Session.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionRequest_Session::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionRequest.Session)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionRequest.Session.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionRequest.Session)
  return target;
}

size_t InvokeFunctionRequest_Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionRequest.Session)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionRequest_Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionRequest_Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionRequest_Session::GetClassData() const { return &_class_data_; }

void InvokeFunctionRequest_Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionRequest_Session *>(to)->MergeFrom(
      static_cast<const InvokeFunctionRequest_Session &>(from));
}


void InvokeFunctionRequest_Session::MergeFrom(const InvokeFunctionRequest_Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionRequest.Session)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionRequest_Session::CopyFrom(const InvokeFunctionRequest_Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionRequest.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionRequest_Session::IsInitialized() const {
  return true;
}

void InvokeFunctionRequest_Session::InternalSwap(InvokeFunctionRequest_Session* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionRequest_Session::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[3]);
}

// ===================================================================

class InvokeFunctionRequest_Window::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionRequest_Window>()._has_bits_);
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvokeFunctionRequest_Window::InvokeFunctionRequest_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionRequest.Window)
}
InvokeFunctionRequest_Window::InvokeFunctionRequest_Window(const InvokeFunctionRequest_Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionRequest.Window)
}

inline void InvokeFunctionRequest_Window::SharedCtor() {
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeFunctionRequest_Window::~InvokeFunctionRequest_Window() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionRequest.Window)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionRequest_Window::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeFunctionRequest_Window::ArenaDtor(void* object) {
  InvokeFunctionRequest_Window* _this = reinterpret_cast< InvokeFunctionRequest_Window* >(object);
  (void)_this;
}
void InvokeFunctionRequest_Window::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionRequest_Window::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionRequest_Window::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionRequest.Window)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    window_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionRequest_Window::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionRequest.Window.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionRequest_Window::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionRequest.Window)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string window_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionRequest.Window.window_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_window_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionRequest.Window)
  return target;
}

size_t InvokeFunctionRequest_Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionRequest.Window)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string window_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_window_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionRequest_Window::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionRequest_Window::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionRequest_Window::GetClassData() const { return &_class_data_; }

void InvokeFunctionRequest_Window::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionRequest_Window *>(to)->MergeFrom(
      static_cast<const InvokeFunctionRequest_Window &>(from));
}


void InvokeFunctionRequest_Window::MergeFrom(const InvokeFunctionRequest_Window& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionRequest.Window)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_window_id()) {
    _internal_set_window_id(from._internal_window_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionRequest_Window::CopyFrom(const InvokeFunctionRequest_Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionRequest.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionRequest_Window::IsInitialized() const {
  return true;
}

void InvokeFunctionRequest_Window::InternalSwap(InvokeFunctionRequest_Window* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionRequest_Window::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[4]);
}

// ===================================================================

class InvokeFunctionRequest_App::_Internal {
 public:
};

InvokeFunctionRequest_App::InvokeFunctionRequest_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionRequest.App)
}
InvokeFunctionRequest_App::InvokeFunctionRequest_App(const InvokeFunctionRequest_App& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionRequest.App)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionRequest_App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionRequest_App::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionRequest_App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[5]);
}

// ===================================================================

class InvokeFunctionRequest_Method::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionRequest_Method>()._has_bits_);
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvokeFunctionRequest_Method::InvokeFunctionRequest_Method(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionRequest.Method)
}
InvokeFunctionRequest_Method::InvokeFunctionRequest_Method(const InvokeFunctionRequest_Method& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_receiver()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionRequest.Method)
}

inline void InvokeFunctionRequest_Method::SharedCtor() {
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeFunctionRequest_Method::~InvokeFunctionRequest_Method() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionRequest.Method)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionRequest_Method::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeFunctionRequest_Method::ArenaDtor(void* object) {
  InvokeFunctionRequest_Method* _this = reinterpret_cast< InvokeFunctionRequest_Method* >(object);
  (void)_this;
}
void InvokeFunctionRequest_Method::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionRequest_Method::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionRequest_Method::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionRequest.Method)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    receiver_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionRequest_Method::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionRequest.Method.receiver");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionRequest_Method::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionRequest.Method)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string receiver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionRequest.Method.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionRequest.Method)
  return target;
}

size_t InvokeFunctionRequest_Method::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionRequest.Method)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string receiver = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionRequest_Method::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionRequest_Method::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionRequest_Method::GetClassData() const { return &_class_data_; }

void InvokeFunctionRequest_Method::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionRequest_Method *>(to)->MergeFrom(
      static_cast<const InvokeFunctionRequest_Method &>(from));
}


void InvokeFunctionRequest_Method::MergeFrom(const InvokeFunctionRequest_Method& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionRequest.Method)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_receiver()) {
    _internal_set_receiver(from._internal_receiver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionRequest_Method::CopyFrom(const InvokeFunctionRequest_Method& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionRequest.Method)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionRequest_Method::IsInitialized() const {
  return true;
}

void InvokeFunctionRequest_Method::InternalSwap(InvokeFunctionRequest_Method* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_, lhs_arena,
      &other->receiver_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionRequest_Method::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[6]);
}

// ===================================================================

class InvokeFunctionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionRequest>()._has_bits_);
  static const ::iterm2::InvokeFunctionRequest_Tab& tab(const InvokeFunctionRequest* msg);
  static const ::iterm2::InvokeFunctionRequest_Session& session(const InvokeFunctionRequest* msg);
  static const ::iterm2::InvokeFunctionRequest_Window& window(const InvokeFunctionRequest* msg);
  static const ::iterm2::InvokeFunctionRequest_App& app(const InvokeFunctionRequest* msg);
  static const ::iterm2::InvokeFunctionRequest_Method& method(const InvokeFunctionRequest* msg);
  static void set_has_invocation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::InvokeFunctionRequest_Tab&
InvokeFunctionRequest::_Internal::tab(const InvokeFunctionRequest* msg) {
  return *msg->context_.tab_;
}
const ::iterm2::InvokeFunctionRequest_Session&
InvokeFunctionRequest::_Internal::session(const InvokeFunctionRequest* msg) {
  return *msg->context_.session_;
}
const ::iterm2::InvokeFunctionRequest_Window&
InvokeFunctionRequest::_Internal::window(const InvokeFunctionRequest* msg) {
  return *msg->context_.window_;
}
const ::iterm2::InvokeFunctionRequest_App&
InvokeFunctionRequest::_Internal::app(const InvokeFunctionRequest* msg) {
  return *msg->context_.app_;
}
const ::iterm2::InvokeFunctionRequest_Method&
InvokeFunctionRequest::_Internal::method(const InvokeFunctionRequest* msg) {
  return *msg->context_.method_;
}
void InvokeFunctionRequest::set_allocated_tab(::iterm2::InvokeFunctionRequest_Tab* tab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (tab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionRequest_Tab>::GetOwningArena(tab);
    if (message_arena != submessage_arena) {
      tab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tab, submessage_arena);
    }
    set_has_tab();
    context_.tab_ = tab;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.tab)
}
void InvokeFunctionRequest::set_allocated_session(::iterm2::InvokeFunctionRequest_Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionRequest_Session>::GetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    context_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.session)
}
void InvokeFunctionRequest::set_allocated_window(::iterm2::InvokeFunctionRequest_Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionRequest_Window>::GetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    set_has_window();
    context_.window_ = window;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.window)
}
void InvokeFunctionRequest::set_allocated_app(::iterm2::InvokeFunctionRequest_App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionRequest_App>::GetOwningArena(app);
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    set_has_app();
    context_.app_ = app;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.app)
}
void InvokeFunctionRequest::set_allocated_method(::iterm2::InvokeFunctionRequest_Method* method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionRequest_Method>::GetOwningArena(method);
    if (message_arena != submessage_arena) {
      method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    set_has_method();
    context_.method_ = method;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionRequest.method)
}
InvokeFunctionRequest::InvokeFunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionRequest)
}
InvokeFunctionRequest::InvokeFunctionRequest(const InvokeFunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invocation()) {
    invocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invocation(), 
      GetArenaForAllocation());
  }
  timeout_ = from.timeout_;
  clear_has_context();
  switch (from.context_case()) {
    case kTab: {
      _internal_mutable_tab()->::iterm2::InvokeFunctionRequest_Tab::MergeFrom(from._internal_tab());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::iterm2::InvokeFunctionRequest_Session::MergeFrom(from._internal_session());
      break;
    }
    case kWindow: {
      _internal_mutable_window()->::iterm2::InvokeFunctionRequest_Window::MergeFrom(from._internal_window());
      break;
    }
    case kApp: {
      _internal_mutable_app()->::iterm2::InvokeFunctionRequest_App::MergeFrom(from._internal_app());
      break;
    }
    case kMethod: {
      _internal_mutable_method()->::iterm2::InvokeFunctionRequest_Method::MergeFrom(from._internal_method());
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionRequest)
}

inline void InvokeFunctionRequest::SharedCtor() {
invocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timeout_ = -1;
clear_has_context();
}

InvokeFunctionRequest::~InvokeFunctionRequest() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invocation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_context()) {
    clear_context();
  }
}

void InvokeFunctionRequest::ArenaDtor(void* object) {
  InvokeFunctionRequest* _this = reinterpret_cast< InvokeFunctionRequest* >(object);
  (void)_this;
}
void InvokeFunctionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionRequest::clear_context() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.InvokeFunctionRequest)
  switch (context_case()) {
    case kTab: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.tab_;
      }
      break;
    }
    case kSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.session_;
      }
      break;
    }
    case kWindow: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.window_;
      }
      break;
    }
    case kApp: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.app_;
      }
      break;
    }
    case kMethod: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.method_;
      }
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTEXT_NOT_SET;
}


void InvokeFunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      invocation_.ClearNonDefaultToEmpty();
    }
    timeout_ = -1;
  }
  clear_context();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.InvokeFunctionRequest.Tab tab = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tab(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionRequest.Session session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionRequest.Window window = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionRequest.App app = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string invocation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_invocation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionRequest.invocation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timeout = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionRequest.Method method = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (context_case()) {
    case kTab: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::tab(this), target, stream);
      break;
    }
    case kSession: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::session(this), target, stream);
      break;
    }
    case kWindow: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::window(this), target, stream);
      break;
    }
    case kApp: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::app(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional string invocation = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invocation().data(), static_cast<int>(this->_internal_invocation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionRequest.invocation");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invocation(), target);
  }

  // optional double timeout = 6 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_timeout(), target);
  }

  // .iterm2.InvokeFunctionRequest.Method method = 7;
  if (_internal_has_method()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::method(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionRequest)
  return target;
}

size_t InvokeFunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invocation = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invocation());
    }

    // optional double timeout = 6 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  switch (context_case()) {
    // .iterm2.InvokeFunctionRequest.Tab tab = 1;
    case kTab: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.tab_);
      break;
    }
    // .iterm2.InvokeFunctionRequest.Session session = 2;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.session_);
      break;
    }
    // .iterm2.InvokeFunctionRequest.Window window = 3;
    case kWindow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.window_);
      break;
    }
    // .iterm2.InvokeFunctionRequest.App app = 4;
    case kApp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.app_);
      break;
    }
    // .iterm2.InvokeFunctionRequest.Method method = 7;
    case kMethod: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.method_);
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionRequest::GetClassData() const { return &_class_data_; }

void InvokeFunctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionRequest *>(to)->MergeFrom(
      static_cast<const InvokeFunctionRequest &>(from));
}


void InvokeFunctionRequest::MergeFrom(const InvokeFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invocation(from._internal_invocation());
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.context_case()) {
    case kTab: {
      _internal_mutable_tab()->::iterm2::InvokeFunctionRequest_Tab::MergeFrom(from._internal_tab());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::iterm2::InvokeFunctionRequest_Session::MergeFrom(from._internal_session());
      break;
    }
    case kWindow: {
      _internal_mutable_window()->::iterm2::InvokeFunctionRequest_Window::MergeFrom(from._internal_window());
      break;
    }
    case kApp: {
      _internal_mutable_app()->::iterm2::InvokeFunctionRequest_App::MergeFrom(from._internal_app());
      break;
    }
    case kMethod: {
      _internal_mutable_method()->::iterm2::InvokeFunctionRequest_Method::MergeFrom(from._internal_method());
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionRequest::CopyFrom(const InvokeFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionRequest::IsInitialized() const {
  return true;
}

void InvokeFunctionRequest::InternalSwap(InvokeFunctionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invocation_, lhs_arena,
      &other->invocation_, rhs_arena
  );
  swap(timeout_, other->timeout_);
  swap(context_, other->context_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[7]);
}

// ===================================================================

class InvokeFunctionResponse_Error::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionResponse_Error>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvokeFunctionResponse_Error::InvokeFunctionResponse_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionResponse.Error)
}
InvokeFunctionResponse_Error::InvokeFunctionResponse_Error(const InvokeFunctionResponse_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_reason()) {
    error_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_reason(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionResponse.Error)
}

inline void InvokeFunctionResponse_Error::SharedCtor() {
error_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 1;
}

InvokeFunctionResponse_Error::~InvokeFunctionResponse_Error() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionResponse.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionResponse_Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeFunctionResponse_Error::ArenaDtor(void* object) {
  InvokeFunctionResponse_Error* _this = reinterpret_cast< InvokeFunctionResponse_Error* >(object);
  (void)_this;
}
void InvokeFunctionResponse_Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionResponse_Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionResponse_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionResponse.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_reason_.ClearNonDefaultToEmpty();
    }
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionResponse_Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.InvokeFunctionResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::InvokeFunctionResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::InvokeFunctionResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionResponse.Error.error_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionResponse_Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionResponse.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.InvokeFunctionResponse.Status status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error_reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_reason().data(), static_cast<int>(this->_internal_error_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionResponse.Error.error_reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionResponse.Error)
  return target;
}

size_t InvokeFunctionResponse_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionResponse.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_reason());
    }

    // optional .iterm2.InvokeFunctionResponse.Status status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionResponse_Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionResponse_Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionResponse_Error::GetClassData() const { return &_class_data_; }

void InvokeFunctionResponse_Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionResponse_Error *>(to)->MergeFrom(
      static_cast<const InvokeFunctionResponse_Error &>(from));
}


void InvokeFunctionResponse_Error::MergeFrom(const InvokeFunctionResponse_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionResponse.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_reason(from._internal_error_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionResponse_Error::CopyFrom(const InvokeFunctionResponse_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionResponse.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionResponse_Error::IsInitialized() const {
  return true;
}

void InvokeFunctionResponse_Error::InternalSwap(InvokeFunctionResponse_Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_reason_, lhs_arena,
      &other->error_reason_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionResponse_Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[8]);
}

// ===================================================================

class InvokeFunctionResponse_Success::_Internal {
 public:
  using HasBits = decltype(std::declval<InvokeFunctionResponse_Success>()._has_bits_);
  static void set_has_json_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InvokeFunctionResponse_Success::InvokeFunctionResponse_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionResponse.Success)
}
InvokeFunctionResponse_Success::InvokeFunctionResponse_Success(const InvokeFunctionResponse_Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_result()) {
    json_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionResponse.Success)
}

inline void InvokeFunctionResponse_Success::SharedCtor() {
json_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeFunctionResponse_Success::~InvokeFunctionResponse_Success() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionResponse.Success)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionResponse_Success::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  json_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvokeFunctionResponse_Success::ArenaDtor(void* object) {
  InvokeFunctionResponse_Success* _this = reinterpret_cast< InvokeFunctionResponse_Success* >(object);
  (void)_this;
}
void InvokeFunctionResponse_Success::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionResponse_Success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionResponse_Success::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionResponse.Success)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_result_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionResponse_Success::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string json_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_json_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InvokeFunctionResponse.Success.json_result");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionResponse_Success::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionResponse.Success)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_result().data(), static_cast<int>(this->_internal_json_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InvokeFunctionResponse.Success.json_result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionResponse.Success)
  return target;
}

size_t InvokeFunctionResponse_Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionResponse.Success)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string json_result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionResponse_Success::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionResponse_Success::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionResponse_Success::GetClassData() const { return &_class_data_; }

void InvokeFunctionResponse_Success::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionResponse_Success *>(to)->MergeFrom(
      static_cast<const InvokeFunctionResponse_Success &>(from));
}


void InvokeFunctionResponse_Success::MergeFrom(const InvokeFunctionResponse_Success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionResponse.Success)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_json_result()) {
    _internal_set_json_result(from._internal_json_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionResponse_Success::CopyFrom(const InvokeFunctionResponse_Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionResponse.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionResponse_Success::IsInitialized() const {
  return true;
}

void InvokeFunctionResponse_Success::InternalSwap(InvokeFunctionResponse_Success* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_result_, lhs_arena,
      &other->json_result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionResponse_Success::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[9]);
}

// ===================================================================

class InvokeFunctionResponse::_Internal {
 public:
  static const ::iterm2::InvokeFunctionResponse_Error& error(const InvokeFunctionResponse* msg);
  static const ::iterm2::InvokeFunctionResponse_Success& success(const InvokeFunctionResponse* msg);
};

const ::iterm2::InvokeFunctionResponse_Error&
InvokeFunctionResponse::_Internal::error(const InvokeFunctionResponse* msg) {
  return *msg->disposition_.error_;
}
const ::iterm2::InvokeFunctionResponse_Success&
InvokeFunctionResponse::_Internal::success(const InvokeFunctionResponse* msg) {
  return *msg->disposition_.success_;
}
void InvokeFunctionResponse::set_allocated_error(::iterm2::InvokeFunctionResponse_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_disposition();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionResponse_Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    disposition_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionResponse.error)
}
void InvokeFunctionResponse::set_allocated_success(::iterm2::InvokeFunctionResponse_Success* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_disposition();
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::InvokeFunctionResponse_Success>::GetOwningArena(success);
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    set_has_success();
    disposition_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.InvokeFunctionResponse.success)
}
InvokeFunctionResponse::InvokeFunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InvokeFunctionResponse)
}
InvokeFunctionResponse::InvokeFunctionResponse(const InvokeFunctionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_disposition();
  switch (from.disposition_case()) {
    case kError: {
      _internal_mutable_error()->::iterm2::InvokeFunctionResponse_Error::MergeFrom(from._internal_error());
      break;
    }
    case kSuccess: {
      _internal_mutable_success()->::iterm2::InvokeFunctionResponse_Success::MergeFrom(from._internal_success());
      break;
    }
    case DISPOSITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InvokeFunctionResponse)
}

inline void InvokeFunctionResponse::SharedCtor() {
clear_has_disposition();
}

InvokeFunctionResponse::~InvokeFunctionResponse() {
  // @@protoc_insertion_point(destructor:iterm2.InvokeFunctionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeFunctionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_disposition()) {
    clear_disposition();
  }
}

void InvokeFunctionResponse::ArenaDtor(void* object) {
  InvokeFunctionResponse* _this = reinterpret_cast< InvokeFunctionResponse* >(object);
  (void)_this;
}
void InvokeFunctionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeFunctionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeFunctionResponse::clear_disposition() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.InvokeFunctionResponse)
  switch (disposition_case()) {
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete disposition_.error_;
      }
      break;
    }
    case kSuccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete disposition_.success_;
      }
      break;
    }
    case DISPOSITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DISPOSITION_NOT_SET;
}


void InvokeFunctionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InvokeFunctionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_disposition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeFunctionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.InvokeFunctionResponse.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.InvokeFunctionResponse.Success success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_success(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeFunctionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InvokeFunctionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (disposition_case()) {
    case kError: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::error(this), target, stream);
      break;
    }
    case kSuccess: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::success(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InvokeFunctionResponse)
  return target;
}

size_t InvokeFunctionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InvokeFunctionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (disposition_case()) {
    // .iterm2.InvokeFunctionResponse.Error error = 1;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disposition_.error_);
      break;
    }
    // .iterm2.InvokeFunctionResponse.Success success = 2;
    case kSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disposition_.success_);
      break;
    }
    case DISPOSITION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeFunctionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeFunctionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeFunctionResponse::GetClassData() const { return &_class_data_; }

void InvokeFunctionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeFunctionResponse *>(to)->MergeFrom(
      static_cast<const InvokeFunctionResponse &>(from));
}


void InvokeFunctionResponse::MergeFrom(const InvokeFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InvokeFunctionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.disposition_case()) {
    case kError: {
      _internal_mutable_error()->::iterm2::InvokeFunctionResponse_Error::MergeFrom(from._internal_error());
      break;
    }
    case kSuccess: {
      _internal_mutable_success()->::iterm2::InvokeFunctionResponse_Success::MergeFrom(from._internal_success());
      break;
    }
    case DISPOSITION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeFunctionResponse::CopyFrom(const InvokeFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InvokeFunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeFunctionResponse::IsInitialized() const {
  return true;
}

void InvokeFunctionResponse::InternalSwap(InvokeFunctionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(disposition_, other->disposition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeFunctionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[10]);
}

// ===================================================================

class CloseRequest_CloseTabs::_Internal {
 public:
};

CloseRequest_CloseTabs::CloseRequest_CloseTabs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tab_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CloseRequest.CloseTabs)
}
CloseRequest_CloseTabs::CloseRequest_CloseTabs(const CloseRequest_CloseTabs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tab_ids_(from.tab_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.CloseRequest.CloseTabs)
}

inline void CloseRequest_CloseTabs::SharedCtor() {
}

CloseRequest_CloseTabs::~CloseRequest_CloseTabs() {
  // @@protoc_insertion_point(destructor:iterm2.CloseRequest.CloseTabs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseRequest_CloseTabs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseRequest_CloseTabs::ArenaDtor(void* object) {
  CloseRequest_CloseTabs* _this = reinterpret_cast< CloseRequest_CloseTabs* >(object);
  (void)_this;
}
void CloseRequest_CloseTabs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseRequest_CloseTabs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseRequest_CloseTabs::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CloseRequest.CloseTabs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseRequest_CloseTabs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tab_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tab_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CloseRequest.CloseTabs.tab_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseRequest_CloseTabs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CloseRequest.CloseTabs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tab_ids = 1;
  for (int i = 0, n = this->_internal_tab_ids_size(); i < n; i++) {
    const auto& s = this->_internal_tab_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CloseRequest.CloseTabs.tab_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CloseRequest.CloseTabs)
  return target;
}

size_t CloseRequest_CloseTabs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CloseRequest.CloseTabs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tab_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tab_ids_.size());
  for (int i = 0, n = tab_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tab_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseRequest_CloseTabs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseRequest_CloseTabs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseRequest_CloseTabs::GetClassData() const { return &_class_data_; }

void CloseRequest_CloseTabs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseRequest_CloseTabs *>(to)->MergeFrom(
      static_cast<const CloseRequest_CloseTabs &>(from));
}


void CloseRequest_CloseTabs::MergeFrom(const CloseRequest_CloseTabs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CloseRequest.CloseTabs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tab_ids_.MergeFrom(from.tab_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseRequest_CloseTabs::CopyFrom(const CloseRequest_CloseTabs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CloseRequest.CloseTabs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequest_CloseTabs::IsInitialized() const {
  return true;
}

void CloseRequest_CloseTabs::InternalSwap(CloseRequest_CloseTabs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tab_ids_.InternalSwap(&other->tab_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRequest_CloseTabs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[11]);
}

// ===================================================================

class CloseRequest_CloseSessions::_Internal {
 public:
};

CloseRequest_CloseSessions::CloseRequest_CloseSessions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CloseRequest.CloseSessions)
}
CloseRequest_CloseSessions::CloseRequest_CloseSessions(const CloseRequest_CloseSessions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_ids_(from.session_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.CloseRequest.CloseSessions)
}

inline void CloseRequest_CloseSessions::SharedCtor() {
}

CloseRequest_CloseSessions::~CloseRequest_CloseSessions() {
  // @@protoc_insertion_point(destructor:iterm2.CloseRequest.CloseSessions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseRequest_CloseSessions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseRequest_CloseSessions::ArenaDtor(void* object) {
  CloseRequest_CloseSessions* _this = reinterpret_cast< CloseRequest_CloseSessions* >(object);
  (void)_this;
}
void CloseRequest_CloseSessions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseRequest_CloseSessions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseRequest_CloseSessions::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CloseRequest.CloseSessions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseRequest_CloseSessions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string session_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_session_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CloseRequest.CloseSessions.session_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseRequest_CloseSessions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CloseRequest.CloseSessions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string session_ids = 1;
  for (int i = 0, n = this->_internal_session_ids_size(); i < n; i++) {
    const auto& s = this->_internal_session_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CloseRequest.CloseSessions.session_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CloseRequest.CloseSessions)
  return target;
}

size_t CloseRequest_CloseSessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CloseRequest.CloseSessions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string session_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(session_ids_.size());
  for (int i = 0, n = session_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      session_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseRequest_CloseSessions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseRequest_CloseSessions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseRequest_CloseSessions::GetClassData() const { return &_class_data_; }

void CloseRequest_CloseSessions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseRequest_CloseSessions *>(to)->MergeFrom(
      static_cast<const CloseRequest_CloseSessions &>(from));
}


void CloseRequest_CloseSessions::MergeFrom(const CloseRequest_CloseSessions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CloseRequest.CloseSessions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  session_ids_.MergeFrom(from.session_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseRequest_CloseSessions::CopyFrom(const CloseRequest_CloseSessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CloseRequest.CloseSessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequest_CloseSessions::IsInitialized() const {
  return true;
}

void CloseRequest_CloseSessions::InternalSwap(CloseRequest_CloseSessions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  session_ids_.InternalSwap(&other->session_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRequest_CloseSessions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[12]);
}

// ===================================================================

class CloseRequest_CloseWindows::_Internal {
 public:
};

CloseRequest_CloseWindows::CloseRequest_CloseWindows(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  window_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CloseRequest.CloseWindows)
}
CloseRequest_CloseWindows::CloseRequest_CloseWindows(const CloseRequest_CloseWindows& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      window_ids_(from.window_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.CloseRequest.CloseWindows)
}

inline void CloseRequest_CloseWindows::SharedCtor() {
}

CloseRequest_CloseWindows::~CloseRequest_CloseWindows() {
  // @@protoc_insertion_point(destructor:iterm2.CloseRequest.CloseWindows)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseRequest_CloseWindows::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseRequest_CloseWindows::ArenaDtor(void* object) {
  CloseRequest_CloseWindows* _this = reinterpret_cast< CloseRequest_CloseWindows* >(object);
  (void)_this;
}
void CloseRequest_CloseWindows::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseRequest_CloseWindows::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseRequest_CloseWindows::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CloseRequest.CloseWindows)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  window_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseRequest_CloseWindows::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string window_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_window_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CloseRequest.CloseWindows.window_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseRequest_CloseWindows::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CloseRequest.CloseWindows)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string window_ids = 1;
  for (int i = 0, n = this->_internal_window_ids_size(); i < n; i++) {
    const auto& s = this->_internal_window_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CloseRequest.CloseWindows.window_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CloseRequest.CloseWindows)
  return target;
}

size_t CloseRequest_CloseWindows::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CloseRequest.CloseWindows)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string window_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(window_ids_.size());
  for (int i = 0, n = window_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      window_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseRequest_CloseWindows::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseRequest_CloseWindows::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseRequest_CloseWindows::GetClassData() const { return &_class_data_; }

void CloseRequest_CloseWindows::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseRequest_CloseWindows *>(to)->MergeFrom(
      static_cast<const CloseRequest_CloseWindows &>(from));
}


void CloseRequest_CloseWindows::MergeFrom(const CloseRequest_CloseWindows& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CloseRequest.CloseWindows)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  window_ids_.MergeFrom(from.window_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseRequest_CloseWindows::CopyFrom(const CloseRequest_CloseWindows& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CloseRequest.CloseWindows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequest_CloseWindows::IsInitialized() const {
  return true;
}

void CloseRequest_CloseWindows::InternalSwap(CloseRequest_CloseWindows* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  window_ids_.InternalSwap(&other->window_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRequest_CloseWindows::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[13]);
}

// ===================================================================

class CloseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseRequest>()._has_bits_);
  static const ::iterm2::CloseRequest_CloseTabs& tabs(const CloseRequest* msg);
  static const ::iterm2::CloseRequest_CloseSessions& sessions(const CloseRequest* msg);
  static const ::iterm2::CloseRequest_CloseWindows& windows(const CloseRequest* msg);
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::CloseRequest_CloseTabs&
CloseRequest::_Internal::tabs(const CloseRequest* msg) {
  return *msg->target_.tabs_;
}
const ::iterm2::CloseRequest_CloseSessions&
CloseRequest::_Internal::sessions(const CloseRequest* msg) {
  return *msg->target_.sessions_;
}
const ::iterm2::CloseRequest_CloseWindows&
CloseRequest::_Internal::windows(const CloseRequest* msg) {
  return *msg->target_.windows_;
}
void CloseRequest::set_allocated_tabs(::iterm2::CloseRequest_CloseTabs* tabs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (tabs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CloseRequest_CloseTabs>::GetOwningArena(tabs);
    if (message_arena != submessage_arena) {
      tabs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tabs, submessage_arena);
    }
    set_has_tabs();
    target_.tabs_ = tabs;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.CloseRequest.tabs)
}
void CloseRequest::set_allocated_sessions(::iterm2::CloseRequest_CloseSessions* sessions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (sessions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CloseRequest_CloseSessions>::GetOwningArena(sessions);
    if (message_arena != submessage_arena) {
      sessions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sessions, submessage_arena);
    }
    set_has_sessions();
    target_.sessions_ = sessions;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.CloseRequest.sessions)
}
void CloseRequest::set_allocated_windows(::iterm2::CloseRequest_CloseWindows* windows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (windows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::CloseRequest_CloseWindows>::GetOwningArena(windows);
    if (message_arena != submessage_arena) {
      windows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, windows, submessage_arena);
    }
    set_has_windows();
    target_.windows_ = windows;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.CloseRequest.windows)
}
CloseRequest::CloseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CloseRequest)
}
CloseRequest::CloseRequest(const CloseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  force_ = from.force_;
  clear_has_target();
  switch (from.target_case()) {
    case kTabs: {
      _internal_mutable_tabs()->::iterm2::CloseRequest_CloseTabs::MergeFrom(from._internal_tabs());
      break;
    }
    case kSessions: {
      _internal_mutable_sessions()->::iterm2::CloseRequest_CloseSessions::MergeFrom(from._internal_sessions());
      break;
    }
    case kWindows: {
      _internal_mutable_windows()->::iterm2::CloseRequest_CloseWindows::MergeFrom(from._internal_windows());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.CloseRequest)
}

inline void CloseRequest::SharedCtor() {
force_ = false;
clear_has_target();
}

CloseRequest::~CloseRequest() {
  // @@protoc_insertion_point(destructor:iterm2.CloseRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void CloseRequest::ArenaDtor(void* object) {
  CloseRequest* _this = reinterpret_cast< CloseRequest* >(object);
  (void)_this;
}
void CloseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.CloseRequest)
  switch (target_case()) {
    case kTabs: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.tabs_;
      }
      break;
    }
    case kSessions: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.sessions_;
      }
      break;
    }
    case kWindows: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.windows_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void CloseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CloseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  force_ = false;
  clear_target();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.CloseRequest.CloseTabs tabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tabs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.CloseRequest.CloseSessions sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sessions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.CloseRequest.CloseWindows windows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_windows(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_force(&has_bits);
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CloseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (target_case()) {
    case kTabs: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::tabs(this), target, stream);
      break;
    }
    case kSessions: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::sessions(this), target, stream);
      break;
    }
    case kWindows: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::windows(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool force = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CloseRequest)
  return target;
}

size_t CloseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CloseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool force = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  switch (target_case()) {
    // .iterm2.CloseRequest.CloseTabs tabs = 1;
    case kTabs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.tabs_);
      break;
    }
    // .iterm2.CloseRequest.CloseSessions sessions = 2;
    case kSessions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.sessions_);
      break;
    }
    // .iterm2.CloseRequest.CloseWindows windows = 3;
    case kWindows: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.windows_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseRequest::GetClassData() const { return &_class_data_; }

void CloseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseRequest *>(to)->MergeFrom(
      static_cast<const CloseRequest &>(from));
}


void CloseRequest::MergeFrom(const CloseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CloseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_force()) {
    _internal_set_force(from._internal_force());
  }
  switch (from.target_case()) {
    case kTabs: {
      _internal_mutable_tabs()->::iterm2::CloseRequest_CloseTabs::MergeFrom(from._internal_tabs());
      break;
    }
    case kSessions: {
      _internal_mutable_sessions()->::iterm2::CloseRequest_CloseSessions::MergeFrom(from._internal_sessions());
      break;
    }
    case kWindows: {
      _internal_mutable_windows()->::iterm2::CloseRequest_CloseWindows::MergeFrom(from._internal_windows());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseRequest::CopyFrom(const CloseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CloseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequest::IsInitialized() const {
  return true;
}

void CloseRequest::InternalSwap(CloseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(force_, other->force_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[14]);
}

// ===================================================================

class CloseResponse::_Internal {
 public:
};

CloseResponse::CloseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  statuses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CloseResponse)
}
CloseResponse::CloseResponse(const CloseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      statuses_(from.statuses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.CloseResponse)
}

inline void CloseResponse::SharedCtor() {
}

CloseResponse::~CloseResponse() {
  // @@protoc_insertion_point(destructor:iterm2.CloseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseResponse::ArenaDtor(void* object) {
  CloseResponse* _this = reinterpret_cast< CloseResponse* >(object);
  (void)_this;
}
void CloseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CloseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statuses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.CloseResponse.Status statuses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::iterm2::CloseResponse_Status_IsValid(val))) {
              _internal_add_statuses(static_cast<::iterm2::CloseResponse_Status>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_statuses(), ptr, ctx, ::iterm2::CloseResponse_Status_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CloseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.CloseResponse.Status statuses = 1;
  for (int i = 0, n = this->_internal_statuses_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_statuses(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CloseResponse)
  return target;
}

size_t CloseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CloseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.CloseResponse.Status statuses = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_statuses_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_statuses(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseResponse::GetClassData() const { return &_class_data_; }

void CloseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseResponse *>(to)->MergeFrom(
      static_cast<const CloseResponse &>(from));
}


void CloseResponse::MergeFrom(const CloseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CloseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  statuses_.MergeFrom(from.statuses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseResponse::CopyFrom(const CloseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CloseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseResponse::IsInitialized() const {
  return true;
}

void CloseResponse::InternalSwap(CloseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  statuses_.InternalSwap(&other->statuses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[15]);
}

// ===================================================================

class SetBroadcastDomainsRequest::_Internal {
 public:
};

SetBroadcastDomainsRequest::SetBroadcastDomainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  broadcast_domains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetBroadcastDomainsRequest)
}
SetBroadcastDomainsRequest::SetBroadcastDomainsRequest(const SetBroadcastDomainsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broadcast_domains_(from.broadcast_domains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.SetBroadcastDomainsRequest)
}

inline void SetBroadcastDomainsRequest::SharedCtor() {
}

SetBroadcastDomainsRequest::~SetBroadcastDomainsRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SetBroadcastDomainsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBroadcastDomainsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetBroadcastDomainsRequest::ArenaDtor(void* object) {
  SetBroadcastDomainsRequest* _this = reinterpret_cast< SetBroadcastDomainsRequest* >(object);
  (void)_this;
}
void SetBroadcastDomainsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBroadcastDomainsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBroadcastDomainsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetBroadcastDomainsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_domains_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBroadcastDomainsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcast_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetBroadcastDomainsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetBroadcastDomainsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcast_domains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcast_domains(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetBroadcastDomainsRequest)
  return target;
}

size_t SetBroadcastDomainsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetBroadcastDomainsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  total_size += 1UL * this->_internal_broadcast_domains_size();
  for (const auto& msg : this->broadcast_domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBroadcastDomainsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBroadcastDomainsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBroadcastDomainsRequest::GetClassData() const { return &_class_data_; }

void SetBroadcastDomainsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBroadcastDomainsRequest *>(to)->MergeFrom(
      static_cast<const SetBroadcastDomainsRequest &>(from));
}


void SetBroadcastDomainsRequest::MergeFrom(const SetBroadcastDomainsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetBroadcastDomainsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  broadcast_domains_.MergeFrom(from.broadcast_domains_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBroadcastDomainsRequest::CopyFrom(const SetBroadcastDomainsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetBroadcastDomainsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBroadcastDomainsRequest::IsInitialized() const {
  return true;
}

void SetBroadcastDomainsRequest::InternalSwap(SetBroadcastDomainsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  broadcast_domains_.InternalSwap(&other->broadcast_domains_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBroadcastDomainsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[16]);
}

// ===================================================================

class SetBroadcastDomainsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetBroadcastDomainsResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetBroadcastDomainsResponse::SetBroadcastDomainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetBroadcastDomainsResponse)
}
SetBroadcastDomainsResponse::SetBroadcastDomainsResponse(const SetBroadcastDomainsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SetBroadcastDomainsResponse)
}

inline void SetBroadcastDomainsResponse::SharedCtor() {
status_ = 0;
}

SetBroadcastDomainsResponse::~SetBroadcastDomainsResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SetBroadcastDomainsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBroadcastDomainsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetBroadcastDomainsResponse::ArenaDtor(void* object) {
  SetBroadcastDomainsResponse* _this = reinterpret_cast< SetBroadcastDomainsResponse* >(object);
  (void)_this;
}
void SetBroadcastDomainsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBroadcastDomainsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBroadcastDomainsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetBroadcastDomainsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBroadcastDomainsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SetBroadcastDomainsResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SetBroadcastDomainsResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SetBroadcastDomainsResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetBroadcastDomainsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetBroadcastDomainsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SetBroadcastDomainsResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetBroadcastDomainsResponse)
  return target;
}

size_t SetBroadcastDomainsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetBroadcastDomainsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.SetBroadcastDomainsResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBroadcastDomainsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBroadcastDomainsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBroadcastDomainsResponse::GetClassData() const { return &_class_data_; }

void SetBroadcastDomainsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBroadcastDomainsResponse *>(to)->MergeFrom(
      static_cast<const SetBroadcastDomainsResponse &>(from));
}


void SetBroadcastDomainsResponse::MergeFrom(const SetBroadcastDomainsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetBroadcastDomainsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBroadcastDomainsResponse::CopyFrom(const SetBroadcastDomainsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetBroadcastDomainsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBroadcastDomainsResponse::IsInitialized() const {
  return true;
}

void SetBroadcastDomainsResponse::InternalSwap(SetBroadcastDomainsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBroadcastDomainsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[17]);
}

// ===================================================================

class StatusBarComponentRequest_OpenPopover::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusBarComponentRequest_OpenPopover>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_html(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::iterm2::Size& size(const StatusBarComponentRequest_OpenPopover* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::iterm2::Size&
StatusBarComponentRequest_OpenPopover::_Internal::size(const StatusBarComponentRequest_OpenPopover* msg) {
  return *msg->size_;
}
StatusBarComponentRequest_OpenPopover::StatusBarComponentRequest_OpenPopover(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.StatusBarComponentRequest.OpenPopover)
}
StatusBarComponentRequest_OpenPopover::StatusBarComponentRequest_OpenPopover(const StatusBarComponentRequest_OpenPopover& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  html_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_html()) {
    html_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_html(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_size()) {
    size_ = new ::iterm2::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.StatusBarComponentRequest.OpenPopover)
}

inline void StatusBarComponentRequest_OpenPopover::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
html_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
size_ = nullptr;
}

StatusBarComponentRequest_OpenPopover::~StatusBarComponentRequest_OpenPopover() {
  // @@protoc_insertion_point(destructor:iterm2.StatusBarComponentRequest.OpenPopover)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusBarComponentRequest_OpenPopover::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  html_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete size_;
}

void StatusBarComponentRequest_OpenPopover::ArenaDtor(void* object) {
  StatusBarComponentRequest_OpenPopover* _this = reinterpret_cast< StatusBarComponentRequest_OpenPopover* >(object);
  (void)_this;
}
void StatusBarComponentRequest_OpenPopover::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusBarComponentRequest_OpenPopover::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusBarComponentRequest_OpenPopover::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.StatusBarComponentRequest.OpenPopover)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      html_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusBarComponentRequest_OpenPopover::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.StatusBarComponentRequest.OpenPopover.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string html = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_html();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.StatusBarComponentRequest.OpenPopover.html");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Size size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusBarComponentRequest_OpenPopover::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.StatusBarComponentRequest.OpenPopover)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.StatusBarComponentRequest.OpenPopover.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // optional string html = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_html().data(), static_cast<int>(this->_internal_html().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.StatusBarComponentRequest.OpenPopover.html");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_html(), target);
  }

  // optional .iterm2.Size size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.StatusBarComponentRequest.OpenPopover)
  return target;
}

size_t StatusBarComponentRequest_OpenPopover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.StatusBarComponentRequest.OpenPopover)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string html = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_html());
    }

    // optional .iterm2.Size size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusBarComponentRequest_OpenPopover::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusBarComponentRequest_OpenPopover::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusBarComponentRequest_OpenPopover::GetClassData() const { return &_class_data_; }

void StatusBarComponentRequest_OpenPopover::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusBarComponentRequest_OpenPopover *>(to)->MergeFrom(
      static_cast<const StatusBarComponentRequest_OpenPopover &>(from));
}


void StatusBarComponentRequest_OpenPopover::MergeFrom(const StatusBarComponentRequest_OpenPopover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.StatusBarComponentRequest.OpenPopover)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_html(from._internal_html());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_size()->::iterm2::Size::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusBarComponentRequest_OpenPopover::CopyFrom(const StatusBarComponentRequest_OpenPopover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.StatusBarComponentRequest.OpenPopover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusBarComponentRequest_OpenPopover::IsInitialized() const {
  return true;
}

void StatusBarComponentRequest_OpenPopover::InternalSwap(StatusBarComponentRequest_OpenPopover* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &html_, lhs_arena,
      &other->html_, rhs_arena
  );
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusBarComponentRequest_OpenPopover::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[18]);
}

// ===================================================================

class StatusBarComponentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusBarComponentRequest>()._has_bits_);
  static const ::iterm2::StatusBarComponentRequest_OpenPopover& open_popover(const StatusBarComponentRequest* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::StatusBarComponentRequest_OpenPopover&
StatusBarComponentRequest::_Internal::open_popover(const StatusBarComponentRequest* msg) {
  return *msg->request_.open_popover_;
}
void StatusBarComponentRequest::set_allocated_open_popover(::iterm2::StatusBarComponentRequest_OpenPopover* open_popover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (open_popover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::StatusBarComponentRequest_OpenPopover>::GetOwningArena(open_popover);
    if (message_arena != submessage_arena) {
      open_popover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_popover, submessage_arena);
    }
    set_has_open_popover();
    request_.open_popover_ = open_popover;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.StatusBarComponentRequest.open_popover)
}
StatusBarComponentRequest::StatusBarComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.StatusBarComponentRequest)
}
StatusBarComponentRequest::StatusBarComponentRequest(const StatusBarComponentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  clear_has_request();
  switch (from.request_case()) {
    case kOpenPopover: {
      _internal_mutable_open_popover()->::iterm2::StatusBarComponentRequest_OpenPopover::MergeFrom(from._internal_open_popover());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.StatusBarComponentRequest)
}

inline void StatusBarComponentRequest::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_request();
}

StatusBarComponentRequest::~StatusBarComponentRequest() {
  // @@protoc_insertion_point(destructor:iterm2.StatusBarComponentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusBarComponentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_request()) {
    clear_request();
  }
}

void StatusBarComponentRequest::ArenaDtor(void* object) {
  StatusBarComponentRequest* _this = reinterpret_cast< StatusBarComponentRequest* >(object);
  (void)_this;
}
void StatusBarComponentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusBarComponentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusBarComponentRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.StatusBarComponentRequest)
  switch (request_case()) {
    case kOpenPopover: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.open_popover_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void StatusBarComponentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.StatusBarComponentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  clear_request();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusBarComponentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.StatusBarComponentRequest.OpenPopover open_popover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_popover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.StatusBarComponentRequest.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusBarComponentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.StatusBarComponentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .iterm2.StatusBarComponentRequest.OpenPopover open_popover = 1;
  if (_internal_has_open_popover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::open_popover(this), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.StatusBarComponentRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.StatusBarComponentRequest)
  return target;
}

size_t StatusBarComponentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.StatusBarComponentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  switch (request_case()) {
    // .iterm2.StatusBarComponentRequest.OpenPopover open_popover = 1;
    case kOpenPopover: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.open_popover_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusBarComponentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusBarComponentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusBarComponentRequest::GetClassData() const { return &_class_data_; }

void StatusBarComponentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusBarComponentRequest *>(to)->MergeFrom(
      static_cast<const StatusBarComponentRequest &>(from));
}


void StatusBarComponentRequest::MergeFrom(const StatusBarComponentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.StatusBarComponentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
  switch (from.request_case()) {
    case kOpenPopover: {
      _internal_mutable_open_popover()->::iterm2::StatusBarComponentRequest_OpenPopover::MergeFrom(from._internal_open_popover());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusBarComponentRequest::CopyFrom(const StatusBarComponentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.StatusBarComponentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusBarComponentRequest::IsInitialized() const {
  return true;
}

void StatusBarComponentRequest::InternalSwap(StatusBarComponentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusBarComponentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[19]);
}

// ===================================================================

class StatusBarComponentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusBarComponentResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StatusBarComponentResponse::StatusBarComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.StatusBarComponentResponse)
}
StatusBarComponentResponse::StatusBarComponentResponse(const StatusBarComponentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.StatusBarComponentResponse)
}

inline void StatusBarComponentResponse::SharedCtor() {
status_ = 0;
}

StatusBarComponentResponse::~StatusBarComponentResponse() {
  // @@protoc_insertion_point(destructor:iterm2.StatusBarComponentResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusBarComponentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusBarComponentResponse::ArenaDtor(void* object) {
  StatusBarComponentResponse* _this = reinterpret_cast< StatusBarComponentResponse* >(object);
  (void)_this;
}
void StatusBarComponentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusBarComponentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusBarComponentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.StatusBarComponentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusBarComponentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.StatusBarComponentResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::StatusBarComponentResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::StatusBarComponentResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusBarComponentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.StatusBarComponentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.StatusBarComponentResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.StatusBarComponentResponse)
  return target;
}

size_t StatusBarComponentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.StatusBarComponentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.StatusBarComponentResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusBarComponentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusBarComponentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusBarComponentResponse::GetClassData() const { return &_class_data_; }

void StatusBarComponentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusBarComponentResponse *>(to)->MergeFrom(
      static_cast<const StatusBarComponentResponse &>(from));
}


void StatusBarComponentResponse::MergeFrom(const StatusBarComponentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.StatusBarComponentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusBarComponentResponse::CopyFrom(const StatusBarComponentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.StatusBarComponentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusBarComponentResponse::IsInitialized() const {
  return true;
}

void StatusBarComponentResponse::InternalSwap(StatusBarComponentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusBarComponentResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[20]);
}

// ===================================================================

class WindowedCoordRange::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowedCoordRange>()._has_bits_);
  static const ::iterm2::CoordRange& coord_range(const WindowedCoordRange* msg);
  static void set_has_coord_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Range& columns(const WindowedCoordRange* msg);
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::CoordRange&
WindowedCoordRange::_Internal::coord_range(const WindowedCoordRange* msg) {
  return *msg->coord_range_;
}
const ::iterm2::Range&
WindowedCoordRange::_Internal::columns(const WindowedCoordRange* msg) {
  return *msg->columns_;
}
WindowedCoordRange::WindowedCoordRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.WindowedCoordRange)
}
WindowedCoordRange::WindowedCoordRange(const WindowedCoordRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coord_range()) {
    coord_range_ = new ::iterm2::CoordRange(*from.coord_range_);
  } else {
    coord_range_ = nullptr;
  }
  if (from._internal_has_columns()) {
    columns_ = new ::iterm2::Range(*from.columns_);
  } else {
    columns_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.WindowedCoordRange)
}

inline void WindowedCoordRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coord_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&coord_range_)) + sizeof(columns_));
}

WindowedCoordRange::~WindowedCoordRange() {
  // @@protoc_insertion_point(destructor:iterm2.WindowedCoordRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WindowedCoordRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete coord_range_;
  if (this != internal_default_instance()) delete columns_;
}

void WindowedCoordRange::ArenaDtor(void* object) {
  WindowedCoordRange* _this = reinterpret_cast< WindowedCoordRange* >(object);
  (void)_this;
}
void WindowedCoordRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowedCoordRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WindowedCoordRange::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.WindowedCoordRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(coord_range_ != nullptr);
      coord_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(columns_ != nullptr);
      columns_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowedCoordRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.CoordRange coord_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Range columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WindowedCoordRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.WindowedCoordRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.CoordRange coord_range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coord_range(this), target, stream);
  }

  // optional .iterm2.Range columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::columns(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.WindowedCoordRange)
  return target;
}

size_t WindowedCoordRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.WindowedCoordRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .iterm2.CoordRange coord_range = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coord_range_);
    }

    // optional .iterm2.Range columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *columns_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WindowedCoordRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WindowedCoordRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WindowedCoordRange::GetClassData() const { return &_class_data_; }

void WindowedCoordRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WindowedCoordRange *>(to)->MergeFrom(
      static_cast<const WindowedCoordRange &>(from));
}


void WindowedCoordRange::MergeFrom(const WindowedCoordRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.WindowedCoordRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_coord_range()->::iterm2::CoordRange::MergeFrom(from._internal_coord_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_columns()->::iterm2::Range::MergeFrom(from._internal_columns());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WindowedCoordRange::CopyFrom(const WindowedCoordRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.WindowedCoordRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowedCoordRange::IsInitialized() const {
  return true;
}

void WindowedCoordRange::InternalSwap(WindowedCoordRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowedCoordRange, columns_)
      + sizeof(WindowedCoordRange::columns_)
      - PROTOBUF_FIELD_OFFSET(WindowedCoordRange, coord_range_)>(
          reinterpret_cast<char*>(&coord_range_),
          reinterpret_cast<char*>(&other->coord_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowedCoordRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[21]);
}

// ===================================================================

class SubSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<SubSelection>()._has_bits_);
  static const ::iterm2::WindowedCoordRange& windowed_coord_range(const SubSelection* msg);
  static void set_has_windowed_coord_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::iterm2::WindowedCoordRange&
SubSelection::_Internal::windowed_coord_range(const SubSelection* msg) {
  return *msg->windowed_coord_range_;
}
SubSelection::SubSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SubSelection)
}
SubSelection::SubSelection(const SubSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_windowed_coord_range()) {
    windowed_coord_range_ = new ::iterm2::WindowedCoordRange(*from.windowed_coord_range_);
  } else {
    windowed_coord_range_ = nullptr;
  }
  ::memcpy(&selection_mode_, &from.selection_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&selection_mode_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:iterm2.SubSelection)
}

inline void SubSelection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&windowed_coord_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&windowed_coord_range_)) + sizeof(connected_));
}

SubSelection::~SubSelection() {
  // @@protoc_insertion_point(destructor:iterm2.SubSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete windowed_coord_range_;
}

void SubSelection::ArenaDtor(void* object) {
  SubSelection* _this = reinterpret_cast< SubSelection* >(object);
  (void)_this;
}
void SubSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SubSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(windowed_coord_range_ != nullptr);
    windowed_coord_range_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&selection_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connected_) -
        reinterpret_cast<char*>(&selection_mode_)) + sizeof(connected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.WindowedCoordRange windowed_coord_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_windowed_coord_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.SelectionMode selection_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SelectionMode_IsValid(val))) {
            _internal_set_selection_mode(static_cast<::iterm2::SelectionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SubSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.WindowedCoordRange windowed_coord_range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::windowed_coord_range(this), target, stream);
  }

  // optional .iterm2.SelectionMode selection_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_selection_mode(), target);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SubSelection)
  return target;
}

size_t SubSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SubSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .iterm2.WindowedCoordRange windowed_coord_range = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *windowed_coord_range_);
    }

    // optional .iterm2.SelectionMode selection_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_mode());
    }

    // optional bool connected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubSelection::GetClassData() const { return &_class_data_; }

void SubSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubSelection *>(to)->MergeFrom(
      static_cast<const SubSelection &>(from));
}


void SubSelection::MergeFrom(const SubSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SubSelection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_windowed_coord_range()->::iterm2::WindowedCoordRange::MergeFrom(from._internal_windowed_coord_range());
    }
    if (cached_has_bits & 0x00000002u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      connected_ = from.connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubSelection::CopyFrom(const SubSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SubSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubSelection::IsInitialized() const {
  return true;
}

void SubSelection::InternalSwap(SubSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubSelection, connected_)
      + sizeof(SubSelection::connected_)
      - PROTOBUF_FIELD_OFFSET(SubSelection, windowed_coord_range_)>(
          reinterpret_cast<char*>(&windowed_coord_range_),
          reinterpret_cast<char*>(&other->windowed_coord_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[22]);
}

// ===================================================================

class Selection::_Internal {
 public:
};

Selection::Selection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sub_selections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Selection)
}
Selection::Selection(const Selection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sub_selections_(from.sub_selections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.Selection)
}

inline void Selection::SharedCtor() {
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:iterm2.Selection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Selection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Selection::ArenaDtor(void* object) {
  Selection* _this = reinterpret_cast< Selection* >(object);
  (void)_this;
}
void Selection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Selection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Selection::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Selection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_selections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Selection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.SubSelection sub_selections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_selections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Selection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Selection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.SubSelection sub_selections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_selections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sub_selections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Selection)
  return target;
}

size_t Selection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Selection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.SubSelection sub_selections = 1;
  total_size += 1UL * this->_internal_sub_selections_size();
  for (const auto& msg : this->sub_selections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Selection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Selection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Selection::GetClassData() const { return &_class_data_; }

void Selection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Selection *>(to)->MergeFrom(
      static_cast<const Selection &>(from));
}


void Selection::MergeFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sub_selections_.MergeFrom(from.sub_selections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Selection::CopyFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {
  return true;
}

void Selection::InternalSwap(Selection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sub_selections_.InternalSwap(&other->sub_selections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Selection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[23]);
}

// ===================================================================

class SelectionRequest_GetSelectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionRequest_GetSelectionRequest>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SelectionRequest_GetSelectionRequest::SelectionRequest_GetSelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SelectionRequest.GetSelectionRequest)
}
SelectionRequest_GetSelectionRequest::SelectionRequest_GetSelectionRequest(const SelectionRequest_GetSelectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SelectionRequest.GetSelectionRequest)
}

inline void SelectionRequest_GetSelectionRequest::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectionRequest_GetSelectionRequest::~SelectionRequest_GetSelectionRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SelectionRequest.GetSelectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionRequest_GetSelectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectionRequest_GetSelectionRequest::ArenaDtor(void* object) {
  SelectionRequest_GetSelectionRequest* _this = reinterpret_cast< SelectionRequest_GetSelectionRequest* >(object);
  (void)_this;
}
void SelectionRequest_GetSelectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionRequest_GetSelectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionRequest_GetSelectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SelectionRequest.GetSelectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionRequest_GetSelectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SelectionRequest.GetSelectionRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionRequest_GetSelectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SelectionRequest.GetSelectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SelectionRequest.GetSelectionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SelectionRequest.GetSelectionRequest)
  return target;
}

size_t SelectionRequest_GetSelectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SelectionRequest.GetSelectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionRequest_GetSelectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionRequest_GetSelectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionRequest_GetSelectionRequest::GetClassData() const { return &_class_data_; }

void SelectionRequest_GetSelectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionRequest_GetSelectionRequest *>(to)->MergeFrom(
      static_cast<const SelectionRequest_GetSelectionRequest &>(from));
}


void SelectionRequest_GetSelectionRequest::MergeFrom(const SelectionRequest_GetSelectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SelectionRequest.GetSelectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionRequest_GetSelectionRequest::CopyFrom(const SelectionRequest_GetSelectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SelectionRequest.GetSelectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionRequest_GetSelectionRequest::IsInitialized() const {
  return true;
}

void SelectionRequest_GetSelectionRequest::InternalSwap(SelectionRequest_GetSelectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionRequest_GetSelectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[24]);
}

// ===================================================================

class SelectionRequest_SetSelectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionRequest_SetSelectionRequest>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Selection& selection(const SelectionRequest_SetSelectionRequest* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::Selection&
SelectionRequest_SetSelectionRequest::_Internal::selection(const SelectionRequest_SetSelectionRequest* msg) {
  return *msg->selection_;
}
SelectionRequest_SetSelectionRequest::SelectionRequest_SetSelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SelectionRequest.SetSelectionRequest)
}
SelectionRequest_SetSelectionRequest::SelectionRequest_SetSelectionRequest(const SelectionRequest_SetSelectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_selection()) {
    selection_ = new ::iterm2::Selection(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SelectionRequest.SetSelectionRequest)
}

inline void SelectionRequest_SetSelectionRequest::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
selection_ = nullptr;
}

SelectionRequest_SetSelectionRequest::~SelectionRequest_SetSelectionRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SelectionRequest.SetSelectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionRequest_SetSelectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selection_;
}

void SelectionRequest_SetSelectionRequest::ArenaDtor(void* object) {
  SelectionRequest_SetSelectionRequest* _this = reinterpret_cast< SelectionRequest_SetSelectionRequest* >(object);
  (void)_this;
}
void SelectionRequest_SetSelectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionRequest_SetSelectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionRequest_SetSelectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SelectionRequest.SetSelectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selection_ != nullptr);
      selection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionRequest_SetSelectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SelectionRequest.SetSelectionRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Selection selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionRequest_SetSelectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SelectionRequest.SetSelectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SelectionRequest.SetSelectionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // optional .iterm2.Selection selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SelectionRequest.SetSelectionRequest)
  return target;
}

size_t SelectionRequest_SetSelectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SelectionRequest.SetSelectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional .iterm2.Selection selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionRequest_SetSelectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionRequest_SetSelectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionRequest_SetSelectionRequest::GetClassData() const { return &_class_data_; }

void SelectionRequest_SetSelectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionRequest_SetSelectionRequest *>(to)->MergeFrom(
      static_cast<const SelectionRequest_SetSelectionRequest &>(from));
}


void SelectionRequest_SetSelectionRequest::MergeFrom(const SelectionRequest_SetSelectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SelectionRequest.SetSelectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_selection()->::iterm2::Selection::MergeFrom(from._internal_selection());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionRequest_SetSelectionRequest::CopyFrom(const SelectionRequest_SetSelectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SelectionRequest.SetSelectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionRequest_SetSelectionRequest::IsInitialized() const {
  return true;
}

void SelectionRequest_SetSelectionRequest::InternalSwap(SelectionRequest_SetSelectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  swap(selection_, other->selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionRequest_SetSelectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[25]);
}

// ===================================================================

class SelectionRequest::_Internal {
 public:
  static const ::iterm2::SelectionRequest_GetSelectionRequest& get_selection_request(const SelectionRequest* msg);
  static const ::iterm2::SelectionRequest_SetSelectionRequest& set_selection_request(const SelectionRequest* msg);
};

const ::iterm2::SelectionRequest_GetSelectionRequest&
SelectionRequest::_Internal::get_selection_request(const SelectionRequest* msg) {
  return *msg->request_.get_selection_request_;
}
const ::iterm2::SelectionRequest_SetSelectionRequest&
SelectionRequest::_Internal::set_selection_request(const SelectionRequest* msg) {
  return *msg->request_.set_selection_request_;
}
void SelectionRequest::set_allocated_get_selection_request(::iterm2::SelectionRequest_GetSelectionRequest* get_selection_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_selection_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SelectionRequest_GetSelectionRequest>::GetOwningArena(get_selection_request);
    if (message_arena != submessage_arena) {
      get_selection_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_selection_request, submessage_arena);
    }
    set_has_get_selection_request();
    request_.get_selection_request_ = get_selection_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionRequest.get_selection_request)
}
void SelectionRequest::set_allocated_set_selection_request(::iterm2::SelectionRequest_SetSelectionRequest* set_selection_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (set_selection_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SelectionRequest_SetSelectionRequest>::GetOwningArena(set_selection_request);
    if (message_arena != submessage_arena) {
      set_selection_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_selection_request, submessage_arena);
    }
    set_has_set_selection_request();
    request_.set_selection_request_ = set_selection_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionRequest.set_selection_request)
}
SelectionRequest::SelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SelectionRequest)
}
SelectionRequest::SelectionRequest(const SelectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kGetSelectionRequest: {
      _internal_mutable_get_selection_request()->::iterm2::SelectionRequest_GetSelectionRequest::MergeFrom(from._internal_get_selection_request());
      break;
    }
    case kSetSelectionRequest: {
      _internal_mutable_set_selection_request()->::iterm2::SelectionRequest_SetSelectionRequest::MergeFrom(from._internal_set_selection_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SelectionRequest)
}

inline void SelectionRequest::SharedCtor() {
clear_has_request();
}

SelectionRequest::~SelectionRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SelectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void SelectionRequest::ArenaDtor(void* object) {
  SelectionRequest* _this = reinterpret_cast< SelectionRequest* >(object);
  (void)_this;
}
void SelectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.SelectionRequest)
  switch (request_case()) {
    case kGetSelectionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_selection_request_;
      }
      break;
    }
    case kSetSelectionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.set_selection_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void SelectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SelectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.SelectionRequest.GetSelectionRequest get_selection_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_selection_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SelectionRequest.SetSelectionRequest set_selection_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_selection_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SelectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (request_case()) {
    case kGetSelectionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::get_selection_request(this), target, stream);
      break;
    }
    case kSetSelectionRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::set_selection_request(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SelectionRequest)
  return target;
}

size_t SelectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SelectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .iterm2.SelectionRequest.GetSelectionRequest get_selection_request = 1;
    case kGetSelectionRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_selection_request_);
      break;
    }
    // .iterm2.SelectionRequest.SetSelectionRequest set_selection_request = 2;
    case kSetSelectionRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.set_selection_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionRequest::GetClassData() const { return &_class_data_; }

void SelectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionRequest *>(to)->MergeFrom(
      static_cast<const SelectionRequest &>(from));
}


void SelectionRequest::MergeFrom(const SelectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SelectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kGetSelectionRequest: {
      _internal_mutable_get_selection_request()->::iterm2::SelectionRequest_GetSelectionRequest::MergeFrom(from._internal_get_selection_request());
      break;
    }
    case kSetSelectionRequest: {
      _internal_mutable_set_selection_request()->::iterm2::SelectionRequest_SetSelectionRequest::MergeFrom(from._internal_set_selection_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionRequest::CopyFrom(const SelectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SelectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionRequest::IsInitialized() const {
  return true;
}

void SelectionRequest::InternalSwap(SelectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[26]);
}

// ===================================================================

class SelectionResponse_GetSelectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionResponse_GetSelectionResponse>()._has_bits_);
  static const ::iterm2::Selection& selection(const SelectionResponse_GetSelectionResponse* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::Selection&
SelectionResponse_GetSelectionResponse::_Internal::selection(const SelectionResponse_GetSelectionResponse* msg) {
  return *msg->selection_;
}
SelectionResponse_GetSelectionResponse::SelectionResponse_GetSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SelectionResponse.GetSelectionResponse)
}
SelectionResponse_GetSelectionResponse::SelectionResponse_GetSelectionResponse(const SelectionResponse_GetSelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection()) {
    selection_ = new ::iterm2::Selection(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SelectionResponse.GetSelectionResponse)
}

inline void SelectionResponse_GetSelectionResponse::SharedCtor() {
selection_ = nullptr;
}

SelectionResponse_GetSelectionResponse::~SelectionResponse_GetSelectionResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SelectionResponse.GetSelectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionResponse_GetSelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete selection_;
}

void SelectionResponse_GetSelectionResponse::ArenaDtor(void* object) {
  SelectionResponse_GetSelectionResponse* _this = reinterpret_cast< SelectionResponse_GetSelectionResponse* >(object);
  (void)_this;
}
void SelectionResponse_GetSelectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionResponse_GetSelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionResponse_GetSelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SelectionResponse.GetSelectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(selection_ != nullptr);
    selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionResponse_GetSelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.Selection selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionResponse_GetSelectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SelectionResponse.GetSelectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.Selection selection = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SelectionResponse.GetSelectionResponse)
  return target;
}

size_t SelectionResponse_GetSelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SelectionResponse.GetSelectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.Selection selection = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionResponse_GetSelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionResponse_GetSelectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionResponse_GetSelectionResponse::GetClassData() const { return &_class_data_; }

void SelectionResponse_GetSelectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionResponse_GetSelectionResponse *>(to)->MergeFrom(
      static_cast<const SelectionResponse_GetSelectionResponse &>(from));
}


void SelectionResponse_GetSelectionResponse::MergeFrom(const SelectionResponse_GetSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SelectionResponse.GetSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selection()) {
    _internal_mutable_selection()->::iterm2::Selection::MergeFrom(from._internal_selection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionResponse_GetSelectionResponse::CopyFrom(const SelectionResponse_GetSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SelectionResponse.GetSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionResponse_GetSelectionResponse::IsInitialized() const {
  return true;
}

void SelectionResponse_GetSelectionResponse::InternalSwap(SelectionResponse_GetSelectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(selection_, other->selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionResponse_GetSelectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[27]);
}

// ===================================================================

class SelectionResponse_SetSelectionResponse::_Internal {
 public:
};

SelectionResponse_SetSelectionResponse::SelectionResponse_SetSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.SelectionResponse.SetSelectionResponse)
}
SelectionResponse_SetSelectionResponse::SelectionResponse_SetSelectionResponse(const SelectionResponse_SetSelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.SelectionResponse.SetSelectionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionResponse_SetSelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionResponse_SetSelectionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SelectionResponse_SetSelectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[28]);
}

// ===================================================================

class SelectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::SelectionResponse_GetSelectionResponse& get_selection_response(const SelectionResponse* msg);
  static const ::iterm2::SelectionResponse_SetSelectionResponse& set_selection_response(const SelectionResponse* msg);
};

const ::iterm2::SelectionResponse_GetSelectionResponse&
SelectionResponse::_Internal::get_selection_response(const SelectionResponse* msg) {
  return *msg->response_.get_selection_response_;
}
const ::iterm2::SelectionResponse_SetSelectionResponse&
SelectionResponse::_Internal::set_selection_response(const SelectionResponse* msg) {
  return *msg->response_.set_selection_response_;
}
void SelectionResponse::set_allocated_get_selection_response(::iterm2::SelectionResponse_GetSelectionResponse* get_selection_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_selection_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SelectionResponse_GetSelectionResponse>::GetOwningArena(get_selection_response);
    if (message_arena != submessage_arena) {
      get_selection_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_selection_response, submessage_arena);
    }
    set_has_get_selection_response();
    response_.get_selection_response_ = get_selection_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionResponse.get_selection_response)
}
void SelectionResponse::set_allocated_set_selection_response(::iterm2::SelectionResponse_SetSelectionResponse* set_selection_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (set_selection_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SelectionResponse_SetSelectionResponse>::GetOwningArena(set_selection_response);
    if (message_arena != submessage_arena) {
      set_selection_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_selection_response, submessage_arena);
    }
    set_has_set_selection_response();
    response_.set_selection_response_ = set_selection_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SelectionResponse.set_selection_response)
}
SelectionResponse::SelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SelectionResponse)
}
SelectionResponse::SelectionResponse(const SelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  clear_has_response();
  switch (from.response_case()) {
    case kGetSelectionResponse: {
      _internal_mutable_get_selection_response()->::iterm2::SelectionResponse_GetSelectionResponse::MergeFrom(from._internal_get_selection_response());
      break;
    }
    case kSetSelectionResponse: {
      _internal_mutable_set_selection_response()->::iterm2::SelectionResponse_SetSelectionResponse::MergeFrom(from._internal_set_selection_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SelectionResponse)
}

inline void SelectionResponse::SharedCtor() {
status_ = 0;
clear_has_response();
}

SelectionResponse::~SelectionResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SelectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void SelectionResponse::ArenaDtor(void* object) {
  SelectionResponse* _this = reinterpret_cast< SelectionResponse* >(object);
  (void)_this;
}
void SelectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.SelectionResponse)
  switch (response_case()) {
    case kGetSelectionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_selection_response_;
      }
      break;
    }
    case kSetSelectionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.set_selection_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void SelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SelectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  clear_response();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SelectionResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SelectionResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SelectionResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SelectionResponse.GetSelectionResponse get_selection_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_selection_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SelectionResponse.SetSelectionResponse set_selection_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_selection_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SelectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SelectionResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  switch (response_case()) {
    case kGetSelectionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::get_selection_response(this), target, stream);
      break;
    }
    case kSetSelectionResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::set_selection_response(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SelectionResponse)
  return target;
}

size_t SelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SelectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.SelectionResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (response_case()) {
    // .iterm2.SelectionResponse.GetSelectionResponse get_selection_response = 2;
    case kGetSelectionResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_selection_response_);
      break;
    }
    // .iterm2.SelectionResponse.SetSelectionResponse set_selection_response = 3;
    case kSetSelectionResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.set_selection_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionResponse::GetClassData() const { return &_class_data_; }

void SelectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionResponse *>(to)->MergeFrom(
      static_cast<const SelectionResponse &>(from));
}


void SelectionResponse::MergeFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  switch (from.response_case()) {
    case kGetSelectionResponse: {
      _internal_mutable_get_selection_response()->::iterm2::SelectionResponse_GetSelectionResponse::MergeFrom(from._internal_get_selection_response());
      break;
    }
    case kSetSelectionResponse: {
      _internal_mutable_set_selection_response()->::iterm2::SelectionResponse_SetSelectionResponse::MergeFrom(from._internal_set_selection_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionResponse::CopyFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionResponse::IsInitialized() const {
  return true;
}

void SelectionResponse::InternalSwap(SelectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[29]);
}

// ===================================================================

class ColorPresetRequest_ListPresets::_Internal {
 public:
};

ColorPresetRequest_ListPresets::ColorPresetRequest_ListPresets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetRequest.ListPresets)
}
ColorPresetRequest_ListPresets::ColorPresetRequest_ListPresets(const ColorPresetRequest_ListPresets& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetRequest.ListPresets)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetRequest_ListPresets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetRequest_ListPresets::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetRequest_ListPresets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[30]);
}

// ===================================================================

class ColorPresetRequest_GetPreset::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorPresetRequest_GetPreset>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ColorPresetRequest_GetPreset::ColorPresetRequest_GetPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetRequest.GetPreset)
}
ColorPresetRequest_GetPreset::ColorPresetRequest_GetPreset(const ColorPresetRequest_GetPreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetRequest.GetPreset)
}

inline void ColorPresetRequest_GetPreset::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColorPresetRequest_GetPreset::~ColorPresetRequest_GetPreset() {
  // @@protoc_insertion_point(destructor:iterm2.ColorPresetRequest.GetPreset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorPresetRequest_GetPreset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColorPresetRequest_GetPreset::ArenaDtor(void* object) {
  ColorPresetRequest_GetPreset* _this = reinterpret_cast< ColorPresetRequest_GetPreset* >(object);
  (void)_this;
}
void ColorPresetRequest_GetPreset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorPresetRequest_GetPreset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorPresetRequest_GetPreset::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ColorPresetRequest.GetPreset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorPresetRequest_GetPreset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ColorPresetRequest.GetPreset.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorPresetRequest_GetPreset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ColorPresetRequest.GetPreset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ColorPresetRequest.GetPreset.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ColorPresetRequest.GetPreset)
  return target;
}

size_t ColorPresetRequest_GetPreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ColorPresetRequest.GetPreset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetRequest_GetPreset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorPresetRequest_GetPreset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetRequest_GetPreset::GetClassData() const { return &_class_data_; }

void ColorPresetRequest_GetPreset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorPresetRequest_GetPreset *>(to)->MergeFrom(
      static_cast<const ColorPresetRequest_GetPreset &>(from));
}


void ColorPresetRequest_GetPreset::MergeFrom(const ColorPresetRequest_GetPreset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ColorPresetRequest.GetPreset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorPresetRequest_GetPreset::CopyFrom(const ColorPresetRequest_GetPreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ColorPresetRequest.GetPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPresetRequest_GetPreset::IsInitialized() const {
  return true;
}

void ColorPresetRequest_GetPreset::InternalSwap(ColorPresetRequest_GetPreset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetRequest_GetPreset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[31]);
}

// ===================================================================

class ColorPresetRequest::_Internal {
 public:
  static const ::iterm2::ColorPresetRequest_ListPresets& list_presets(const ColorPresetRequest* msg);
  static const ::iterm2::ColorPresetRequest_GetPreset& get_preset(const ColorPresetRequest* msg);
};

const ::iterm2::ColorPresetRequest_ListPresets&
ColorPresetRequest::_Internal::list_presets(const ColorPresetRequest* msg) {
  return *msg->request_.list_presets_;
}
const ::iterm2::ColorPresetRequest_GetPreset&
ColorPresetRequest::_Internal::get_preset(const ColorPresetRequest* msg) {
  return *msg->request_.get_preset_;
}
void ColorPresetRequest::set_allocated_list_presets(::iterm2::ColorPresetRequest_ListPresets* list_presets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (list_presets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ColorPresetRequest_ListPresets>::GetOwningArena(list_presets);
    if (message_arena != submessage_arena) {
      list_presets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_presets, submessage_arena);
    }
    set_has_list_presets();
    request_.list_presets_ = list_presets;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetRequest.list_presets)
}
void ColorPresetRequest::set_allocated_get_preset(::iterm2::ColorPresetRequest_GetPreset* get_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ColorPresetRequest_GetPreset>::GetOwningArena(get_preset);
    if (message_arena != submessage_arena) {
      get_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_preset, submessage_arena);
    }
    set_has_get_preset();
    request_.get_preset_ = get_preset;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetRequest.get_preset)
}
ColorPresetRequest::ColorPresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetRequest)
}
ColorPresetRequest::ColorPresetRequest(const ColorPresetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kListPresets: {
      _internal_mutable_list_presets()->::iterm2::ColorPresetRequest_ListPresets::MergeFrom(from._internal_list_presets());
      break;
    }
    case kGetPreset: {
      _internal_mutable_get_preset()->::iterm2::ColorPresetRequest_GetPreset::MergeFrom(from._internal_get_preset());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetRequest)
}

inline void ColorPresetRequest::SharedCtor() {
clear_has_request();
}

ColorPresetRequest::~ColorPresetRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ColorPresetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorPresetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void ColorPresetRequest::ArenaDtor(void* object) {
  ColorPresetRequest* _this = reinterpret_cast< ColorPresetRequest* >(object);
  (void)_this;
}
void ColorPresetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorPresetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorPresetRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.ColorPresetRequest)
  switch (request_case()) {
    case kListPresets: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.list_presets_;
      }
      break;
    }
    case kGetPreset: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_preset_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void ColorPresetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ColorPresetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorPresetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.ColorPresetRequest.ListPresets list_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_presets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ColorPresetRequest.GetPreset get_preset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorPresetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ColorPresetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (request_case()) {
    case kListPresets: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::list_presets(this), target, stream);
      break;
    }
    case kGetPreset: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::get_preset(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ColorPresetRequest)
  return target;
}

size_t ColorPresetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ColorPresetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .iterm2.ColorPresetRequest.ListPresets list_presets = 1;
    case kListPresets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.list_presets_);
      break;
    }
    // .iterm2.ColorPresetRequest.GetPreset get_preset = 2;
    case kGetPreset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_preset_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorPresetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetRequest::GetClassData() const { return &_class_data_; }

void ColorPresetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorPresetRequest *>(to)->MergeFrom(
      static_cast<const ColorPresetRequest &>(from));
}


void ColorPresetRequest::MergeFrom(const ColorPresetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ColorPresetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kListPresets: {
      _internal_mutable_list_presets()->::iterm2::ColorPresetRequest_ListPresets::MergeFrom(from._internal_list_presets());
      break;
    }
    case kGetPreset: {
      _internal_mutable_get_preset()->::iterm2::ColorPresetRequest_GetPreset::MergeFrom(from._internal_get_preset());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorPresetRequest::CopyFrom(const ColorPresetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ColorPresetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPresetRequest::IsInitialized() const {
  return true;
}

void ColorPresetRequest::InternalSwap(ColorPresetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[32]);
}

// ===================================================================

class ColorPresetResponse_ListPresets::_Internal {
 public:
};

ColorPresetResponse_ListPresets::ColorPresetResponse_ListPresets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetResponse.ListPresets)
}
ColorPresetResponse_ListPresets::ColorPresetResponse_ListPresets(const ColorPresetResponse_ListPresets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      name_(from.name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetResponse.ListPresets)
}

inline void ColorPresetResponse_ListPresets::SharedCtor() {
}

ColorPresetResponse_ListPresets::~ColorPresetResponse_ListPresets() {
  // @@protoc_insertion_point(destructor:iterm2.ColorPresetResponse.ListPresets)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorPresetResponse_ListPresets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorPresetResponse_ListPresets::ArenaDtor(void* object) {
  ColorPresetResponse_ListPresets* _this = reinterpret_cast< ColorPresetResponse_ListPresets* >(object);
  (void)_this;
}
void ColorPresetResponse_ListPresets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorPresetResponse_ListPresets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorPresetResponse_ListPresets::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ColorPresetResponse.ListPresets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorPresetResponse_ListPresets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ColorPresetResponse.ListPresets.name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorPresetResponse_ListPresets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ColorPresetResponse.ListPresets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ColorPresetResponse.ListPresets.name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ColorPresetResponse.ListPresets)
  return target;
}

size_t ColorPresetResponse_ListPresets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ColorPresetResponse.ListPresets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_.size());
  for (int i = 0, n = name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetResponse_ListPresets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorPresetResponse_ListPresets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetResponse_ListPresets::GetClassData() const { return &_class_data_; }

void ColorPresetResponse_ListPresets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorPresetResponse_ListPresets *>(to)->MergeFrom(
      static_cast<const ColorPresetResponse_ListPresets &>(from));
}


void ColorPresetResponse_ListPresets::MergeFrom(const ColorPresetResponse_ListPresets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ColorPresetResponse.ListPresets)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorPresetResponse_ListPresets::CopyFrom(const ColorPresetResponse_ListPresets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ColorPresetResponse.ListPresets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPresetResponse_ListPresets::IsInitialized() const {
  return true;
}

void ColorPresetResponse_ListPresets::InternalSwap(ColorPresetResponse_ListPresets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  name_.InternalSwap(&other->name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetResponse_ListPresets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[33]);
}

// ===================================================================

class ColorPresetResponse_GetPreset_ColorSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorPresetResponse_GetPreset_ColorSetting>()._has_bits_);
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_green(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_color_space(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ColorPresetResponse_GetPreset_ColorSetting::ColorPresetResponse_GetPreset_ColorSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
}
ColorPresetResponse_GetPreset_ColorSetting::ColorPresetResponse_GetPreset_ColorSetting(const ColorPresetResponse_GetPreset_ColorSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_space_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color_space()) {
    color_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color_space(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&red_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
}

inline void ColorPresetResponse_GetPreset_ColorSetting::SharedCtor() {
color_space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_space_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&red_)) + sizeof(alpha_));
}

ColorPresetResponse_GetPreset_ColorSetting::~ColorPresetResponse_GetPreset_ColorSetting() {
  // @@protoc_insertion_point(destructor:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorPresetResponse_GetPreset_ColorSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  color_space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColorPresetResponse_GetPreset_ColorSetting::ArenaDtor(void* object) {
  ColorPresetResponse_GetPreset_ColorSetting* _this = reinterpret_cast< ColorPresetResponse_GetPreset_ColorSetting* >(object);
  (void)_this;
}
void ColorPresetResponse_GetPreset_ColorSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorPresetResponse_GetPreset_ColorSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorPresetResponse_GetPreset_ColorSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      color_space_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&red_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&red_)) + sizeof(alpha_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorPresetResponse_GetPreset_ColorSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_red(&has_bits);
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_green(&has_bits);
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_blue(&has_bits);
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string color_space = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_color_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ColorPresetResponse.GetPreset.ColorSetting.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorPresetResponse_GetPreset_ColorSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float red = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_red(), target);
  }

  // optional float green = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_green(), target);
  }

  // optional float blue = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_blue(), target);
  }

  // optional float alpha = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_alpha(), target);
  }

  // optional string color_space = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color_space().data(), static_cast<int>(this->_internal_color_space().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ColorPresetResponse.GetPreset.ColorSetting.color_space");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_color_space(), target);
  }

  // optional string key = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ColorPresetResponse.GetPreset.ColorSetting.key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  return target;
}

size_t ColorPresetResponse_GetPreset_ColorSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string color_space = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color_space());
    }

    // optional string key = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional float red = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float green = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float blue = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float alpha = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetResponse_GetPreset_ColorSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorPresetResponse_GetPreset_ColorSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetResponse_GetPreset_ColorSetting::GetClassData() const { return &_class_data_; }

void ColorPresetResponse_GetPreset_ColorSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorPresetResponse_GetPreset_ColorSetting *>(to)->MergeFrom(
      static_cast<const ColorPresetResponse_GetPreset_ColorSetting &>(from));
}


void ColorPresetResponse_GetPreset_ColorSetting::MergeFrom(const ColorPresetResponse_GetPreset_ColorSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_color_space(from._internal_color_space());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      red_ = from.red_;
    }
    if (cached_has_bits & 0x00000008u) {
      green_ = from.green_;
    }
    if (cached_has_bits & 0x00000010u) {
      blue_ = from.blue_;
    }
    if (cached_has_bits & 0x00000020u) {
      alpha_ = from.alpha_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorPresetResponse_GetPreset_ColorSetting::CopyFrom(const ColorPresetResponse_GetPreset_ColorSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ColorPresetResponse.GetPreset.ColorSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPresetResponse_GetPreset_ColorSetting::IsInitialized() const {
  return true;
}

void ColorPresetResponse_GetPreset_ColorSetting::InternalSwap(ColorPresetResponse_GetPreset_ColorSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_space_, lhs_arena,
      &other->color_space_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorPresetResponse_GetPreset_ColorSetting, alpha_)
      + sizeof(ColorPresetResponse_GetPreset_ColorSetting::alpha_)
      - PROTOBUF_FIELD_OFFSET(ColorPresetResponse_GetPreset_ColorSetting, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetResponse_GetPreset_ColorSetting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[34]);
}

// ===================================================================

class ColorPresetResponse_GetPreset::_Internal {
 public:
};

ColorPresetResponse_GetPreset::ColorPresetResponse_GetPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  color_settings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetResponse.GetPreset)
}
ColorPresetResponse_GetPreset::ColorPresetResponse_GetPreset(const ColorPresetResponse_GetPreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      color_settings_(from.color_settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetResponse.GetPreset)
}

inline void ColorPresetResponse_GetPreset::SharedCtor() {
}

ColorPresetResponse_GetPreset::~ColorPresetResponse_GetPreset() {
  // @@protoc_insertion_point(destructor:iterm2.ColorPresetResponse.GetPreset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorPresetResponse_GetPreset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorPresetResponse_GetPreset::ArenaDtor(void* object) {
  ColorPresetResponse_GetPreset* _this = reinterpret_cast< ColorPresetResponse_GetPreset* >(object);
  (void)_this;
}
void ColorPresetResponse_GetPreset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorPresetResponse_GetPreset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorPresetResponse_GetPreset::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ColorPresetResponse.GetPreset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorPresetResponse_GetPreset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.ColorPresetResponse.GetPreset.ColorSetting color_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorPresetResponse_GetPreset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ColorPresetResponse.GetPreset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.ColorPresetResponse.GetPreset.ColorSetting color_settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_color_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_color_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ColorPresetResponse.GetPreset)
  return target;
}

size_t ColorPresetResponse_GetPreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ColorPresetResponse.GetPreset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ColorPresetResponse.GetPreset.ColorSetting color_settings = 1;
  total_size += 1UL * this->_internal_color_settings_size();
  for (const auto& msg : this->color_settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetResponse_GetPreset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorPresetResponse_GetPreset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetResponse_GetPreset::GetClassData() const { return &_class_data_; }

void ColorPresetResponse_GetPreset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorPresetResponse_GetPreset *>(to)->MergeFrom(
      static_cast<const ColorPresetResponse_GetPreset &>(from));
}


void ColorPresetResponse_GetPreset::MergeFrom(const ColorPresetResponse_GetPreset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ColorPresetResponse.GetPreset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  color_settings_.MergeFrom(from.color_settings_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorPresetResponse_GetPreset::CopyFrom(const ColorPresetResponse_GetPreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ColorPresetResponse.GetPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPresetResponse_GetPreset::IsInitialized() const {
  return true;
}

void ColorPresetResponse_GetPreset::InternalSwap(ColorPresetResponse_GetPreset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  color_settings_.InternalSwap(&other->color_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetResponse_GetPreset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[35]);
}

// ===================================================================

class ColorPresetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorPresetResponse>()._has_bits_);
  static const ::iterm2::ColorPresetResponse_ListPresets& list_presets(const ColorPresetResponse* msg);
  static const ::iterm2::ColorPresetResponse_GetPreset& get_preset(const ColorPresetResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::ColorPresetResponse_ListPresets&
ColorPresetResponse::_Internal::list_presets(const ColorPresetResponse* msg) {
  return *msg->response_.list_presets_;
}
const ::iterm2::ColorPresetResponse_GetPreset&
ColorPresetResponse::_Internal::get_preset(const ColorPresetResponse* msg) {
  return *msg->response_.get_preset_;
}
void ColorPresetResponse::set_allocated_list_presets(::iterm2::ColorPresetResponse_ListPresets* list_presets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (list_presets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ColorPresetResponse_ListPresets>::GetOwningArena(list_presets);
    if (message_arena != submessage_arena) {
      list_presets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_presets, submessage_arena);
    }
    set_has_list_presets();
    response_.list_presets_ = list_presets;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetResponse.list_presets)
}
void ColorPresetResponse::set_allocated_get_preset(::iterm2::ColorPresetResponse_GetPreset* get_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ColorPresetResponse_GetPreset>::GetOwningArena(get_preset);
    if (message_arena != submessage_arena) {
      get_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_preset, submessage_arena);
    }
    set_has_get_preset();
    response_.get_preset_ = get_preset;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.ColorPresetResponse.get_preset)
}
ColorPresetResponse::ColorPresetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ColorPresetResponse)
}
ColorPresetResponse::ColorPresetResponse(const ColorPresetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  clear_has_response();
  switch (from.response_case()) {
    case kListPresets: {
      _internal_mutable_list_presets()->::iterm2::ColorPresetResponse_ListPresets::MergeFrom(from._internal_list_presets());
      break;
    }
    case kGetPreset: {
      _internal_mutable_get_preset()->::iterm2::ColorPresetResponse_GetPreset::MergeFrom(from._internal_get_preset());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ColorPresetResponse)
}

inline void ColorPresetResponse::SharedCtor() {
status_ = 0;
clear_has_response();
}

ColorPresetResponse::~ColorPresetResponse() {
  // @@protoc_insertion_point(destructor:iterm2.ColorPresetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColorPresetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void ColorPresetResponse::ArenaDtor(void* object) {
  ColorPresetResponse* _this = reinterpret_cast< ColorPresetResponse* >(object);
  (void)_this;
}
void ColorPresetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorPresetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorPresetResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.ColorPresetResponse)
  switch (response_case()) {
    case kListPresets: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.list_presets_;
      }
      break;
    }
    case kGetPreset: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_preset_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ColorPresetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ColorPresetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  clear_response();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorPresetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.ColorPresetResponse.ListPresets list_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_presets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ColorPresetResponse.GetPreset get_preset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.ColorPresetResponse.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::ColorPresetResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::ColorPresetResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorPresetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ColorPresetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kListPresets: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::list_presets(this), target, stream);
      break;
    }
    case kGetPreset: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::get_preset(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .iterm2.ColorPresetResponse.Status status = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ColorPresetResponse)
  return target;
}

size_t ColorPresetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ColorPresetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.ColorPresetResponse.Status status = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (response_case()) {
    // .iterm2.ColorPresetResponse.ListPresets list_presets = 1;
    case kListPresets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.list_presets_);
      break;
    }
    // .iterm2.ColorPresetResponse.GetPreset get_preset = 2;
    case kGetPreset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_preset_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorPresetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorPresetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorPresetResponse::GetClassData() const { return &_class_data_; }

void ColorPresetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorPresetResponse *>(to)->MergeFrom(
      static_cast<const ColorPresetResponse &>(from));
}


void ColorPresetResponse::MergeFrom(const ColorPresetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ColorPresetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  switch (from.response_case()) {
    case kListPresets: {
      _internal_mutable_list_presets()->::iterm2::ColorPresetResponse_ListPresets::MergeFrom(from._internal_list_presets());
      break;
    }
    case kGetPreset: {
      _internal_mutable_get_preset()->::iterm2::ColorPresetResponse_GetPreset::MergeFrom(from._internal_get_preset());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorPresetResponse::CopyFrom(const ColorPresetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ColorPresetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPresetResponse::IsInitialized() const {
  return true;
}

void ColorPresetResponse::InternalSwap(ColorPresetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorPresetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[36]);
}

// ===================================================================

class PreferencesRequest_Request_SetPreference::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesRequest_Request_SetPreference>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PreferencesRequest_Request_SetPreference::PreferencesRequest_Request_SetPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesRequest.Request.SetPreference)
}
PreferencesRequest_Request_SetPreference::PreferencesRequest_Request_SetPreference(const PreferencesRequest_Request_SetPreference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesRequest.Request.SetPreference)
}

inline void PreferencesRequest_Request_SetPreference::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreferencesRequest_Request_SetPreference::~PreferencesRequest_Request_SetPreference() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesRequest.Request.SetPreference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesRequest_Request_SetPreference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreferencesRequest_Request_SetPreference::ArenaDtor(void* object) {
  PreferencesRequest_Request_SetPreference* _this = reinterpret_cast< PreferencesRequest_Request_SetPreference* >(object);
  (void)_this;
}
void PreferencesRequest_Request_SetPreference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesRequest_Request_SetPreference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesRequest_Request_SetPreference::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesRequest.Request.SetPreference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesRequest_Request_SetPreference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PreferencesRequest.Request.SetPreference.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PreferencesRequest.Request.SetPreference.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesRequest_Request_SetPreference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesRequest.Request.SetPreference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PreferencesRequest.Request.SetPreference.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string json_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PreferencesRequest.Request.SetPreference.json_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesRequest.Request.SetPreference)
  return target;
}

size_t PreferencesRequest_Request_SetPreference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesRequest.Request.SetPreference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string json_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesRequest_Request_SetPreference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesRequest_Request_SetPreference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesRequest_Request_SetPreference::GetClassData() const { return &_class_data_; }

void PreferencesRequest_Request_SetPreference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesRequest_Request_SetPreference *>(to)->MergeFrom(
      static_cast<const PreferencesRequest_Request_SetPreference &>(from));
}


void PreferencesRequest_Request_SetPreference::MergeFrom(const PreferencesRequest_Request_SetPreference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesRequest.Request.SetPreference)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_value(from._internal_json_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesRequest_Request_SetPreference::CopyFrom(const PreferencesRequest_Request_SetPreference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesRequest.Request.SetPreference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesRequest_Request_SetPreference::IsInitialized() const {
  return true;
}

void PreferencesRequest_Request_SetPreference::InternalSwap(PreferencesRequest_Request_SetPreference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesRequest_Request_SetPreference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[37]);
}

// ===================================================================

class PreferencesRequest_Request_GetPreference::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesRequest_Request_GetPreference>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreferencesRequest_Request_GetPreference::PreferencesRequest_Request_GetPreference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesRequest.Request.GetPreference)
}
PreferencesRequest_Request_GetPreference::PreferencesRequest_Request_GetPreference(const PreferencesRequest_Request_GetPreference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesRequest.Request.GetPreference)
}

inline void PreferencesRequest_Request_GetPreference::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreferencesRequest_Request_GetPreference::~PreferencesRequest_Request_GetPreference() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesRequest.Request.GetPreference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesRequest_Request_GetPreference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreferencesRequest_Request_GetPreference::ArenaDtor(void* object) {
  PreferencesRequest_Request_GetPreference* _this = reinterpret_cast< PreferencesRequest_Request_GetPreference* >(object);
  (void)_this;
}
void PreferencesRequest_Request_GetPreference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesRequest_Request_GetPreference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesRequest_Request_GetPreference::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesRequest.Request.GetPreference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesRequest_Request_GetPreference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PreferencesRequest.Request.GetPreference.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesRequest_Request_GetPreference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesRequest.Request.GetPreference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PreferencesRequest.Request.GetPreference.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesRequest.Request.GetPreference)
  return target;
}

size_t PreferencesRequest_Request_GetPreference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesRequest.Request.GetPreference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesRequest_Request_GetPreference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesRequest_Request_GetPreference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesRequest_Request_GetPreference::GetClassData() const { return &_class_data_; }

void PreferencesRequest_Request_GetPreference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesRequest_Request_GetPreference *>(to)->MergeFrom(
      static_cast<const PreferencesRequest_Request_GetPreference &>(from));
}


void PreferencesRequest_Request_GetPreference::MergeFrom(const PreferencesRequest_Request_GetPreference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesRequest.Request.GetPreference)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesRequest_Request_GetPreference::CopyFrom(const PreferencesRequest_Request_GetPreference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesRequest.Request.GetPreference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesRequest_Request_GetPreference::IsInitialized() const {
  return true;
}

void PreferencesRequest_Request_GetPreference::InternalSwap(PreferencesRequest_Request_GetPreference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesRequest_Request_GetPreference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[38]);
}

// ===================================================================

class PreferencesRequest_Request_SetDefaultProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesRequest_Request_SetDefaultProfile>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreferencesRequest_Request_SetDefaultProfile::PreferencesRequest_Request_SetDefaultProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesRequest.Request.SetDefaultProfile)
}
PreferencesRequest_Request_SetDefaultProfile::PreferencesRequest_Request_SetDefaultProfile(const PreferencesRequest_Request_SetDefaultProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesRequest.Request.SetDefaultProfile)
}

inline void PreferencesRequest_Request_SetDefaultProfile::SharedCtor() {
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreferencesRequest_Request_SetDefaultProfile::~PreferencesRequest_Request_SetDefaultProfile() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesRequest_Request_SetDefaultProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreferencesRequest_Request_SetDefaultProfile::ArenaDtor(void* object) {
  PreferencesRequest_Request_SetDefaultProfile* _this = reinterpret_cast< PreferencesRequest_Request_SetDefaultProfile* >(object);
  (void)_this;
}
void PreferencesRequest_Request_SetDefaultProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesRequest_Request_SetDefaultProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesRequest_Request_SetDefaultProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesRequest_Request_SetDefaultProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PreferencesRequest.Request.SetDefaultProfile.guid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesRequest_Request_SetDefaultProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PreferencesRequest.Request.SetDefaultProfile.guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  return target;
}

size_t PreferencesRequest_Request_SetDefaultProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string guid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesRequest_Request_SetDefaultProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesRequest_Request_SetDefaultProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesRequest_Request_SetDefaultProfile::GetClassData() const { return &_class_data_; }

void PreferencesRequest_Request_SetDefaultProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesRequest_Request_SetDefaultProfile *>(to)->MergeFrom(
      static_cast<const PreferencesRequest_Request_SetDefaultProfile &>(from));
}


void PreferencesRequest_Request_SetDefaultProfile::MergeFrom(const PreferencesRequest_Request_SetDefaultProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guid()) {
    _internal_set_guid(from._internal_guid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesRequest_Request_SetDefaultProfile::CopyFrom(const PreferencesRequest_Request_SetDefaultProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesRequest.Request.SetDefaultProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesRequest_Request_SetDefaultProfile::IsInitialized() const {
  return true;
}

void PreferencesRequest_Request_SetDefaultProfile::InternalSwap(PreferencesRequest_Request_SetDefaultProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesRequest_Request_SetDefaultProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[39]);
}

// ===================================================================

class PreferencesRequest_Request_GetDefaultProfile::_Internal {
 public:
};

PreferencesRequest_Request_GetDefaultProfile::PreferencesRequest_Request_GetDefaultProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesRequest.Request.GetDefaultProfile)
}
PreferencesRequest_Request_GetDefaultProfile::PreferencesRequest_Request_GetDefaultProfile(const PreferencesRequest_Request_GetDefaultProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesRequest.Request.GetDefaultProfile)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesRequest_Request_GetDefaultProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesRequest_Request_GetDefaultProfile::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PreferencesRequest_Request_GetDefaultProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[40]);
}

// ===================================================================

class PreferencesRequest_Request::_Internal {
 public:
  static const ::iterm2::PreferencesRequest_Request_SetPreference& set_preference_request(const PreferencesRequest_Request* msg);
  static const ::iterm2::PreferencesRequest_Request_GetPreference& get_preference_request(const PreferencesRequest_Request* msg);
  static const ::iterm2::PreferencesRequest_Request_SetDefaultProfile& set_default_profile_request(const PreferencesRequest_Request* msg);
  static const ::iterm2::PreferencesRequest_Request_GetDefaultProfile& get_default_profile_request(const PreferencesRequest_Request* msg);
};

const ::iterm2::PreferencesRequest_Request_SetPreference&
PreferencesRequest_Request::_Internal::set_preference_request(const PreferencesRequest_Request* msg) {
  return *msg->request_.set_preference_request_;
}
const ::iterm2::PreferencesRequest_Request_GetPreference&
PreferencesRequest_Request::_Internal::get_preference_request(const PreferencesRequest_Request* msg) {
  return *msg->request_.get_preference_request_;
}
const ::iterm2::PreferencesRequest_Request_SetDefaultProfile&
PreferencesRequest_Request::_Internal::set_default_profile_request(const PreferencesRequest_Request* msg) {
  return *msg->request_.set_default_profile_request_;
}
const ::iterm2::PreferencesRequest_Request_GetDefaultProfile&
PreferencesRequest_Request::_Internal::get_default_profile_request(const PreferencesRequest_Request* msg) {
  return *msg->request_.get_default_profile_request_;
}
void PreferencesRequest_Request::set_allocated_set_preference_request(::iterm2::PreferencesRequest_Request_SetPreference* set_preference_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (set_preference_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesRequest_Request_SetPreference>::GetOwningArena(set_preference_request);
    if (message_arena != submessage_arena) {
      set_preference_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_preference_request, submessage_arena);
    }
    set_has_set_preference_request();
    request_.set_preference_request_ = set_preference_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.set_preference_request)
}
void PreferencesRequest_Request::set_allocated_get_preference_request(::iterm2::PreferencesRequest_Request_GetPreference* get_preference_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_preference_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesRequest_Request_GetPreference>::GetOwningArena(get_preference_request);
    if (message_arena != submessage_arena) {
      get_preference_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_preference_request, submessage_arena);
    }
    set_has_get_preference_request();
    request_.get_preference_request_ = get_preference_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.get_preference_request)
}
void PreferencesRequest_Request::set_allocated_set_default_profile_request(::iterm2::PreferencesRequest_Request_SetDefaultProfile* set_default_profile_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (set_default_profile_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesRequest_Request_SetDefaultProfile>::GetOwningArena(set_default_profile_request);
    if (message_arena != submessage_arena) {
      set_default_profile_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_default_profile_request, submessage_arena);
    }
    set_has_set_default_profile_request();
    request_.set_default_profile_request_ = set_default_profile_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.set_default_profile_request)
}
void PreferencesRequest_Request::set_allocated_get_default_profile_request(::iterm2::PreferencesRequest_Request_GetDefaultProfile* get_default_profile_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_default_profile_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesRequest_Request_GetDefaultProfile>::GetOwningArena(get_default_profile_request);
    if (message_arena != submessage_arena) {
      get_default_profile_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_default_profile_request, submessage_arena);
    }
    set_has_get_default_profile_request();
    request_.get_default_profile_request_ = get_default_profile_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesRequest.Request.get_default_profile_request)
}
PreferencesRequest_Request::PreferencesRequest_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesRequest.Request)
}
PreferencesRequest_Request::PreferencesRequest_Request(const PreferencesRequest_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSetPreferenceRequest: {
      _internal_mutable_set_preference_request()->::iterm2::PreferencesRequest_Request_SetPreference::MergeFrom(from._internal_set_preference_request());
      break;
    }
    case kGetPreferenceRequest: {
      _internal_mutable_get_preference_request()->::iterm2::PreferencesRequest_Request_GetPreference::MergeFrom(from._internal_get_preference_request());
      break;
    }
    case kSetDefaultProfileRequest: {
      _internal_mutable_set_default_profile_request()->::iterm2::PreferencesRequest_Request_SetDefaultProfile::MergeFrom(from._internal_set_default_profile_request());
      break;
    }
    case kGetDefaultProfileRequest: {
      _internal_mutable_get_default_profile_request()->::iterm2::PreferencesRequest_Request_GetDefaultProfile::MergeFrom(from._internal_get_default_profile_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesRequest.Request)
}

inline void PreferencesRequest_Request::SharedCtor() {
clear_has_request();
}

PreferencesRequest_Request::~PreferencesRequest_Request() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesRequest.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesRequest_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void PreferencesRequest_Request::ArenaDtor(void* object) {
  PreferencesRequest_Request* _this = reinterpret_cast< PreferencesRequest_Request* >(object);
  (void)_this;
}
void PreferencesRequest_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesRequest_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesRequest_Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.PreferencesRequest.Request)
  switch (request_case()) {
    case kSetPreferenceRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.set_preference_request_;
      }
      break;
    }
    case kGetPreferenceRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_preference_request_;
      }
      break;
    }
    case kSetDefaultProfileRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.set_default_profile_request_;
      }
      break;
    }
    case kGetDefaultProfileRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_default_profile_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void PreferencesRequest_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesRequest.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesRequest_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.PreferencesRequest.Request.SetPreference set_preference_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_preference_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesRequest.Request.GetPreference get_preference_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_preference_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesRequest.Request.SetDefaultProfile set_default_profile_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_default_profile_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesRequest.Request.GetDefaultProfile get_default_profile_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_default_profile_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesRequest_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesRequest.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (request_case()) {
    case kSetPreferenceRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::set_preference_request(this), target, stream);
      break;
    }
    case kGetPreferenceRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::get_preference_request(this), target, stream);
      break;
    }
    case kSetDefaultProfileRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::set_default_profile_request(this), target, stream);
      break;
    }
    case kGetDefaultProfileRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::get_default_profile_request(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesRequest.Request)
  return target;
}

size_t PreferencesRequest_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesRequest.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .iterm2.PreferencesRequest.Request.SetPreference set_preference_request = 1;
    case kSetPreferenceRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.set_preference_request_);
      break;
    }
    // .iterm2.PreferencesRequest.Request.GetPreference get_preference_request = 2;
    case kGetPreferenceRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_preference_request_);
      break;
    }
    // .iterm2.PreferencesRequest.Request.SetDefaultProfile set_default_profile_request = 3;
    case kSetDefaultProfileRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.set_default_profile_request_);
      break;
    }
    // .iterm2.PreferencesRequest.Request.GetDefaultProfile get_default_profile_request = 4;
    case kGetDefaultProfileRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_default_profile_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesRequest_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesRequest_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesRequest_Request::GetClassData() const { return &_class_data_; }

void PreferencesRequest_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesRequest_Request *>(to)->MergeFrom(
      static_cast<const PreferencesRequest_Request &>(from));
}


void PreferencesRequest_Request::MergeFrom(const PreferencesRequest_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesRequest.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kSetPreferenceRequest: {
      _internal_mutable_set_preference_request()->::iterm2::PreferencesRequest_Request_SetPreference::MergeFrom(from._internal_set_preference_request());
      break;
    }
    case kGetPreferenceRequest: {
      _internal_mutable_get_preference_request()->::iterm2::PreferencesRequest_Request_GetPreference::MergeFrom(from._internal_get_preference_request());
      break;
    }
    case kSetDefaultProfileRequest: {
      _internal_mutable_set_default_profile_request()->::iterm2::PreferencesRequest_Request_SetDefaultProfile::MergeFrom(from._internal_set_default_profile_request());
      break;
    }
    case kGetDefaultProfileRequest: {
      _internal_mutable_get_default_profile_request()->::iterm2::PreferencesRequest_Request_GetDefaultProfile::MergeFrom(from._internal_get_default_profile_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesRequest_Request::CopyFrom(const PreferencesRequest_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesRequest.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesRequest_Request::IsInitialized() const {
  return true;
}

void PreferencesRequest_Request::InternalSwap(PreferencesRequest_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesRequest_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[41]);
}

// ===================================================================

class PreferencesRequest::_Internal {
 public:
};

PreferencesRequest::PreferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesRequest)
}
PreferencesRequest::PreferencesRequest(const PreferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesRequest)
}

inline void PreferencesRequest::SharedCtor() {
}

PreferencesRequest::~PreferencesRequest() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreferencesRequest::ArenaDtor(void* object) {
  PreferencesRequest* _this = reinterpret_cast< PreferencesRequest* >(object);
  (void)_this;
}
void PreferencesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.PreferencesRequest.Request requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.PreferencesRequest.Request requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesRequest)
  return target;
}

size_t PreferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.PreferencesRequest.Request requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesRequest::GetClassData() const { return &_class_data_; }

void PreferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesRequest *>(to)->MergeFrom(
      static_cast<const PreferencesRequest &>(from));
}


void PreferencesRequest::MergeFrom(const PreferencesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesRequest::CopyFrom(const PreferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesRequest::IsInitialized() const {
  return true;
}

void PreferencesRequest::InternalSwap(PreferencesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[42]);
}

// ===================================================================

class PreferencesResponse_Result_SetPreferenceResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesResponse_Result_SetPreferenceResult>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreferencesResponse_Result_SetPreferenceResult::PreferencesResponse_Result_SetPreferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse.Result.SetPreferenceResult)
}
PreferencesResponse_Result_SetPreferenceResult::PreferencesResponse_Result_SetPreferenceResult(const PreferencesResponse_Result_SetPreferenceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse.Result.SetPreferenceResult)
}

inline void PreferencesResponse_Result_SetPreferenceResult::SharedCtor() {
status_ = 0;
}

PreferencesResponse_Result_SetPreferenceResult::~PreferencesResponse_Result_SetPreferenceResult() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesResponse_Result_SetPreferenceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreferencesResponse_Result_SetPreferenceResult::ArenaDtor(void* object) {
  PreferencesResponse_Result_SetPreferenceResult* _this = reinterpret_cast< PreferencesResponse_Result_SetPreferenceResult* >(object);
  (void)_this;
}
void PreferencesResponse_Result_SetPreferenceResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesResponse_Result_SetPreferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesResponse_Result_SetPreferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesResponse_Result_SetPreferenceResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.PreferencesResponse.Result.SetPreferenceResult.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::PreferencesResponse_Result_SetPreferenceResult_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesResponse_Result_SetPreferenceResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.PreferencesResponse.Result.SetPreferenceResult.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  return target;
}

size_t PreferencesResponse_Result_SetPreferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.PreferencesResponse.Result.SetPreferenceResult.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse_Result_SetPreferenceResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesResponse_Result_SetPreferenceResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse_Result_SetPreferenceResult::GetClassData() const { return &_class_data_; }

void PreferencesResponse_Result_SetPreferenceResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesResponse_Result_SetPreferenceResult *>(to)->MergeFrom(
      static_cast<const PreferencesResponse_Result_SetPreferenceResult &>(from));
}


void PreferencesResponse_Result_SetPreferenceResult::MergeFrom(const PreferencesResponse_Result_SetPreferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesResponse_Result_SetPreferenceResult::CopyFrom(const PreferencesResponse_Result_SetPreferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesResponse.Result.SetPreferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesResponse_Result_SetPreferenceResult::IsInitialized() const {
  return true;
}

void PreferencesResponse_Result_SetPreferenceResult::InternalSwap(PreferencesResponse_Result_SetPreferenceResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse_Result_SetPreferenceResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[43]);
}

// ===================================================================

class PreferencesResponse_Result_GetPreferenceResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesResponse_Result_GetPreferenceResult>()._has_bits_);
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreferencesResponse_Result_GetPreferenceResult::PreferencesResponse_Result_GetPreferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse.Result.GetPreferenceResult)
}
PreferencesResponse_Result_GetPreferenceResult::PreferencesResponse_Result_GetPreferenceResult(const PreferencesResponse_Result_GetPreferenceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse.Result.GetPreferenceResult)
}

inline void PreferencesResponse_Result_GetPreferenceResult::SharedCtor() {
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreferencesResponse_Result_GetPreferenceResult::~PreferencesResponse_Result_GetPreferenceResult() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesResponse_Result_GetPreferenceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreferencesResponse_Result_GetPreferenceResult::ArenaDtor(void* object) {
  PreferencesResponse_Result_GetPreferenceResult* _this = reinterpret_cast< PreferencesResponse_Result_GetPreferenceResult* >(object);
  (void)_this;
}
void PreferencesResponse_Result_GetPreferenceResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesResponse_Result_GetPreferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesResponse_Result_GetPreferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesResponse_Result_GetPreferenceResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string json_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesResponse_Result_GetPreferenceResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PreferencesResponse.Result.GetPreferenceResult.json_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  return target;
}

size_t PreferencesResponse_Result_GetPreferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string json_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse_Result_GetPreferenceResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesResponse_Result_GetPreferenceResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse_Result_GetPreferenceResult::GetClassData() const { return &_class_data_; }

void PreferencesResponse_Result_GetPreferenceResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesResponse_Result_GetPreferenceResult *>(to)->MergeFrom(
      static_cast<const PreferencesResponse_Result_GetPreferenceResult &>(from));
}


void PreferencesResponse_Result_GetPreferenceResult::MergeFrom(const PreferencesResponse_Result_GetPreferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_json_value()) {
    _internal_set_json_value(from._internal_json_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesResponse_Result_GetPreferenceResult::CopyFrom(const PreferencesResponse_Result_GetPreferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesResponse.Result.GetPreferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesResponse_Result_GetPreferenceResult::IsInitialized() const {
  return true;
}

void PreferencesResponse_Result_GetPreferenceResult::InternalSwap(PreferencesResponse_Result_GetPreferenceResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse_Result_GetPreferenceResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[44]);
}

// ===================================================================

class PreferencesResponse_Result_SetDefaultProfileResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesResponse_Result_SetDefaultProfileResult>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreferencesResponse_Result_SetDefaultProfileResult::PreferencesResponse_Result_SetDefaultProfileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
}
PreferencesResponse_Result_SetDefaultProfileResult::PreferencesResponse_Result_SetDefaultProfileResult(const PreferencesResponse_Result_SetDefaultProfileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
}

inline void PreferencesResponse_Result_SetDefaultProfileResult::SharedCtor() {
status_ = 0;
}

PreferencesResponse_Result_SetDefaultProfileResult::~PreferencesResponse_Result_SetDefaultProfileResult() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesResponse_Result_SetDefaultProfileResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreferencesResponse_Result_SetDefaultProfileResult::ArenaDtor(void* object) {
  PreferencesResponse_Result_SetDefaultProfileResult* _this = reinterpret_cast< PreferencesResponse_Result_SetDefaultProfileResult* >(object);
  (void)_this;
}
void PreferencesResponse_Result_SetDefaultProfileResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesResponse_Result_SetDefaultProfileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesResponse_Result_SetDefaultProfileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesResponse_Result_SetDefaultProfileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.PreferencesResponse.Result.SetDefaultProfileResult.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::PreferencesResponse_Result_SetDefaultProfileResult_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesResponse_Result_SetDefaultProfileResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.PreferencesResponse.Result.SetDefaultProfileResult.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  return target;
}

size_t PreferencesResponse_Result_SetDefaultProfileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.PreferencesResponse.Result.SetDefaultProfileResult.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse_Result_SetDefaultProfileResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesResponse_Result_SetDefaultProfileResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse_Result_SetDefaultProfileResult::GetClassData() const { return &_class_data_; }

void PreferencesResponse_Result_SetDefaultProfileResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesResponse_Result_SetDefaultProfileResult *>(to)->MergeFrom(
      static_cast<const PreferencesResponse_Result_SetDefaultProfileResult &>(from));
}


void PreferencesResponse_Result_SetDefaultProfileResult::MergeFrom(const PreferencesResponse_Result_SetDefaultProfileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesResponse_Result_SetDefaultProfileResult::CopyFrom(const PreferencesResponse_Result_SetDefaultProfileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesResponse.Result.SetDefaultProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesResponse_Result_SetDefaultProfileResult::IsInitialized() const {
  return true;
}

void PreferencesResponse_Result_SetDefaultProfileResult::InternalSwap(PreferencesResponse_Result_SetDefaultProfileResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse_Result_SetDefaultProfileResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[45]);
}

// ===================================================================

class PreferencesResponse_Result_UnrecognizedResult::_Internal {
 public:
};

PreferencesResponse_Result_UnrecognizedResult::PreferencesResponse_Result_UnrecognizedResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse.Result.UnrecognizedResult)
}
PreferencesResponse_Result_UnrecognizedResult::PreferencesResponse_Result_UnrecognizedResult(const PreferencesResponse_Result_UnrecognizedResult& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse.Result.UnrecognizedResult)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse_Result_UnrecognizedResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse_Result_UnrecognizedResult::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse_Result_UnrecognizedResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[46]);
}

// ===================================================================

class PreferencesResponse_Result_GetDefaultProfileResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferencesResponse_Result_GetDefaultProfileResult>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreferencesResponse_Result_GetDefaultProfileResult::PreferencesResponse_Result_GetDefaultProfileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
}
PreferencesResponse_Result_GetDefaultProfileResult::PreferencesResponse_Result_GetDefaultProfileResult(const PreferencesResponse_Result_GetDefaultProfileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
}

inline void PreferencesResponse_Result_GetDefaultProfileResult::SharedCtor() {
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreferencesResponse_Result_GetDefaultProfileResult::~PreferencesResponse_Result_GetDefaultProfileResult() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesResponse_Result_GetDefaultProfileResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreferencesResponse_Result_GetDefaultProfileResult::ArenaDtor(void* object) {
  PreferencesResponse_Result_GetDefaultProfileResult* _this = reinterpret_cast< PreferencesResponse_Result_GetDefaultProfileResult* >(object);
  (void)_this;
}
void PreferencesResponse_Result_GetDefaultProfileResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesResponse_Result_GetDefaultProfileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesResponse_Result_GetDefaultProfileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesResponse_Result_GetDefaultProfileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesResponse_Result_GetDefaultProfileResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PreferencesResponse.Result.GetDefaultProfileResult.guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  return target;
}

size_t PreferencesResponse_Result_GetDefaultProfileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string guid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse_Result_GetDefaultProfileResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesResponse_Result_GetDefaultProfileResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse_Result_GetDefaultProfileResult::GetClassData() const { return &_class_data_; }

void PreferencesResponse_Result_GetDefaultProfileResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesResponse_Result_GetDefaultProfileResult *>(to)->MergeFrom(
      static_cast<const PreferencesResponse_Result_GetDefaultProfileResult &>(from));
}


void PreferencesResponse_Result_GetDefaultProfileResult::MergeFrom(const PreferencesResponse_Result_GetDefaultProfileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guid()) {
    _internal_set_guid(from._internal_guid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesResponse_Result_GetDefaultProfileResult::CopyFrom(const PreferencesResponse_Result_GetDefaultProfileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesResponse.Result.GetDefaultProfileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesResponse_Result_GetDefaultProfileResult::IsInitialized() const {
  return true;
}

void PreferencesResponse_Result_GetDefaultProfileResult::InternalSwap(PreferencesResponse_Result_GetDefaultProfileResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse_Result_GetDefaultProfileResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[47]);
}

// ===================================================================

class PreferencesResponse_Result::_Internal {
 public:
  static const ::iterm2::PreferencesResponse_Result_UnrecognizedResult& unrecognized_request(const PreferencesResponse_Result* msg);
  static const ::iterm2::PreferencesResponse_Result_SetPreferenceResult& set_preference_result(const PreferencesResponse_Result* msg);
  static const ::iterm2::PreferencesResponse_Result_GetPreferenceResult& get_preference_result(const PreferencesResponse_Result* msg);
  static const ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult& set_default_profile_result(const PreferencesResponse_Result* msg);
  static const ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult& get_default_profile_result(const PreferencesResponse_Result* msg);
};

const ::iterm2::PreferencesResponse_Result_UnrecognizedResult&
PreferencesResponse_Result::_Internal::unrecognized_request(const PreferencesResponse_Result* msg) {
  return *msg->result_.unrecognized_request_;
}
const ::iterm2::PreferencesResponse_Result_SetPreferenceResult&
PreferencesResponse_Result::_Internal::set_preference_result(const PreferencesResponse_Result* msg) {
  return *msg->result_.set_preference_result_;
}
const ::iterm2::PreferencesResponse_Result_GetPreferenceResult&
PreferencesResponse_Result::_Internal::get_preference_result(const PreferencesResponse_Result* msg) {
  return *msg->result_.get_preference_result_;
}
const ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult&
PreferencesResponse_Result::_Internal::set_default_profile_result(const PreferencesResponse_Result* msg) {
  return *msg->result_.set_default_profile_result_;
}
const ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult&
PreferencesResponse_Result::_Internal::get_default_profile_result(const PreferencesResponse_Result* msg) {
  return *msg->result_.get_default_profile_result_;
}
void PreferencesResponse_Result::set_allocated_unrecognized_request(::iterm2::PreferencesResponse_Result_UnrecognizedResult* unrecognized_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (unrecognized_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesResponse_Result_UnrecognizedResult>::GetOwningArena(unrecognized_request);
    if (message_arena != submessage_arena) {
      unrecognized_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unrecognized_request, submessage_arena);
    }
    set_has_unrecognized_request();
    result_.unrecognized_request_ = unrecognized_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.unrecognized_request)
}
void PreferencesResponse_Result::set_allocated_set_preference_result(::iterm2::PreferencesResponse_Result_SetPreferenceResult* set_preference_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (set_preference_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesResponse_Result_SetPreferenceResult>::GetOwningArena(set_preference_result);
    if (message_arena != submessage_arena) {
      set_preference_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_preference_result, submessage_arena);
    }
    set_has_set_preference_result();
    result_.set_preference_result_ = set_preference_result;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.set_preference_result)
}
void PreferencesResponse_Result::set_allocated_get_preference_result(::iterm2::PreferencesResponse_Result_GetPreferenceResult* get_preference_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (get_preference_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesResponse_Result_GetPreferenceResult>::GetOwningArena(get_preference_result);
    if (message_arena != submessage_arena) {
      get_preference_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_preference_result, submessage_arena);
    }
    set_has_get_preference_result();
    result_.get_preference_result_ = get_preference_result;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.get_preference_result)
}
void PreferencesResponse_Result::set_allocated_set_default_profile_result(::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* set_default_profile_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (set_default_profile_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesResponse_Result_SetDefaultProfileResult>::GetOwningArena(set_default_profile_result);
    if (message_arena != submessage_arena) {
      set_default_profile_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_default_profile_result, submessage_arena);
    }
    set_has_set_default_profile_result();
    result_.set_default_profile_result_ = set_default_profile_result;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.set_default_profile_result)
}
void PreferencesResponse_Result::set_allocated_get_default_profile_result(::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* get_default_profile_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (get_default_profile_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PreferencesResponse_Result_GetDefaultProfileResult>::GetOwningArena(get_default_profile_result);
    if (message_arena != submessage_arena) {
      get_default_profile_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_default_profile_result, submessage_arena);
    }
    set_has_get_default_profile_result();
    result_.get_default_profile_result_ = get_default_profile_result;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PreferencesResponse.Result.get_default_profile_result)
}
PreferencesResponse_Result::PreferencesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse.Result)
}
PreferencesResponse_Result::PreferencesResponse_Result(const PreferencesResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kUnrecognizedRequest: {
      _internal_mutable_unrecognized_request()->::iterm2::PreferencesResponse_Result_UnrecognizedResult::MergeFrom(from._internal_unrecognized_request());
      break;
    }
    case kSetPreferenceResult: {
      _internal_mutable_set_preference_result()->::iterm2::PreferencesResponse_Result_SetPreferenceResult::MergeFrom(from._internal_set_preference_result());
      break;
    }
    case kGetPreferenceResult: {
      _internal_mutable_get_preference_result()->::iterm2::PreferencesResponse_Result_GetPreferenceResult::MergeFrom(from._internal_get_preference_result());
      break;
    }
    case kSetDefaultProfileResult: {
      _internal_mutable_set_default_profile_result()->::iterm2::PreferencesResponse_Result_SetDefaultProfileResult::MergeFrom(from._internal_set_default_profile_result());
      break;
    }
    case kGetDefaultProfileResult: {
      _internal_mutable_get_default_profile_result()->::iterm2::PreferencesResponse_Result_GetDefaultProfileResult::MergeFrom(from._internal_get_default_profile_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse.Result)
}

inline void PreferencesResponse_Result::SharedCtor() {
clear_has_result();
}

PreferencesResponse_Result::~PreferencesResponse_Result() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesResponse.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void PreferencesResponse_Result::ArenaDtor(void* object) {
  PreferencesResponse_Result* _this = reinterpret_cast< PreferencesResponse_Result* >(object);
  (void)_this;
}
void PreferencesResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesResponse_Result::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.PreferencesResponse.Result)
  switch (result_case()) {
    case kUnrecognizedRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.unrecognized_request_;
      }
      break;
    }
    case kSetPreferenceResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.set_preference_result_;
      }
      break;
    }
    case kGetPreferenceResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.get_preference_result_;
      }
      break;
    }
    case kSetDefaultProfileResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.set_default_profile_result_;
      }
      break;
    }
    case kGetDefaultProfileResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.get_default_profile_result_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void PreferencesResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesResponse.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.PreferencesResponse.Result.UnrecognizedResult unrecognized_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unrecognized_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesResponse.Result.SetPreferenceResult set_preference_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_preference_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesResponse.Result.GetPreferenceResult get_preference_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_preference_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesResponse.Result.SetDefaultProfileResult set_default_profile_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_default_profile_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PreferencesResponse.Result.GetDefaultProfileResult get_default_profile_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_default_profile_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesResponse_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesResponse.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (result_case()) {
    case kUnrecognizedRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::unrecognized_request(this), target, stream);
      break;
    }
    case kSetPreferenceResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::set_preference_result(this), target, stream);
      break;
    }
    case kGetPreferenceResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::get_preference_result(this), target, stream);
      break;
    }
    case kSetDefaultProfileResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::set_default_profile_result(this), target, stream);
      break;
    }
    case kGetDefaultProfileResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::get_default_profile_result(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesResponse.Result)
  return target;
}

size_t PreferencesResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesResponse.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // .iterm2.PreferencesResponse.Result.UnrecognizedResult unrecognized_request = 1;
    case kUnrecognizedRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.unrecognized_request_);
      break;
    }
    // .iterm2.PreferencesResponse.Result.SetPreferenceResult set_preference_result = 2;
    case kSetPreferenceResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.set_preference_result_);
      break;
    }
    // .iterm2.PreferencesResponse.Result.GetPreferenceResult get_preference_result = 3;
    case kGetPreferenceResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.get_preference_result_);
      break;
    }
    // .iterm2.PreferencesResponse.Result.SetDefaultProfileResult set_default_profile_result = 4;
    case kSetDefaultProfileResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.set_default_profile_result_);
      break;
    }
    // .iterm2.PreferencesResponse.Result.GetDefaultProfileResult get_default_profile_result = 5;
    case kGetDefaultProfileResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.get_default_profile_result_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse_Result::GetClassData() const { return &_class_data_; }

void PreferencesResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesResponse_Result *>(to)->MergeFrom(
      static_cast<const PreferencesResponse_Result &>(from));
}


void PreferencesResponse_Result::MergeFrom(const PreferencesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kUnrecognizedRequest: {
      _internal_mutable_unrecognized_request()->::iterm2::PreferencesResponse_Result_UnrecognizedResult::MergeFrom(from._internal_unrecognized_request());
      break;
    }
    case kSetPreferenceResult: {
      _internal_mutable_set_preference_result()->::iterm2::PreferencesResponse_Result_SetPreferenceResult::MergeFrom(from._internal_set_preference_result());
      break;
    }
    case kGetPreferenceResult: {
      _internal_mutable_get_preference_result()->::iterm2::PreferencesResponse_Result_GetPreferenceResult::MergeFrom(from._internal_get_preference_result());
      break;
    }
    case kSetDefaultProfileResult: {
      _internal_mutable_set_default_profile_result()->::iterm2::PreferencesResponse_Result_SetDefaultProfileResult::MergeFrom(from._internal_set_default_profile_result());
      break;
    }
    case kGetDefaultProfileResult: {
      _internal_mutable_get_default_profile_result()->::iterm2::PreferencesResponse_Result_GetDefaultProfileResult::MergeFrom(from._internal_get_default_profile_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesResponse_Result::CopyFrom(const PreferencesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesResponse_Result::IsInitialized() const {
  return true;
}

void PreferencesResponse_Result::InternalSwap(PreferencesResponse_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[48]);
}

// ===================================================================

class PreferencesResponse::_Internal {
 public:
};

PreferencesResponse::PreferencesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PreferencesResponse)
}
PreferencesResponse::PreferencesResponse(const PreferencesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.PreferencesResponse)
}

inline void PreferencesResponse::SharedCtor() {
}

PreferencesResponse::~PreferencesResponse() {
  // @@protoc_insertion_point(destructor:iterm2.PreferencesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreferencesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreferencesResponse::ArenaDtor(void* object) {
  PreferencesResponse* _this = reinterpret_cast< PreferencesResponse* >(object);
  (void)_this;
}
void PreferencesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreferencesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PreferencesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreferencesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.PreferencesResponse.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferencesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PreferencesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.PreferencesResponse.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PreferencesResponse)
  return target;
}

size_t PreferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PreferencesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.PreferencesResponse.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreferencesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreferencesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreferencesResponse::GetClassData() const { return &_class_data_; }

void PreferencesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreferencesResponse *>(to)->MergeFrom(
      static_cast<const PreferencesResponse &>(from));
}


void PreferencesResponse::MergeFrom(const PreferencesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PreferencesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreferencesResponse::CopyFrom(const PreferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PreferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferencesResponse::IsInitialized() const {
  return true;
}

void PreferencesResponse::InternalSwap(PreferencesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreferencesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[49]);
}

// ===================================================================

class ReorderTabsRequest_Assignment::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderTabsRequest_Assignment>()._has_bits_);
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorderTabsRequest_Assignment::ReorderTabsRequest_Assignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tab_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ReorderTabsRequest.Assignment)
}
ReorderTabsRequest_Assignment::ReorderTabsRequest_Assignment(const ReorderTabsRequest_Assignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tab_ids_(from.tab_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ReorderTabsRequest.Assignment)
}

inline void ReorderTabsRequest_Assignment::SharedCtor() {
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReorderTabsRequest_Assignment::~ReorderTabsRequest_Assignment() {
  // @@protoc_insertion_point(destructor:iterm2.ReorderTabsRequest.Assignment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderTabsRequest_Assignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReorderTabsRequest_Assignment::ArenaDtor(void* object) {
  ReorderTabsRequest_Assignment* _this = reinterpret_cast< ReorderTabsRequest_Assignment* >(object);
  (void)_this;
}
void ReorderTabsRequest_Assignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderTabsRequest_Assignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderTabsRequest_Assignment::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ReorderTabsRequest.Assignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    window_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderTabsRequest_Assignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ReorderTabsRequest.Assignment.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tab_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tab_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ReorderTabsRequest.Assignment.tab_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderTabsRequest_Assignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ReorderTabsRequest.Assignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string window_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ReorderTabsRequest.Assignment.window_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_window_id(), target);
  }

  // repeated string tab_ids = 2;
  for (int i = 0, n = this->_internal_tab_ids_size(); i < n; i++) {
    const auto& s = this->_internal_tab_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ReorderTabsRequest.Assignment.tab_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ReorderTabsRequest.Assignment)
  return target;
}

size_t ReorderTabsRequest_Assignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ReorderTabsRequest.Assignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tab_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tab_ids_.size());
  for (int i = 0, n = tab_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tab_ids_.Get(i));
  }

  // optional string window_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_window_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderTabsRequest_Assignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderTabsRequest_Assignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderTabsRequest_Assignment::GetClassData() const { return &_class_data_; }

void ReorderTabsRequest_Assignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderTabsRequest_Assignment *>(to)->MergeFrom(
      static_cast<const ReorderTabsRequest_Assignment &>(from));
}


void ReorderTabsRequest_Assignment::MergeFrom(const ReorderTabsRequest_Assignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ReorderTabsRequest.Assignment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tab_ids_.MergeFrom(from.tab_ids_);
  if (from._internal_has_window_id()) {
    _internal_set_window_id(from._internal_window_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderTabsRequest_Assignment::CopyFrom(const ReorderTabsRequest_Assignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ReorderTabsRequest.Assignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderTabsRequest_Assignment::IsInitialized() const {
  return true;
}

void ReorderTabsRequest_Assignment::InternalSwap(ReorderTabsRequest_Assignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tab_ids_.InternalSwap(&other->tab_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderTabsRequest_Assignment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[50]);
}

// ===================================================================

class ReorderTabsRequest::_Internal {
 public:
};

ReorderTabsRequest::ReorderTabsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assignments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ReorderTabsRequest)
}
ReorderTabsRequest::ReorderTabsRequest(const ReorderTabsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assignments_(from.assignments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ReorderTabsRequest)
}

inline void ReorderTabsRequest::SharedCtor() {
}

ReorderTabsRequest::~ReorderTabsRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ReorderTabsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderTabsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorderTabsRequest::ArenaDtor(void* object) {
  ReorderTabsRequest* _this = reinterpret_cast< ReorderTabsRequest* >(object);
  (void)_this;
}
void ReorderTabsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderTabsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderTabsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ReorderTabsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderTabsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.ReorderTabsRequest.Assignment assignments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderTabsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ReorderTabsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.ReorderTabsRequest.Assignment assignments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_assignments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ReorderTabsRequest)
  return target;
}

size_t ReorderTabsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ReorderTabsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ReorderTabsRequest.Assignment assignments = 3;
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto& msg : this->assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderTabsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderTabsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderTabsRequest::GetClassData() const { return &_class_data_; }

void ReorderTabsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderTabsRequest *>(to)->MergeFrom(
      static_cast<const ReorderTabsRequest &>(from));
}


void ReorderTabsRequest::MergeFrom(const ReorderTabsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ReorderTabsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  assignments_.MergeFrom(from.assignments_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderTabsRequest::CopyFrom(const ReorderTabsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ReorderTabsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderTabsRequest::IsInitialized() const {
  return true;
}

void ReorderTabsRequest::InternalSwap(ReorderTabsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assignments_.InternalSwap(&other->assignments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderTabsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[51]);
}

// ===================================================================

class ReorderTabsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderTabsResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorderTabsResponse::ReorderTabsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ReorderTabsResponse)
}
ReorderTabsResponse::ReorderTabsResponse(const ReorderTabsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.ReorderTabsResponse)
}

inline void ReorderTabsResponse::SharedCtor() {
status_ = 0;
}

ReorderTabsResponse::~ReorderTabsResponse() {
  // @@protoc_insertion_point(destructor:iterm2.ReorderTabsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderTabsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorderTabsResponse::ArenaDtor(void* object) {
  ReorderTabsResponse* _this = reinterpret_cast< ReorderTabsResponse* >(object);
  (void)_this;
}
void ReorderTabsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderTabsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderTabsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ReorderTabsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderTabsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.ReorderTabsResponse.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::ReorderTabsResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::ReorderTabsResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderTabsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ReorderTabsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.ReorderTabsResponse.Status status = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ReorderTabsResponse)
  return target;
}

size_t ReorderTabsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ReorderTabsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.ReorderTabsResponse.Status status = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderTabsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderTabsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderTabsResponse::GetClassData() const { return &_class_data_; }

void ReorderTabsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderTabsResponse *>(to)->MergeFrom(
      static_cast<const ReorderTabsResponse &>(from));
}


void ReorderTabsResponse::MergeFrom(const ReorderTabsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ReorderTabsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderTabsResponse::CopyFrom(const ReorderTabsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ReorderTabsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderTabsResponse::IsInitialized() const {
  return true;
}

void ReorderTabsResponse::InternalSwap(ReorderTabsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderTabsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[52]);
}

// ===================================================================

class TmuxRequest_ListConnections::_Internal {
 public:
};

TmuxRequest_ListConnections::TmuxRequest_ListConnections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxRequest.ListConnections)
}
TmuxRequest_ListConnections::TmuxRequest_ListConnections(const TmuxRequest_ListConnections& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxRequest.ListConnections)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxRequest_ListConnections::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxRequest_ListConnections::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TmuxRequest_ListConnections::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[53]);
}

// ===================================================================

class TmuxRequest_SendCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxRequest_SendCommand>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TmuxRequest_SendCommand::TmuxRequest_SendCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxRequest.SendCommand)
}
TmuxRequest_SendCommand::TmuxRequest_SendCommand(const TmuxRequest_SendCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_id()) {
    connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_id(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxRequest.SendCommand)
}

inline void TmuxRequest_SendCommand::SharedCtor() {
connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TmuxRequest_SendCommand::~TmuxRequest_SendCommand() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxRequest.SendCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxRequest_SendCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmuxRequest_SendCommand::ArenaDtor(void* object) {
  TmuxRequest_SendCommand* _this = reinterpret_cast< TmuxRequest_SendCommand* >(object);
  (void)_this;
}
void TmuxRequest_SendCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxRequest_SendCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxRequest_SendCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxRequest.SendCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      command_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxRequest_SendCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxRequest.SendCommand.connection_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxRequest.SendCommand.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxRequest_SendCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxRequest.SendCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxRequest.SendCommand.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // optional string command = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxRequest.SendCommand.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxRequest.SendCommand)
  return target;
}

size_t TmuxRequest_SendCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxRequest.SendCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_id());
    }

    // optional string command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxRequest_SendCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxRequest_SendCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxRequest_SendCommand::GetClassData() const { return &_class_data_; }

void TmuxRequest_SendCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxRequest_SendCommand *>(to)->MergeFrom(
      static_cast<const TmuxRequest_SendCommand &>(from));
}


void TmuxRequest_SendCommand::MergeFrom(const TmuxRequest_SendCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxRequest.SendCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_id(from._internal_connection_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_command(from._internal_command());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxRequest_SendCommand::CopyFrom(const TmuxRequest_SendCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxRequest.SendCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxRequest_SendCommand::IsInitialized() const {
  return true;
}

void TmuxRequest_SendCommand::InternalSwap(TmuxRequest_SendCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_id_, lhs_arena,
      &other->connection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxRequest_SendCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[54]);
}

// ===================================================================

class TmuxRequest_SetWindowVisible::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxRequest_SetWindowVisible>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TmuxRequest_SetWindowVisible::TmuxRequest_SetWindowVisible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxRequest.SetWindowVisible)
}
TmuxRequest_SetWindowVisible::TmuxRequest_SetWindowVisible(const TmuxRequest_SetWindowVisible& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_id()) {
    connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_id(), 
      GetArenaForAllocation());
  }
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxRequest.SetWindowVisible)
}

inline void TmuxRequest_SetWindowVisible::SharedCtor() {
connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
visible_ = false;
}

TmuxRequest_SetWindowVisible::~TmuxRequest_SetWindowVisible() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxRequest.SetWindowVisible)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxRequest_SetWindowVisible::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmuxRequest_SetWindowVisible::ArenaDtor(void* object) {
  TmuxRequest_SetWindowVisible* _this = reinterpret_cast< TmuxRequest_SetWindowVisible* >(object);
  (void)_this;
}
void TmuxRequest_SetWindowVisible::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxRequest_SetWindowVisible::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxRequest_SetWindowVisible::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxRequest.SetWindowVisible)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      window_id_.ClearNonDefaultToEmpty();
    }
  }
  visible_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxRequest_SetWindowVisible::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxRequest.SetWindowVisible.connection_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxRequest.SetWindowVisible.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxRequest_SetWindowVisible::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxRequest.SetWindowVisible)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxRequest.SetWindowVisible.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // optional string window_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxRequest.SetWindowVisible.window_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_window_id(), target);
  }

  // optional bool visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxRequest.SetWindowVisible)
  return target;
}

size_t TmuxRequest_SetWindowVisible::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxRequest.SetWindowVisible)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_id());
    }

    // optional string window_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
    }

    // optional bool visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxRequest_SetWindowVisible::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxRequest_SetWindowVisible::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxRequest_SetWindowVisible::GetClassData() const { return &_class_data_; }

void TmuxRequest_SetWindowVisible::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxRequest_SetWindowVisible *>(to)->MergeFrom(
      static_cast<const TmuxRequest_SetWindowVisible &>(from));
}


void TmuxRequest_SetWindowVisible::MergeFrom(const TmuxRequest_SetWindowVisible& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxRequest.SetWindowVisible)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_id(from._internal_connection_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_window_id(from._internal_window_id());
    }
    if (cached_has_bits & 0x00000004u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxRequest_SetWindowVisible::CopyFrom(const TmuxRequest_SetWindowVisible& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxRequest.SetWindowVisible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxRequest_SetWindowVisible::IsInitialized() const {
  return true;
}

void TmuxRequest_SetWindowVisible::InternalSwap(TmuxRequest_SetWindowVisible* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_id_, lhs_arena,
      &other->connection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
  swap(visible_, other->visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxRequest_SetWindowVisible::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[55]);
}

// ===================================================================

class TmuxRequest_CreateWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxRequest_CreateWindow>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TmuxRequest_CreateWindow::TmuxRequest_CreateWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxRequest.CreateWindow)
}
TmuxRequest_CreateWindow::TmuxRequest_CreateWindow(const TmuxRequest_CreateWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_id()) {
    connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_id(), 
      GetArenaForAllocation());
  }
  affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    affinity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_affinity()) {
    affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affinity(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxRequest.CreateWindow)
}

inline void TmuxRequest_CreateWindow::SharedCtor() {
connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  affinity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TmuxRequest_CreateWindow::~TmuxRequest_CreateWindow() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxRequest.CreateWindow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxRequest_CreateWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affinity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmuxRequest_CreateWindow::ArenaDtor(void* object) {
  TmuxRequest_CreateWindow* _this = reinterpret_cast< TmuxRequest_CreateWindow* >(object);
  (void)_this;
}
void TmuxRequest_CreateWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxRequest_CreateWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxRequest_CreateWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxRequest.CreateWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      affinity_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxRequest_CreateWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxRequest.CreateWindow.connection_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string affinity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_affinity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxRequest.CreateWindow.affinity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxRequest_CreateWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxRequest.CreateWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxRequest.CreateWindow.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // optional string affinity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_affinity().data(), static_cast<int>(this->_internal_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxRequest.CreateWindow.affinity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_affinity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxRequest.CreateWindow)
  return target;
}

size_t TmuxRequest_CreateWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxRequest.CreateWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_id());
    }

    // optional string affinity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_affinity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxRequest_CreateWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxRequest_CreateWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxRequest_CreateWindow::GetClassData() const { return &_class_data_; }

void TmuxRequest_CreateWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxRequest_CreateWindow *>(to)->MergeFrom(
      static_cast<const TmuxRequest_CreateWindow &>(from));
}


void TmuxRequest_CreateWindow::MergeFrom(const TmuxRequest_CreateWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxRequest.CreateWindow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_id(from._internal_connection_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_affinity(from._internal_affinity());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxRequest_CreateWindow::CopyFrom(const TmuxRequest_CreateWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxRequest.CreateWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxRequest_CreateWindow::IsInitialized() const {
  return true;
}

void TmuxRequest_CreateWindow::InternalSwap(TmuxRequest_CreateWindow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_id_, lhs_arena,
      &other->connection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affinity_, lhs_arena,
      &other->affinity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxRequest_CreateWindow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[56]);
}

// ===================================================================

class TmuxRequest::_Internal {
 public:
  static const ::iterm2::TmuxRequest_ListConnections& list_connections(const TmuxRequest* msg);
  static const ::iterm2::TmuxRequest_SendCommand& send_command(const TmuxRequest* msg);
  static const ::iterm2::TmuxRequest_SetWindowVisible& set_window_visible(const TmuxRequest* msg);
  static const ::iterm2::TmuxRequest_CreateWindow& create_window(const TmuxRequest* msg);
};

const ::iterm2::TmuxRequest_ListConnections&
TmuxRequest::_Internal::list_connections(const TmuxRequest* msg) {
  return *msg->payload_.list_connections_;
}
const ::iterm2::TmuxRequest_SendCommand&
TmuxRequest::_Internal::send_command(const TmuxRequest* msg) {
  return *msg->payload_.send_command_;
}
const ::iterm2::TmuxRequest_SetWindowVisible&
TmuxRequest::_Internal::set_window_visible(const TmuxRequest* msg) {
  return *msg->payload_.set_window_visible_;
}
const ::iterm2::TmuxRequest_CreateWindow&
TmuxRequest::_Internal::create_window(const TmuxRequest* msg) {
  return *msg->payload_.create_window_;
}
void TmuxRequest::set_allocated_list_connections(::iterm2::TmuxRequest_ListConnections* list_connections) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (list_connections) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxRequest_ListConnections>::GetOwningArena(list_connections);
    if (message_arena != submessage_arena) {
      list_connections = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_connections, submessage_arena);
    }
    set_has_list_connections();
    payload_.list_connections_ = list_connections;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.list_connections)
}
void TmuxRequest::set_allocated_send_command(::iterm2::TmuxRequest_SendCommand* send_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (send_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxRequest_SendCommand>::GetOwningArena(send_command);
    if (message_arena != submessage_arena) {
      send_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_command, submessage_arena);
    }
    set_has_send_command();
    payload_.send_command_ = send_command;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.send_command)
}
void TmuxRequest::set_allocated_set_window_visible(::iterm2::TmuxRequest_SetWindowVisible* set_window_visible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (set_window_visible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxRequest_SetWindowVisible>::GetOwningArena(set_window_visible);
    if (message_arena != submessage_arena) {
      set_window_visible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_window_visible, submessage_arena);
    }
    set_has_set_window_visible();
    payload_.set_window_visible_ = set_window_visible;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.set_window_visible)
}
void TmuxRequest::set_allocated_create_window(::iterm2::TmuxRequest_CreateWindow* create_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxRequest_CreateWindow>::GetOwningArena(create_window);
    if (message_arena != submessage_arena) {
      create_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_window, submessage_arena);
    }
    set_has_create_window();
    payload_.create_window_ = create_window;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxRequest.create_window)
}
TmuxRequest::TmuxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxRequest)
}
TmuxRequest::TmuxRequest(const TmuxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kListConnections: {
      _internal_mutable_list_connections()->::iterm2::TmuxRequest_ListConnections::MergeFrom(from._internal_list_connections());
      break;
    }
    case kSendCommand: {
      _internal_mutable_send_command()->::iterm2::TmuxRequest_SendCommand::MergeFrom(from._internal_send_command());
      break;
    }
    case kSetWindowVisible: {
      _internal_mutable_set_window_visible()->::iterm2::TmuxRequest_SetWindowVisible::MergeFrom(from._internal_set_window_visible());
      break;
    }
    case kCreateWindow: {
      _internal_mutable_create_window()->::iterm2::TmuxRequest_CreateWindow::MergeFrom(from._internal_create_window());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxRequest)
}

inline void TmuxRequest::SharedCtor() {
clear_has_payload();
}

TmuxRequest::~TmuxRequest() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void TmuxRequest::ArenaDtor(void* object) {
  TmuxRequest* _this = reinterpret_cast< TmuxRequest* >(object);
  (void)_this;
}
void TmuxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.TmuxRequest)
  switch (payload_case()) {
    case kListConnections: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.list_connections_;
      }
      break;
    }
    case kSendCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.send_command_;
      }
      break;
    }
    case kSetWindowVisible: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.set_window_visible_;
      }
      break;
    }
    case kCreateWindow: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_window_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TmuxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.TmuxRequest.ListConnections list_connections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_connections(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxRequest.SendCommand send_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxRequest.SetWindowVisible set_window_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_window_visible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxRequest.CreateWindow create_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (payload_case()) {
    case kListConnections: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::list_connections(this), target, stream);
      break;
    }
    case kSendCommand: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::send_command(this), target, stream);
      break;
    }
    case kSetWindowVisible: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::set_window_visible(this), target, stream);
      break;
    }
    case kCreateWindow: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::create_window(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxRequest)
  return target;
}

size_t TmuxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .iterm2.TmuxRequest.ListConnections list_connections = 1;
    case kListConnections: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.list_connections_);
      break;
    }
    // .iterm2.TmuxRequest.SendCommand send_command = 2;
    case kSendCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.send_command_);
      break;
    }
    // .iterm2.TmuxRequest.SetWindowVisible set_window_visible = 3;
    case kSetWindowVisible: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.set_window_visible_);
      break;
    }
    // .iterm2.TmuxRequest.CreateWindow create_window = 4;
    case kCreateWindow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_window_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxRequest::GetClassData() const { return &_class_data_; }

void TmuxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxRequest *>(to)->MergeFrom(
      static_cast<const TmuxRequest &>(from));
}


void TmuxRequest::MergeFrom(const TmuxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kListConnections: {
      _internal_mutable_list_connections()->::iterm2::TmuxRequest_ListConnections::MergeFrom(from._internal_list_connections());
      break;
    }
    case kSendCommand: {
      _internal_mutable_send_command()->::iterm2::TmuxRequest_SendCommand::MergeFrom(from._internal_send_command());
      break;
    }
    case kSetWindowVisible: {
      _internal_mutable_set_window_visible()->::iterm2::TmuxRequest_SetWindowVisible::MergeFrom(from._internal_set_window_visible());
      break;
    }
    case kCreateWindow: {
      _internal_mutable_create_window()->::iterm2::TmuxRequest_CreateWindow::MergeFrom(from._internal_create_window());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxRequest::CopyFrom(const TmuxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxRequest::IsInitialized() const {
  return true;
}

void TmuxRequest::InternalSwap(TmuxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[57]);
}

// ===================================================================

class TmuxResponse_ListConnections_Connection::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxResponse_ListConnections_Connection>()._has_bits_);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owning_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TmuxResponse_ListConnections_Connection::TmuxResponse_ListConnections_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxResponse.ListConnections.Connection)
}
TmuxResponse_ListConnections_Connection::TmuxResponse_ListConnections_Connection(const TmuxResponse_ListConnections_Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_id()) {
    connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_id(), 
      GetArenaForAllocation());
  }
  owning_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owning_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_owning_session_id()) {
    owning_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owning_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxResponse.ListConnections.Connection)
}

inline void TmuxResponse_ListConnections_Connection::SharedCtor() {
connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
owning_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owning_session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TmuxResponse_ListConnections_Connection::~TmuxResponse_ListConnections_Connection() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxResponse.ListConnections.Connection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxResponse_ListConnections_Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owning_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmuxResponse_ListConnections_Connection::ArenaDtor(void* object) {
  TmuxResponse_ListConnections_Connection* _this = reinterpret_cast< TmuxResponse_ListConnections_Connection* >(object);
  (void)_this;
}
void TmuxResponse_ListConnections_Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxResponse_ListConnections_Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxResponse_ListConnections_Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxResponse.ListConnections.Connection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      owning_session_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxResponse_ListConnections_Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxResponse.ListConnections.Connection.connection_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string owning_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owning_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxResponse.ListConnections.Connection.owning_session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxResponse_ListConnections_Connection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxResponse.ListConnections.Connection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxResponse.ListConnections.Connection.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // optional string owning_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_owning_session_id().data(), static_cast<int>(this->_internal_owning_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxResponse.ListConnections.Connection.owning_session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owning_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxResponse.ListConnections.Connection)
  return target;
}

size_t TmuxResponse_ListConnections_Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxResponse.ListConnections.Connection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_id());
    }

    // optional string owning_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_owning_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxResponse_ListConnections_Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxResponse_ListConnections_Connection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxResponse_ListConnections_Connection::GetClassData() const { return &_class_data_; }

void TmuxResponse_ListConnections_Connection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxResponse_ListConnections_Connection *>(to)->MergeFrom(
      static_cast<const TmuxResponse_ListConnections_Connection &>(from));
}


void TmuxResponse_ListConnections_Connection::MergeFrom(const TmuxResponse_ListConnections_Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxResponse.ListConnections.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_id(from._internal_connection_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_owning_session_id(from._internal_owning_session_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxResponse_ListConnections_Connection::CopyFrom(const TmuxResponse_ListConnections_Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxResponse.ListConnections.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxResponse_ListConnections_Connection::IsInitialized() const {
  return true;
}

void TmuxResponse_ListConnections_Connection::InternalSwap(TmuxResponse_ListConnections_Connection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_id_, lhs_arena,
      &other->connection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owning_session_id_, lhs_arena,
      &other->owning_session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxResponse_ListConnections_Connection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[58]);
}

// ===================================================================

class TmuxResponse_ListConnections::_Internal {
 public:
};

TmuxResponse_ListConnections::TmuxResponse_ListConnections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  connections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxResponse.ListConnections)
}
TmuxResponse_ListConnections::TmuxResponse_ListConnections(const TmuxResponse_ListConnections& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxResponse.ListConnections)
}

inline void TmuxResponse_ListConnections::SharedCtor() {
}

TmuxResponse_ListConnections::~TmuxResponse_ListConnections() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxResponse.ListConnections)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxResponse_ListConnections::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TmuxResponse_ListConnections::ArenaDtor(void* object) {
  TmuxResponse_ListConnections* _this = reinterpret_cast< TmuxResponse_ListConnections* >(object);
  (void)_this;
}
void TmuxResponse_ListConnections::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxResponse_ListConnections::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxResponse_ListConnections::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxResponse.ListConnections)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxResponse_ListConnections::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.TmuxResponse.ListConnections.Connection connections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxResponse_ListConnections::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxResponse.ListConnections)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.TmuxResponse.ListConnections.Connection connections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_connections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxResponse.ListConnections)
  return target;
}

size_t TmuxResponse_ListConnections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxResponse.ListConnections)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.TmuxResponse.ListConnections.Connection connections = 1;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxResponse_ListConnections::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxResponse_ListConnections::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxResponse_ListConnections::GetClassData() const { return &_class_data_; }

void TmuxResponse_ListConnections::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxResponse_ListConnections *>(to)->MergeFrom(
      static_cast<const TmuxResponse_ListConnections &>(from));
}


void TmuxResponse_ListConnections::MergeFrom(const TmuxResponse_ListConnections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxResponse.ListConnections)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxResponse_ListConnections::CopyFrom(const TmuxResponse_ListConnections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxResponse.ListConnections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxResponse_ListConnections::IsInitialized() const {
  return true;
}

void TmuxResponse_ListConnections::InternalSwap(TmuxResponse_ListConnections* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  connections_.InternalSwap(&other->connections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxResponse_ListConnections::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[59]);
}

// ===================================================================

class TmuxResponse_SendCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxResponse_SendCommand>()._has_bits_);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TmuxResponse_SendCommand::TmuxResponse_SendCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxResponse.SendCommand)
}
TmuxResponse_SendCommand::TmuxResponse_SendCommand(const TmuxResponse_SendCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output()) {
    output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxResponse.SendCommand)
}

inline void TmuxResponse_SendCommand::SharedCtor() {
output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TmuxResponse_SendCommand::~TmuxResponse_SendCommand() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxResponse.SendCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxResponse_SendCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmuxResponse_SendCommand::ArenaDtor(void* object) {
  TmuxResponse_SendCommand* _this = reinterpret_cast< TmuxResponse_SendCommand* >(object);
  (void)_this;
}
void TmuxResponse_SendCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxResponse_SendCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxResponse_SendCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxResponse.SendCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    output_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxResponse_SendCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxResponse.SendCommand.output");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxResponse_SendCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxResponse.SendCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxResponse.SendCommand.output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxResponse.SendCommand)
  return target;
}

size_t TmuxResponse_SendCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxResponse.SendCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string output = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxResponse_SendCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxResponse_SendCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxResponse_SendCommand::GetClassData() const { return &_class_data_; }

void TmuxResponse_SendCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxResponse_SendCommand *>(to)->MergeFrom(
      static_cast<const TmuxResponse_SendCommand &>(from));
}


void TmuxResponse_SendCommand::MergeFrom(const TmuxResponse_SendCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxResponse.SendCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_output()) {
    _internal_set_output(from._internal_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxResponse_SendCommand::CopyFrom(const TmuxResponse_SendCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxResponse.SendCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxResponse_SendCommand::IsInitialized() const {
  return true;
}

void TmuxResponse_SendCommand::InternalSwap(TmuxResponse_SendCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_, lhs_arena,
      &other->output_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxResponse_SendCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[60]);
}

// ===================================================================

class TmuxResponse_SetWindowVisible::_Internal {
 public:
};

TmuxResponse_SetWindowVisible::TmuxResponse_SetWindowVisible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxResponse.SetWindowVisible)
}
TmuxResponse_SetWindowVisible::TmuxResponse_SetWindowVisible(const TmuxResponse_SetWindowVisible& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxResponse.SetWindowVisible)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxResponse_SetWindowVisible::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxResponse_SetWindowVisible::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TmuxResponse_SetWindowVisible::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[61]);
}

// ===================================================================

class TmuxResponse_CreateWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxResponse_CreateWindow>()._has_bits_);
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TmuxResponse_CreateWindow::TmuxResponse_CreateWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxResponse.CreateWindow)
}
TmuxResponse_CreateWindow::TmuxResponse_CreateWindow(const TmuxResponse_CreateWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tab_id()) {
    tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tab_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxResponse.CreateWindow)
}

inline void TmuxResponse_CreateWindow::SharedCtor() {
tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TmuxResponse_CreateWindow::~TmuxResponse_CreateWindow() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxResponse.CreateWindow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxResponse_CreateWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmuxResponse_CreateWindow::ArenaDtor(void* object) {
  TmuxResponse_CreateWindow* _this = reinterpret_cast< TmuxResponse_CreateWindow* >(object);
  (void)_this;
}
void TmuxResponse_CreateWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxResponse_CreateWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxResponse_CreateWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxResponse.CreateWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tab_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxResponse_CreateWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tab_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TmuxResponse.CreateWindow.tab_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxResponse_CreateWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxResponse.CreateWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tab_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tab_id().data(), static_cast<int>(this->_internal_tab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TmuxResponse.CreateWindow.tab_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tab_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxResponse.CreateWindow)
  return target;
}

size_t TmuxResponse_CreateWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxResponse.CreateWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tab_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tab_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxResponse_CreateWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxResponse_CreateWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxResponse_CreateWindow::GetClassData() const { return &_class_data_; }

void TmuxResponse_CreateWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxResponse_CreateWindow *>(to)->MergeFrom(
      static_cast<const TmuxResponse_CreateWindow &>(from));
}


void TmuxResponse_CreateWindow::MergeFrom(const TmuxResponse_CreateWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxResponse.CreateWindow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tab_id()) {
    _internal_set_tab_id(from._internal_tab_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxResponse_CreateWindow::CopyFrom(const TmuxResponse_CreateWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxResponse.CreateWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxResponse_CreateWindow::IsInitialized() const {
  return true;
}

void TmuxResponse_CreateWindow::InternalSwap(TmuxResponse_CreateWindow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tab_id_, lhs_arena,
      &other->tab_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxResponse_CreateWindow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[62]);
}

// ===================================================================

class TmuxResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TmuxResponse>()._has_bits_);
  static const ::iterm2::TmuxResponse_ListConnections& list_connections(const TmuxResponse* msg);
  static const ::iterm2::TmuxResponse_SendCommand& send_command(const TmuxResponse* msg);
  static const ::iterm2::TmuxResponse_SetWindowVisible& set_window_visible(const TmuxResponse* msg);
  static const ::iterm2::TmuxResponse_CreateWindow& create_window(const TmuxResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::TmuxResponse_ListConnections&
TmuxResponse::_Internal::list_connections(const TmuxResponse* msg) {
  return *msg->payload_.list_connections_;
}
const ::iterm2::TmuxResponse_SendCommand&
TmuxResponse::_Internal::send_command(const TmuxResponse* msg) {
  return *msg->payload_.send_command_;
}
const ::iterm2::TmuxResponse_SetWindowVisible&
TmuxResponse::_Internal::set_window_visible(const TmuxResponse* msg) {
  return *msg->payload_.set_window_visible_;
}
const ::iterm2::TmuxResponse_CreateWindow&
TmuxResponse::_Internal::create_window(const TmuxResponse* msg) {
  return *msg->payload_.create_window_;
}
void TmuxResponse::set_allocated_list_connections(::iterm2::TmuxResponse_ListConnections* list_connections) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (list_connections) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxResponse_ListConnections>::GetOwningArena(list_connections);
    if (message_arena != submessage_arena) {
      list_connections = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_connections, submessage_arena);
    }
    set_has_list_connections();
    payload_.list_connections_ = list_connections;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.list_connections)
}
void TmuxResponse::set_allocated_send_command(::iterm2::TmuxResponse_SendCommand* send_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (send_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxResponse_SendCommand>::GetOwningArena(send_command);
    if (message_arena != submessage_arena) {
      send_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_command, submessage_arena);
    }
    set_has_send_command();
    payload_.send_command_ = send_command;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.send_command)
}
void TmuxResponse::set_allocated_set_window_visible(::iterm2::TmuxResponse_SetWindowVisible* set_window_visible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (set_window_visible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxResponse_SetWindowVisible>::GetOwningArena(set_window_visible);
    if (message_arena != submessage_arena) {
      set_window_visible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_window_visible, submessage_arena);
    }
    set_has_set_window_visible();
    payload_.set_window_visible_ = set_window_visible;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.set_window_visible)
}
void TmuxResponse::set_allocated_create_window(::iterm2::TmuxResponse_CreateWindow* create_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::TmuxResponse_CreateWindow>::GetOwningArena(create_window);
    if (message_arena != submessage_arena) {
      create_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_window, submessage_arena);
    }
    set_has_create_window();
    payload_.create_window_ = create_window;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.TmuxResponse.create_window)
}
TmuxResponse::TmuxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TmuxResponse)
}
TmuxResponse::TmuxResponse(const TmuxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kListConnections: {
      _internal_mutable_list_connections()->::iterm2::TmuxResponse_ListConnections::MergeFrom(from._internal_list_connections());
      break;
    }
    case kSendCommand: {
      _internal_mutable_send_command()->::iterm2::TmuxResponse_SendCommand::MergeFrom(from._internal_send_command());
      break;
    }
    case kSetWindowVisible: {
      _internal_mutable_set_window_visible()->::iterm2::TmuxResponse_SetWindowVisible::MergeFrom(from._internal_set_window_visible());
      break;
    }
    case kCreateWindow: {
      _internal_mutable_create_window()->::iterm2::TmuxResponse_CreateWindow::MergeFrom(from._internal_create_window());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TmuxResponse)
}

inline void TmuxResponse::SharedCtor() {
status_ = 0;
clear_has_payload();
}

TmuxResponse::~TmuxResponse() {
  // @@protoc_insertion_point(destructor:iterm2.TmuxResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TmuxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void TmuxResponse::ArenaDtor(void* object) {
  TmuxResponse* _this = reinterpret_cast< TmuxResponse* >(object);
  (void)_this;
}
void TmuxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmuxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TmuxResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.TmuxResponse)
  switch (payload_case()) {
    case kListConnections: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.list_connections_;
      }
      break;
    }
    case kSendCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.send_command_;
      }
      break;
    }
    case kSetWindowVisible: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.set_window_visible_;
      }
      break;
    }
    case kCreateWindow: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.create_window_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TmuxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TmuxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  clear_payload();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmuxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.TmuxResponse.ListConnections list_connections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_connections(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxResponse.SendCommand send_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxResponse.SetWindowVisible set_window_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_window_visible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.TmuxResponse.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::TmuxResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::TmuxResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .iterm2.TmuxResponse.CreateWindow create_window = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TmuxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TmuxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (payload_case()) {
    case kListConnections: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::list_connections(this), target, stream);
      break;
    }
    case kSendCommand: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::send_command(this), target, stream);
      break;
    }
    case kSetWindowVisible: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::set_window_visible(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .iterm2.TmuxResponse.Status status = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // .iterm2.TmuxResponse.CreateWindow create_window = 5;
  if (_internal_has_create_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::create_window(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TmuxResponse)
  return target;
}

size_t TmuxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TmuxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.TmuxResponse.Status status = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (payload_case()) {
    // .iterm2.TmuxResponse.ListConnections list_connections = 1;
    case kListConnections: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.list_connections_);
      break;
    }
    // .iterm2.TmuxResponse.SendCommand send_command = 2;
    case kSendCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.send_command_);
      break;
    }
    // .iterm2.TmuxResponse.SetWindowVisible set_window_visible = 3;
    case kSetWindowVisible: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.set_window_visible_);
      break;
    }
    // .iterm2.TmuxResponse.CreateWindow create_window = 5;
    case kCreateWindow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.create_window_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TmuxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TmuxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TmuxResponse::GetClassData() const { return &_class_data_; }

void TmuxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TmuxResponse *>(to)->MergeFrom(
      static_cast<const TmuxResponse &>(from));
}


void TmuxResponse::MergeFrom(const TmuxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TmuxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  switch (from.payload_case()) {
    case kListConnections: {
      _internal_mutable_list_connections()->::iterm2::TmuxResponse_ListConnections::MergeFrom(from._internal_list_connections());
      break;
    }
    case kSendCommand: {
      _internal_mutable_send_command()->::iterm2::TmuxResponse_SendCommand::MergeFrom(from._internal_send_command());
      break;
    }
    case kSetWindowVisible: {
      _internal_mutable_set_window_visible()->::iterm2::TmuxResponse_SetWindowVisible::MergeFrom(from._internal_set_window_visible());
      break;
    }
    case kCreateWindow: {
      _internal_mutable_create_window()->::iterm2::TmuxResponse_CreateWindow::MergeFrom(from._internal_create_window());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TmuxResponse::CopyFrom(const TmuxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TmuxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmuxResponse::IsInitialized() const {
  return true;
}

void TmuxResponse::InternalSwap(TmuxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmuxResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[63]);
}

// ===================================================================

class GetBroadcastDomainsRequest::_Internal {
 public:
};

GetBroadcastDomainsRequest::GetBroadcastDomainsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.GetBroadcastDomainsRequest)
}
GetBroadcastDomainsRequest::GetBroadcastDomainsRequest(const GetBroadcastDomainsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.GetBroadcastDomainsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBroadcastDomainsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBroadcastDomainsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBroadcastDomainsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[64]);
}

// ===================================================================

class BroadcastDomain::_Internal {
 public:
};

BroadcastDomain::BroadcastDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.BroadcastDomain)
}
BroadcastDomain::BroadcastDomain(const BroadcastDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_ids_(from.session_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.BroadcastDomain)
}

inline void BroadcastDomain::SharedCtor() {
}

BroadcastDomain::~BroadcastDomain() {
  // @@protoc_insertion_point(destructor:iterm2.BroadcastDomain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BroadcastDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BroadcastDomain::ArenaDtor(void* object) {
  BroadcastDomain* _this = reinterpret_cast< BroadcastDomain* >(object);
  (void)_this;
}
void BroadcastDomain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BroadcastDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.BroadcastDomain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastDomain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string session_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_session_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.BroadcastDomain.session_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastDomain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.BroadcastDomain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string session_ids = 1;
  for (int i = 0, n = this->_internal_session_ids_size(); i < n; i++) {
    const auto& s = this->_internal_session_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.BroadcastDomain.session_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.BroadcastDomain)
  return target;
}

size_t BroadcastDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.BroadcastDomain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string session_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(session_ids_.size());
  for (int i = 0, n = session_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      session_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastDomain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BroadcastDomain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastDomain::GetClassData() const { return &_class_data_; }

void BroadcastDomain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BroadcastDomain *>(to)->MergeFrom(
      static_cast<const BroadcastDomain &>(from));
}


void BroadcastDomain::MergeFrom(const BroadcastDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.BroadcastDomain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  session_ids_.MergeFrom(from.session_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastDomain::CopyFrom(const BroadcastDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.BroadcastDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastDomain::IsInitialized() const {
  return true;
}

void BroadcastDomain::InternalSwap(BroadcastDomain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  session_ids_.InternalSwap(&other->session_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastDomain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[65]);
}

// ===================================================================

class GetBroadcastDomainsResponse::_Internal {
 public:
};

GetBroadcastDomainsResponse::GetBroadcastDomainsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  broadcast_domains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetBroadcastDomainsResponse)
}
GetBroadcastDomainsResponse::GetBroadcastDomainsResponse(const GetBroadcastDomainsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broadcast_domains_(from.broadcast_domains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.GetBroadcastDomainsResponse)
}

inline void GetBroadcastDomainsResponse::SharedCtor() {
}

GetBroadcastDomainsResponse::~GetBroadcastDomainsResponse() {
  // @@protoc_insertion_point(destructor:iterm2.GetBroadcastDomainsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBroadcastDomainsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBroadcastDomainsResponse::ArenaDtor(void* object) {
  GetBroadcastDomainsResponse* _this = reinterpret_cast< GetBroadcastDomainsResponse* >(object);
  (void)_this;
}
void GetBroadcastDomainsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBroadcastDomainsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBroadcastDomainsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetBroadcastDomainsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_domains_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBroadcastDomainsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcast_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBroadcastDomainsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetBroadcastDomainsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcast_domains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcast_domains(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetBroadcastDomainsResponse)
  return target;
}

size_t GetBroadcastDomainsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetBroadcastDomainsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  total_size += 1UL * this->_internal_broadcast_domains_size();
  for (const auto& msg : this->broadcast_domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBroadcastDomainsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBroadcastDomainsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBroadcastDomainsResponse::GetClassData() const { return &_class_data_; }

void GetBroadcastDomainsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBroadcastDomainsResponse *>(to)->MergeFrom(
      static_cast<const GetBroadcastDomainsResponse &>(from));
}


void GetBroadcastDomainsResponse::MergeFrom(const GetBroadcastDomainsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetBroadcastDomainsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  broadcast_domains_.MergeFrom(from.broadcast_domains_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBroadcastDomainsResponse::CopyFrom(const GetBroadcastDomainsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetBroadcastDomainsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBroadcastDomainsResponse::IsInitialized() const {
  return true;
}

void GetBroadcastDomainsResponse::InternalSwap(GetBroadcastDomainsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  broadcast_domains_.InternalSwap(&other->broadcast_domains_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBroadcastDomainsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[66]);
}

// ===================================================================

class SetTabLayoutRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTabLayoutRequest>()._has_bits_);
  static const ::iterm2::SplitTreeNode& root(const SetTabLayoutRequest* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::SplitTreeNode&
SetTabLayoutRequest::_Internal::root(const SetTabLayoutRequest* msg) {
  return *msg->root_;
}
SetTabLayoutRequest::SetTabLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetTabLayoutRequest)
}
SetTabLayoutRequest::SetTabLayoutRequest(const SetTabLayoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tab_id()) {
    tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tab_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_root()) {
    root_ = new ::iterm2::SplitTreeNode(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SetTabLayoutRequest)
}

inline void SetTabLayoutRequest::SharedCtor() {
tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
root_ = nullptr;
}

SetTabLayoutRequest::~SetTabLayoutRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SetTabLayoutRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTabLayoutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete root_;
}

void SetTabLayoutRequest::ArenaDtor(void* object) {
  SetTabLayoutRequest* _this = reinterpret_cast< SetTabLayoutRequest* >(object);
  (void)_this;
}
void SetTabLayoutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTabLayoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTabLayoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetTabLayoutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tab_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(root_ != nullptr);
      root_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTabLayoutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SplitTreeNode root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetTabLayoutRequest.tab_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTabLayoutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetTabLayoutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SplitTreeNode root = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // optional string tab_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tab_id().data(), static_cast<int>(this->_internal_tab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetTabLayoutRequest.tab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tab_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetTabLayoutRequest)
  return target;
}

size_t SetTabLayoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetTabLayoutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tab_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tab_id());
    }

    // optional .iterm2.SplitTreeNode root = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTabLayoutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTabLayoutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTabLayoutRequest::GetClassData() const { return &_class_data_; }

void SetTabLayoutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTabLayoutRequest *>(to)->MergeFrom(
      static_cast<const SetTabLayoutRequest &>(from));
}


void SetTabLayoutRequest::MergeFrom(const SetTabLayoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetTabLayoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tab_id(from._internal_tab_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_root()->::iterm2::SplitTreeNode::MergeFrom(from._internal_root());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTabLayoutRequest::CopyFrom(const SetTabLayoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetTabLayoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTabLayoutRequest::IsInitialized() const {
  return true;
}

void SetTabLayoutRequest::InternalSwap(SetTabLayoutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tab_id_, lhs_arena,
      &other->tab_id_, rhs_arena
  );
  swap(root_, other->root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTabLayoutRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[67]);
}

// ===================================================================

class SetTabLayoutResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTabLayoutResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetTabLayoutResponse::SetTabLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetTabLayoutResponse)
}
SetTabLayoutResponse::SetTabLayoutResponse(const SetTabLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SetTabLayoutResponse)
}

inline void SetTabLayoutResponse::SharedCtor() {
status_ = 0;
}

SetTabLayoutResponse::~SetTabLayoutResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SetTabLayoutResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTabLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTabLayoutResponse::ArenaDtor(void* object) {
  SetTabLayoutResponse* _this = reinterpret_cast< SetTabLayoutResponse* >(object);
  (void)_this;
}
void SetTabLayoutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTabLayoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTabLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetTabLayoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTabLayoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SetTabLayoutResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SetTabLayoutResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SetTabLayoutResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTabLayoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetTabLayoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SetTabLayoutResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetTabLayoutResponse)
  return target;
}

size_t SetTabLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetTabLayoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.SetTabLayoutResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTabLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTabLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTabLayoutResponse::GetClassData() const { return &_class_data_; }

void SetTabLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTabLayoutResponse *>(to)->MergeFrom(
      static_cast<const SetTabLayoutResponse &>(from));
}


void SetTabLayoutResponse::MergeFrom(const SetTabLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetTabLayoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTabLayoutResponse::CopyFrom(const SetTabLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetTabLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTabLayoutResponse::IsInitialized() const {
  return true;
}

void SetTabLayoutResponse::InternalSwap(SetTabLayoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTabLayoutResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[68]);
}

// ===================================================================

class MenuItemRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MenuItemRequest>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_query_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MenuItemRequest::MenuItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.MenuItemRequest)
}
MenuItemRequest::MenuItemRequest(const MenuItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  query_only_ = from.query_only_;
  // @@protoc_insertion_point(copy_constructor:iterm2.MenuItemRequest)
}

inline void MenuItemRequest::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_only_ = false;
}

MenuItemRequest::~MenuItemRequest() {
  // @@protoc_insertion_point(destructor:iterm2.MenuItemRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MenuItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MenuItemRequest::ArenaDtor(void* object) {
  MenuItemRequest* _this = reinterpret_cast< MenuItemRequest* >(object);
  (void)_this;
}
void MenuItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MenuItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MenuItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.MenuItemRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  query_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MenuItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.MenuItemRequest.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool query_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_query_only(&has_bits);
          query_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MenuItemRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.MenuItemRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.MenuItemRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional bool query_only = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_query_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.MenuItemRequest)
  return target;
}

size_t MenuItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.MenuItemRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional bool query_only = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MenuItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MenuItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MenuItemRequest::GetClassData() const { return &_class_data_; }

void MenuItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MenuItemRequest *>(to)->MergeFrom(
      static_cast<const MenuItemRequest &>(from));
}


void MenuItemRequest::MergeFrom(const MenuItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.MenuItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      query_only_ = from.query_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MenuItemRequest::CopyFrom(const MenuItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.MenuItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuItemRequest::IsInitialized() const {
  return true;
}

void MenuItemRequest::InternalSwap(MenuItemRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  swap(query_only_, other->query_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MenuItemRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[69]);
}

// ===================================================================

class MenuItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MenuItemResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_checked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MenuItemResponse::MenuItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.MenuItemResponse)
}
MenuItemResponse::MenuItemResponse(const MenuItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&status_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:iterm2.MenuItemResponse)
}

inline void MenuItemResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&status_)) + sizeof(enabled_));
}

MenuItemResponse::~MenuItemResponse() {
  // @@protoc_insertion_point(destructor:iterm2.MenuItemResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MenuItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MenuItemResponse::ArenaDtor(void* object) {
  MenuItemResponse* _this = reinterpret_cast< MenuItemResponse* >(object);
  (void)_this;
}
void MenuItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MenuItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MenuItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.MenuItemResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&status_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MenuItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.MenuItemResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::MenuItemResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::MenuItemResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool checked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_checked(&has_bits);
          checked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MenuItemResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.MenuItemResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.MenuItemResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional bool checked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_checked(), target);
  }

  // optional bool enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.MenuItemResponse)
  return target;
}

size_t MenuItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.MenuItemResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .iterm2.MenuItemResponse.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional bool checked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MenuItemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MenuItemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MenuItemResponse::GetClassData() const { return &_class_data_; }

void MenuItemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MenuItemResponse *>(to)->MergeFrom(
      static_cast<const MenuItemResponse &>(from));
}


void MenuItemResponse::MergeFrom(const MenuItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.MenuItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      checked_ = from.checked_;
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MenuItemResponse::CopyFrom(const MenuItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.MenuItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuItemResponse::IsInitialized() const {
  return true;
}

void MenuItemResponse::InternalSwap(MenuItemResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MenuItemResponse, enabled_)
      + sizeof(MenuItemResponse::enabled_)
      - PROTOBUF_FIELD_OFFSET(MenuItemResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MenuItemResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[70]);
}

// ===================================================================

class RestartSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RestartSessionRequest>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_only_if_exited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RestartSessionRequest::RestartSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RestartSessionRequest)
}
RestartSessionRequest::RestartSessionRequest(const RestartSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  only_if_exited_ = from.only_if_exited_;
  // @@protoc_insertion_point(copy_constructor:iterm2.RestartSessionRequest)
}

inline void RestartSessionRequest::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
only_if_exited_ = false;
}

RestartSessionRequest::~RestartSessionRequest() {
  // @@protoc_insertion_point(destructor:iterm2.RestartSessionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RestartSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestartSessionRequest::ArenaDtor(void* object) {
  RestartSessionRequest* _this = reinterpret_cast< RestartSessionRequest* >(object);
  (void)_this;
}
void RestartSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestartSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestartSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RestartSessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmpty();
  }
  only_if_exited_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestartSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RestartSessionRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_if_exited = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_only_if_exited(&has_bits);
          only_if_exited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RestartSessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RestartSessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RestartSessionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // optional bool only_if_exited = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_only_if_exited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RestartSessionRequest)
  return target;
}

size_t RestartSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RestartSessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional bool only_if_exited = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestartSessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RestartSessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestartSessionRequest::GetClassData() const { return &_class_data_; }

void RestartSessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RestartSessionRequest *>(to)->MergeFrom(
      static_cast<const RestartSessionRequest &>(from));
}


void RestartSessionRequest::MergeFrom(const RestartSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RestartSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      only_if_exited_ = from.only_if_exited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RestartSessionRequest::CopyFrom(const RestartSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RestartSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartSessionRequest::IsInitialized() const {
  return true;
}

void RestartSessionRequest::InternalSwap(RestartSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  swap(only_if_exited_, other->only_if_exited_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartSessionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[71]);
}

// ===================================================================

class RestartSessionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RestartSessionResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RestartSessionResponse::RestartSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RestartSessionResponse)
}
RestartSessionResponse::RestartSessionResponse(const RestartSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.RestartSessionResponse)
}

inline void RestartSessionResponse::SharedCtor() {
status_ = 0;
}

RestartSessionResponse::~RestartSessionResponse() {
  // @@protoc_insertion_point(destructor:iterm2.RestartSessionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RestartSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RestartSessionResponse::ArenaDtor(void* object) {
  RestartSessionResponse* _this = reinterpret_cast< RestartSessionResponse* >(object);
  (void)_this;
}
void RestartSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestartSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestartSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RestartSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestartSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.RestartSessionResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::RestartSessionResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::RestartSessionResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RestartSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RestartSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.RestartSessionResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RestartSessionResponse)
  return target;
}

size_t RestartSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RestartSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.RestartSessionResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestartSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RestartSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestartSessionResponse::GetClassData() const { return &_class_data_; }

void RestartSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RestartSessionResponse *>(to)->MergeFrom(
      static_cast<const RestartSessionResponse &>(from));
}


void RestartSessionResponse::MergeFrom(const RestartSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RestartSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RestartSessionResponse::CopyFrom(const RestartSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RestartSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartSessionResponse::IsInitialized() const {
  return true;
}

void RestartSessionResponse::InternalSwap(RestartSessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartSessionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[72]);
}

// ===================================================================

class ServerOriginatedRPCResultRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerOriginatedRPCResultRequest>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerOriginatedRPCResultRequest::ServerOriginatedRPCResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ServerOriginatedRPCResultRequest)
}
ServerOriginatedRPCResultRequest::ServerOriginatedRPCResultRequest(const ServerOriginatedRPCResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  clear_has_result();
  switch (from.result_case()) {
    case kJsonException: {
      _internal_set_json_exception(from._internal_json_exception());
      break;
    }
    case kJsonValue: {
      _internal_set_json_value(from._internal_json_value());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ServerOriginatedRPCResultRequest)
}

inline void ServerOriginatedRPCResultRequest::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_result();
}

ServerOriginatedRPCResultRequest::~ServerOriginatedRPCResultRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ServerOriginatedRPCResultRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerOriginatedRPCResultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_result()) {
    clear_result();
  }
}

void ServerOriginatedRPCResultRequest::ArenaDtor(void* object) {
  ServerOriginatedRPCResultRequest* _this = reinterpret_cast< ServerOriginatedRPCResultRequest* >(object);
  (void)_this;
}
void ServerOriginatedRPCResultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerOriginatedRPCResultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerOriginatedRPCResultRequest::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.ServerOriginatedRPCResultRequest)
  switch (result_case()) {
    case kJsonException: {
      result_.json_exception_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kJsonValue: {
      result_.json_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void ServerOriginatedRPCResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ServerOriginatedRPCResultRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_id_.ClearNonDefaultToEmpty();
  }
  clear_result();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerOriginatedRPCResultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPCResultRequest.request_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string json_exception = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_exception();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPCResultRequest.json_exception");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string json_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPCResultRequest.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerOriginatedRPCResultRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ServerOriginatedRPCResultRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ServerOriginatedRPCResultRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  switch (result_case()) {
    case kJsonException: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_json_exception().data(), static_cast<int>(this->_internal_json_exception().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.ServerOriginatedRPCResultRequest.json_exception");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_json_exception(), target);
      break;
    }
    case kJsonValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.ServerOriginatedRPCResultRequest.json_value");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_json_value(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ServerOriginatedRPCResultRequest)
  return target;
}

size_t ServerOriginatedRPCResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ServerOriginatedRPCResultRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string request_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  switch (result_case()) {
    // string json_exception = 2;
    case kJsonException: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_exception());
      break;
    }
    // string json_value = 3;
    case kJsonValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerOriginatedRPCResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerOriginatedRPCResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerOriginatedRPCResultRequest::GetClassData() const { return &_class_data_; }

void ServerOriginatedRPCResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerOriginatedRPCResultRequest *>(to)->MergeFrom(
      static_cast<const ServerOriginatedRPCResultRequest &>(from));
}


void ServerOriginatedRPCResultRequest::MergeFrom(const ServerOriginatedRPCResultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ServerOriginatedRPCResultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request_id()) {
    _internal_set_request_id(from._internal_request_id());
  }
  switch (from.result_case()) {
    case kJsonException: {
      _internal_set_json_exception(from._internal_json_exception());
      break;
    }
    case kJsonValue: {
      _internal_set_json_value(from._internal_json_value());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerOriginatedRPCResultRequest::CopyFrom(const ServerOriginatedRPCResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ServerOriginatedRPCResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOriginatedRPCResultRequest::IsInitialized() const {
  return true;
}

void ServerOriginatedRPCResultRequest::InternalSwap(ServerOriginatedRPCResultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerOriginatedRPCResultRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[73]);
}

// ===================================================================

class ServerOriginatedRPCResultResponse::_Internal {
 public:
};

ServerOriginatedRPCResultResponse::ServerOriginatedRPCResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.ServerOriginatedRPCResultResponse)
}
ServerOriginatedRPCResultResponse::ServerOriginatedRPCResultResponse(const ServerOriginatedRPCResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ServerOriginatedRPCResultResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerOriginatedRPCResultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerOriginatedRPCResultResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServerOriginatedRPCResultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[74]);
}

// ===================================================================

class ListProfilesRequest::_Internal {
 public:
};

ListProfilesRequest::ListProfilesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena),
  guids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListProfilesRequest)
}
ListProfilesRequest::ListProfilesRequest(const ListProfilesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_),
      guids_(from.guids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ListProfilesRequest)
}

inline void ListProfilesRequest::SharedCtor() {
}

ListProfilesRequest::~ListProfilesRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ListProfilesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProfilesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProfilesRequest::ArenaDtor(void* object) {
  ListProfilesRequest* _this = reinterpret_cast< ListProfilesRequest* >(object);
  (void)_this;
}
void ListProfilesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProfilesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProfilesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListProfilesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  guids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProfilesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_properties();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListProfilesRequest.properties");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string guids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_guids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListProfilesRequest.guids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListProfilesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListProfilesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string properties = 1;
  for (int i = 0, n = this->_internal_properties_size(); i < n; i++) {
    const auto& s = this->_internal_properties(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListProfilesRequest.properties");
    target = stream->WriteString(1, s, target);
  }

  // repeated string guids = 2;
  for (int i = 0, n = this->_internal_guids_size(); i < n; i++) {
    const auto& s = this->_internal_guids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListProfilesRequest.guids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListProfilesRequest)
  return target;
}

size_t ListProfilesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListProfilesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string properties = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(properties_.size());
  for (int i = 0, n = properties_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      properties_.Get(i));
  }

  // repeated string guids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(guids_.size());
  for (int i = 0, n = guids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      guids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProfilesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProfilesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProfilesRequest::GetClassData() const { return &_class_data_; }

void ListProfilesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProfilesRequest *>(to)->MergeFrom(
      static_cast<const ListProfilesRequest &>(from));
}


void ListProfilesRequest::MergeFrom(const ListProfilesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListProfilesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  guids_.MergeFrom(from.guids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProfilesRequest::CopyFrom(const ListProfilesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListProfilesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProfilesRequest::IsInitialized() const {
  return true;
}

void ListProfilesRequest::InternalSwap(ListProfilesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  guids_.InternalSwap(&other->guids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProfilesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[75]);
}

// ===================================================================

class ListProfilesResponse_Profile::_Internal {
 public:
};

ListProfilesResponse_Profile::ListProfilesResponse_Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListProfilesResponse.Profile)
}
ListProfilesResponse_Profile::ListProfilesResponse_Profile(const ListProfilesResponse_Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ListProfilesResponse.Profile)
}

inline void ListProfilesResponse_Profile::SharedCtor() {
}

ListProfilesResponse_Profile::~ListProfilesResponse_Profile() {
  // @@protoc_insertion_point(destructor:iterm2.ListProfilesResponse.Profile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProfilesResponse_Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProfilesResponse_Profile::ArenaDtor(void* object) {
  ListProfilesResponse_Profile* _this = reinterpret_cast< ListProfilesResponse_Profile* >(object);
  (void)_this;
}
void ListProfilesResponse_Profile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProfilesResponse_Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProfilesResponse_Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListProfilesResponse.Profile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProfilesResponse_Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.ProfileProperty properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListProfilesResponse_Profile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListProfilesResponse.Profile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.ProfileProperty properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListProfilesResponse.Profile)
  return target;
}

size_t ListProfilesResponse_Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListProfilesResponse.Profile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ProfileProperty properties = 1;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProfilesResponse_Profile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProfilesResponse_Profile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProfilesResponse_Profile::GetClassData() const { return &_class_data_; }

void ListProfilesResponse_Profile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProfilesResponse_Profile *>(to)->MergeFrom(
      static_cast<const ListProfilesResponse_Profile &>(from));
}


void ListProfilesResponse_Profile::MergeFrom(const ListProfilesResponse_Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListProfilesResponse.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProfilesResponse_Profile::CopyFrom(const ListProfilesResponse_Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListProfilesResponse.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProfilesResponse_Profile::IsInitialized() const {
  return true;
}

void ListProfilesResponse_Profile::InternalSwap(ListProfilesResponse_Profile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProfilesResponse_Profile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[76]);
}

// ===================================================================

class ListProfilesResponse::_Internal {
 public:
};

ListProfilesResponse::ListProfilesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  profiles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListProfilesResponse)
}
ListProfilesResponse::ListProfilesResponse(const ListProfilesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profiles_(from.profiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ListProfilesResponse)
}

inline void ListProfilesResponse::SharedCtor() {
}

ListProfilesResponse::~ListProfilesResponse() {
  // @@protoc_insertion_point(destructor:iterm2.ListProfilesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProfilesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProfilesResponse::ArenaDtor(void* object) {
  ListProfilesResponse* _this = reinterpret_cast< ListProfilesResponse* >(object);
  (void)_this;
}
void ListProfilesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProfilesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProfilesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListProfilesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProfilesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.ListProfilesResponse.Profile profiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListProfilesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListProfilesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.ListProfilesResponse.Profile profiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_profiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListProfilesResponse)
  return target;
}

size_t ListProfilesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListProfilesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ListProfilesResponse.Profile profiles = 1;
  total_size += 1UL * this->_internal_profiles_size();
  for (const auto& msg : this->profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProfilesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProfilesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProfilesResponse::GetClassData() const { return &_class_data_; }

void ListProfilesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProfilesResponse *>(to)->MergeFrom(
      static_cast<const ListProfilesResponse &>(from));
}


void ListProfilesResponse::MergeFrom(const ListProfilesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListProfilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  profiles_.MergeFrom(from.profiles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProfilesResponse::CopyFrom(const ListProfilesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListProfilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProfilesResponse::IsInitialized() const {
  return true;
}

void ListProfilesResponse::InternalSwap(ListProfilesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  profiles_.InternalSwap(&other->profiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProfilesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[77]);
}

// ===================================================================

class FocusRequest::_Internal {
 public:
};

FocusRequest::FocusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.FocusRequest)
}
FocusRequest::FocusRequest(const FocusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.FocusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FocusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FocusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FocusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[78]);
}

// ===================================================================

class FocusResponse::_Internal {
 public:
};

FocusResponse::FocusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.FocusResponse)
}
FocusResponse::FocusResponse(const FocusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.FocusResponse)
}

inline void FocusResponse::SharedCtor() {
}

FocusResponse::~FocusResponse() {
  // @@protoc_insertion_point(destructor:iterm2.FocusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FocusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FocusResponse::ArenaDtor(void* object) {
  FocusResponse* _this = reinterpret_cast< FocusResponse* >(object);
  (void)_this;
}
void FocusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FocusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FocusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.FocusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FocusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.FocusChangedNotification notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FocusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.FocusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.FocusChangedNotification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.FocusResponse)
  return target;
}

size_t FocusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.FocusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.FocusChangedNotification notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FocusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FocusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FocusResponse::GetClassData() const { return &_class_data_; }

void FocusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FocusResponse *>(to)->MergeFrom(
      static_cast<const FocusResponse &>(from));
}


void FocusResponse::MergeFrom(const FocusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.FocusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FocusResponse::CopyFrom(const FocusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.FocusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusResponse::IsInitialized() const {
  return true;
}

void FocusResponse::InternalSwap(FocusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notifications_.InternalSwap(&other->notifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FocusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[79]);
}

// ===================================================================

class SavedArrangementRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SavedArrangementRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SavedArrangementRequest::SavedArrangementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SavedArrangementRequest)
}
SavedArrangementRequest::SavedArrangementRequest(const SavedArrangementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SavedArrangementRequest)
}

inline void SavedArrangementRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_ = 0;
}

SavedArrangementRequest::~SavedArrangementRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SavedArrangementRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SavedArrangementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SavedArrangementRequest::ArenaDtor(void* object) {
  SavedArrangementRequest* _this = reinterpret_cast< SavedArrangementRequest* >(object);
  (void)_this;
}
void SavedArrangementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedArrangementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedArrangementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SavedArrangementRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      window_id_.ClearNonDefaultToEmpty();
    }
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedArrangementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SavedArrangementRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.SavedArrangementRequest.Action action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SavedArrangementRequest_Action_IsValid(val))) {
            _internal_set_action(static_cast<::iterm2::SavedArrangementRequest_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string window_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SavedArrangementRequest.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedArrangementRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SavedArrangementRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SavedArrangementRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .iterm2.SavedArrangementRequest.Action action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // optional string window_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SavedArrangementRequest.window_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_window_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SavedArrangementRequest)
  return target;
}

size_t SavedArrangementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SavedArrangementRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string window_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
    }

    // optional .iterm2.SavedArrangementRequest.Action action = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedArrangementRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SavedArrangementRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedArrangementRequest::GetClassData() const { return &_class_data_; }

void SavedArrangementRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SavedArrangementRequest *>(to)->MergeFrom(
      static_cast<const SavedArrangementRequest &>(from));
}


void SavedArrangementRequest::MergeFrom(const SavedArrangementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SavedArrangementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_window_id(from._internal_window_id());
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedArrangementRequest::CopyFrom(const SavedArrangementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SavedArrangementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedArrangementRequest::IsInitialized() const {
  return true;
}

void SavedArrangementRequest::InternalSwap(SavedArrangementRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedArrangementRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[80]);
}

// ===================================================================

class SavedArrangementResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SavedArrangementResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SavedArrangementResponse::SavedArrangementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SavedArrangementResponse)
}
SavedArrangementResponse::SavedArrangementResponse(const SavedArrangementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SavedArrangementResponse)
}

inline void SavedArrangementResponse::SharedCtor() {
status_ = 0;
}

SavedArrangementResponse::~SavedArrangementResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SavedArrangementResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SavedArrangementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SavedArrangementResponse::ArenaDtor(void* object) {
  SavedArrangementResponse* _this = reinterpret_cast< SavedArrangementResponse* >(object);
  (void)_this;
}
void SavedArrangementResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedArrangementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedArrangementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SavedArrangementResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedArrangementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SavedArrangementResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SavedArrangementResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SavedArrangementResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SavedArrangementResponse.names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedArrangementResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SavedArrangementResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SavedArrangementResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SavedArrangementResponse.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SavedArrangementResponse)
  return target;
}

size_t SavedArrangementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SavedArrangementResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // optional .iterm2.SavedArrangementResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedArrangementResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SavedArrangementResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedArrangementResponse::GetClassData() const { return &_class_data_; }

void SavedArrangementResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SavedArrangementResponse *>(to)->MergeFrom(
      static_cast<const SavedArrangementResponse &>(from));
}


void SavedArrangementResponse::MergeFrom(const SavedArrangementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SavedArrangementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedArrangementResponse::CopyFrom(const SavedArrangementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SavedArrangementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedArrangementResponse::IsInitialized() const {
  return true;
}

void SavedArrangementResponse::InternalSwap(SavedArrangementResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  names_.InternalSwap(&other->names_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedArrangementResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[81]);
}

// ===================================================================

class VariableRequest_Set::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableRequest_Set>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VariableRequest_Set::VariableRequest_Set(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.VariableRequest.Set)
}
VariableRequest_Set::VariableRequest_Set(const VariableRequest_Set& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.VariableRequest.Set)
}

inline void VariableRequest_Set::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariableRequest_Set::~VariableRequest_Set() {
  // @@protoc_insertion_point(destructor:iterm2.VariableRequest.Set)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableRequest_Set::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableRequest_Set::ArenaDtor(void* object) {
  VariableRequest_Set* _this = reinterpret_cast< VariableRequest_Set* >(object);
  (void)_this;
}
void VariableRequest_Set::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableRequest_Set::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableRequest_Set::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.VariableRequest.Set)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableRequest_Set::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableRequest.Set.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableRequest.Set.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableRequest_Set::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.VariableRequest.Set)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableRequest.Set.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableRequest.Set.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.VariableRequest.Set)
  return target;
}

size_t VariableRequest_Set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.VariableRequest.Set)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableRequest_Set::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableRequest_Set::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableRequest_Set::GetClassData() const { return &_class_data_; }

void VariableRequest_Set::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableRequest_Set *>(to)->MergeFrom(
      static_cast<const VariableRequest_Set &>(from));
}


void VariableRequest_Set::MergeFrom(const VariableRequest_Set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.VariableRequest.Set)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableRequest_Set::CopyFrom(const VariableRequest_Set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.VariableRequest.Set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableRequest_Set::IsInitialized() const {
  return true;
}

void VariableRequest_Set::InternalSwap(VariableRequest_Set* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableRequest_Set::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[82]);
}

// ===================================================================

class VariableRequest::_Internal {
 public:
};

VariableRequest::VariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  set_(arena),
  get_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.VariableRequest)
}
VariableRequest::VariableRequest(const VariableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      set_(from.set_),
      get_(from.get_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_scope();
  switch (from.scope_case()) {
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case kTabId: {
      _internal_set_tab_id(from._internal_tab_id());
      break;
    }
    case kApp: {
      _internal_set_app(from._internal_app());
      break;
    }
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.VariableRequest)
}

inline void VariableRequest::SharedCtor() {
clear_has_scope();
}

VariableRequest::~VariableRequest() {
  // @@protoc_insertion_point(destructor:iterm2.VariableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_scope()) {
    clear_scope();
  }
}

void VariableRequest::ArenaDtor(void* object) {
  VariableRequest* _this = reinterpret_cast< VariableRequest* >(object);
  (void)_this;
}
void VariableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableRequest::clear_scope() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.VariableRequest)
  switch (scope_case()) {
    case kSessionId: {
      scope_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kTabId: {
      scope_.tab_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kApp: {
      // No need to clear
      break;
    }
    case kWindowId: {
      scope_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCOPE_NOT_SET;
}


void VariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.VariableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_.Clear();
  get_.Clear();
  clear_scope();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.VariableRequest.Set set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string get = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_get();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableRequest.get");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string tab_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableRequest.tab_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool app = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_app(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string window_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableRequest.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.VariableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // repeated .iterm2.VariableRequest.Set set = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_set(i), target, stream);
  }

  // repeated string get = 3;
  for (int i = 0, n = this->_internal_get_size(); i < n; i++) {
    const auto& s = this->_internal_get(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableRequest.get");
    target = stream->WriteString(3, s, target);
  }

  switch (scope_case()) {
    case kTabId: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_tab_id().data(), static_cast<int>(this->_internal_tab_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.VariableRequest.tab_id");
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_tab_id(), target);
      break;
    }
    case kApp: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_app(), target);
      break;
    }
    case kWindowId: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.VariableRequest.window_id");
      target = stream->WriteStringMaybeAliased(
          6, this->_internal_window_id(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.VariableRequest)
  return target;
}

size_t VariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.VariableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.VariableRequest.Set set = 2;
  total_size += 1UL * this->_internal_set_size();
  for (const auto& msg : this->set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string get = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(get_.size());
  for (int i = 0, n = get_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      get_.Get(i));
  }

  switch (scope_case()) {
    // string session_id = 1;
    case kSessionId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
      break;
    }
    // string tab_id = 4;
    case kTabId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tab_id());
      break;
    }
    // bool app = 5;
    case kApp: {
      total_size += 1 + 1;
      break;
    }
    // string window_id = 6;
    case kWindowId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableRequest::GetClassData() const { return &_class_data_; }

void VariableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableRequest *>(to)->MergeFrom(
      static_cast<const VariableRequest &>(from));
}


void VariableRequest::MergeFrom(const VariableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.VariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  set_.MergeFrom(from.set_);
  get_.MergeFrom(from.get_);
  switch (from.scope_case()) {
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case kTabId: {
      _internal_set_tab_id(from._internal_tab_id());
      break;
    }
    case kApp: {
      _internal_set_app(from._internal_app());
      break;
    }
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableRequest::CopyFrom(const VariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.VariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableRequest::IsInitialized() const {
  return true;
}

void VariableRequest::InternalSwap(VariableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  set_.InternalSwap(&other->set_);
  get_.InternalSwap(&other->get_);
  swap(scope_, other->scope_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[83]);
}

// ===================================================================

class VariableResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VariableResponse::VariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.VariableResponse)
}
VariableResponse::VariableResponse(const VariableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.VariableResponse)
}

inline void VariableResponse::SharedCtor() {
status_ = 0;
}

VariableResponse::~VariableResponse() {
  // @@protoc_insertion_point(destructor:iterm2.VariableResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VariableResponse::ArenaDtor(void* object) {
  VariableResponse* _this = reinterpret_cast< VariableResponse* >(object);
  (void)_this;
}
void VariableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.VariableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.VariableResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::VariableResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::VariableResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableResponse.values");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.VariableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.VariableResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableResponse.values");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.VariableResponse)
  return target;
}

size_t VariableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.VariableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // optional .iterm2.VariableResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableResponse::GetClassData() const { return &_class_data_; }

void VariableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableResponse *>(to)->MergeFrom(
      static_cast<const VariableResponse &>(from));
}


void VariableResponse::MergeFrom(const VariableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.VariableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableResponse::CopyFrom(const VariableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.VariableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableResponse::IsInitialized() const {
  return true;
}

void VariableResponse::InternalSwap(VariableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[84]);
}

// ===================================================================

class ActivateRequest_App::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivateRequest_App>()._has_bits_);
  static void set_has_raise_all_windows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignoring_other_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivateRequest_App::ActivateRequest_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ActivateRequest.App)
}
ActivateRequest_App::ActivateRequest_App(const ActivateRequest_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&raise_all_windows_, &from.raise_all_windows_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignoring_other_apps_) -
    reinterpret_cast<char*>(&raise_all_windows_)) + sizeof(ignoring_other_apps_));
  // @@protoc_insertion_point(copy_constructor:iterm2.ActivateRequest.App)
}

inline void ActivateRequest_App::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&raise_all_windows_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ignoring_other_apps_) -
    reinterpret_cast<char*>(&raise_all_windows_)) + sizeof(ignoring_other_apps_));
}

ActivateRequest_App::~ActivateRequest_App() {
  // @@protoc_insertion_point(destructor:iterm2.ActivateRequest.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivateRequest_App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActivateRequest_App::ArenaDtor(void* object) {
  ActivateRequest_App* _this = reinterpret_cast< ActivateRequest_App* >(object);
  (void)_this;
}
void ActivateRequest_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivateRequest_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivateRequest_App::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ActivateRequest.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&raise_all_windows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignoring_other_apps_) -
      reinterpret_cast<char*>(&raise_all_windows_)) + sizeof(ignoring_other_apps_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateRequest_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool raise_all_windows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_raise_all_windows(&has_bits);
          raise_all_windows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignoring_other_apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ignoring_other_apps(&has_bits);
          ignoring_other_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateRequest_App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ActivateRequest.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool raise_all_windows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_raise_all_windows(), target);
  }

  // optional bool ignoring_other_apps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignoring_other_apps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ActivateRequest.App)
  return target;
}

size_t ActivateRequest_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ActivateRequest.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool raise_all_windows = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool ignoring_other_apps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateRequest_App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivateRequest_App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateRequest_App::GetClassData() const { return &_class_data_; }

void ActivateRequest_App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivateRequest_App *>(to)->MergeFrom(
      static_cast<const ActivateRequest_App &>(from));
}


void ActivateRequest_App::MergeFrom(const ActivateRequest_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ActivateRequest.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      raise_all_windows_ = from.raise_all_windows_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignoring_other_apps_ = from.ignoring_other_apps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateRequest_App::CopyFrom(const ActivateRequest_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ActivateRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateRequest_App::IsInitialized() const {
  return true;
}

void ActivateRequest_App::InternalSwap(ActivateRequest_App* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivateRequest_App, ignoring_other_apps_)
      + sizeof(ActivateRequest_App::ignoring_other_apps_)
      - PROTOBUF_FIELD_OFFSET(ActivateRequest_App, raise_all_windows_)>(
          reinterpret_cast<char*>(&raise_all_windows_),
          reinterpret_cast<char*>(&other->raise_all_windows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateRequest_App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[85]);
}

// ===================================================================

class ActivateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivateRequest>()._has_bits_);
  static void set_has_order_window_front(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_select_tab(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_select_session(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::iterm2::ActivateRequest_App& activate_app(const ActivateRequest* msg);
  static void set_has_activate_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::ActivateRequest_App&
ActivateRequest::_Internal::activate_app(const ActivateRequest* msg) {
  return *msg->activate_app_;
}
ActivateRequest::ActivateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ActivateRequest)
}
ActivateRequest::ActivateRequest(const ActivateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_activate_app()) {
    activate_app_ = new ::iterm2::ActivateRequest_App(*from.activate_app_);
  } else {
    activate_app_ = nullptr;
  }
  ::memcpy(&order_window_front_, &from.order_window_front_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_session_) -
    reinterpret_cast<char*>(&order_window_front_)) + sizeof(select_session_));
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case kTabId: {
      _internal_set_tab_id(from._internal_tab_id());
      break;
    }
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ActivateRequest)
}

inline void ActivateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&activate_app_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&select_session_) -
    reinterpret_cast<char*>(&activate_app_)) + sizeof(select_session_));
clear_has_identifier();
}

ActivateRequest::~ActivateRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ActivateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete activate_app_;
  if (has_identifier()) {
    clear_identifier();
  }
}

void ActivateRequest::ArenaDtor(void* object) {
  ActivateRequest* _this = reinterpret_cast< ActivateRequest* >(object);
  (void)_this;
}
void ActivateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivateRequest::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.ActivateRequest)
  switch (identifier_case()) {
    case kWindowId: {
      identifier_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kTabId: {
      identifier_.tab_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSessionId: {
      identifier_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void ActivateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ActivateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(activate_app_ != nullptr);
    activate_app_->Clear();
  }
  ::memset(&order_window_front_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_session_) -
      reinterpret_cast<char*>(&order_window_front_)) + sizeof(select_session_));
  clear_identifier();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ActivateRequest.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ActivateRequest.tab_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ActivateRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool order_window_front = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_order_window_front(&has_bits);
          order_window_front_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool select_tab = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_select_tab(&has_bits);
          select_tab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool select_session = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_select_session(&has_bits);
          select_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.ActivateRequest.App activate_app = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_activate_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ActivateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (identifier_case()) {
    case kWindowId: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.ActivateRequest.window_id");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_window_id(), target);
      break;
    }
    case kTabId: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_tab_id().data(), static_cast<int>(this->_internal_tab_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.ActivateRequest.tab_id");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_tab_id(), target);
      break;
    }
    case kSessionId: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.ActivateRequest.session_id");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_session_id(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool order_window_front = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_order_window_front(), target);
  }

  // optional bool select_tab = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_select_tab(), target);
  }

  // optional bool select_session = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_select_session(), target);
  }

  // optional .iterm2.ActivateRequest.App activate_app = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::activate_app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ActivateRequest)
  return target;
}

size_t ActivateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ActivateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .iterm2.ActivateRequest.App activate_app = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activate_app_);
    }

    // optional bool order_window_front = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool select_tab = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool select_session = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  switch (identifier_case()) {
    // string window_id = 1;
    case kWindowId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
      break;
    }
    // string tab_id = 2;
    case kTabId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tab_id());
      break;
    }
    // string session_id = 3;
    case kSessionId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateRequest::GetClassData() const { return &_class_data_; }

void ActivateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivateRequest *>(to)->MergeFrom(
      static_cast<const ActivateRequest &>(from));
}


void ActivateRequest::MergeFrom(const ActivateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ActivateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_activate_app()->::iterm2::ActivateRequest_App::MergeFrom(from._internal_activate_app());
    }
    if (cached_has_bits & 0x00000002u) {
      order_window_front_ = from.order_window_front_;
    }
    if (cached_has_bits & 0x00000004u) {
      select_tab_ = from.select_tab_;
    }
    if (cached_has_bits & 0x00000008u) {
      select_session_ = from.select_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.identifier_case()) {
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case kTabId: {
      _internal_set_tab_id(from._internal_tab_id());
      break;
    }
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateRequest::CopyFrom(const ActivateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ActivateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateRequest::IsInitialized() const {
  return true;
}

void ActivateRequest::InternalSwap(ActivateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivateRequest, select_session_)
      + sizeof(ActivateRequest::select_session_)
      - PROTOBUF_FIELD_OFFSET(ActivateRequest, activate_app_)>(
          reinterpret_cast<char*>(&activate_app_),
          reinterpret_cast<char*>(&other->activate_app_));
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[86]);
}

// ===================================================================

class ActivateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivateResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActivateResponse::ActivateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ActivateResponse)
}
ActivateResponse::ActivateResponse(const ActivateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.ActivateResponse)
}

inline void ActivateResponse::SharedCtor() {
status_ = 0;
}

ActivateResponse::~ActivateResponse() {
  // @@protoc_insertion_point(destructor:iterm2.ActivateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActivateResponse::ArenaDtor(void* object) {
  ActivateResponse* _this = reinterpret_cast< ActivateResponse* >(object);
  (void)_this;
}
void ActivateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ActivateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.ActivateResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::ActivateResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::ActivateResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ActivateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.ActivateResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ActivateResponse)
  return target;
}

size_t ActivateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ActivateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.ActivateResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateResponse::GetClassData() const { return &_class_data_; }

void ActivateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivateResponse *>(to)->MergeFrom(
      static_cast<const ActivateResponse &>(from));
}


void ActivateResponse::MergeFrom(const ActivateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ActivateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateResponse::CopyFrom(const ActivateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ActivateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateResponse::IsInitialized() const {
  return true;
}

void ActivateResponse::InternalSwap(ActivateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[87]);
}

// ===================================================================

class InjectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InjectRequest>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InjectRequest::InjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InjectRequest)
}
InjectRequest::InjectRequest(const InjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      session_id_(from.session_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.InjectRequest)
}

inline void InjectRequest::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InjectRequest::~InjectRequest() {
  // @@protoc_insertion_point(destructor:iterm2.InjectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InjectRequest::ArenaDtor(void* object) {
  InjectRequest* _this = reinterpret_cast< InjectRequest* >(object);
  (void)_this;
}
void InjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InjectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_session_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.InjectRequest.session_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InjectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InjectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string session_id = 1;
  for (int i = 0, n = this->_internal_session_id_size(); i < n; i++) {
    const auto& s = this->_internal_session_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.InjectRequest.session_id");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InjectRequest)
  return target;
}

size_t InjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InjectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string session_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(session_id_.size());
  for (int i = 0, n = session_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      session_id_.Get(i));
  }

  // optional bytes data = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InjectRequest::GetClassData() const { return &_class_data_; }

void InjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InjectRequest *>(to)->MergeFrom(
      static_cast<const InjectRequest &>(from));
}


void InjectRequest::MergeFrom(const InjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  session_id_.MergeFrom(from.session_id_);
  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InjectRequest::CopyFrom(const InjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectRequest::IsInitialized() const {
  return true;
}

void InjectRequest::InternalSwap(InjectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.InternalSwap(&other->session_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InjectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[88]);
}

// ===================================================================

class InjectResponse::_Internal {
 public:
};

InjectResponse::InjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  status_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.InjectResponse)
}
InjectResponse::InjectResponse(const InjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      status_(from.status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.InjectResponse)
}

inline void InjectResponse::SharedCtor() {
}

InjectResponse::~InjectResponse() {
  // @@protoc_insertion_point(destructor:iterm2.InjectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InjectResponse::ArenaDtor(void* object) {
  InjectResponse* _this = reinterpret_cast< InjectResponse* >(object);
  (void)_this;
}
void InjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.InjectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.InjectResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::iterm2::InjectResponse_Status_IsValid(val))) {
              _internal_add_status(static_cast<::iterm2::InjectResponse_Status>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_status(), ptr, ctx, ::iterm2::InjectResponse_Status_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InjectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.InjectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.InjectResponse.Status status = 1;
  for (int i = 0, n = this->_internal_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.InjectResponse)
  return target;
}

size_t InjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.InjectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.InjectResponse.Status status = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_status(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InjectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InjectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InjectResponse::GetClassData() const { return &_class_data_; }

void InjectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InjectResponse *>(to)->MergeFrom(
      static_cast<const InjectResponse &>(from));
}


void InjectResponse::MergeFrom(const InjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.InjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InjectResponse::CopyFrom(const InjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.InjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectResponse::IsInitialized() const {
  return true;
}

void InjectResponse::InternalSwap(InjectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InjectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[89]);
}

// ===================================================================

class GetPropertyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPropertyRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetPropertyRequest::GetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetPropertyRequest)
}
GetPropertyRequest::GetPropertyRequest(const GetPropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.GetPropertyRequest)
}

inline void GetPropertyRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_identifier();
}

GetPropertyRequest::~GetPropertyRequest() {
  // @@protoc_insertion_point(destructor:iterm2.GetPropertyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_identifier()) {
    clear_identifier();
  }
}

void GetPropertyRequest::ArenaDtor(void* object) {
  GetPropertyRequest* _this = reinterpret_cast< GetPropertyRequest* >(object);
  (void)_this;
}
void GetPropertyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPropertyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPropertyRequest::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.GetPropertyRequest)
  switch (identifier_case()) {
    case kWindowId: {
      identifier_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSessionId: {
      identifier_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void GetPropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetPropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  clear_identifier();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPropertyRequest.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPropertyRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPropertyRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetPropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string window_id = 1;
  if (_internal_has_window_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPropertyRequest.window_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_window_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPropertyRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPropertyRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetPropertyRequest)
  return target;
}

size_t GetPropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetPropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (identifier_case()) {
    // string window_id = 1;
    case kWindowId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
      break;
    }
    // string session_id = 3;
    case kSessionId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertyRequest::GetClassData() const { return &_class_data_; }

void GetPropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPropertyRequest *>(to)->MergeFrom(
      static_cast<const GetPropertyRequest &>(from));
}


void GetPropertyRequest::MergeFrom(const GetPropertyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetPropertyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  switch (from.identifier_case()) {
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertyRequest::CopyFrom(const GetPropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetPropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertyRequest::IsInitialized() const {
  return true;
}

void GetPropertyRequest::InternalSwap(GetPropertyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[90]);
}

// ===================================================================

class GetPropertyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPropertyResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetPropertyResponse::GetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetPropertyResponse)
}
GetPropertyResponse::GetPropertyResponse(const GetPropertyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.GetPropertyResponse)
}

inline void GetPropertyResponse::SharedCtor() {
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

GetPropertyResponse::~GetPropertyResponse() {
  // @@protoc_insertion_point(destructor:iterm2.GetPropertyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPropertyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPropertyResponse::ArenaDtor(void* object) {
  GetPropertyResponse* _this = reinterpret_cast< GetPropertyResponse* >(object);
  (void)_this;
}
void GetPropertyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPropertyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPropertyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetPropertyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_value_.ClearNonDefaultToEmpty();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.GetPropertyResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::GetPropertyResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::GetPropertyResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPropertyResponse.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetPropertyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.GetPropertyResponse.Status status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string json_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPropertyResponse.json_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetPropertyResponse)
  return target;
}

size_t GetPropertyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetPropertyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string json_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

    // optional .iterm2.GetPropertyResponse.Status status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPropertyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertyResponse::GetClassData() const { return &_class_data_; }

void GetPropertyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPropertyResponse *>(to)->MergeFrom(
      static_cast<const GetPropertyResponse &>(from));
}


void GetPropertyResponse::MergeFrom(const GetPropertyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetPropertyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_json_value(from._internal_json_value());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertyResponse::CopyFrom(const GetPropertyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetPropertyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertyResponse::IsInitialized() const {
  return true;
}

void GetPropertyResponse::InternalSwap(GetPropertyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[91]);
}

// ===================================================================

class SetPropertyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetPropertyRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetPropertyRequest::SetPropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetPropertyRequest)
}
SetPropertyRequest::SetPropertyRequest(const SetPropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SetPropertyRequest)
}

inline void SetPropertyRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_identifier();
}

SetPropertyRequest::~SetPropertyRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SetPropertyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_identifier()) {
    clear_identifier();
  }
}

void SetPropertyRequest::ArenaDtor(void* object) {
  SetPropertyRequest* _this = reinterpret_cast< SetPropertyRequest* >(object);
  (void)_this;
}
void SetPropertyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPropertyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPropertyRequest::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.SetPropertyRequest)
  switch (identifier_case()) {
    case kWindowId: {
      identifier_.window_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSessionId: {
      identifier_.session_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void SetPropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetPropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_value_.ClearNonDefaultToEmpty();
    }
  }
  clear_identifier();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPropertyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetPropertyRequest.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetPropertyRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetPropertyRequest.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetPropertyRequest.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetPropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string window_id = 1;
  if (_internal_has_window_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetPropertyRequest.window_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_window_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetPropertyRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string json_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetPropertyRequest.json_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_value(), target);
  }

  // string session_id = 5;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetPropertyRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetPropertyRequest)
  return target;
}

size_t SetPropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetPropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string json_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

  }
  switch (identifier_case()) {
    // string window_id = 1;
    case kWindowId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
      break;
    }
    // string session_id = 5;
    case kSessionId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPropertyRequest::GetClassData() const { return &_class_data_; }

void SetPropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPropertyRequest *>(to)->MergeFrom(
      static_cast<const SetPropertyRequest &>(from));
}


void SetPropertyRequest::MergeFrom(const SetPropertyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetPropertyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_value(from._internal_json_value());
    }
  }
  switch (from.identifier_case()) {
    case kWindowId: {
      _internal_set_window_id(from._internal_window_id());
      break;
    }
    case kSessionId: {
      _internal_set_session_id(from._internal_session_id());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPropertyRequest::CopyFrom(const SetPropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetPropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPropertyRequest::IsInitialized() const {
  return true;
}

void SetPropertyRequest::InternalSwap(SetPropertyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPropertyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[92]);
}

// ===================================================================

class SetPropertyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetPropertyResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetPropertyResponse::SetPropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetPropertyResponse)
}
SetPropertyResponse::SetPropertyResponse(const SetPropertyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SetPropertyResponse)
}

inline void SetPropertyResponse::SharedCtor() {
status_ = 0;
}

SetPropertyResponse::~SetPropertyResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SetPropertyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPropertyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPropertyResponse::ArenaDtor(void* object) {
  SetPropertyResponse* _this = reinterpret_cast< SetPropertyResponse* >(object);
  (void)_this;
}
void SetPropertyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPropertyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPropertyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetPropertyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPropertyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SetPropertyResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SetPropertyResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SetPropertyResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPropertyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetPropertyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SetPropertyResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetPropertyResponse)
  return target;
}

size_t SetPropertyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetPropertyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.SetPropertyResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPropertyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPropertyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPropertyResponse::GetClassData() const { return &_class_data_; }

void SetPropertyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPropertyResponse *>(to)->MergeFrom(
      static_cast<const SetPropertyResponse &>(from));
}


void SetPropertyResponse::MergeFrom(const SetPropertyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetPropertyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPropertyResponse::CopyFrom(const SetPropertyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetPropertyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPropertyResponse::IsInitialized() const {
  return true;
}

void SetPropertyResponse::InternalSwap(SetPropertyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPropertyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[93]);
}

// ===================================================================

class RegisterToolRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterToolRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reveal_if_already_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tool_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RegisterToolRequest::RegisterToolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RegisterToolRequest)
}
RegisterToolRequest::RegisterToolRequest(const RegisterToolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reveal_if_already_registered_, &from.reveal_if_already_registered_,
    static_cast<size_t>(reinterpret_cast<char*>(&tool_type_) -
    reinterpret_cast<char*>(&reveal_if_already_registered_)) + sizeof(tool_type_));
  // @@protoc_insertion_point(copy_constructor:iterm2.RegisterToolRequest)
}

inline void RegisterToolRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reveal_if_already_registered_ = false;
tool_type_ = 1;
}

RegisterToolRequest::~RegisterToolRequest() {
  // @@protoc_insertion_point(destructor:iterm2.RegisterToolRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterToolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterToolRequest::ArenaDtor(void* object) {
  RegisterToolRequest* _this = reinterpret_cast< RegisterToolRequest* >(object);
  (void)_this;
}
void RegisterToolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterToolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterToolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RegisterToolRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    reveal_if_already_registered_ = false;
    tool_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterToolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RegisterToolRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RegisterToolRequest.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.RegisterToolRequest.ToolType tool_type = 3 [default = WEB_VIEW_TOOL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::RegisterToolRequest_ToolType_IsValid(val))) {
            _internal_set_tool_type(static_cast<::iterm2::RegisterToolRequest_ToolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string URL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RegisterToolRequest.URL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reveal_if_already_registered = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reveal_if_already_registered(&has_bits);
          reveal_if_already_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterToolRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RegisterToolRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RegisterToolRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RegisterToolRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional .iterm2.RegisterToolRequest.ToolType tool_type = 3 [default = WEB_VIEW_TOOL];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tool_type(), target);
  }

  // optional string URL = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RegisterToolRequest.URL");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // optional bool reveal_if_already_registered = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reveal_if_already_registered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RegisterToolRequest)
  return target;
}

size_t RegisterToolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RegisterToolRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string URL = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bool reveal_if_already_registered = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .iterm2.RegisterToolRequest.ToolType tool_type = 3 [default = WEB_VIEW_TOOL];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tool_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterToolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterToolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterToolRequest::GetClassData() const { return &_class_data_; }

void RegisterToolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterToolRequest *>(to)->MergeFrom(
      static_cast<const RegisterToolRequest &>(from));
}


void RegisterToolRequest::MergeFrom(const RegisterToolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RegisterToolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      reveal_if_already_registered_ = from.reveal_if_already_registered_;
    }
    if (cached_has_bits & 0x00000010u) {
      tool_type_ = from.tool_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterToolRequest::CopyFrom(const RegisterToolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RegisterToolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterToolRequest::IsInitialized() const {
  return true;
}

void RegisterToolRequest::InternalSwap(RegisterToolRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(reveal_if_already_registered_, other->reveal_if_already_registered_);
  swap(tool_type_, other->tool_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterToolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[94]);
}

// ===================================================================

class RPCRegistrationRequest_RPCArgumentSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_RPCArgumentSignature>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RPCRegistrationRequest_RPCArgumentSignature::RPCRegistrationRequest_RPCArgumentSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
}
RPCRegistrationRequest_RPCArgumentSignature::RPCRegistrationRequest_RPCArgumentSignature(const RPCRegistrationRequest_RPCArgumentSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
}

inline void RPCRegistrationRequest_RPCArgumentSignature::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCRegistrationRequest_RPCArgumentSignature::~RPCRegistrationRequest_RPCArgumentSignature() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_RPCArgumentSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_RPCArgumentSignature::ArenaDtor(void* object) {
  RPCRegistrationRequest_RPCArgumentSignature* _this = reinterpret_cast< RPCRegistrationRequest_RPCArgumentSignature* >(object);
  (void)_this;
}
void RPCRegistrationRequest_RPCArgumentSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_RPCArgumentSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_RPCArgumentSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_RPCArgumentSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.RPCArgumentSignature.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_RPCArgumentSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.RPCArgumentSignature.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  return target;
}

size_t RPCRegistrationRequest_RPCArgumentSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_RPCArgumentSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_RPCArgumentSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_RPCArgumentSignature::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_RPCArgumentSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_RPCArgumentSignature *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_RPCArgumentSignature &>(from));
}


void RPCRegistrationRequest_RPCArgumentSignature::MergeFrom(const RPCRegistrationRequest_RPCArgumentSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_RPCArgumentSignature::CopyFrom(const RPCRegistrationRequest_RPCArgumentSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.RPCArgumentSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_RPCArgumentSignature::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_RPCArgumentSignature::InternalSwap(RPCRegistrationRequest_RPCArgumentSignature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_RPCArgumentSignature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[95]);
}

// ===================================================================

class RPCRegistrationRequest_RPCArgument::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_RPCArgument>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RPCRegistrationRequest_RPCArgument::RPCRegistrationRequest_RPCArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.RPCArgument)
}
RPCRegistrationRequest_RPCArgument::RPCRegistrationRequest_RPCArgument(const RPCRegistrationRequest_RPCArgument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.RPCArgument)
}

inline void RPCRegistrationRequest_RPCArgument::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCRegistrationRequest_RPCArgument::~RPCRegistrationRequest_RPCArgument() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.RPCArgument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_RPCArgument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_RPCArgument::ArenaDtor(void* object) {
  RPCRegistrationRequest_RPCArgument* _this = reinterpret_cast< RPCRegistrationRequest_RPCArgument* >(object);
  (void)_this;
}
void RPCRegistrationRequest_RPCArgument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_RPCArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_RPCArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.RPCArgument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_RPCArgument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.RPCArgument.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.RPCArgument.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_RPCArgument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.RPCArgument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.RPCArgument.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.RPCArgument.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.RPCArgument)
  return target;
}

size_t RPCRegistrationRequest_RPCArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.RPCArgument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_RPCArgument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_RPCArgument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_RPCArgument::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_RPCArgument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_RPCArgument *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_RPCArgument &>(from));
}


void RPCRegistrationRequest_RPCArgument::MergeFrom(const RPCRegistrationRequest_RPCArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.RPCArgument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_path(from._internal_path());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_RPCArgument::CopyFrom(const RPCRegistrationRequest_RPCArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.RPCArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_RPCArgument::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_RPCArgument::InternalSwap(RPCRegistrationRequest_RPCArgument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_RPCArgument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[96]);
}

// ===================================================================

class RPCRegistrationRequest_SessionTitleAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_SessionTitleAttributes>()._has_bits_);
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RPCRegistrationRequest_SessionTitleAttributes::RPCRegistrationRequest_SessionTitleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
}
RPCRegistrationRequest_SessionTitleAttributes::RPCRegistrationRequest_SessionTitleAttributes(const RPCRegistrationRequest_SessionTitleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_identifier()) {
    unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_identifier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
}

inline void RPCRegistrationRequest_SessionTitleAttributes::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCRegistrationRequest_SessionTitleAttributes::~RPCRegistrationRequest_SessionTitleAttributes() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_SessionTitleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_SessionTitleAttributes::ArenaDtor(void* object) {
  RPCRegistrationRequest_SessionTitleAttributes* _this = reinterpret_cast< RPCRegistrationRequest_SessionTitleAttributes* >(object);
  (void)_this;
}
void RPCRegistrationRequest_SessionTitleAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_SessionTitleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_SessionTitleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_identifier_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_SessionTitleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_SessionTitleAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.SessionTitleAttributes.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // optional string unique_identifier = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_identifier().data(), static_cast<int>(this->_internal_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.SessionTitleAttributes.unique_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_unique_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  return target;
}

size_t RPCRegistrationRequest_SessionTitleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string display_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string unique_identifier = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_identifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_SessionTitleAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_SessionTitleAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_SessionTitleAttributes::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_SessionTitleAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_SessionTitleAttributes *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_SessionTitleAttributes &>(from));
}


void RPCRegistrationRequest_SessionTitleAttributes::MergeFrom(const RPCRegistrationRequest_SessionTitleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unique_identifier(from._internal_unique_identifier());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_SessionTitleAttributes::CopyFrom(const RPCRegistrationRequest_SessionTitleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.SessionTitleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_SessionTitleAttributes::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_SessionTitleAttributes::InternalSwap(RPCRegistrationRequest_SessionTitleAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_identifier_, lhs_arena,
      &other->unique_identifier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_SessionTitleAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[97]);
}

// ===================================================================

class RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_StatusBarComponentAttributes_Knob>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_json_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RPCRegistrationRequest_StatusBarComponentAttributes_Knob::RPCRegistrationRequest_StatusBarComponentAttributes_Knob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
}
RPCRegistrationRequest_StatusBarComponentAttributes_Knob::RPCRegistrationRequest_StatusBarComponentAttributes_Knob(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_placeholder()) {
    placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placeholder(), 
      GetArenaForAllocation());
  }
  json_default_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_default_value()) {
    json_default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_default_value(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
}

inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_default_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 1;
}

RPCRegistrationRequest_StatusBarComponentAttributes_Knob::~RPCRegistrationRequest_StatusBarComponentAttributes_Knob() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_default_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::ArenaDtor(void* object) {
  RPCRegistrationRequest_StatusBarComponentAttributes_Knob* _this = reinterpret_cast< RPCRegistrationRequest_StatusBarComponentAttributes_Knob* >(object);
  (void)_this;
}
void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      placeholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      json_default_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      key_.ClearNonDefaultToEmpty();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type_IsValid(val))) {
            _internal_set_type(static_cast<::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string placeholder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_placeholder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_default_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_json_default_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.Type type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional string placeholder = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_placeholder().data(), static_cast<int>(this->_internal_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.placeholder");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_placeholder(), target);
  }

  // optional string json_default_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_default_value().data(), static_cast<int>(this->_internal_json_default_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.json_default_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_default_value(), target);
  }

  // optional string key = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  return target;
}

size_t RPCRegistrationRequest_StatusBarComponentAttributes_Knob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string placeholder = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_placeholder());
    }

    // optional string json_default_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_default_value());
    }

    // optional string key = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob.Type type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_StatusBarComponentAttributes_Knob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_StatusBarComponentAttributes_Knob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_StatusBarComponentAttributes_Knob::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_StatusBarComponentAttributes_Knob *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_StatusBarComponentAttributes_Knob &>(from));
}


void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::MergeFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_placeholder(from._internal_placeholder());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_json_default_value(from._internal_json_default_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::CopyFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Knob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_StatusBarComponentAttributes_Knob::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Knob::InternalSwap(RPCRegistrationRequest_StatusBarComponentAttributes_Knob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placeholder_, lhs_arena,
      &other->placeholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_default_value_, lhs_arena,
      &other->json_default_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_StatusBarComponentAttributes_Knob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[98]);
}

// ===================================================================

class RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_StatusBarComponentAttributes_Icon>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RPCRegistrationRequest_StatusBarComponentAttributes_Icon::RPCRegistrationRequest_StatusBarComponentAttributes_Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
}
RPCRegistrationRequest_StatusBarComponentAttributes_Icon::RPCRegistrationRequest_StatusBarComponentAttributes_Icon(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
}

inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scale_ = 0;
}

RPCRegistrationRequest_StatusBarComponentAttributes_Icon::~RPCRegistrationRequest_StatusBarComponentAttributes_Icon() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::ArenaDtor(void* object) {
  RPCRegistrationRequest_StatusBarComponentAttributes_Icon* _this = reinterpret_cast< RPCRegistrationRequest_StatusBarComponentAttributes_Icon* >(object);
  (void)_this;
}
void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  scale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  return target;
}

size_t RPCRegistrationRequest_StatusBarComponentAttributes_Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_StatusBarComponentAttributes_Icon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_StatusBarComponentAttributes_Icon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_StatusBarComponentAttributes_Icon::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_StatusBarComponentAttributes_Icon *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_StatusBarComponentAttributes_Icon &>(from));
}


void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::MergeFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::CopyFrom(const RPCRegistrationRequest_StatusBarComponentAttributes_Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_StatusBarComponentAttributes_Icon::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_StatusBarComponentAttributes_Icon::InternalSwap(RPCRegistrationRequest_StatusBarComponentAttributes_Icon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_StatusBarComponentAttributes_Icon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[99]);
}

// ===================================================================

class RPCRegistrationRequest_StatusBarComponentAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_StatusBarComponentAttributes>()._has_bits_);
  static void set_has_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detailed_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exemplar(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_update_cadence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RPCRegistrationRequest_StatusBarComponentAttributes::RPCRegistrationRequest_StatusBarComponentAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  knobs_(arena),
  icons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
}
RPCRegistrationRequest_StatusBarComponentAttributes::RPCRegistrationRequest_StatusBarComponentAttributes(const RPCRegistrationRequest_StatusBarComponentAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      knobs_(from.knobs_),
      icons_(from.icons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  short_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_description()) {
    short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_description(), 
      GetArenaForAllocation());
  }
  detailed_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detailed_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailed_description()) {
    detailed_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detailed_description(), 
      GetArenaForAllocation());
  }
  exemplar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exemplar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_exemplar()) {
    exemplar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exemplar(), 
      GetArenaForAllocation());
  }
  unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_identifier()) {
    unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_identifier(), 
      GetArenaForAllocation());
  }
  ::memcpy(&update_cadence_, &from.update_cadence_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&update_cadence_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
}

inline void RPCRegistrationRequest_StatusBarComponentAttributes::SharedCtor() {
short_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detailed_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detailed_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exemplar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exemplar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_cadence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&update_cadence_)) + sizeof(format_));
}

RPCRegistrationRequest_StatusBarComponentAttributes::~RPCRegistrationRequest_StatusBarComponentAttributes() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_StatusBarComponentAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  short_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detailed_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exemplar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_StatusBarComponentAttributes::ArenaDtor(void* object) {
  RPCRegistrationRequest_StatusBarComponentAttributes* _this = reinterpret_cast< RPCRegistrationRequest_StatusBarComponentAttributes* >(object);
  (void)_this;
}
void RPCRegistrationRequest_StatusBarComponentAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_StatusBarComponentAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_StatusBarComponentAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knobs_.Clear();
  icons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      short_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      detailed_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      exemplar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      unique_identifier_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&update_cadence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_) -
        reinterpret_cast<char*>(&update_cadence_)) + sizeof(format_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_StatusBarComponentAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string short_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_short_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string detailed_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detailed_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob knobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string exemplar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_exemplar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float update_cadence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_update_cadence(&has_bits);
          update_cadence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon icons = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Format format = 8 [default = PLAIN_TEXT];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format_IsValid(val))) {
            _internal_set_format(static_cast<::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Format>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_StatusBarComponentAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string short_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_description().data(), static_cast<int>(this->_internal_short_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.short_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_short_description(), target);
  }

  // optional string detailed_description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailed_description().data(), static_cast<int>(this->_internal_detailed_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.detailed_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detailed_description(), target);
  }

  // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob knobs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_knobs(i), target, stream);
  }

  // optional string exemplar = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exemplar().data(), static_cast<int>(this->_internal_exemplar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.exemplar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exemplar(), target);
  }

  // optional float update_cadence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_update_cadence(), target);
  }

  // optional string unique_identifier = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_identifier().data(), static_cast<int>(this->_internal_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.unique_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_unique_identifier(), target);
  }

  // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon icons = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_icons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_icons(i), target, stream);
  }

  // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Format format = 8 [default = PLAIN_TEXT];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  return target;
}

size_t RPCRegistrationRequest_StatusBarComponentAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Knob knobs = 3;
  total_size += 1UL * this->_internal_knobs_size();
  for (const auto& msg : this->knobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Icon icons = 7;
  total_size += 1UL * this->_internal_icons_size();
  for (const auto& msg : this->icons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string short_description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_description());
    }

    // optional string detailed_description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailed_description());
    }

    // optional string exemplar = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exemplar());
    }

    // optional string unique_identifier = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_identifier());
    }

    // optional float update_cadence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes.Format format = 8 [default = PLAIN_TEXT];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_StatusBarComponentAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_StatusBarComponentAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_StatusBarComponentAttributes::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_StatusBarComponentAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_StatusBarComponentAttributes *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_StatusBarComponentAttributes &>(from));
}


void RPCRegistrationRequest_StatusBarComponentAttributes::MergeFrom(const RPCRegistrationRequest_StatusBarComponentAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  knobs_.MergeFrom(from.knobs_);
  icons_.MergeFrom(from.icons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_short_description(from._internal_short_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_detailed_description(from._internal_detailed_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_exemplar(from._internal_exemplar());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_unique_identifier(from._internal_unique_identifier());
    }
    if (cached_has_bits & 0x00000010u) {
      update_cadence_ = from.update_cadence_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_StatusBarComponentAttributes::CopyFrom(const RPCRegistrationRequest_StatusBarComponentAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.StatusBarComponentAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_StatusBarComponentAttributes::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_StatusBarComponentAttributes::InternalSwap(RPCRegistrationRequest_StatusBarComponentAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  knobs_.InternalSwap(&other->knobs_);
  icons_.InternalSwap(&other->icons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &short_description_, lhs_arena,
      &other->short_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detailed_description_, lhs_arena,
      &other->detailed_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exemplar_, lhs_arena,
      &other->exemplar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_identifier_, lhs_arena,
      &other->unique_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCRegistrationRequest_StatusBarComponentAttributes, format_)
      + sizeof(RPCRegistrationRequest_StatusBarComponentAttributes::format_)
      - PROTOBUF_FIELD_OFFSET(RPCRegistrationRequest_StatusBarComponentAttributes, update_cadence_)>(
          reinterpret_cast<char*>(&update_cadence_),
          reinterpret_cast<char*>(&other->update_cadence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_StatusBarComponentAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[100]);
}

// ===================================================================

class RPCRegistrationRequest_ContextMenuAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest_ContextMenuAttributes>()._has_bits_);
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RPCRegistrationRequest_ContextMenuAttributes::RPCRegistrationRequest_ContextMenuAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
}
RPCRegistrationRequest_ContextMenuAttributes::RPCRegistrationRequest_ContextMenuAttributes(const RPCRegistrationRequest_ContextMenuAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_identifier()) {
    unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_identifier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
}

inline void RPCRegistrationRequest_ContextMenuAttributes::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCRegistrationRequest_ContextMenuAttributes::~RPCRegistrationRequest_ContextMenuAttributes() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest_ContextMenuAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCRegistrationRequest_ContextMenuAttributes::ArenaDtor(void* object) {
  RPCRegistrationRequest_ContextMenuAttributes* _this = reinterpret_cast< RPCRegistrationRequest_ContextMenuAttributes* >(object);
  (void)_this;
}
void RPCRegistrationRequest_ContextMenuAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest_ContextMenuAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest_ContextMenuAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_identifier_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest_ContextMenuAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest_ContextMenuAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.ContextMenuAttributes.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // optional string unique_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_identifier().data(), static_cast<int>(this->_internal_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.ContextMenuAttributes.unique_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unique_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  return target;
}

size_t RPCRegistrationRequest_ContextMenuAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string display_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string unique_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_identifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest_ContextMenuAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest_ContextMenuAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest_ContextMenuAttributes::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest_ContextMenuAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest_ContextMenuAttributes *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest_ContextMenuAttributes &>(from));
}


void RPCRegistrationRequest_ContextMenuAttributes::MergeFrom(const RPCRegistrationRequest_ContextMenuAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unique_identifier(from._internal_unique_identifier());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest_ContextMenuAttributes::CopyFrom(const RPCRegistrationRequest_ContextMenuAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest.ContextMenuAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest_ContextMenuAttributes::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest_ContextMenuAttributes::InternalSwap(RPCRegistrationRequest_ContextMenuAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_identifier_, lhs_arena,
      &other->unique_identifier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest_ContextMenuAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[101]);
}

// ===================================================================

class RPCRegistrationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCRegistrationRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::iterm2::RPCRegistrationRequest_SessionTitleAttributes& session_title_attributes(const RPCRegistrationRequest* msg);
  static const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes& status_bar_component_attributes(const RPCRegistrationRequest* msg);
  static const ::iterm2::RPCRegistrationRequest_ContextMenuAttributes& context_menu_attributes(const RPCRegistrationRequest* msg);
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::RPCRegistrationRequest_SessionTitleAttributes&
RPCRegistrationRequest::_Internal::session_title_attributes(const RPCRegistrationRequest* msg) {
  return *msg->RoleSpecificAttributes_.session_title_attributes_;
}
const ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes&
RPCRegistrationRequest::_Internal::status_bar_component_attributes(const RPCRegistrationRequest* msg) {
  return *msg->RoleSpecificAttributes_.status_bar_component_attributes_;
}
const ::iterm2::RPCRegistrationRequest_ContextMenuAttributes&
RPCRegistrationRequest::_Internal::context_menu_attributes(const RPCRegistrationRequest* msg) {
  return *msg->RoleSpecificAttributes_.context_menu_attributes_;
}
void RPCRegistrationRequest::set_allocated_session_title_attributes(::iterm2::RPCRegistrationRequest_SessionTitleAttributes* session_title_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_RoleSpecificAttributes();
  if (session_title_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RPCRegistrationRequest_SessionTitleAttributes>::GetOwningArena(session_title_attributes);
    if (message_arena != submessage_arena) {
      session_title_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_title_attributes, submessage_arena);
    }
    set_has_session_title_attributes();
    RoleSpecificAttributes_.session_title_attributes_ = session_title_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.session_title_attributes)
}
void RPCRegistrationRequest::set_allocated_status_bar_component_attributes(::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* status_bar_component_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_RoleSpecificAttributes();
  if (status_bar_component_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes>::GetOwningArena(status_bar_component_attributes);
    if (message_arena != submessage_arena) {
      status_bar_component_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_bar_component_attributes, submessage_arena);
    }
    set_has_status_bar_component_attributes();
    RoleSpecificAttributes_.status_bar_component_attributes_ = status_bar_component_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.status_bar_component_attributes)
}
void RPCRegistrationRequest::set_allocated_context_menu_attributes(::iterm2::RPCRegistrationRequest_ContextMenuAttributes* context_menu_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_RoleSpecificAttributes();
  if (context_menu_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RPCRegistrationRequest_ContextMenuAttributes>::GetOwningArena(context_menu_attributes);
    if (message_arena != submessage_arena) {
      context_menu_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context_menu_attributes, submessage_arena);
    }
    set_has_context_menu_attributes();
    RoleSpecificAttributes_.context_menu_attributes_ = context_menu_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.RPCRegistrationRequest.context_menu_attributes)
}
RPCRegistrationRequest::RPCRegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena),
  defaults_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RPCRegistrationRequest)
}
RPCRegistrationRequest::RPCRegistrationRequest(const RPCRegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_),
      defaults_(from.defaults_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(role_));
  clear_has_RoleSpecificAttributes();
  switch (from.RoleSpecificAttributes_case()) {
    case kSessionTitleAttributes: {
      _internal_mutable_session_title_attributes()->::iterm2::RPCRegistrationRequest_SessionTitleAttributes::MergeFrom(from._internal_session_title_attributes());
      break;
    }
    case kStatusBarComponentAttributes: {
      _internal_mutable_status_bar_component_attributes()->::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes::MergeFrom(from._internal_status_bar_component_attributes());
      break;
    }
    case kContextMenuAttributes: {
      _internal_mutable_context_menu_attributes()->::iterm2::RPCRegistrationRequest_ContextMenuAttributes::MergeFrom(from._internal_context_menu_attributes());
      break;
    }
    case ROLESPECIFICATTRIBUTES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.RPCRegistrationRequest)
}

inline void RPCRegistrationRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timeout_ = 0;
role_ = 1;
clear_has_RoleSpecificAttributes();
}

RPCRegistrationRequest::~RPCRegistrationRequest() {
  // @@protoc_insertion_point(destructor:iterm2.RPCRegistrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCRegistrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_RoleSpecificAttributes()) {
    clear_RoleSpecificAttributes();
  }
}

void RPCRegistrationRequest::ArenaDtor(void* object) {
  RPCRegistrationRequest* _this = reinterpret_cast< RPCRegistrationRequest* >(object);
  (void)_this;
}
void RPCRegistrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCRegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCRegistrationRequest::clear_RoleSpecificAttributes() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.RPCRegistrationRequest)
  switch (RoleSpecificAttributes_case()) {
    case kSessionTitleAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete RoleSpecificAttributes_.session_title_attributes_;
      }
      break;
    }
    case kStatusBarComponentAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete RoleSpecificAttributes_.status_bar_component_attributes_;
      }
      break;
    }
    case kContextMenuAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete RoleSpecificAttributes_.context_menu_attributes_;
      }
      break;
    }
    case ROLESPECIFICATTRIBUTES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROLESPECIFICATTRIBUTES_NOT_SET;
}


void RPCRegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RPCRegistrationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  defaults_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    timeout_ = 0;
    role_ = 1;
  }
  clear_RoleSpecificAttributes();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCRegistrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.RPCRegistrationRequest.RPCArgumentSignature arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.RPCRegistrationRequest.RPCArgument defaults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defaults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.RPCRegistrationRequest.Role role = 5 [default = GENERIC];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::RPCRegistrationRequest_Role_IsValid(val))) {
            _internal_set_role(static_cast<::iterm2::RPCRegistrationRequest_Role>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.RPCRegistrationRequest.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RPCRegistrationRequest.SessionTitleAttributes session_title_attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_title_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes status_bar_component_attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_bar_component_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RPCRegistrationRequest.ContextMenuAttributes context_menu_attributes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_context_menu_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCRegistrationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RPCRegistrationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .iterm2.RPCRegistrationRequest.RPCArgumentSignature arguments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_arguments(i), target, stream);
  }

  // optional float timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_timeout(), target);
  }

  // repeated .iterm2.RPCRegistrationRequest.RPCArgument defaults = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defaults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_defaults(i), target, stream);
  }

  // optional .iterm2.RPCRegistrationRequest.Role role = 5 [default = GENERIC];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_role(), target);
  }

  // optional string display_name = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.RPCRegistrationRequest.display_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_display_name(), target);
  }

  switch (RoleSpecificAttributes_case()) {
    case kSessionTitleAttributes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::session_title_attributes(this), target, stream);
      break;
    }
    case kStatusBarComponentAttributes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::status_bar_component_attributes(this), target, stream);
      break;
    }
    case kContextMenuAttributes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::context_menu_attributes(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RPCRegistrationRequest)
  return target;
}

size_t RPCRegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RPCRegistrationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.RPCRegistrationRequest.RPCArgumentSignature arguments = 2;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .iterm2.RPCRegistrationRequest.RPCArgument defaults = 4;
  total_size += 1UL * this->_internal_defaults_size();
  for (const auto& msg : this->defaults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string display_name = 6 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional float timeout = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .iterm2.RPCRegistrationRequest.Role role = 5 [default = GENERIC];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
    }

  }
  switch (RoleSpecificAttributes_case()) {
    // .iterm2.RPCRegistrationRequest.SessionTitleAttributes session_title_attributes = 7;
    case kSessionTitleAttributes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RoleSpecificAttributes_.session_title_attributes_);
      break;
    }
    // .iterm2.RPCRegistrationRequest.StatusBarComponentAttributes status_bar_component_attributes = 8;
    case kStatusBarComponentAttributes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RoleSpecificAttributes_.status_bar_component_attributes_);
      break;
    }
    // .iterm2.RPCRegistrationRequest.ContextMenuAttributes context_menu_attributes = 9;
    case kContextMenuAttributes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *RoleSpecificAttributes_.context_menu_attributes_);
      break;
    }
    case ROLESPECIFICATTRIBUTES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCRegistrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCRegistrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCRegistrationRequest::GetClassData() const { return &_class_data_; }

void RPCRegistrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCRegistrationRequest *>(to)->MergeFrom(
      static_cast<const RPCRegistrationRequest &>(from));
}


void RPCRegistrationRequest::MergeFrom(const RPCRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RPCRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  defaults_.MergeFrom(from.defaults_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.RoleSpecificAttributes_case()) {
    case kSessionTitleAttributes: {
      _internal_mutable_session_title_attributes()->::iterm2::RPCRegistrationRequest_SessionTitleAttributes::MergeFrom(from._internal_session_title_attributes());
      break;
    }
    case kStatusBarComponentAttributes: {
      _internal_mutable_status_bar_component_attributes()->::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes::MergeFrom(from._internal_status_bar_component_attributes());
      break;
    }
    case kContextMenuAttributes: {
      _internal_mutable_context_menu_attributes()->::iterm2::RPCRegistrationRequest_ContextMenuAttributes::MergeFrom(from._internal_context_menu_attributes());
      break;
    }
    case ROLESPECIFICATTRIBUTES_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCRegistrationRequest::CopyFrom(const RPCRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RPCRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRegistrationRequest::IsInitialized() const {
  return true;
}

void RPCRegistrationRequest::InternalSwap(RPCRegistrationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arguments_.InternalSwap(&other->arguments_);
  defaults_.InternalSwap(&other->defaults_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  swap(timeout_, other->timeout_);
  swap(role_, other->role_);
  swap(RoleSpecificAttributes_, other->RoleSpecificAttributes_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCRegistrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[102]);
}

// ===================================================================

class RegisterToolResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterToolResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RegisterToolResponse::RegisterToolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.RegisterToolResponse)
}
RegisterToolResponse::RegisterToolResponse(const RegisterToolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.RegisterToolResponse)
}

inline void RegisterToolResponse::SharedCtor() {
status_ = 0;
}

RegisterToolResponse::~RegisterToolResponse() {
  // @@protoc_insertion_point(destructor:iterm2.RegisterToolResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterToolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterToolResponse::ArenaDtor(void* object) {
  RegisterToolResponse* _this = reinterpret_cast< RegisterToolResponse* >(object);
  (void)_this;
}
void RegisterToolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterToolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterToolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.RegisterToolResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterToolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.RegisterToolResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::RegisterToolResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::RegisterToolResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterToolResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.RegisterToolResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.RegisterToolResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.RegisterToolResponse)
  return target;
}

size_t RegisterToolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.RegisterToolResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.RegisterToolResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterToolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterToolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterToolResponse::GetClassData() const { return &_class_data_; }

void RegisterToolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterToolResponse *>(to)->MergeFrom(
      static_cast<const RegisterToolResponse &>(from));
}


void RegisterToolResponse::MergeFrom(const RegisterToolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.RegisterToolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterToolResponse::CopyFrom(const RegisterToolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.RegisterToolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterToolResponse::IsInitialized() const {
  return true;
}

void RegisterToolResponse::InternalSwap(RegisterToolResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterToolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[103]);
}

// ===================================================================

class KeystrokePattern::_Internal {
 public:
};

KeystrokePattern::KeystrokePattern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  required_modifiers_(arena),
  forbidden_modifiers_(arena),
  keycodes_(arena),
  characters_(arena),
  characters_ignoring_modifiers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.KeystrokePattern)
}
KeystrokePattern::KeystrokePattern(const KeystrokePattern& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      required_modifiers_(from.required_modifiers_),
      forbidden_modifiers_(from.forbidden_modifiers_),
      keycodes_(from.keycodes_),
      characters_(from.characters_),
      characters_ignoring_modifiers_(from.characters_ignoring_modifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.KeystrokePattern)
}

inline void KeystrokePattern::SharedCtor() {
}

KeystrokePattern::~KeystrokePattern() {
  // @@protoc_insertion_point(destructor:iterm2.KeystrokePattern)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeystrokePattern::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeystrokePattern::ArenaDtor(void* object) {
  KeystrokePattern* _this = reinterpret_cast< KeystrokePattern* >(object);
  (void)_this;
}
void KeystrokePattern::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeystrokePattern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeystrokePattern::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.KeystrokePattern)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_modifiers_.Clear();
  forbidden_modifiers_.Clear();
  keycodes_.Clear();
  characters_.Clear();
  characters_ignoring_modifiers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeystrokePattern::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.Modifiers required_modifiers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::iterm2::Modifiers_IsValid(val))) {
              _internal_add_required_modifiers(static_cast<::iterm2::Modifiers>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_required_modifiers(), ptr, ctx, ::iterm2::Modifiers_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.Modifiers forbidden_modifiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::iterm2::Modifiers_IsValid(val))) {
              _internal_add_forbidden_modifiers(static_cast<::iterm2::Modifiers>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_forbidden_modifiers(), ptr, ctx, ::iterm2::Modifiers_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 keycodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keycodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keycodes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string characters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_characters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.KeystrokePattern.characters");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string characters_ignoring_modifiers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_characters_ignoring_modifiers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.KeystrokePattern.characters_ignoring_modifiers");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeystrokePattern::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.KeystrokePattern)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.Modifiers required_modifiers = 1;
  for (int i = 0, n = this->_internal_required_modifiers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_required_modifiers(i), target);
  }

  // repeated .iterm2.Modifiers forbidden_modifiers = 2;
  for (int i = 0, n = this->_internal_forbidden_modifiers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_forbidden_modifiers(i), target);
  }

  // repeated int32 keycodes = 3;
  for (int i = 0, n = this->_internal_keycodes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_keycodes(i), target);
  }

  // repeated string characters = 4;
  for (int i = 0, n = this->_internal_characters_size(); i < n; i++) {
    const auto& s = this->_internal_characters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.KeystrokePattern.characters");
    target = stream->WriteString(4, s, target);
  }

  // repeated string characters_ignoring_modifiers = 5;
  for (int i = 0, n = this->_internal_characters_ignoring_modifiers_size(); i < n; i++) {
    const auto& s = this->_internal_characters_ignoring_modifiers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.KeystrokePattern.characters_ignoring_modifiers");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.KeystrokePattern)
  return target;
}

size_t KeystrokePattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.KeystrokePattern)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.Modifiers required_modifiers = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_required_modifiers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_required_modifiers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .iterm2.Modifiers forbidden_modifiers = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_forbidden_modifiers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_forbidden_modifiers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated int32 keycodes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keycodes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keycodes_size());
    total_size += data_size;
  }

  // repeated string characters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(characters_.size());
  for (int i = 0, n = characters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      characters_.Get(i));
  }

  // repeated string characters_ignoring_modifiers = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(characters_ignoring_modifiers_.size());
  for (int i = 0, n = characters_ignoring_modifiers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      characters_ignoring_modifiers_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeystrokePattern::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeystrokePattern::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeystrokePattern::GetClassData() const { return &_class_data_; }

void KeystrokePattern::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeystrokePattern *>(to)->MergeFrom(
      static_cast<const KeystrokePattern &>(from));
}


void KeystrokePattern::MergeFrom(const KeystrokePattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.KeystrokePattern)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  required_modifiers_.MergeFrom(from.required_modifiers_);
  forbidden_modifiers_.MergeFrom(from.forbidden_modifiers_);
  keycodes_.MergeFrom(from.keycodes_);
  characters_.MergeFrom(from.characters_);
  characters_ignoring_modifiers_.MergeFrom(from.characters_ignoring_modifiers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeystrokePattern::CopyFrom(const KeystrokePattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.KeystrokePattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystrokePattern::IsInitialized() const {
  return true;
}

void KeystrokePattern::InternalSwap(KeystrokePattern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  required_modifiers_.InternalSwap(&other->required_modifiers_);
  forbidden_modifiers_.InternalSwap(&other->forbidden_modifiers_);
  keycodes_.InternalSwap(&other->keycodes_);
  characters_.InternalSwap(&other->characters_);
  characters_ignoring_modifiers_.InternalSwap(&other->characters_ignoring_modifiers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeystrokePattern::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[104]);
}

// ===================================================================

class KeystrokeMonitorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KeystrokeMonitorRequest>()._has_bits_);
  static void set_has_advanced(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KeystrokeMonitorRequest::KeystrokeMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  patterns_to_ignore_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.KeystrokeMonitorRequest)
}
KeystrokeMonitorRequest::KeystrokeMonitorRequest(const KeystrokeMonitorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      patterns_to_ignore_(from.patterns_to_ignore_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  advanced_ = from.advanced_;
  // @@protoc_insertion_point(copy_constructor:iterm2.KeystrokeMonitorRequest)
}

inline void KeystrokeMonitorRequest::SharedCtor() {
advanced_ = false;
}

KeystrokeMonitorRequest::~KeystrokeMonitorRequest() {
  // @@protoc_insertion_point(destructor:iterm2.KeystrokeMonitorRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeystrokeMonitorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeystrokeMonitorRequest::ArenaDtor(void* object) {
  KeystrokeMonitorRequest* _this = reinterpret_cast< KeystrokeMonitorRequest* >(object);
  (void)_this;
}
void KeystrokeMonitorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeystrokeMonitorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeystrokeMonitorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.KeystrokeMonitorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patterns_to_ignore_.Clear();
  advanced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeystrokeMonitorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patterns_to_ignore(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool advanced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_advanced(&has_bits);
          advanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeystrokeMonitorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.KeystrokeMonitorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patterns_to_ignore_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_patterns_to_ignore(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool advanced = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_advanced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.KeystrokeMonitorRequest)
  return target;
}

size_t KeystrokeMonitorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.KeystrokeMonitorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1 [deprecated = true];
  total_size += 1UL * this->_internal_patterns_to_ignore_size();
  for (const auto& msg : this->patterns_to_ignore_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool advanced = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeystrokeMonitorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeystrokeMonitorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeystrokeMonitorRequest::GetClassData() const { return &_class_data_; }

void KeystrokeMonitorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeystrokeMonitorRequest *>(to)->MergeFrom(
      static_cast<const KeystrokeMonitorRequest &>(from));
}


void KeystrokeMonitorRequest::MergeFrom(const KeystrokeMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.KeystrokeMonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  patterns_to_ignore_.MergeFrom(from.patterns_to_ignore_);
  if (from._internal_has_advanced()) {
    _internal_set_advanced(from._internal_advanced());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeystrokeMonitorRequest::CopyFrom(const KeystrokeMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.KeystrokeMonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystrokeMonitorRequest::IsInitialized() const {
  return true;
}

void KeystrokeMonitorRequest::InternalSwap(KeystrokeMonitorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  patterns_to_ignore_.InternalSwap(&other->patterns_to_ignore_);
  swap(advanced_, other->advanced_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeystrokeMonitorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[105]);
}

// ===================================================================

class KeystrokeFilterRequest::_Internal {
 public:
};

KeystrokeFilterRequest::KeystrokeFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  patterns_to_ignore_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.KeystrokeFilterRequest)
}
KeystrokeFilterRequest::KeystrokeFilterRequest(const KeystrokeFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      patterns_to_ignore_(from.patterns_to_ignore_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.KeystrokeFilterRequest)
}

inline void KeystrokeFilterRequest::SharedCtor() {
}

KeystrokeFilterRequest::~KeystrokeFilterRequest() {
  // @@protoc_insertion_point(destructor:iterm2.KeystrokeFilterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeystrokeFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeystrokeFilterRequest::ArenaDtor(void* object) {
  KeystrokeFilterRequest* _this = reinterpret_cast< KeystrokeFilterRequest* >(object);
  (void)_this;
}
void KeystrokeFilterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeystrokeFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeystrokeFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.KeystrokeFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patterns_to_ignore_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeystrokeFilterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patterns_to_ignore(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeystrokeFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.KeystrokeFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patterns_to_ignore_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_patterns_to_ignore(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.KeystrokeFilterRequest)
  return target;
}

size_t KeystrokeFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.KeystrokeFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.KeystrokePattern patterns_to_ignore = 1;
  total_size += 1UL * this->_internal_patterns_to_ignore_size();
  for (const auto& msg : this->patterns_to_ignore_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeystrokeFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeystrokeFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeystrokeFilterRequest::GetClassData() const { return &_class_data_; }

void KeystrokeFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeystrokeFilterRequest *>(to)->MergeFrom(
      static_cast<const KeystrokeFilterRequest &>(from));
}


void KeystrokeFilterRequest::MergeFrom(const KeystrokeFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.KeystrokeFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  patterns_to_ignore_.MergeFrom(from.patterns_to_ignore_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeystrokeFilterRequest::CopyFrom(const KeystrokeFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.KeystrokeFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystrokeFilterRequest::IsInitialized() const {
  return true;
}

void KeystrokeFilterRequest::InternalSwap(KeystrokeFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  patterns_to_ignore_.InternalSwap(&other->patterns_to_ignore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeystrokeFilterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[106]);
}

// ===================================================================

class VariableMonitorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableMonitorRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VariableMonitorRequest::VariableMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.VariableMonitorRequest)
}
VariableMonitorRequest::VariableMonitorRequest(const VariableMonitorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  scope_ = from.scope_;
  // @@protoc_insertion_point(copy_constructor:iterm2.VariableMonitorRequest)
}

inline void VariableMonitorRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scope_ = 1;
}

VariableMonitorRequest::~VariableMonitorRequest() {
  // @@protoc_insertion_point(destructor:iterm2.VariableMonitorRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableMonitorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableMonitorRequest::ArenaDtor(void* object) {
  VariableMonitorRequest* _this = reinterpret_cast< VariableMonitorRequest* >(object);
  (void)_this;
}
void VariableMonitorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableMonitorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableMonitorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.VariableMonitorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    scope_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableMonitorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableMonitorRequest.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.VariableScope scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::VariableScope_IsValid(val))) {
            _internal_set_scope(static_cast<::iterm2::VariableScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableMonitorRequest.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableMonitorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.VariableMonitorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableMonitorRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .iterm2.VariableScope scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scope(), target);
  }

  // optional string identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableMonitorRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.VariableMonitorRequest)
  return target;
}

size_t VariableMonitorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.VariableMonitorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional .iterm2.VariableScope scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableMonitorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableMonitorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableMonitorRequest::GetClassData() const { return &_class_data_; }

void VariableMonitorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableMonitorRequest *>(to)->MergeFrom(
      static_cast<const VariableMonitorRequest &>(from));
}


void VariableMonitorRequest::MergeFrom(const VariableMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.VariableMonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableMonitorRequest::CopyFrom(const VariableMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.VariableMonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableMonitorRequest::IsInitialized() const {
  return true;
}

void VariableMonitorRequest::InternalSwap(VariableMonitorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  swap(scope_, other->scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableMonitorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[107]);
}

// ===================================================================

class ProfileChangeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileChangeRequest>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfileChangeRequest::ProfileChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ProfileChangeRequest)
}
ProfileChangeRequest::ProfileChangeRequest(const ProfileChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ProfileChangeRequest)
}

inline void ProfileChangeRequest::SharedCtor() {
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfileChangeRequest::~ProfileChangeRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ProfileChangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileChangeRequest::ArenaDtor(void* object) {
  ProfileChangeRequest* _this = reinterpret_cast< ProfileChangeRequest* >(object);
  (void)_this;
}
void ProfileChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ProfileChangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ProfileChangeRequest.guid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileChangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ProfileChangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ProfileChangeRequest.guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ProfileChangeRequest)
  return target;
}

size_t ProfileChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ProfileChangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string guid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileChangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileChangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileChangeRequest::GetClassData() const { return &_class_data_; }

void ProfileChangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileChangeRequest *>(to)->MergeFrom(
      static_cast<const ProfileChangeRequest &>(from));
}


void ProfileChangeRequest::MergeFrom(const ProfileChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ProfileChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guid()) {
    _internal_set_guid(from._internal_guid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileChangeRequest::CopyFrom(const ProfileChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ProfileChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileChangeRequest::IsInitialized() const {
  return true;
}

void ProfileChangeRequest::InternalSwap(ProfileChangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileChangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[108]);
}

// ===================================================================

class PromptMonitorRequest::_Internal {
 public:
};

PromptMonitorRequest::PromptMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  modes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PromptMonitorRequest)
}
PromptMonitorRequest::PromptMonitorRequest(const PromptMonitorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      modes_(from.modes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.PromptMonitorRequest)
}

inline void PromptMonitorRequest::SharedCtor() {
}

PromptMonitorRequest::~PromptMonitorRequest() {
  // @@protoc_insertion_point(destructor:iterm2.PromptMonitorRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PromptMonitorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PromptMonitorRequest::ArenaDtor(void* object) {
  PromptMonitorRequest* _this = reinterpret_cast< PromptMonitorRequest* >(object);
  (void)_this;
}
void PromptMonitorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromptMonitorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PromptMonitorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PromptMonitorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptMonitorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.PromptMonitorMode modes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::iterm2::PromptMonitorMode_IsValid(val))) {
              _internal_add_modes(static_cast<::iterm2::PromptMonitorMode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_modes(), ptr, ctx, ::iterm2::PromptMonitorMode_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptMonitorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PromptMonitorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.PromptMonitorMode modes = 1;
  for (int i = 0, n = this->_internal_modes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_modes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PromptMonitorRequest)
  return target;
}

size_t PromptMonitorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PromptMonitorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.PromptMonitorMode modes = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_modes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_modes(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptMonitorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PromptMonitorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptMonitorRequest::GetClassData() const { return &_class_data_; }

void PromptMonitorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PromptMonitorRequest *>(to)->MergeFrom(
      static_cast<const PromptMonitorRequest &>(from));
}


void PromptMonitorRequest::MergeFrom(const PromptMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PromptMonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptMonitorRequest::CopyFrom(const PromptMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PromptMonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptMonitorRequest::IsInitialized() const {
  return true;
}

void PromptMonitorRequest::InternalSwap(PromptMonitorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  modes_.InternalSwap(&other->modes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptMonitorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[109]);
}

// ===================================================================

class NotificationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::iterm2::RPCRegistrationRequest& rpc_registration_request(const NotificationRequest* msg);
  static const ::iterm2::KeystrokeMonitorRequest& keystroke_monitor_request(const NotificationRequest* msg);
  static const ::iterm2::VariableMonitorRequest& variable_monitor_request(const NotificationRequest* msg);
  static const ::iterm2::ProfileChangeRequest& profile_change_request(const NotificationRequest* msg);
  static const ::iterm2::KeystrokeFilterRequest& keystroke_filter_request(const NotificationRequest* msg);
  static const ::iterm2::PromptMonitorRequest& prompt_monitor_request(const NotificationRequest* msg);
};

const ::iterm2::RPCRegistrationRequest&
NotificationRequest::_Internal::rpc_registration_request(const NotificationRequest* msg) {
  return *msg->arguments_.rpc_registration_request_;
}
const ::iterm2::KeystrokeMonitorRequest&
NotificationRequest::_Internal::keystroke_monitor_request(const NotificationRequest* msg) {
  return *msg->arguments_.keystroke_monitor_request_;
}
const ::iterm2::VariableMonitorRequest&
NotificationRequest::_Internal::variable_monitor_request(const NotificationRequest* msg) {
  return *msg->arguments_.variable_monitor_request_;
}
const ::iterm2::ProfileChangeRequest&
NotificationRequest::_Internal::profile_change_request(const NotificationRequest* msg) {
  return *msg->arguments_.profile_change_request_;
}
const ::iterm2::KeystrokeFilterRequest&
NotificationRequest::_Internal::keystroke_filter_request(const NotificationRequest* msg) {
  return *msg->arguments_.keystroke_filter_request_;
}
const ::iterm2::PromptMonitorRequest&
NotificationRequest::_Internal::prompt_monitor_request(const NotificationRequest* msg) {
  return *msg->arguments_.prompt_monitor_request_;
}
void NotificationRequest::set_allocated_rpc_registration_request(::iterm2::RPCRegistrationRequest* rpc_registration_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arguments();
  if (rpc_registration_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::RPCRegistrationRequest>::GetOwningArena(rpc_registration_request);
    if (message_arena != submessage_arena) {
      rpc_registration_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_registration_request, submessage_arena);
    }
    set_has_rpc_registration_request();
    arguments_.rpc_registration_request_ = rpc_registration_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.rpc_registration_request)
}
void NotificationRequest::set_allocated_keystroke_monitor_request(::iterm2::KeystrokeMonitorRequest* keystroke_monitor_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arguments();
  if (keystroke_monitor_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::KeystrokeMonitorRequest>::GetOwningArena(keystroke_monitor_request);
    if (message_arena != submessage_arena) {
      keystroke_monitor_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keystroke_monitor_request, submessage_arena);
    }
    set_has_keystroke_monitor_request();
    arguments_.keystroke_monitor_request_ = keystroke_monitor_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.keystroke_monitor_request)
}
void NotificationRequest::set_allocated_variable_monitor_request(::iterm2::VariableMonitorRequest* variable_monitor_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arguments();
  if (variable_monitor_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::VariableMonitorRequest>::GetOwningArena(variable_monitor_request);
    if (message_arena != submessage_arena) {
      variable_monitor_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variable_monitor_request, submessage_arena);
    }
    set_has_variable_monitor_request();
    arguments_.variable_monitor_request_ = variable_monitor_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.variable_monitor_request)
}
void NotificationRequest::set_allocated_profile_change_request(::iterm2::ProfileChangeRequest* profile_change_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arguments();
  if (profile_change_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::ProfileChangeRequest>::GetOwningArena(profile_change_request);
    if (message_arena != submessage_arena) {
      profile_change_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_change_request, submessage_arena);
    }
    set_has_profile_change_request();
    arguments_.profile_change_request_ = profile_change_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.profile_change_request)
}
void NotificationRequest::set_allocated_keystroke_filter_request(::iterm2::KeystrokeFilterRequest* keystroke_filter_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arguments();
  if (keystroke_filter_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::KeystrokeFilterRequest>::GetOwningArena(keystroke_filter_request);
    if (message_arena != submessage_arena) {
      keystroke_filter_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keystroke_filter_request, submessage_arena);
    }
    set_has_keystroke_filter_request();
    arguments_.keystroke_filter_request_ = keystroke_filter_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.keystroke_filter_request)
}
void NotificationRequest::set_allocated_prompt_monitor_request(::iterm2::PromptMonitorRequest* prompt_monitor_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arguments();
  if (prompt_monitor_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PromptMonitorRequest>::GetOwningArena(prompt_monitor_request);
    if (message_arena != submessage_arena) {
      prompt_monitor_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prompt_monitor_request, submessage_arena);
    }
    set_has_prompt_monitor_request();
    arguments_.prompt_monitor_request_ = prompt_monitor_request;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.NotificationRequest.prompt_monitor_request)
}
NotificationRequest::NotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.NotificationRequest)
}
NotificationRequest::NotificationRequest(const NotificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  ::memcpy(&subscribe_, &from.subscribe_,
    static_cast<size_t>(reinterpret_cast<char*>(&notification_type_) -
    reinterpret_cast<char*>(&subscribe_)) + sizeof(notification_type_));
  clear_has_arguments();
  switch (from.arguments_case()) {
    case kRpcRegistrationRequest: {
      _internal_mutable_rpc_registration_request()->::iterm2::RPCRegistrationRequest::MergeFrom(from._internal_rpc_registration_request());
      break;
    }
    case kKeystrokeMonitorRequest: {
      _internal_mutable_keystroke_monitor_request()->::iterm2::KeystrokeMonitorRequest::MergeFrom(from._internal_keystroke_monitor_request());
      break;
    }
    case kVariableMonitorRequest: {
      _internal_mutable_variable_monitor_request()->::iterm2::VariableMonitorRequest::MergeFrom(from._internal_variable_monitor_request());
      break;
    }
    case kProfileChangeRequest: {
      _internal_mutable_profile_change_request()->::iterm2::ProfileChangeRequest::MergeFrom(from._internal_profile_change_request());
      break;
    }
    case kKeystrokeFilterRequest: {
      _internal_mutable_keystroke_filter_request()->::iterm2::KeystrokeFilterRequest::MergeFrom(from._internal_keystroke_filter_request());
      break;
    }
    case kPromptMonitorRequest: {
      _internal_mutable_prompt_monitor_request()->::iterm2::PromptMonitorRequest::MergeFrom(from._internal_prompt_monitor_request());
      break;
    }
    case ARGUMENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.NotificationRequest)
}

inline void NotificationRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subscribe_ = false;
notification_type_ = 1;
clear_has_arguments();
}

NotificationRequest::~NotificationRequest() {
  // @@protoc_insertion_point(destructor:iterm2.NotificationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_arguments()) {
    clear_arguments();
  }
}

void NotificationRequest::ArenaDtor(void* object) {
  NotificationRequest* _this = reinterpret_cast< NotificationRequest* >(object);
  (void)_this;
}
void NotificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationRequest::clear_arguments() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.NotificationRequest)
  switch (arguments_case()) {
    case kRpcRegistrationRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete arguments_.rpc_registration_request_;
      }
      break;
    }
    case kKeystrokeMonitorRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete arguments_.keystroke_monitor_request_;
      }
      break;
    }
    case kVariableMonitorRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete arguments_.variable_monitor_request_;
      }
      break;
    }
    case kProfileChangeRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete arguments_.profile_change_request_;
      }
      break;
    }
    case kKeystrokeFilterRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete arguments_.keystroke_filter_request_;
      }
      break;
    }
    case kPromptMonitorRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete arguments_.prompt_monitor_request_;
      }
      break;
    }
    case ARGUMENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGUMENTS_NOT_SET;
}


void NotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.NotificationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    subscribe_ = false;
    notification_type_ = 1;
  }
  clear_arguments();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.NotificationRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool subscribe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_subscribe(&has_bits);
          subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.NotificationType notification_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::NotificationType_IsValid(val))) {
            _internal_set_notification_type(static_cast<::iterm2::NotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .iterm2.RPCRegistrationRequest rpc_registration_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_registration_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.KeystrokeMonitorRequest keystroke_monitor_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_keystroke_monitor_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.VariableMonitorRequest variable_monitor_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable_monitor_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.ProfileChangeRequest profile_change_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_change_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.KeystrokeFilterRequest keystroke_filter_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_keystroke_filter_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PromptMonitorRequest prompt_monitor_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt_monitor_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.NotificationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.NotificationRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional bool subscribe = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_subscribe(), target);
  }

  // optional .iterm2.NotificationType notification_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notification_type(), target);
  }

  switch (arguments_case()) {
    case kRpcRegistrationRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::rpc_registration_request(this), target, stream);
      break;
    }
    case kKeystrokeMonitorRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::keystroke_monitor_request(this), target, stream);
      break;
    }
    case kVariableMonitorRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::variable_monitor_request(this), target, stream);
      break;
    }
    case kProfileChangeRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::profile_change_request(this), target, stream);
      break;
    }
    case kKeystrokeFilterRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::keystroke_filter_request(this), target, stream);
      break;
    }
    case kPromptMonitorRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::prompt_monitor_request(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.NotificationRequest)
  return target;
}

size_t NotificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.NotificationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional bool subscribe = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .iterm2.NotificationType notification_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notification_type());
    }

  }
  switch (arguments_case()) {
    // .iterm2.RPCRegistrationRequest rpc_registration_request = 4;
    case kRpcRegistrationRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_.rpc_registration_request_);
      break;
    }
    // .iterm2.KeystrokeMonitorRequest keystroke_monitor_request = 5;
    case kKeystrokeMonitorRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_.keystroke_monitor_request_);
      break;
    }
    // .iterm2.VariableMonitorRequest variable_monitor_request = 6;
    case kVariableMonitorRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_.variable_monitor_request_);
      break;
    }
    // .iterm2.ProfileChangeRequest profile_change_request = 7;
    case kProfileChangeRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_.profile_change_request_);
      break;
    }
    // .iterm2.KeystrokeFilterRequest keystroke_filter_request = 8;
    case kKeystrokeFilterRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_.keystroke_filter_request_);
      break;
    }
    // .iterm2.PromptMonitorRequest prompt_monitor_request = 9;
    case kPromptMonitorRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arguments_.prompt_monitor_request_);
      break;
    }
    case ARGUMENTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotificationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationRequest::GetClassData() const { return &_class_data_; }

void NotificationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotificationRequest *>(to)->MergeFrom(
      static_cast<const NotificationRequest &>(from));
}


void NotificationRequest::MergeFrom(const NotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.NotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      subscribe_ = from.subscribe_;
    }
    if (cached_has_bits & 0x00000004u) {
      notification_type_ = from.notification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.arguments_case()) {
    case kRpcRegistrationRequest: {
      _internal_mutable_rpc_registration_request()->::iterm2::RPCRegistrationRequest::MergeFrom(from._internal_rpc_registration_request());
      break;
    }
    case kKeystrokeMonitorRequest: {
      _internal_mutable_keystroke_monitor_request()->::iterm2::KeystrokeMonitorRequest::MergeFrom(from._internal_keystroke_monitor_request());
      break;
    }
    case kVariableMonitorRequest: {
      _internal_mutable_variable_monitor_request()->::iterm2::VariableMonitorRequest::MergeFrom(from._internal_variable_monitor_request());
      break;
    }
    case kProfileChangeRequest: {
      _internal_mutable_profile_change_request()->::iterm2::ProfileChangeRequest::MergeFrom(from._internal_profile_change_request());
      break;
    }
    case kKeystrokeFilterRequest: {
      _internal_mutable_keystroke_filter_request()->::iterm2::KeystrokeFilterRequest::MergeFrom(from._internal_keystroke_filter_request());
      break;
    }
    case kPromptMonitorRequest: {
      _internal_mutable_prompt_monitor_request()->::iterm2::PromptMonitorRequest::MergeFrom(from._internal_prompt_monitor_request());
      break;
    }
    case ARGUMENTS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationRequest::CopyFrom(const NotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.NotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationRequest::IsInitialized() const {
  return true;
}

void NotificationRequest::InternalSwap(NotificationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  swap(subscribe_, other->subscribe_);
  swap(notification_type_, other->notification_type_);
  swap(arguments_, other->arguments_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[110]);
}

// ===================================================================

class NotificationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NotificationResponse::NotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.NotificationResponse)
}
NotificationResponse::NotificationResponse(const NotificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.NotificationResponse)
}

inline void NotificationResponse::SharedCtor() {
status_ = 0;
}

NotificationResponse::~NotificationResponse() {
  // @@protoc_insertion_point(destructor:iterm2.NotificationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NotificationResponse::ArenaDtor(void* object) {
  NotificationResponse* _this = reinterpret_cast< NotificationResponse* >(object);
  (void)_this;
}
void NotificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.NotificationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.NotificationResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::NotificationResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::NotificationResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.NotificationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.NotificationResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.NotificationResponse)
  return target;
}

size_t NotificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.NotificationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.NotificationResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotificationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationResponse::GetClassData() const { return &_class_data_; }

void NotificationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotificationResponse *>(to)->MergeFrom(
      static_cast<const NotificationResponse &>(from));
}


void NotificationResponse::MergeFrom(const NotificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.NotificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationResponse::CopyFrom(const NotificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.NotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationResponse::IsInitialized() const {
  return true;
}

void NotificationResponse::InternalSwap(NotificationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[111]);
}

// ===================================================================

class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._has_bits_);
  static const ::iterm2::KeystrokeNotification& keystroke_notification(const Notification* msg);
  static void set_has_keystroke_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::ScreenUpdateNotification& screen_update_notification(const Notification* msg);
  static void set_has_screen_update_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::iterm2::PromptNotification& prompt_notification(const Notification* msg);
  static void set_has_prompt_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::iterm2::LocationChangeNotification& location_change_notification(const Notification* msg);
  static void set_has_location_change_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::iterm2::CustomEscapeSequenceNotification& custom_escape_sequence_notification(const Notification* msg);
  static void set_has_custom_escape_sequence_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::iterm2::NewSessionNotification& new_session_notification(const Notification* msg);
  static void set_has_new_session_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::iterm2::TerminateSessionNotification& terminate_session_notification(const Notification* msg);
  static void set_has_terminate_session_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::iterm2::LayoutChangedNotification& layout_changed_notification(const Notification* msg);
  static void set_has_layout_changed_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::iterm2::FocusChangedNotification& focus_changed_notification(const Notification* msg);
  static void set_has_focus_changed_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::iterm2::ServerOriginatedRPCNotification& server_originated_rpc_notification(const Notification* msg);
  static void set_has_server_originated_rpc_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::iterm2::BroadcastDomainsChangedNotification& broadcast_domains_changed(const Notification* msg);
  static void set_has_broadcast_domains_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::iterm2::VariableChangedNotification& variable_changed_notification(const Notification* msg);
  static void set_has_variable_changed_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::iterm2::ProfileChangedNotification& profile_changed_notification(const Notification* msg);
  static void set_has_profile_changed_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::iterm2::KeystrokeNotification&
Notification::_Internal::keystroke_notification(const Notification* msg) {
  return *msg->keystroke_notification_;
}
const ::iterm2::ScreenUpdateNotification&
Notification::_Internal::screen_update_notification(const Notification* msg) {
  return *msg->screen_update_notification_;
}
const ::iterm2::PromptNotification&
Notification::_Internal::prompt_notification(const Notification* msg) {
  return *msg->prompt_notification_;
}
const ::iterm2::LocationChangeNotification&
Notification::_Internal::location_change_notification(const Notification* msg) {
  return *msg->location_change_notification_;
}
const ::iterm2::CustomEscapeSequenceNotification&
Notification::_Internal::custom_escape_sequence_notification(const Notification* msg) {
  return *msg->custom_escape_sequence_notification_;
}
const ::iterm2::NewSessionNotification&
Notification::_Internal::new_session_notification(const Notification* msg) {
  return *msg->new_session_notification_;
}
const ::iterm2::TerminateSessionNotification&
Notification::_Internal::terminate_session_notification(const Notification* msg) {
  return *msg->terminate_session_notification_;
}
const ::iterm2::LayoutChangedNotification&
Notification::_Internal::layout_changed_notification(const Notification* msg) {
  return *msg->layout_changed_notification_;
}
const ::iterm2::FocusChangedNotification&
Notification::_Internal::focus_changed_notification(const Notification* msg) {
  return *msg->focus_changed_notification_;
}
const ::iterm2::ServerOriginatedRPCNotification&
Notification::_Internal::server_originated_rpc_notification(const Notification* msg) {
  return *msg->server_originated_rpc_notification_;
}
const ::iterm2::BroadcastDomainsChangedNotification&
Notification::_Internal::broadcast_domains_changed(const Notification* msg) {
  return *msg->broadcast_domains_changed_;
}
const ::iterm2::VariableChangedNotification&
Notification::_Internal::variable_changed_notification(const Notification* msg) {
  return *msg->variable_changed_notification_;
}
const ::iterm2::ProfileChangedNotification&
Notification::_Internal::profile_changed_notification(const Notification* msg) {
  return *msg->profile_changed_notification_;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keystroke_notification()) {
    keystroke_notification_ = new ::iterm2::KeystrokeNotification(*from.keystroke_notification_);
  } else {
    keystroke_notification_ = nullptr;
  }
  if (from._internal_has_screen_update_notification()) {
    screen_update_notification_ = new ::iterm2::ScreenUpdateNotification(*from.screen_update_notification_);
  } else {
    screen_update_notification_ = nullptr;
  }
  if (from._internal_has_prompt_notification()) {
    prompt_notification_ = new ::iterm2::PromptNotification(*from.prompt_notification_);
  } else {
    prompt_notification_ = nullptr;
  }
  if (from._internal_has_location_change_notification()) {
    location_change_notification_ = new ::iterm2::LocationChangeNotification(*from.location_change_notification_);
  } else {
    location_change_notification_ = nullptr;
  }
  if (from._internal_has_custom_escape_sequence_notification()) {
    custom_escape_sequence_notification_ = new ::iterm2::CustomEscapeSequenceNotification(*from.custom_escape_sequence_notification_);
  } else {
    custom_escape_sequence_notification_ = nullptr;
  }
  if (from._internal_has_new_session_notification()) {
    new_session_notification_ = new ::iterm2::NewSessionNotification(*from.new_session_notification_);
  } else {
    new_session_notification_ = nullptr;
  }
  if (from._internal_has_terminate_session_notification()) {
    terminate_session_notification_ = new ::iterm2::TerminateSessionNotification(*from.terminate_session_notification_);
  } else {
    terminate_session_notification_ = nullptr;
  }
  if (from._internal_has_layout_changed_notification()) {
    layout_changed_notification_ = new ::iterm2::LayoutChangedNotification(*from.layout_changed_notification_);
  } else {
    layout_changed_notification_ = nullptr;
  }
  if (from._internal_has_focus_changed_notification()) {
    focus_changed_notification_ = new ::iterm2::FocusChangedNotification(*from.focus_changed_notification_);
  } else {
    focus_changed_notification_ = nullptr;
  }
  if (from._internal_has_server_originated_rpc_notification()) {
    server_originated_rpc_notification_ = new ::iterm2::ServerOriginatedRPCNotification(*from.server_originated_rpc_notification_);
  } else {
    server_originated_rpc_notification_ = nullptr;
  }
  if (from._internal_has_broadcast_domains_changed()) {
    broadcast_domains_changed_ = new ::iterm2::BroadcastDomainsChangedNotification(*from.broadcast_domains_changed_);
  } else {
    broadcast_domains_changed_ = nullptr;
  }
  if (from._internal_has_variable_changed_notification()) {
    variable_changed_notification_ = new ::iterm2::VariableChangedNotification(*from.variable_changed_notification_);
  } else {
    variable_changed_notification_ = nullptr;
  }
  if (from._internal_has_profile_changed_notification()) {
    profile_changed_notification_ = new ::iterm2::ProfileChangedNotification(*from.profile_changed_notification_);
  } else {
    profile_changed_notification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.Notification)
}

inline void Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keystroke_notification_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&profile_changed_notification_) -
    reinterpret_cast<char*>(&keystroke_notification_)) + sizeof(profile_changed_notification_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:iterm2.Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete keystroke_notification_;
  if (this != internal_default_instance()) delete screen_update_notification_;
  if (this != internal_default_instance()) delete prompt_notification_;
  if (this != internal_default_instance()) delete location_change_notification_;
  if (this != internal_default_instance()) delete custom_escape_sequence_notification_;
  if (this != internal_default_instance()) delete new_session_notification_;
  if (this != internal_default_instance()) delete terminate_session_notification_;
  if (this != internal_default_instance()) delete layout_changed_notification_;
  if (this != internal_default_instance()) delete focus_changed_notification_;
  if (this != internal_default_instance()) delete server_originated_rpc_notification_;
  if (this != internal_default_instance()) delete broadcast_domains_changed_;
  if (this != internal_default_instance()) delete variable_changed_notification_;
  if (this != internal_default_instance()) delete profile_changed_notification_;
}

void Notification::ArenaDtor(void* object) {
  Notification* _this = reinterpret_cast< Notification* >(object);
  (void)_this;
}
void Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(keystroke_notification_ != nullptr);
      keystroke_notification_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(screen_update_notification_ != nullptr);
      screen_update_notification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(prompt_notification_ != nullptr);
      prompt_notification_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(location_change_notification_ != nullptr);
      location_change_notification_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(custom_escape_sequence_notification_ != nullptr);
      custom_escape_sequence_notification_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(new_session_notification_ != nullptr);
      new_session_notification_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(terminate_session_notification_ != nullptr);
      terminate_session_notification_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(layout_changed_notification_ != nullptr);
      layout_changed_notification_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(focus_changed_notification_ != nullptr);
      focus_changed_notification_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(server_originated_rpc_notification_ != nullptr);
      server_originated_rpc_notification_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(broadcast_domains_changed_ != nullptr);
      broadcast_domains_changed_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(variable_changed_notification_ != nullptr);
      variable_changed_notification_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(profile_changed_notification_ != nullptr);
      profile_changed_notification_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.KeystrokeNotification keystroke_notification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keystroke_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.ScreenUpdateNotification screen_update_notification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_update_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.PromptNotification prompt_notification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.LocationChangeNotification location_change_notification = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_change_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.CustomEscapeSequenceNotification custom_escape_sequence_notification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_escape_sequence_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.NewSessionNotification new_session_notification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_session_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.TerminateSessionNotification terminate_session_notification = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_terminate_session_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.LayoutChangedNotification layout_changed_notification = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout_changed_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.FocusChangedNotification focus_changed_notification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_focus_changed_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.ServerOriginatedRPCNotification server_originated_rpc_notification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_originated_rpc_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.BroadcastDomainsChangedNotification broadcast_domains_changed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast_domains_changed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.VariableChangedNotification variable_changed_notification = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_variable_changed_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.ProfileChangedNotification profile_changed_notification = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_changed_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.KeystrokeNotification keystroke_notification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::keystroke_notification(this), target, stream);
  }

  // optional .iterm2.ScreenUpdateNotification screen_update_notification = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::screen_update_notification(this), target, stream);
  }

  // optional .iterm2.PromptNotification prompt_notification = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prompt_notification(this), target, stream);
  }

  // optional .iterm2.LocationChangeNotification location_change_notification = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location_change_notification(this), target, stream);
  }

  // optional .iterm2.CustomEscapeSequenceNotification custom_escape_sequence_notification = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::custom_escape_sequence_notification(this), target, stream);
  }

  // optional .iterm2.NewSessionNotification new_session_notification = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::new_session_notification(this), target, stream);
  }

  // optional .iterm2.TerminateSessionNotification terminate_session_notification = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::terminate_session_notification(this), target, stream);
  }

  // optional .iterm2.LayoutChangedNotification layout_changed_notification = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::layout_changed_notification(this), target, stream);
  }

  // optional .iterm2.FocusChangedNotification focus_changed_notification = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::focus_changed_notification(this), target, stream);
  }

  // optional .iterm2.ServerOriginatedRPCNotification server_originated_rpc_notification = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::server_originated_rpc_notification(this), target, stream);
  }

  // optional .iterm2.BroadcastDomainsChangedNotification broadcast_domains_changed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::broadcast_domains_changed(this), target, stream);
  }

  // optional .iterm2.VariableChangedNotification variable_changed_notification = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::variable_changed_notification(this), target, stream);
  }

  // optional .iterm2.ProfileChangedNotification profile_changed_notification = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::profile_changed_notification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .iterm2.KeystrokeNotification keystroke_notification = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keystroke_notification_);
    }

    // optional .iterm2.ScreenUpdateNotification screen_update_notification = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screen_update_notification_);
    }

    // optional .iterm2.PromptNotification prompt_notification = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prompt_notification_);
    }

    // optional .iterm2.LocationChangeNotification location_change_notification = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_change_notification_);
    }

    // optional .iterm2.CustomEscapeSequenceNotification custom_escape_sequence_notification = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_escape_sequence_notification_);
    }

    // optional .iterm2.NewSessionNotification new_session_notification = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_session_notification_);
    }

    // optional .iterm2.TerminateSessionNotification terminate_session_notification = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *terminate_session_notification_);
    }

    // optional .iterm2.LayoutChangedNotification layout_changed_notification = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layout_changed_notification_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .iterm2.FocusChangedNotification focus_changed_notification = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *focus_changed_notification_);
    }

    // optional .iterm2.ServerOriginatedRPCNotification server_originated_rpc_notification = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_originated_rpc_notification_);
    }

    // optional .iterm2.BroadcastDomainsChangedNotification broadcast_domains_changed = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broadcast_domains_changed_);
    }

    // optional .iterm2.VariableChangedNotification variable_changed_notification = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variable_changed_notification_);
    }

    // optional .iterm2.ProfileChangedNotification profile_changed_notification = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_changed_notification_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }

void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Notification *>(to)->MergeFrom(
      static_cast<const Notification &>(from));
}


void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_keystroke_notification()->::iterm2::KeystrokeNotification::MergeFrom(from._internal_keystroke_notification());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_screen_update_notification()->::iterm2::ScreenUpdateNotification::MergeFrom(from._internal_screen_update_notification());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_prompt_notification()->::iterm2::PromptNotification::MergeFrom(from._internal_prompt_notification());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_location_change_notification()->::iterm2::LocationChangeNotification::MergeFrom(from._internal_location_change_notification());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_custom_escape_sequence_notification()->::iterm2::CustomEscapeSequenceNotification::MergeFrom(from._internal_custom_escape_sequence_notification());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_new_session_notification()->::iterm2::NewSessionNotification::MergeFrom(from._internal_new_session_notification());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_terminate_session_notification()->::iterm2::TerminateSessionNotification::MergeFrom(from._internal_terminate_session_notification());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_layout_changed_notification()->::iterm2::LayoutChangedNotification::MergeFrom(from._internal_layout_changed_notification());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_focus_changed_notification()->::iterm2::FocusChangedNotification::MergeFrom(from._internal_focus_changed_notification());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_server_originated_rpc_notification()->::iterm2::ServerOriginatedRPCNotification::MergeFrom(from._internal_server_originated_rpc_notification());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_broadcast_domains_changed()->::iterm2::BroadcastDomainsChangedNotification::MergeFrom(from._internal_broadcast_domains_changed());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_variable_changed_notification()->::iterm2::VariableChangedNotification::MergeFrom(from._internal_variable_changed_notification());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_profile_changed_notification()->::iterm2::ProfileChangedNotification::MergeFrom(from._internal_profile_changed_notification());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, profile_changed_notification_)
      + sizeof(Notification::profile_changed_notification_)
      - PROTOBUF_FIELD_OFFSET(Notification, keystroke_notification_)>(
          reinterpret_cast<char*>(&keystroke_notification_),
          reinterpret_cast<char*>(&other->keystroke_notification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[112]);
}

// ===================================================================

class ProfileChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileChangedNotification>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfileChangedNotification::ProfileChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ProfileChangedNotification)
}
ProfileChangedNotification::ProfileChangedNotification(const ProfileChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ProfileChangedNotification)
}

inline void ProfileChangedNotification::SharedCtor() {
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfileChangedNotification::~ProfileChangedNotification() {
  // @@protoc_insertion_point(destructor:iterm2.ProfileChangedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileChangedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileChangedNotification::ArenaDtor(void* object) {
  ProfileChangedNotification* _this = reinterpret_cast< ProfileChangedNotification* >(object);
  (void)_this;
}
void ProfileChangedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ProfileChangedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ProfileChangedNotification.guid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileChangedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ProfileChangedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ProfileChangedNotification.guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ProfileChangedNotification)
  return target;
}

size_t ProfileChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ProfileChangedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string guid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileChangedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileChangedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileChangedNotification::GetClassData() const { return &_class_data_; }

void ProfileChangedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileChangedNotification *>(to)->MergeFrom(
      static_cast<const ProfileChangedNotification &>(from));
}


void ProfileChangedNotification::MergeFrom(const ProfileChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ProfileChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guid()) {
    _internal_set_guid(from._internal_guid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileChangedNotification::CopyFrom(const ProfileChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ProfileChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileChangedNotification::IsInitialized() const {
  return true;
}

void ProfileChangedNotification::InternalSwap(ProfileChangedNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileChangedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[113]);
}

// ===================================================================

class VariableChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableChangedNotification>()._has_bits_);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_json_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VariableChangedNotification::VariableChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.VariableChangedNotification)
}
VariableChangedNotification::VariableChangedNotification(const VariableChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  json_new_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_new_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_new_value()) {
    json_new_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_new_value(), 
      GetArenaForAllocation());
  }
  scope_ = from.scope_;
  // @@protoc_insertion_point(copy_constructor:iterm2.VariableChangedNotification)
}

inline void VariableChangedNotification::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_new_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_new_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scope_ = 1;
}

VariableChangedNotification::~VariableChangedNotification() {
  // @@protoc_insertion_point(destructor:iterm2.VariableChangedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableChangedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_new_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableChangedNotification::ArenaDtor(void* object) {
  VariableChangedNotification* _this = reinterpret_cast< VariableChangedNotification* >(object);
  (void)_this;
}
void VariableChangedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.VariableChangedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      json_new_value_.ClearNonDefaultToEmpty();
    }
    scope_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.VariableScope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::VariableScope_IsValid(val))) {
            _internal_set_scope(static_cast<::iterm2::VariableScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableChangedNotification.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableChangedNotification.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_new_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_json_new_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.VariableChangedNotification.json_new_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableChangedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.VariableChangedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.VariableScope scope = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scope(), target);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableChangedNotification.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableChangedNotification.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string json_new_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_new_value().data(), static_cast<int>(this->_internal_json_new_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.VariableChangedNotification.json_new_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_new_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.VariableChangedNotification)
  return target;
}

size_t VariableChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.VariableChangedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string json_new_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_new_value());
    }

    // optional .iterm2.VariableScope scope = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableChangedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableChangedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableChangedNotification::GetClassData() const { return &_class_data_; }

void VariableChangedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VariableChangedNotification *>(to)->MergeFrom(
      static_cast<const VariableChangedNotification &>(from));
}


void VariableChangedNotification::MergeFrom(const VariableChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.VariableChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_json_new_value(from._internal_json_new_value());
    }
    if (cached_has_bits & 0x00000008u) {
      scope_ = from.scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableChangedNotification::CopyFrom(const VariableChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.VariableChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableChangedNotification::IsInitialized() const {
  return true;
}

void VariableChangedNotification::InternalSwap(VariableChangedNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_new_value_, lhs_arena,
      &other->json_new_value_, rhs_arena
  );
  swap(scope_, other->scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableChangedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[114]);
}

// ===================================================================

class BroadcastDomainsChangedNotification::_Internal {
 public:
};

BroadcastDomainsChangedNotification::BroadcastDomainsChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  broadcast_domains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.BroadcastDomainsChangedNotification)
}
BroadcastDomainsChangedNotification::BroadcastDomainsChangedNotification(const BroadcastDomainsChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broadcast_domains_(from.broadcast_domains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.BroadcastDomainsChangedNotification)
}

inline void BroadcastDomainsChangedNotification::SharedCtor() {
}

BroadcastDomainsChangedNotification::~BroadcastDomainsChangedNotification() {
  // @@protoc_insertion_point(destructor:iterm2.BroadcastDomainsChangedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BroadcastDomainsChangedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BroadcastDomainsChangedNotification::ArenaDtor(void* object) {
  BroadcastDomainsChangedNotification* _this = reinterpret_cast< BroadcastDomainsChangedNotification* >(object);
  (void)_this;
}
void BroadcastDomainsChangedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastDomainsChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BroadcastDomainsChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.BroadcastDomainsChangedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_domains_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastDomainsChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcast_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastDomainsChangedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.BroadcastDomainsChangedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcast_domains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_broadcast_domains(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.BroadcastDomainsChangedNotification)
  return target;
}

size_t BroadcastDomainsChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.BroadcastDomainsChangedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.BroadcastDomain broadcast_domains = 1;
  total_size += 1UL * this->_internal_broadcast_domains_size();
  for (const auto& msg : this->broadcast_domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastDomainsChangedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BroadcastDomainsChangedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastDomainsChangedNotification::GetClassData() const { return &_class_data_; }

void BroadcastDomainsChangedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BroadcastDomainsChangedNotification *>(to)->MergeFrom(
      static_cast<const BroadcastDomainsChangedNotification &>(from));
}


void BroadcastDomainsChangedNotification::MergeFrom(const BroadcastDomainsChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.BroadcastDomainsChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  broadcast_domains_.MergeFrom(from.broadcast_domains_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastDomainsChangedNotification::CopyFrom(const BroadcastDomainsChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.BroadcastDomainsChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastDomainsChangedNotification::IsInitialized() const {
  return true;
}

void BroadcastDomainsChangedNotification::InternalSwap(BroadcastDomainsChangedNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  broadcast_domains_.InternalSwap(&other->broadcast_domains_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastDomainsChangedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[115]);
}

// ===================================================================

class ServerOriginatedRPC_RPCArgument::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerOriginatedRPC_RPCArgument>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ServerOriginatedRPC_RPCArgument::ServerOriginatedRPC_RPCArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ServerOriginatedRPC.RPCArgument)
}
ServerOriginatedRPC_RPCArgument::ServerOriginatedRPC_RPCArgument(const ServerOriginatedRPC_RPCArgument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ServerOriginatedRPC.RPCArgument)
}

inline void ServerOriginatedRPC_RPCArgument::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerOriginatedRPC_RPCArgument::~ServerOriginatedRPC_RPCArgument() {
  // @@protoc_insertion_point(destructor:iterm2.ServerOriginatedRPC.RPCArgument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerOriginatedRPC_RPCArgument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerOriginatedRPC_RPCArgument::ArenaDtor(void* object) {
  ServerOriginatedRPC_RPCArgument* _this = reinterpret_cast< ServerOriginatedRPC_RPCArgument* >(object);
  (void)_this;
}
void ServerOriginatedRPC_RPCArgument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerOriginatedRPC_RPCArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerOriginatedRPC_RPCArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ServerOriginatedRPC.RPCArgument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerOriginatedRPC_RPCArgument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPC.RPCArgument.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPC.RPCArgument.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerOriginatedRPC_RPCArgument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ServerOriginatedRPC.RPCArgument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ServerOriginatedRPC.RPCArgument.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string json_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ServerOriginatedRPC.RPCArgument.json_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ServerOriginatedRPC.RPCArgument)
  return target;
}

size_t ServerOriginatedRPC_RPCArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ServerOriginatedRPC.RPCArgument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string json_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerOriginatedRPC_RPCArgument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerOriginatedRPC_RPCArgument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerOriginatedRPC_RPCArgument::GetClassData() const { return &_class_data_; }

void ServerOriginatedRPC_RPCArgument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerOriginatedRPC_RPCArgument *>(to)->MergeFrom(
      static_cast<const ServerOriginatedRPC_RPCArgument &>(from));
}


void ServerOriginatedRPC_RPCArgument::MergeFrom(const ServerOriginatedRPC_RPCArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ServerOriginatedRPC.RPCArgument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_value(from._internal_json_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerOriginatedRPC_RPCArgument::CopyFrom(const ServerOriginatedRPC_RPCArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ServerOriginatedRPC.RPCArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOriginatedRPC_RPCArgument::IsInitialized() const {
  return true;
}

void ServerOriginatedRPC_RPCArgument::InternalSwap(ServerOriginatedRPC_RPCArgument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerOriginatedRPC_RPCArgument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[116]);
}

// ===================================================================

class ServerOriginatedRPC::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerOriginatedRPC>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerOriginatedRPC::ServerOriginatedRPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ServerOriginatedRPC)
}
ServerOriginatedRPC::ServerOriginatedRPC(const ServerOriginatedRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ServerOriginatedRPC)
}

inline void ServerOriginatedRPC::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerOriginatedRPC::~ServerOriginatedRPC() {
  // @@protoc_insertion_point(destructor:iterm2.ServerOriginatedRPC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerOriginatedRPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerOriginatedRPC::ArenaDtor(void* object) {
  ServerOriginatedRPC* _this = reinterpret_cast< ServerOriginatedRPC* >(object);
  (void)_this;
}
void ServerOriginatedRPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerOriginatedRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerOriginatedRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ServerOriginatedRPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerOriginatedRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.ServerOriginatedRPC.RPCArgument arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerOriginatedRPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ServerOriginatedRPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ServerOriginatedRPC.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .iterm2.ServerOriginatedRPC.RPCArgument arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_arguments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ServerOriginatedRPC)
  return target;
}

size_t ServerOriginatedRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ServerOriginatedRPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ServerOriginatedRPC.RPCArgument arguments = 3;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerOriginatedRPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerOriginatedRPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerOriginatedRPC::GetClassData() const { return &_class_data_; }

void ServerOriginatedRPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerOriginatedRPC *>(to)->MergeFrom(
      static_cast<const ServerOriginatedRPC &>(from));
}


void ServerOriginatedRPC::MergeFrom(const ServerOriginatedRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ServerOriginatedRPC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerOriginatedRPC::CopyFrom(const ServerOriginatedRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ServerOriginatedRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOriginatedRPC::IsInitialized() const {
  return true;
}

void ServerOriginatedRPC::InternalSwap(ServerOriginatedRPC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerOriginatedRPC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[117]);
}

// ===================================================================

class ServerOriginatedRPCNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerOriginatedRPCNotification>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::ServerOriginatedRPC& rpc(const ServerOriginatedRPCNotification* msg);
  static void set_has_rpc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::ServerOriginatedRPC&
ServerOriginatedRPCNotification::_Internal::rpc(const ServerOriginatedRPCNotification* msg) {
  return *msg->rpc_;
}
ServerOriginatedRPCNotification::ServerOriginatedRPCNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ServerOriginatedRPCNotification)
}
ServerOriginatedRPCNotification::ServerOriginatedRPCNotification(const ServerOriginatedRPCNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_id()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_rpc()) {
    rpc_ = new ::iterm2::ServerOriginatedRPC(*from.rpc_);
  } else {
    rpc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ServerOriginatedRPCNotification)
}

inline void ServerOriginatedRPCNotification::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rpc_ = nullptr;
}

ServerOriginatedRPCNotification::~ServerOriginatedRPCNotification() {
  // @@protoc_insertion_point(destructor:iterm2.ServerOriginatedRPCNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerOriginatedRPCNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rpc_;
}

void ServerOriginatedRPCNotification::ArenaDtor(void* object) {
  ServerOriginatedRPCNotification* _this = reinterpret_cast< ServerOriginatedRPCNotification* >(object);
  (void)_this;
}
void ServerOriginatedRPCNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerOriginatedRPCNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerOriginatedRPCNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ServerOriginatedRPCNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rpc_ != nullptr);
      rpc_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerOriginatedRPCNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ServerOriginatedRPCNotification.request_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.ServerOriginatedRPC rpc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerOriginatedRPCNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ServerOriginatedRPCNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ServerOriginatedRPCNotification.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional .iterm2.ServerOriginatedRPC rpc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rpc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ServerOriginatedRPCNotification)
  return target;
}

size_t ServerOriginatedRPCNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ServerOriginatedRPCNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_request_id());
    }

    // optional .iterm2.ServerOriginatedRPC rpc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerOriginatedRPCNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerOriginatedRPCNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerOriginatedRPCNotification::GetClassData() const { return &_class_data_; }

void ServerOriginatedRPCNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerOriginatedRPCNotification *>(to)->MergeFrom(
      static_cast<const ServerOriginatedRPCNotification &>(from));
}


void ServerOriginatedRPCNotification::MergeFrom(const ServerOriginatedRPCNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ServerOriginatedRPCNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_request_id(from._internal_request_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rpc()->::iterm2::ServerOriginatedRPC::MergeFrom(from._internal_rpc());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerOriginatedRPCNotification::CopyFrom(const ServerOriginatedRPCNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ServerOriginatedRPCNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOriginatedRPCNotification::IsInitialized() const {
  return true;
}

void ServerOriginatedRPCNotification::InternalSwap(ServerOriginatedRPCNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  swap(rpc_, other->rpc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerOriginatedRPCNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[118]);
}

// ===================================================================

class KeystrokeNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<KeystrokeNotification>()._has_bits_);
  static void set_has_characters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_charactersignoringmodifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keycode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

KeystrokeNotification::KeystrokeNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  modifiers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.KeystrokeNotification)
}
KeystrokeNotification::KeystrokeNotification(const KeystrokeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      modifiers_(from.modifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  characters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    characters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_characters()) {
    characters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_characters(), 
      GetArenaForAllocation());
  }
  charactersignoringmodifiers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    charactersignoringmodifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_charactersignoringmodifiers()) {
    charactersignoringmodifiers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_charactersignoringmodifiers(), 
      GetArenaForAllocation());
  }
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  ::memcpy(&keycode_, &from.keycode_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&keycode_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:iterm2.KeystrokeNotification)
}

inline void KeystrokeNotification::SharedCtor() {
characters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  characters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
charactersignoringmodifiers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  charactersignoringmodifiers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keycode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&keycode_)) + sizeof(action_));
}

KeystrokeNotification::~KeystrokeNotification() {
  // @@protoc_insertion_point(destructor:iterm2.KeystrokeNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeystrokeNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  characters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charactersignoringmodifiers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeystrokeNotification::ArenaDtor(void* object) {
  KeystrokeNotification* _this = reinterpret_cast< KeystrokeNotification* >(object);
  (void)_this;
}
void KeystrokeNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeystrokeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeystrokeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.KeystrokeNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      characters_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      charactersignoringmodifiers_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      session_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&keycode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&keycode_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeystrokeNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_characters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.KeystrokeNotification.characters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string charactersIgnoringModifiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_charactersignoringmodifiers();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.KeystrokeNotification.charactersIgnoringModifiers");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.Modifiers modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::iterm2::Modifiers_IsValid(val))) {
              _internal_add_modifiers(static_cast<::iterm2::Modifiers>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_modifiers(), ptr, ctx, ::iterm2::Modifiers_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 keyCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_keycode(&has_bits);
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.KeystrokeNotification.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.KeystrokeNotification.Action action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::KeystrokeNotification_Action_IsValid(val))) {
            _internal_set_action(static_cast<::iterm2::KeystrokeNotification_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeystrokeNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.KeystrokeNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string characters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_characters().data(), static_cast<int>(this->_internal_characters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.KeystrokeNotification.characters");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_characters(), target);
  }

  // optional string charactersIgnoringModifiers = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charactersignoringmodifiers().data(), static_cast<int>(this->_internal_charactersignoringmodifiers().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.KeystrokeNotification.charactersIgnoringModifiers");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_charactersignoringmodifiers(), target);
  }

  // repeated .iterm2.Modifiers modifiers = 3;
  for (int i = 0, n = this->_internal_modifiers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_modifiers(i), target);
  }

  // optional int32 keyCode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_keycode(), target);
  }

  // optional string session = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.KeystrokeNotification.session");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session(), target);
  }

  // optional .iterm2.KeystrokeNotification.Action action = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.KeystrokeNotification)
  return target;
}

size_t KeystrokeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.KeystrokeNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.Modifiers modifiers = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_modifiers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_modifiers(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string characters = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_characters());
    }

    // optional string charactersIgnoringModifiers = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charactersignoringmodifiers());
    }

    // optional string session = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional int32 keyCode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_keycode());
    }

    // optional .iterm2.KeystrokeNotification.Action action = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeystrokeNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeystrokeNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeystrokeNotification::GetClassData() const { return &_class_data_; }

void KeystrokeNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeystrokeNotification *>(to)->MergeFrom(
      static_cast<const KeystrokeNotification &>(from));
}


void KeystrokeNotification::MergeFrom(const KeystrokeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.KeystrokeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  modifiers_.MergeFrom(from.modifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_characters(from._internal_characters());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_charactersignoringmodifiers(from._internal_charactersignoringmodifiers());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000008u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeystrokeNotification::CopyFrom(const KeystrokeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.KeystrokeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystrokeNotification::IsInitialized() const {
  return true;
}

void KeystrokeNotification::InternalSwap(KeystrokeNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modifiers_.InternalSwap(&other->modifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &characters_, lhs_arena,
      &other->characters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &charactersignoringmodifiers_, lhs_arena,
      &other->charactersignoringmodifiers_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeystrokeNotification, action_)
      + sizeof(KeystrokeNotification::action_)
      - PROTOBUF_FIELD_OFFSET(KeystrokeNotification, keycode_)>(
          reinterpret_cast<char*>(&keycode_),
          reinterpret_cast<char*>(&other->keycode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeystrokeNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[119]);
}

// ===================================================================

class ScreenUpdateNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ScreenUpdateNotification>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScreenUpdateNotification::ScreenUpdateNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ScreenUpdateNotification)
}
ScreenUpdateNotification::ScreenUpdateNotification(const ScreenUpdateNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ScreenUpdateNotification)
}

inline void ScreenUpdateNotification::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScreenUpdateNotification::~ScreenUpdateNotification() {
  // @@protoc_insertion_point(destructor:iterm2.ScreenUpdateNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScreenUpdateNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScreenUpdateNotification::ArenaDtor(void* object) {
  ScreenUpdateNotification* _this = reinterpret_cast< ScreenUpdateNotification* >(object);
  (void)_this;
}
void ScreenUpdateNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScreenUpdateNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScreenUpdateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ScreenUpdateNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScreenUpdateNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ScreenUpdateNotification.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScreenUpdateNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ScreenUpdateNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ScreenUpdateNotification.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ScreenUpdateNotification)
  return target;
}

size_t ScreenUpdateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ScreenUpdateNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string session = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScreenUpdateNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScreenUpdateNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScreenUpdateNotification::GetClassData() const { return &_class_data_; }

void ScreenUpdateNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScreenUpdateNotification *>(to)->MergeFrom(
      static_cast<const ScreenUpdateNotification &>(from));
}


void ScreenUpdateNotification::MergeFrom(const ScreenUpdateNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ScreenUpdateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session()) {
    _internal_set_session(from._internal_session());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScreenUpdateNotification::CopyFrom(const ScreenUpdateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ScreenUpdateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenUpdateNotification::IsInitialized() const {
  return true;
}

void ScreenUpdateNotification::InternalSwap(ScreenUpdateNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ScreenUpdateNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[120]);
}

// ===================================================================

class PromptNotificationPrompt::_Internal {
 public:
  using HasBits = decltype(std::declval<PromptNotificationPrompt>()._has_bits_);
  static void set_has_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::GetPromptResponse& prompt(const PromptNotificationPrompt* msg);
  static void set_has_prompt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::GetPromptResponse&
PromptNotificationPrompt::_Internal::prompt(const PromptNotificationPrompt* msg) {
  return *msg->prompt_;
}
PromptNotificationPrompt::PromptNotificationPrompt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PromptNotificationPrompt)
}
PromptNotificationPrompt::PromptNotificationPrompt(const PromptNotificationPrompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_placeholder()) {
    placeholder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placeholder(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_prompt()) {
    prompt_ = new ::iterm2::GetPromptResponse(*from.prompt_);
  } else {
    prompt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PromptNotificationPrompt)
}

inline void PromptNotificationPrompt::SharedCtor() {
placeholder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  placeholder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prompt_ = nullptr;
}

PromptNotificationPrompt::~PromptNotificationPrompt() {
  // @@protoc_insertion_point(destructor:iterm2.PromptNotificationPrompt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PromptNotificationPrompt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placeholder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prompt_;
}

void PromptNotificationPrompt::ArenaDtor(void* object) {
  PromptNotificationPrompt* _this = reinterpret_cast< PromptNotificationPrompt* >(object);
  (void)_this;
}
void PromptNotificationPrompt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromptNotificationPrompt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PromptNotificationPrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PromptNotificationPrompt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      placeholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prompt_ != nullptr);
      prompt_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptNotificationPrompt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string placeholder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_placeholder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PromptNotificationPrompt.placeholder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.GetPromptResponse prompt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptNotificationPrompt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PromptNotificationPrompt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string placeholder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_placeholder().data(), static_cast<int>(this->_internal_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PromptNotificationPrompt.placeholder");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_placeholder(), target);
  }

  // optional .iterm2.GetPromptResponse prompt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prompt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PromptNotificationPrompt)
  return target;
}

size_t PromptNotificationPrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PromptNotificationPrompt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string placeholder = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_placeholder());
    }

    // optional .iterm2.GetPromptResponse prompt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prompt_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptNotificationPrompt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PromptNotificationPrompt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptNotificationPrompt::GetClassData() const { return &_class_data_; }

void PromptNotificationPrompt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PromptNotificationPrompt *>(to)->MergeFrom(
      static_cast<const PromptNotificationPrompt &>(from));
}


void PromptNotificationPrompt::MergeFrom(const PromptNotificationPrompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PromptNotificationPrompt)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_placeholder(from._internal_placeholder());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prompt()->::iterm2::GetPromptResponse::MergeFrom(from._internal_prompt());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptNotificationPrompt::CopyFrom(const PromptNotificationPrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PromptNotificationPrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptNotificationPrompt::IsInitialized() const {
  return true;
}

void PromptNotificationPrompt::InternalSwap(PromptNotificationPrompt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placeholder_, lhs_arena,
      &other->placeholder_, rhs_arena
  );
  swap(prompt_, other->prompt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptNotificationPrompt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[121]);
}

// ===================================================================

class PromptNotificationCommandStart::_Internal {
 public:
  using HasBits = decltype(std::declval<PromptNotificationCommandStart>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PromptNotificationCommandStart::PromptNotificationCommandStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PromptNotificationCommandStart)
}
PromptNotificationCommandStart::PromptNotificationCommandStart(const PromptNotificationCommandStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PromptNotificationCommandStart)
}

inline void PromptNotificationCommandStart::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PromptNotificationCommandStart::~PromptNotificationCommandStart() {
  // @@protoc_insertion_point(destructor:iterm2.PromptNotificationCommandStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PromptNotificationCommandStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PromptNotificationCommandStart::ArenaDtor(void* object) {
  PromptNotificationCommandStart* _this = reinterpret_cast< PromptNotificationCommandStart* >(object);
  (void)_this;
}
void PromptNotificationCommandStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromptNotificationCommandStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PromptNotificationCommandStart::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PromptNotificationCommandStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptNotificationCommandStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PromptNotificationCommandStart.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptNotificationCommandStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PromptNotificationCommandStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PromptNotificationCommandStart.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PromptNotificationCommandStart)
  return target;
}

size_t PromptNotificationCommandStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PromptNotificationCommandStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptNotificationCommandStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PromptNotificationCommandStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptNotificationCommandStart::GetClassData() const { return &_class_data_; }

void PromptNotificationCommandStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PromptNotificationCommandStart *>(to)->MergeFrom(
      static_cast<const PromptNotificationCommandStart &>(from));
}


void PromptNotificationCommandStart::MergeFrom(const PromptNotificationCommandStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PromptNotificationCommandStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptNotificationCommandStart::CopyFrom(const PromptNotificationCommandStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PromptNotificationCommandStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptNotificationCommandStart::IsInitialized() const {
  return true;
}

void PromptNotificationCommandStart::InternalSwap(PromptNotificationCommandStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptNotificationCommandStart::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[122]);
}

// ===================================================================

class PromptNotificationCommandEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<PromptNotificationCommandEnd>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PromptNotificationCommandEnd::PromptNotificationCommandEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PromptNotificationCommandEnd)
}
PromptNotificationCommandEnd::PromptNotificationCommandEnd(const PromptNotificationCommandEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.PromptNotificationCommandEnd)
}

inline void PromptNotificationCommandEnd::SharedCtor() {
status_ = 0;
}

PromptNotificationCommandEnd::~PromptNotificationCommandEnd() {
  // @@protoc_insertion_point(destructor:iterm2.PromptNotificationCommandEnd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PromptNotificationCommandEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PromptNotificationCommandEnd::ArenaDtor(void* object) {
  PromptNotificationCommandEnd* _this = reinterpret_cast< PromptNotificationCommandEnd* >(object);
  (void)_this;
}
void PromptNotificationCommandEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromptNotificationCommandEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PromptNotificationCommandEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PromptNotificationCommandEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptNotificationCommandEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptNotificationCommandEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PromptNotificationCommandEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PromptNotificationCommandEnd)
  return target;
}

size_t PromptNotificationCommandEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PromptNotificationCommandEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptNotificationCommandEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PromptNotificationCommandEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptNotificationCommandEnd::GetClassData() const { return &_class_data_; }

void PromptNotificationCommandEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PromptNotificationCommandEnd *>(to)->MergeFrom(
      static_cast<const PromptNotificationCommandEnd &>(from));
}


void PromptNotificationCommandEnd::MergeFrom(const PromptNotificationCommandEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PromptNotificationCommandEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptNotificationCommandEnd::CopyFrom(const PromptNotificationCommandEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PromptNotificationCommandEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptNotificationCommandEnd::IsInitialized() const {
  return true;
}

void PromptNotificationCommandEnd::InternalSwap(PromptNotificationCommandEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptNotificationCommandEnd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[123]);
}

// ===================================================================

class PromptNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<PromptNotification>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::PromptNotificationPrompt& prompt(const PromptNotification* msg);
  static const ::iterm2::PromptNotificationCommandStart& command_start(const PromptNotification* msg);
  static const ::iterm2::PromptNotificationCommandEnd& command_end(const PromptNotification* msg);
  static void set_has_unique_prompt_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::PromptNotificationPrompt&
PromptNotification::_Internal::prompt(const PromptNotification* msg) {
  return *msg->event_.prompt_;
}
const ::iterm2::PromptNotificationCommandStart&
PromptNotification::_Internal::command_start(const PromptNotification* msg) {
  return *msg->event_.command_start_;
}
const ::iterm2::PromptNotificationCommandEnd&
PromptNotification::_Internal::command_end(const PromptNotification* msg) {
  return *msg->event_.command_end_;
}
void PromptNotification::set_allocated_prompt(::iterm2::PromptNotificationPrompt* prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PromptNotificationPrompt>::GetOwningArena(prompt);
    if (message_arena != submessage_arena) {
      prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prompt, submessage_arena);
    }
    set_has_prompt();
    event_.prompt_ = prompt;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotification.prompt)
}
void PromptNotification::set_allocated_command_start(::iterm2::PromptNotificationCommandStart* command_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (command_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PromptNotificationCommandStart>::GetOwningArena(command_start);
    if (message_arena != submessage_arena) {
      command_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_start, submessage_arena);
    }
    set_has_command_start();
    event_.command_start_ = command_start;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotification.command_start)
}
void PromptNotification::set_allocated_command_end(::iterm2::PromptNotificationCommandEnd* command_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (command_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::PromptNotificationCommandEnd>::GetOwningArena(command_end);
    if (message_arena != submessage_arena) {
      command_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_end, submessage_arena);
    }
    set_has_command_end();
    event_.command_end_ = command_end;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.PromptNotification.command_end)
}
PromptNotification::PromptNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.PromptNotification)
}
PromptNotification::PromptNotification(const PromptNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  unique_prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_prompt_id()) {
    unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_prompt_id(), 
      GetArenaForAllocation());
  }
  clear_has_event();
  switch (from.event_case()) {
    case kPrompt: {
      _internal_mutable_prompt()->::iterm2::PromptNotificationPrompt::MergeFrom(from._internal_prompt());
      break;
    }
    case kCommandStart: {
      _internal_mutable_command_start()->::iterm2::PromptNotificationCommandStart::MergeFrom(from._internal_command_start());
      break;
    }
    case kCommandEnd: {
      _internal_mutable_command_end()->::iterm2::PromptNotificationCommandEnd::MergeFrom(from._internal_command_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.PromptNotification)
}

inline void PromptNotification::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_event();
}

PromptNotification::~PromptNotification() {
  // @@protoc_insertion_point(destructor:iterm2.PromptNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PromptNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_prompt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_event()) {
    clear_event();
  }
}

void PromptNotification::ArenaDtor(void* object) {
  PromptNotification* _this = reinterpret_cast< PromptNotification* >(object);
  (void)_this;
}
void PromptNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromptNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PromptNotification::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.PromptNotification)
  switch (event_case()) {
    case kPrompt: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.prompt_;
      }
      break;
    }
    case kCommandStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.command_start_;
      }
      break;
    }
    case kCommandEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.command_end_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void PromptNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.PromptNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_prompt_id_.ClearNonDefaultToEmpty();
    }
  }
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromptNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PromptNotification.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PromptNotificationPrompt prompt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PromptNotificationCommandStart command_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.PromptNotificationCommandEnd command_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_prompt_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_unique_prompt_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.PromptNotification.unique_prompt_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PromptNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.PromptNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PromptNotification.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  switch (event_case()) {
    case kPrompt: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::prompt(this), target, stream);
      break;
    }
    case kCommandStart: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::command_start(this), target, stream);
      break;
    }
    case kCommandEnd: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::command_end(this), target, stream);
      break;
    }
    default: ;
  }
  // optional string unique_prompt_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_prompt_id().data(), static_cast<int>(this->_internal_unique_prompt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.PromptNotification.unique_prompt_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_unique_prompt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.PromptNotification)
  return target;
}

size_t PromptNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.PromptNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional string unique_prompt_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_prompt_id());
    }

  }
  switch (event_case()) {
    // .iterm2.PromptNotificationPrompt prompt = 2;
    case kPrompt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.prompt_);
      break;
    }
    // .iterm2.PromptNotificationCommandStart command_start = 3;
    case kCommandStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.command_start_);
      break;
    }
    // .iterm2.PromptNotificationCommandEnd command_end = 4;
    case kCommandEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.command_end_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PromptNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PromptNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PromptNotification::GetClassData() const { return &_class_data_; }

void PromptNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PromptNotification *>(to)->MergeFrom(
      static_cast<const PromptNotification &>(from));
}


void PromptNotification::MergeFrom(const PromptNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.PromptNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unique_prompt_id(from._internal_unique_prompt_id());
    }
  }
  switch (from.event_case()) {
    case kPrompt: {
      _internal_mutable_prompt()->::iterm2::PromptNotificationPrompt::MergeFrom(from._internal_prompt());
      break;
    }
    case kCommandStart: {
      _internal_mutable_command_start()->::iterm2::PromptNotificationCommandStart::MergeFrom(from._internal_command_start());
      break;
    }
    case kCommandEnd: {
      _internal_mutable_command_end()->::iterm2::PromptNotificationCommandEnd::MergeFrom(from._internal_command_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PromptNotification::CopyFrom(const PromptNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.PromptNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromptNotification::IsInitialized() const {
  return true;
}

void PromptNotification::InternalSwap(PromptNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_prompt_id_, lhs_arena,
      &other->unique_prompt_id_, rhs_arena
  );
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PromptNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[124]);
}

// ===================================================================

class LocationChangeNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationChangeNotification>()._has_bits_);
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LocationChangeNotification::LocationChangeNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.LocationChangeNotification)
}
LocationChangeNotification::LocationChangeNotification(const LocationChangeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_name()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.LocationChangeNotification)
}

inline void LocationChangeNotification::SharedCtor() {
host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocationChangeNotification::~LocationChangeNotification() {
  // @@protoc_insertion_point(destructor:iterm2.LocationChangeNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocationChangeNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocationChangeNotification::ArenaDtor(void* object) {
  LocationChangeNotification* _this = reinterpret_cast< LocationChangeNotification* >(object);
  (void)_this;
}
void LocationChangeNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationChangeNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocationChangeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.LocationChangeNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      host_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      session_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationChangeNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.LocationChangeNotification.host_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.LocationChangeNotification.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.LocationChangeNotification.directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string session = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.LocationChangeNotification.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocationChangeNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.LocationChangeNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.LocationChangeNotification.host_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_name(), target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.LocationChangeNotification.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // optional string directory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.LocationChangeNotification.directory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_directory(), target);
  }

  // optional string session = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.LocationChangeNotification.session");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.LocationChangeNotification)
  return target;
}

size_t LocationChangeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.LocationChangeNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string host_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_name());
    }

    // optional string user_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string directory = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directory());
    }

    // optional string session = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocationChangeNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocationChangeNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocationChangeNotification::GetClassData() const { return &_class_data_; }

void LocationChangeNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocationChangeNotification *>(to)->MergeFrom(
      static_cast<const LocationChangeNotification &>(from));
}


void LocationChangeNotification::MergeFrom(const LocationChangeNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.LocationChangeNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_session(from._internal_session());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocationChangeNotification::CopyFrom(const LocationChangeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.LocationChangeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationChangeNotification::IsInitialized() const {
  return true;
}

void LocationChangeNotification::InternalSwap(LocationChangeNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationChangeNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[125]);
}

// ===================================================================

class CustomEscapeSequenceNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomEscapeSequenceNotification>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sender_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CustomEscapeSequenceNotification::CustomEscapeSequenceNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CustomEscapeSequenceNotification)
}
CustomEscapeSequenceNotification::CustomEscapeSequenceNotification(const CustomEscapeSequenceNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  sender_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_identity()) {
    sender_identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_identity(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.CustomEscapeSequenceNotification)
}

inline void CustomEscapeSequenceNotification::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomEscapeSequenceNotification::~CustomEscapeSequenceNotification() {
  // @@protoc_insertion_point(destructor:iterm2.CustomEscapeSequenceNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CustomEscapeSequenceNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomEscapeSequenceNotification::ArenaDtor(void* object) {
  CustomEscapeSequenceNotification* _this = reinterpret_cast< CustomEscapeSequenceNotification* >(object);
  (void)_this;
}
void CustomEscapeSequenceNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomEscapeSequenceNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomEscapeSequenceNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CustomEscapeSequenceNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sender_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEscapeSequenceNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CustomEscapeSequenceNotification.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sender_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CustomEscapeSequenceNotification.sender_identity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CustomEscapeSequenceNotification.payload");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomEscapeSequenceNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CustomEscapeSequenceNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CustomEscapeSequenceNotification.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional string sender_identity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_identity().data(), static_cast<int>(this->_internal_sender_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CustomEscapeSequenceNotification.sender_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_identity(), target);
  }

  // optional string payload = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CustomEscapeSequenceNotification.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CustomEscapeSequenceNotification)
  return target;
}

size_t CustomEscapeSequenceNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CustomEscapeSequenceNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional string sender_identity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_identity());
    }

    // optional string payload = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomEscapeSequenceNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomEscapeSequenceNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomEscapeSequenceNotification::GetClassData() const { return &_class_data_; }

void CustomEscapeSequenceNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CustomEscapeSequenceNotification *>(to)->MergeFrom(
      static_cast<const CustomEscapeSequenceNotification &>(from));
}


void CustomEscapeSequenceNotification::MergeFrom(const CustomEscapeSequenceNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CustomEscapeSequenceNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sender_identity(from._internal_sender_identity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_payload(from._internal_payload());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomEscapeSequenceNotification::CopyFrom(const CustomEscapeSequenceNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CustomEscapeSequenceNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEscapeSequenceNotification::IsInitialized() const {
  return true;
}

void CustomEscapeSequenceNotification::InternalSwap(CustomEscapeSequenceNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_identity_, lhs_arena,
      &other->sender_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEscapeSequenceNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[126]);
}

// ===================================================================

class NewSessionNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<NewSessionNotification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewSessionNotification::NewSessionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.NewSessionNotification)
}
NewSessionNotification::NewSessionNotification(const NewSessionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.NewSessionNotification)
}

inline void NewSessionNotification::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewSessionNotification::~NewSessionNotification() {
  // @@protoc_insertion_point(destructor:iterm2.NewSessionNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewSessionNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewSessionNotification::ArenaDtor(void* object) {
  NewSessionNotification* _this = reinterpret_cast< NewSessionNotification* >(object);
  (void)_this;
}
void NewSessionNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewSessionNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewSessionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.NewSessionNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSessionNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.NewSessionNotification.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewSessionNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.NewSessionNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.NewSessionNotification.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.NewSessionNotification)
  return target;
}

size_t NewSessionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.NewSessionNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewSessionNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewSessionNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewSessionNotification::GetClassData() const { return &_class_data_; }

void NewSessionNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewSessionNotification *>(to)->MergeFrom(
      static_cast<const NewSessionNotification &>(from));
}


void NewSessionNotification::MergeFrom(const NewSessionNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.NewSessionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewSessionNotification::CopyFrom(const NewSessionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.NewSessionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSessionNotification::IsInitialized() const {
  return true;
}

void NewSessionNotification::InternalSwap(NewSessionNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSessionNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[127]);
}

// ===================================================================

class FocusChangedNotification_Window::_Internal {
 public:
  using HasBits = decltype(std::declval<FocusChangedNotification_Window>()._has_bits_);
  static void set_has_window_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FocusChangedNotification_Window::FocusChangedNotification_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.FocusChangedNotification.Window)
}
FocusChangedNotification_Window::FocusChangedNotification_Window(const FocusChangedNotification_Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  window_status_ = from.window_status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.FocusChangedNotification.Window)
}

inline void FocusChangedNotification_Window::SharedCtor() {
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_status_ = 0;
}

FocusChangedNotification_Window::~FocusChangedNotification_Window() {
  // @@protoc_insertion_point(destructor:iterm2.FocusChangedNotification.Window)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FocusChangedNotification_Window::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FocusChangedNotification_Window::ArenaDtor(void* object) {
  FocusChangedNotification_Window* _this = reinterpret_cast< FocusChangedNotification_Window* >(object);
  (void)_this;
}
void FocusChangedNotification_Window::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FocusChangedNotification_Window::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FocusChangedNotification_Window::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.FocusChangedNotification.Window)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    window_id_.ClearNonDefaultToEmpty();
  }
  window_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FocusChangedNotification_Window::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.FocusChangedNotification.Window.WindowStatus window_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::FocusChangedNotification_Window_WindowStatus_IsValid(val))) {
            _internal_set_window_status(static_cast<::iterm2::FocusChangedNotification_Window_WindowStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.FocusChangedNotification.Window.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FocusChangedNotification_Window::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.FocusChangedNotification.Window)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.FocusChangedNotification.Window.WindowStatus window_status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_window_status(), target);
  }

  // optional string window_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.FocusChangedNotification.Window.window_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_window_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.FocusChangedNotification.Window)
  return target;
}

size_t FocusChangedNotification_Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.FocusChangedNotification.Window)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string window_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
    }

    // optional .iterm2.FocusChangedNotification.Window.WindowStatus window_status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_window_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FocusChangedNotification_Window::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FocusChangedNotification_Window::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FocusChangedNotification_Window::GetClassData() const { return &_class_data_; }

void FocusChangedNotification_Window::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FocusChangedNotification_Window *>(to)->MergeFrom(
      static_cast<const FocusChangedNotification_Window &>(from));
}


void FocusChangedNotification_Window::MergeFrom(const FocusChangedNotification_Window& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.FocusChangedNotification.Window)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_window_id(from._internal_window_id());
    }
    if (cached_has_bits & 0x00000002u) {
      window_status_ = from.window_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FocusChangedNotification_Window::CopyFrom(const FocusChangedNotification_Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.FocusChangedNotification.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusChangedNotification_Window::IsInitialized() const {
  return true;
}

void FocusChangedNotification_Window::InternalSwap(FocusChangedNotification_Window* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
  swap(window_status_, other->window_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FocusChangedNotification_Window::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[128]);
}

// ===================================================================

class FocusChangedNotification::_Internal {
 public:
  static const ::iterm2::FocusChangedNotification_Window& window(const FocusChangedNotification* msg);
};

const ::iterm2::FocusChangedNotification_Window&
FocusChangedNotification::_Internal::window(const FocusChangedNotification* msg) {
  return *msg->event_.window_;
}
void FocusChangedNotification::set_allocated_window(::iterm2::FocusChangedNotification_Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::FocusChangedNotification_Window>::GetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    set_has_window();
    event_.window_ = window;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.FocusChangedNotification.window)
}
FocusChangedNotification::FocusChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.FocusChangedNotification)
}
FocusChangedNotification::FocusChangedNotification(const FocusChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kApplicationActive: {
      _internal_set_application_active(from._internal_application_active());
      break;
    }
    case kWindow: {
      _internal_mutable_window()->::iterm2::FocusChangedNotification_Window::MergeFrom(from._internal_window());
      break;
    }
    case kSelectedTab: {
      _internal_set_selected_tab(from._internal_selected_tab());
      break;
    }
    case kSession: {
      _internal_set_session(from._internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.FocusChangedNotification)
}

inline void FocusChangedNotification::SharedCtor() {
clear_has_event();
}

FocusChangedNotification::~FocusChangedNotification() {
  // @@protoc_insertion_point(destructor:iterm2.FocusChangedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FocusChangedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void FocusChangedNotification::ArenaDtor(void* object) {
  FocusChangedNotification* _this = reinterpret_cast< FocusChangedNotification* >(object);
  (void)_this;
}
void FocusChangedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FocusChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FocusChangedNotification::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.FocusChangedNotification)
  switch (event_case()) {
    case kApplicationActive: {
      // No need to clear
      break;
    }
    case kWindow: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.window_;
      }
      break;
    }
    case kSelectedTab: {
      event_.selected_tab_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSession: {
      event_.session_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void FocusChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.FocusChangedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FocusChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool application_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_application_active(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.FocusChangedNotification.Window window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string selected_tab = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_selected_tab();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.FocusChangedNotification.selected_tab");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.FocusChangedNotification.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FocusChangedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.FocusChangedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kApplicationActive: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_application_active(), target);
      break;
    }
    case kWindow: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::window(this), target, stream);
      break;
    }
    case kSelectedTab: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_selected_tab().data(), static_cast<int>(this->_internal_selected_tab().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.FocusChangedNotification.selected_tab");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_selected_tab(), target);
      break;
    }
    case kSession: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.FocusChangedNotification.session");
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_session(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.FocusChangedNotification)
  return target;
}

size_t FocusChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.FocusChangedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // bool application_active = 1;
    case kApplicationActive: {
      total_size += 1 + 1;
      break;
    }
    // .iterm2.FocusChangedNotification.Window window = 2;
    case kWindow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.window_);
      break;
    }
    // string selected_tab = 3;
    case kSelectedTab: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selected_tab());
      break;
    }
    // string session = 4;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FocusChangedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FocusChangedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FocusChangedNotification::GetClassData() const { return &_class_data_; }

void FocusChangedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FocusChangedNotification *>(to)->MergeFrom(
      static_cast<const FocusChangedNotification &>(from));
}


void FocusChangedNotification::MergeFrom(const FocusChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.FocusChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kApplicationActive: {
      _internal_set_application_active(from._internal_application_active());
      break;
    }
    case kWindow: {
      _internal_mutable_window()->::iterm2::FocusChangedNotification_Window::MergeFrom(from._internal_window());
      break;
    }
    case kSelectedTab: {
      _internal_set_selected_tab(from._internal_selected_tab());
      break;
    }
    case kSession: {
      _internal_set_session(from._internal_session());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FocusChangedNotification::CopyFrom(const FocusChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.FocusChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusChangedNotification::IsInitialized() const {
  return true;
}

void FocusChangedNotification::InternalSwap(FocusChangedNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FocusChangedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[129]);
}

// ===================================================================

class TerminateSessionNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<TerminateSessionNotification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TerminateSessionNotification::TerminateSessionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TerminateSessionNotification)
}
TerminateSessionNotification::TerminateSessionNotification(const TerminateSessionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.TerminateSessionNotification)
}

inline void TerminateSessionNotification::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TerminateSessionNotification::~TerminateSessionNotification() {
  // @@protoc_insertion_point(destructor:iterm2.TerminateSessionNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TerminateSessionNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TerminateSessionNotification::ArenaDtor(void* object) {
  TerminateSessionNotification* _this = reinterpret_cast< TerminateSessionNotification* >(object);
  (void)_this;
}
void TerminateSessionNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TerminateSessionNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TerminateSessionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TerminateSessionNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateSessionNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.TerminateSessionNotification.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateSessionNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TerminateSessionNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.TerminateSessionNotification.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TerminateSessionNotification)
  return target;
}

size_t TerminateSessionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TerminateSessionNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateSessionNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TerminateSessionNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateSessionNotification::GetClassData() const { return &_class_data_; }

void TerminateSessionNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TerminateSessionNotification *>(to)->MergeFrom(
      static_cast<const TerminateSessionNotification &>(from));
}


void TerminateSessionNotification::MergeFrom(const TerminateSessionNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TerminateSessionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateSessionNotification::CopyFrom(const TerminateSessionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TerminateSessionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateSessionNotification::IsInitialized() const {
  return true;
}

void TerminateSessionNotification::InternalSwap(TerminateSessionNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateSessionNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[130]);
}

// ===================================================================

class LayoutChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutChangedNotification>()._has_bits_);
  static const ::iterm2::ListSessionsResponse& list_sessions_response(const LayoutChangedNotification* msg);
  static void set_has_list_sessions_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::ListSessionsResponse&
LayoutChangedNotification::_Internal::list_sessions_response(const LayoutChangedNotification* msg) {
  return *msg->list_sessions_response_;
}
LayoutChangedNotification::LayoutChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.LayoutChangedNotification)
}
LayoutChangedNotification::LayoutChangedNotification(const LayoutChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_list_sessions_response()) {
    list_sessions_response_ = new ::iterm2::ListSessionsResponse(*from.list_sessions_response_);
  } else {
    list_sessions_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.LayoutChangedNotification)
}

inline void LayoutChangedNotification::SharedCtor() {
list_sessions_response_ = nullptr;
}

LayoutChangedNotification::~LayoutChangedNotification() {
  // @@protoc_insertion_point(destructor:iterm2.LayoutChangedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LayoutChangedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete list_sessions_response_;
}

void LayoutChangedNotification::ArenaDtor(void* object) {
  LayoutChangedNotification* _this = reinterpret_cast< LayoutChangedNotification* >(object);
  (void)_this;
}
void LayoutChangedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayoutChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayoutChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.LayoutChangedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(list_sessions_response_ != nullptr);
    list_sessions_response_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.ListSessionsResponse list_sessions_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_sessions_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayoutChangedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.LayoutChangedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.ListSessionsResponse list_sessions_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list_sessions_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.LayoutChangedNotification)
  return target;
}

size_t LayoutChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.LayoutChangedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.ListSessionsResponse list_sessions_response = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_sessions_response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutChangedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayoutChangedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutChangedNotification::GetClassData() const { return &_class_data_; }

void LayoutChangedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayoutChangedNotification *>(to)->MergeFrom(
      static_cast<const LayoutChangedNotification &>(from));
}


void LayoutChangedNotification::MergeFrom(const LayoutChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.LayoutChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_list_sessions_response()) {
    _internal_mutable_list_sessions_response()->::iterm2::ListSessionsResponse::MergeFrom(from._internal_list_sessions_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutChangedNotification::CopyFrom(const LayoutChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.LayoutChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutChangedNotification::IsInitialized() const {
  return true;
}

void LayoutChangedNotification::InternalSwap(LayoutChangedNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(list_sessions_response_, other->list_sessions_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutChangedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[131]);
}

// ===================================================================

class GetBufferRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBufferRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::LineRange& line_range(const GetBufferRequest* msg);
  static void set_has_line_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::LineRange&
GetBufferRequest::_Internal::line_range(const GetBufferRequest* msg) {
  return *msg->line_range_;
}
GetBufferRequest::GetBufferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetBufferRequest)
}
GetBufferRequest::GetBufferRequest(const GetBufferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_line_range()) {
    line_range_ = new ::iterm2::LineRange(*from.line_range_);
  } else {
    line_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.GetBufferRequest)
}

inline void GetBufferRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
line_range_ = nullptr;
}

GetBufferRequest::~GetBufferRequest() {
  // @@protoc_insertion_point(destructor:iterm2.GetBufferRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBufferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete line_range_;
}

void GetBufferRequest::ArenaDtor(void* object) {
  GetBufferRequest* _this = reinterpret_cast< GetBufferRequest* >(object);
  (void)_this;
}
void GetBufferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBufferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBufferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetBufferRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(line_range_ != nullptr);
      line_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBufferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetBufferRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.LineRange line_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBufferRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetBufferRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetBufferRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional .iterm2.LineRange line_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::line_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetBufferRequest)
  return target;
}

size_t GetBufferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetBufferRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional .iterm2.LineRange line_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *line_range_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBufferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBufferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBufferRequest::GetClassData() const { return &_class_data_; }

void GetBufferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBufferRequest *>(to)->MergeFrom(
      static_cast<const GetBufferRequest &>(from));
}


void GetBufferRequest::MergeFrom(const GetBufferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetBufferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_line_range()->::iterm2::LineRange::MergeFrom(from._internal_line_range());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBufferRequest::CopyFrom(const GetBufferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetBufferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBufferRequest::IsInitialized() const {
  return true;
}

void GetBufferRequest::InternalSwap(GetBufferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  swap(line_range_, other->line_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBufferRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[132]);
}

// ===================================================================

class GetBufferResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBufferResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::iterm2::Range& range(const GetBufferResponse* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Coord& cursor(const GetBufferResponse* msg);
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_lines_above_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::iterm2::WindowedCoordRange& windowed_coord_range(const GetBufferResponse* msg);
  static void set_has_windowed_coord_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::iterm2::Range&
GetBufferResponse::_Internal::range(const GetBufferResponse* msg) {
  return *msg->range_;
}
const ::iterm2::Coord&
GetBufferResponse::_Internal::cursor(const GetBufferResponse* msg) {
  return *msg->cursor_;
}
const ::iterm2::WindowedCoordRange&
GetBufferResponse::_Internal::windowed_coord_range(const GetBufferResponse* msg) {
  return *msg->windowed_coord_range_;
}
GetBufferResponse::GetBufferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  contents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetBufferResponse)
}
GetBufferResponse::GetBufferResponse(const GetBufferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contents_(from.contents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::iterm2::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_cursor()) {
    cursor_ = new ::iterm2::Coord(*from.cursor_);
  } else {
    cursor_ = nullptr;
  }
  if (from._internal_has_windowed_coord_range()) {
    windowed_coord_range_ = new ::iterm2::WindowedCoordRange(*from.windowed_coord_range_);
  } else {
    windowed_coord_range_ = nullptr;
  }
  ::memcpy(&num_lines_above_screen_, &from.num_lines_above_screen_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&num_lines_above_screen_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:iterm2.GetBufferResponse)
}

inline void GetBufferResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&range_)) + sizeof(status_));
}

GetBufferResponse::~GetBufferResponse() {
  // @@protoc_insertion_point(destructor:iterm2.GetBufferResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBufferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete cursor_;
  if (this != internal_default_instance()) delete windowed_coord_range_;
}

void GetBufferResponse::ArenaDtor(void* object) {
  GetBufferResponse* _this = reinterpret_cast< GetBufferResponse* >(object);
  (void)_this;
}
void GetBufferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBufferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBufferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetBufferResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cursor_ != nullptr);
      cursor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(windowed_coord_range_ != nullptr);
      windowed_coord_range_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&num_lines_above_screen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&num_lines_above_screen_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBufferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.GetBufferResponse.Status status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::GetBufferResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::GetBufferResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Range range = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.LineContents contents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Coord cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_lines_above_screen = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_lines_above_screen(&has_bits);
          num_lines_above_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.WindowedCoordRange windowed_coord_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_windowed_coord_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBufferResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetBufferResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.GetBufferResponse.Status status = 1 [default = OK];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional .iterm2.Range range = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // repeated .iterm2.LineContents contents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_contents(i), target, stream);
  }

  // optional .iterm2.Coord cursor = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cursor(this), target, stream);
  }

  // optional int64 num_lines_above_screen = 5 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_lines_above_screen(), target);
  }

  // optional .iterm2.WindowedCoordRange windowed_coord_range = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::windowed_coord_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetBufferResponse)
  return target;
}

size_t GetBufferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetBufferResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.LineContents contents = 3;
  total_size += 1UL * this->_internal_contents_size();
  for (const auto& msg : this->contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .iterm2.Range range = 2 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_);
    }

    // optional .iterm2.Coord cursor = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cursor_);
    }

    // optional .iterm2.WindowedCoordRange windowed_coord_range = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *windowed_coord_range_);
    }

    // optional int64 num_lines_above_screen = 5 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num_lines_above_screen());
    }

    // optional .iterm2.GetBufferResponse.Status status = 1 [default = OK];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBufferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBufferResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBufferResponse::GetClassData() const { return &_class_data_; }

void GetBufferResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBufferResponse *>(to)->MergeFrom(
      static_cast<const GetBufferResponse &>(from));
}


void GetBufferResponse::MergeFrom(const GetBufferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetBufferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  contents_.MergeFrom(from.contents_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range()->::iterm2::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cursor()->::iterm2::Coord::MergeFrom(from._internal_cursor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_windowed_coord_range()->::iterm2::WindowedCoordRange::MergeFrom(from._internal_windowed_coord_range());
    }
    if (cached_has_bits & 0x00000008u) {
      num_lines_above_screen_ = from.num_lines_above_screen_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBufferResponse::CopyFrom(const GetBufferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetBufferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBufferResponse::IsInitialized() const {
  return true;
}

void GetBufferResponse::InternalSwap(GetBufferResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contents_.InternalSwap(&other->contents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBufferResponse, status_)
      + sizeof(GetBufferResponse::status_)
      - PROTOBUF_FIELD_OFFSET(GetBufferResponse, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBufferResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[133]);
}

// ===================================================================

class GetPromptRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPromptRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_prompt_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetPromptRequest::GetPromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetPromptRequest)
}
GetPromptRequest::GetPromptRequest(const GetPromptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  unique_prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_prompt_id()) {
    unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_prompt_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.GetPromptRequest)
}

inline void GetPromptRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPromptRequest::~GetPromptRequest() {
  // @@protoc_insertion_point(destructor:iterm2.GetPromptRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPromptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_prompt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPromptRequest::ArenaDtor(void* object) {
  GetPromptRequest* _this = reinterpret_cast< GetPromptRequest* >(object);
  (void)_this;
}
void GetPromptRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPromptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPromptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetPromptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_prompt_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPromptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPromptRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_prompt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_unique_prompt_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPromptRequest.unique_prompt_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPromptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetPromptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPromptRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional string unique_prompt_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_prompt_id().data(), static_cast<int>(this->_internal_unique_prompt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPromptRequest.unique_prompt_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unique_prompt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetPromptRequest)
  return target;
}

size_t GetPromptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetPromptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional string unique_prompt_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_prompt_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPromptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPromptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPromptRequest::GetClassData() const { return &_class_data_; }

void GetPromptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPromptRequest *>(to)->MergeFrom(
      static_cast<const GetPromptRequest &>(from));
}


void GetPromptRequest::MergeFrom(const GetPromptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetPromptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unique_prompt_id(from._internal_unique_prompt_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPromptRequest::CopyFrom(const GetPromptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetPromptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPromptRequest::IsInitialized() const {
  return true;
}

void GetPromptRequest::InternalSwap(GetPromptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_prompt_id_, lhs_arena,
      &other->unique_prompt_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPromptRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[134]);
}

// ===================================================================

class GetPromptResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPromptResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::iterm2::CoordRange& prompt_range(const GetPromptResponse* msg);
  static void set_has_prompt_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::iterm2::CoordRange& command_range(const GetPromptResponse* msg);
  static void set_has_command_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::iterm2::CoordRange& output_range(const GetPromptResponse* msg);
  static void set_has_output_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_working_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prompt_state(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_exit_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unique_prompt_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::iterm2::CoordRange&
GetPromptResponse::_Internal::prompt_range(const GetPromptResponse* msg) {
  return *msg->prompt_range_;
}
const ::iterm2::CoordRange&
GetPromptResponse::_Internal::command_range(const GetPromptResponse* msg) {
  return *msg->command_range_;
}
const ::iterm2::CoordRange&
GetPromptResponse::_Internal::output_range(const GetPromptResponse* msg) {
  return *msg->output_range_;
}
GetPromptResponse::GetPromptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetPromptResponse)
}
GetPromptResponse::GetPromptResponse(const GetPromptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  working_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    working_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_working_directory()) {
    working_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_working_directory(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  unique_prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_prompt_id()) {
    unique_prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_prompt_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_prompt_range()) {
    prompt_range_ = new ::iterm2::CoordRange(*from.prompt_range_);
  } else {
    prompt_range_ = nullptr;
  }
  if (from._internal_has_command_range()) {
    command_range_ = new ::iterm2::CoordRange(*from.command_range_);
  } else {
    command_range_ = nullptr;
  }
  if (from._internal_has_output_range()) {
    output_range_ = new ::iterm2::CoordRange(*from.output_range_);
  } else {
    output_range_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&status_)) + sizeof(exit_status_));
  // @@protoc_insertion_point(copy_constructor:iterm2.GetPromptResponse)
}

inline void GetPromptResponse::SharedCtor() {
working_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  working_directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_prompt_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prompt_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&prompt_range_)) + sizeof(exit_status_));
}

GetPromptResponse::~GetPromptResponse() {
  // @@protoc_insertion_point(destructor:iterm2.GetPromptResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPromptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  working_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_prompt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prompt_range_;
  if (this != internal_default_instance()) delete command_range_;
  if (this != internal_default_instance()) delete output_range_;
}

void GetPromptResponse::ArenaDtor(void* object) {
  GetPromptResponse* _this = reinterpret_cast< GetPromptResponse* >(object);
  (void)_this;
}
void GetPromptResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPromptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPromptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetPromptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      working_directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      unique_prompt_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(prompt_range_ != nullptr);
      prompt_range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(command_range_ != nullptr);
      command_range_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(output_range_ != nullptr);
      output_range_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prompt_state_) -
        reinterpret_cast<char*>(&status_)) + sizeof(prompt_state_));
  }
  exit_status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPromptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.GetPromptResponse.Status status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::GetPromptResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::GetPromptResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.CoordRange prompt_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prompt_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.CoordRange command_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.CoordRange output_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string working_directory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_working_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPromptResponse.working_directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPromptResponse.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.GetPromptResponse.State prompt_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::GetPromptResponse_State_IsValid(val))) {
            _internal_set_prompt_state(static_cast<::iterm2::GetPromptResponse_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 exit_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_exit_status(&has_bits);
          exit_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_prompt_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_unique_prompt_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetPromptResponse.unique_prompt_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPromptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetPromptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.GetPromptResponse.Status status = 1 [default = OK];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional .iterm2.CoordRange prompt_range = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prompt_range(this), target, stream);
  }

  // optional .iterm2.CoordRange command_range = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::command_range(this), target, stream);
  }

  // optional .iterm2.CoordRange output_range = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_range(this), target, stream);
  }

  // optional string working_directory = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_working_directory().data(), static_cast<int>(this->_internal_working_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPromptResponse.working_directory");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_working_directory(), target);
  }

  // optional string command = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPromptResponse.command");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_command(), target);
  }

  // optional .iterm2.GetPromptResponse.State prompt_state = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_prompt_state(), target);
  }

  // optional uint32 exit_status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_exit_status(), target);
  }

  // optional string unique_prompt_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_prompt_id().data(), static_cast<int>(this->_internal_unique_prompt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetPromptResponse.unique_prompt_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_unique_prompt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetPromptResponse)
  return target;
}

size_t GetPromptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetPromptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string working_directory = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_working_directory());
    }

    // optional string command = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

    // optional string unique_prompt_id = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_prompt_id());
    }

    // optional .iterm2.CoordRange prompt_range = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prompt_range_);
    }

    // optional .iterm2.CoordRange command_range = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_range_);
    }

    // optional .iterm2.CoordRange output_range = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_range_);
    }

    // optional .iterm2.GetPromptResponse.Status status = 1 [default = OK];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .iterm2.GetPromptResponse.State prompt_state = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prompt_state());
    }

  }
  // optional uint32 exit_status = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_exit_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPromptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPromptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPromptResponse::GetClassData() const { return &_class_data_; }

void GetPromptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPromptResponse *>(to)->MergeFrom(
      static_cast<const GetPromptResponse &>(from));
}


void GetPromptResponse::MergeFrom(const GetPromptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetPromptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_working_directory(from._internal_working_directory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_unique_prompt_id(from._internal_unique_prompt_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_prompt_range()->::iterm2::CoordRange::MergeFrom(from._internal_prompt_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_command_range()->::iterm2::CoordRange::MergeFrom(from._internal_command_range());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_output_range()->::iterm2::CoordRange::MergeFrom(from._internal_output_range());
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      prompt_state_ = from.prompt_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_exit_status(from._internal_exit_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPromptResponse::CopyFrom(const GetPromptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetPromptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPromptResponse::IsInitialized() const {
  return true;
}

void GetPromptResponse::InternalSwap(GetPromptResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &working_directory_, lhs_arena,
      &other->working_directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_prompt_id_, lhs_arena,
      &other->unique_prompt_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPromptResponse, exit_status_)
      + sizeof(GetPromptResponse::exit_status_)
      - PROTOBUF_FIELD_OFFSET(GetPromptResponse, prompt_range_)>(
          reinterpret_cast<char*>(&prompt_range_),
          reinterpret_cast<char*>(&other->prompt_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPromptResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[135]);
}

// ===================================================================

class ListPromptsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListPromptsRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ListPromptsRequest::ListPromptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListPromptsRequest)
}
ListPromptsRequest::ListPromptsRequest(const ListPromptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  first_unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_first_unique_id()) {
    first_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_unique_id(), 
      GetArenaForAllocation());
  }
  last_unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_unique_id()) {
    last_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_unique_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ListPromptsRequest)
}

inline void ListPromptsRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
first_unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListPromptsRequest::~ListPromptsRequest() {
  // @@protoc_insertion_point(destructor:iterm2.ListPromptsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPromptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPromptsRequest::ArenaDtor(void* object) {
  ListPromptsRequest* _this = reinterpret_cast< ListPromptsRequest* >(object);
  (void)_this;
}
void ListPromptsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPromptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPromptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListPromptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      first_unique_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      last_unique_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPromptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListPromptsRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string first_unique_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_first_unique_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListPromptsRequest.first_unique_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_unique_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last_unique_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListPromptsRequest.last_unique_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPromptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListPromptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListPromptsRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional string first_unique_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_first_unique_id().data(), static_cast<int>(this->_internal_first_unique_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListPromptsRequest.first_unique_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_unique_id(), target);
  }

  // optional string last_unique_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_unique_id().data(), static_cast<int>(this->_internal_last_unique_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListPromptsRequest.last_unique_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListPromptsRequest)
  return target;
}

size_t ListPromptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListPromptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional string first_unique_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_unique_id());
    }

    // optional string last_unique_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_unique_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPromptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPromptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPromptsRequest::GetClassData() const { return &_class_data_; }

void ListPromptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPromptsRequest *>(to)->MergeFrom(
      static_cast<const ListPromptsRequest &>(from));
}


void ListPromptsRequest::MergeFrom(const ListPromptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListPromptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_first_unique_id(from._internal_first_unique_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_last_unique_id(from._internal_last_unique_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPromptsRequest::CopyFrom(const ListPromptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListPromptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPromptsRequest::IsInitialized() const {
  return true;
}

void ListPromptsRequest::InternalSwap(ListPromptsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_unique_id_, lhs_arena,
      &other->first_unique_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_unique_id_, lhs_arena,
      &other->last_unique_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPromptsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[136]);
}

// ===================================================================

class ListPromptsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ListPromptsResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ListPromptsResponse::ListPromptsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unique_prompt_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListPromptsResponse)
}
ListPromptsResponse::ListPromptsResponse(const ListPromptsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unique_prompt_id_(from.unique_prompt_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.ListPromptsResponse)
}

inline void ListPromptsResponse::SharedCtor() {
status_ = 0;
}

ListPromptsResponse::~ListPromptsResponse() {
  // @@protoc_insertion_point(destructor:iterm2.ListPromptsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPromptsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListPromptsResponse::ArenaDtor(void* object) {
  ListPromptsResponse* _this = reinterpret_cast< ListPromptsResponse* >(object);
  (void)_this;
}
void ListPromptsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPromptsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPromptsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListPromptsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unique_prompt_id_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPromptsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.ListPromptsResponse.Status status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::ListPromptsResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::ListPromptsResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string unique_prompt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unique_prompt_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListPromptsResponse.unique_prompt_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPromptsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListPromptsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.ListPromptsResponse.Status status = 1 [default = OK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated string unique_prompt_id = 2;
  for (int i = 0, n = this->_internal_unique_prompt_id_size(); i < n; i++) {
    const auto& s = this->_internal_unique_prompt_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListPromptsResponse.unique_prompt_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListPromptsResponse)
  return target;
}

size_t ListPromptsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListPromptsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string unique_prompt_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unique_prompt_id_.size());
  for (int i = 0, n = unique_prompt_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unique_prompt_id_.Get(i));
  }

  // optional .iterm2.ListPromptsResponse.Status status = 1 [default = OK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPromptsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPromptsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPromptsResponse::GetClassData() const { return &_class_data_; }

void ListPromptsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPromptsResponse *>(to)->MergeFrom(
      static_cast<const ListPromptsResponse &>(from));
}


void ListPromptsResponse::MergeFrom(const ListPromptsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListPromptsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unique_prompt_id_.MergeFrom(from.unique_prompt_id_);
  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPromptsResponse::CopyFrom(const ListPromptsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListPromptsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPromptsResponse::IsInitialized() const {
  return true;
}

void ListPromptsResponse::InternalSwap(ListPromptsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_prompt_id_.InternalSwap(&other->unique_prompt_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPromptsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[137]);
}

// ===================================================================

class GetProfilePropertyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProfilePropertyRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetProfilePropertyRequest::GetProfilePropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetProfilePropertyRequest)
}
GetProfilePropertyRequest::GetProfilePropertyRequest(const GetProfilePropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.GetProfilePropertyRequest)
}

inline void GetProfilePropertyRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetProfilePropertyRequest::~GetProfilePropertyRequest() {
  // @@protoc_insertion_point(destructor:iterm2.GetProfilePropertyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProfilePropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProfilePropertyRequest::ArenaDtor(void* object) {
  GetProfilePropertyRequest* _this = reinterpret_cast< GetProfilePropertyRequest* >(object);
  (void)_this;
}
void GetProfilePropertyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProfilePropertyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProfilePropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetProfilePropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProfilePropertyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetProfilePropertyRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.GetProfilePropertyRequest.keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetProfilePropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetProfilePropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetProfilePropertyRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.GetProfilePropertyRequest.keys");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetProfilePropertyRequest)
  return target;
}

size_t GetProfilePropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetProfilePropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // optional string session = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProfilePropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProfilePropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProfilePropertyRequest::GetClassData() const { return &_class_data_; }

void GetProfilePropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetProfilePropertyRequest *>(to)->MergeFrom(
      static_cast<const GetProfilePropertyRequest &>(from));
}


void GetProfilePropertyRequest::MergeFrom(const GetProfilePropertyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetProfilePropertyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from._internal_has_session()) {
    _internal_set_session(from._internal_session());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProfilePropertyRequest::CopyFrom(const GetProfilePropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetProfilePropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProfilePropertyRequest::IsInitialized() const {
  return true;
}

void GetProfilePropertyRequest::InternalSwap(GetProfilePropertyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProfilePropertyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[138]);
}

// ===================================================================

class ProfileProperty::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileProperty>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfileProperty::ProfileProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ProfileProperty)
}
ProfileProperty::ProfileProperty(const ProfileProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ProfileProperty)
}

inline void ProfileProperty::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfileProperty::~ProfileProperty() {
  // @@protoc_insertion_point(destructor:iterm2.ProfileProperty)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileProperty::ArenaDtor(void* object) {
  ProfileProperty* _this = reinterpret_cast< ProfileProperty* >(object);
  (void)_this;
}
void ProfileProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ProfileProperty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ProfileProperty.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ProfileProperty.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileProperty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ProfileProperty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ProfileProperty.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string json_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ProfileProperty.json_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ProfileProperty)
  return target;
}

size_t ProfileProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ProfileProperty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string json_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileProperty::GetClassData() const { return &_class_data_; }

void ProfileProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileProperty *>(to)->MergeFrom(
      static_cast<const ProfileProperty &>(from));
}


void ProfileProperty::MergeFrom(const ProfileProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ProfileProperty)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_value(from._internal_json_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileProperty::CopyFrom(const ProfileProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ProfileProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileProperty::IsInitialized() const {
  return true;
}

void ProfileProperty::InternalSwap(ProfileProperty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileProperty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[139]);
}

// ===================================================================

class GetProfilePropertyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetProfilePropertyResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetProfilePropertyResponse::GetProfilePropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.GetProfilePropertyResponse)
}
GetProfilePropertyResponse::GetProfilePropertyResponse(const GetProfilePropertyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.GetProfilePropertyResponse)
}

inline void GetProfilePropertyResponse::SharedCtor() {
status_ = 0;
}

GetProfilePropertyResponse::~GetProfilePropertyResponse() {
  // @@protoc_insertion_point(destructor:iterm2.GetProfilePropertyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProfilePropertyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetProfilePropertyResponse::ArenaDtor(void* object) {
  GetProfilePropertyResponse* _this = reinterpret_cast< GetProfilePropertyResponse* >(object);
  (void)_this;
}
void GetProfilePropertyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProfilePropertyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProfilePropertyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.GetProfilePropertyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProfilePropertyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.GetProfilePropertyResponse.Status status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::GetProfilePropertyResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::GetProfilePropertyResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.ProfileProperty properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetProfilePropertyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.GetProfilePropertyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.GetProfilePropertyResponse.Status status = 1 [default = OK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated .iterm2.ProfileProperty properties = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.GetProfilePropertyResponse)
  return target;
}

size_t GetProfilePropertyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.GetProfilePropertyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ProfileProperty properties = 3;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .iterm2.GetProfilePropertyResponse.Status status = 1 [default = OK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProfilePropertyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProfilePropertyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProfilePropertyResponse::GetClassData() const { return &_class_data_; }

void GetProfilePropertyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetProfilePropertyResponse *>(to)->MergeFrom(
      static_cast<const GetProfilePropertyResponse &>(from));
}


void GetProfilePropertyResponse::MergeFrom(const GetProfilePropertyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.GetProfilePropertyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProfilePropertyResponse::CopyFrom(const GetProfilePropertyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.GetProfilePropertyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProfilePropertyResponse::IsInitialized() const {
  return true;
}

void GetProfilePropertyResponse::InternalSwap(GetProfilePropertyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  properties_.InternalSwap(&other->properties_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProfilePropertyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[140]);
}

// ===================================================================

class SetProfilePropertyRequest_GuidList::_Internal {
 public:
};

SetProfilePropertyRequest_GuidList::SetProfilePropertyRequest_GuidList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  guids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetProfilePropertyRequest.GuidList)
}
SetProfilePropertyRequest_GuidList::SetProfilePropertyRequest_GuidList(const SetProfilePropertyRequest_GuidList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      guids_(from.guids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.SetProfilePropertyRequest.GuidList)
}

inline void SetProfilePropertyRequest_GuidList::SharedCtor() {
}

SetProfilePropertyRequest_GuidList::~SetProfilePropertyRequest_GuidList() {
  // @@protoc_insertion_point(destructor:iterm2.SetProfilePropertyRequest.GuidList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetProfilePropertyRequest_GuidList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetProfilePropertyRequest_GuidList::ArenaDtor(void* object) {
  SetProfilePropertyRequest_GuidList* _this = reinterpret_cast< SetProfilePropertyRequest_GuidList* >(object);
  (void)_this;
}
void SetProfilePropertyRequest_GuidList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProfilePropertyRequest_GuidList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetProfilePropertyRequest_GuidList::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetProfilePropertyRequest.GuidList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProfilePropertyRequest_GuidList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string guids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_guids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetProfilePropertyRequest.GuidList.guids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetProfilePropertyRequest_GuidList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetProfilePropertyRequest.GuidList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string guids = 1;
  for (int i = 0, n = this->_internal_guids_size(); i < n; i++) {
    const auto& s = this->_internal_guids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetProfilePropertyRequest.GuidList.guids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetProfilePropertyRequest.GuidList)
  return target;
}

size_t SetProfilePropertyRequest_GuidList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetProfilePropertyRequest.GuidList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string guids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(guids_.size());
  for (int i = 0, n = guids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      guids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProfilePropertyRequest_GuidList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetProfilePropertyRequest_GuidList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProfilePropertyRequest_GuidList::GetClassData() const { return &_class_data_; }

void SetProfilePropertyRequest_GuidList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetProfilePropertyRequest_GuidList *>(to)->MergeFrom(
      static_cast<const SetProfilePropertyRequest_GuidList &>(from));
}


void SetProfilePropertyRequest_GuidList::MergeFrom(const SetProfilePropertyRequest_GuidList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetProfilePropertyRequest.GuidList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  guids_.MergeFrom(from.guids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProfilePropertyRequest_GuidList::CopyFrom(const SetProfilePropertyRequest_GuidList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetProfilePropertyRequest.GuidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfilePropertyRequest_GuidList::IsInitialized() const {
  return true;
}

void SetProfilePropertyRequest_GuidList::InternalSwap(SetProfilePropertyRequest_GuidList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  guids_.InternalSwap(&other->guids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProfilePropertyRequest_GuidList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[141]);
}

// ===================================================================

class SetProfilePropertyRequest_Assignment::_Internal {
 public:
  using HasBits = decltype(std::declval<SetProfilePropertyRequest_Assignment>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetProfilePropertyRequest_Assignment::SetProfilePropertyRequest_Assignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetProfilePropertyRequest.Assignment)
}
SetProfilePropertyRequest_Assignment::SetProfilePropertyRequest_Assignment(const SetProfilePropertyRequest_Assignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SetProfilePropertyRequest.Assignment)
}

inline void SetProfilePropertyRequest_Assignment::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetProfilePropertyRequest_Assignment::~SetProfilePropertyRequest_Assignment() {
  // @@protoc_insertion_point(destructor:iterm2.SetProfilePropertyRequest.Assignment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetProfilePropertyRequest_Assignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetProfilePropertyRequest_Assignment::ArenaDtor(void* object) {
  SetProfilePropertyRequest_Assignment* _this = reinterpret_cast< SetProfilePropertyRequest_Assignment* >(object);
  (void)_this;
}
void SetProfilePropertyRequest_Assignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProfilePropertyRequest_Assignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetProfilePropertyRequest_Assignment::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetProfilePropertyRequest.Assignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProfilePropertyRequest_Assignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetProfilePropertyRequest.Assignment.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetProfilePropertyRequest.Assignment.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetProfilePropertyRequest_Assignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetProfilePropertyRequest.Assignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetProfilePropertyRequest.Assignment.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string json_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetProfilePropertyRequest.Assignment.json_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetProfilePropertyRequest.Assignment)
  return target;
}

size_t SetProfilePropertyRequest_Assignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetProfilePropertyRequest.Assignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string json_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProfilePropertyRequest_Assignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetProfilePropertyRequest_Assignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProfilePropertyRequest_Assignment::GetClassData() const { return &_class_data_; }

void SetProfilePropertyRequest_Assignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetProfilePropertyRequest_Assignment *>(to)->MergeFrom(
      static_cast<const SetProfilePropertyRequest_Assignment &>(from));
}


void SetProfilePropertyRequest_Assignment::MergeFrom(const SetProfilePropertyRequest_Assignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetProfilePropertyRequest.Assignment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_value(from._internal_json_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProfilePropertyRequest_Assignment::CopyFrom(const SetProfilePropertyRequest_Assignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetProfilePropertyRequest.Assignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfilePropertyRequest_Assignment::IsInitialized() const {
  return true;
}

void SetProfilePropertyRequest_Assignment::InternalSwap(SetProfilePropertyRequest_Assignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProfilePropertyRequest_Assignment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[142]);
}

// ===================================================================

class SetProfilePropertyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetProfilePropertyRequest>()._has_bits_);
  static const ::iterm2::SetProfilePropertyRequest_GuidList& guid_list(const SetProfilePropertyRequest* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::SetProfilePropertyRequest_GuidList&
SetProfilePropertyRequest::_Internal::guid_list(const SetProfilePropertyRequest* msg) {
  return *msg->target_.guid_list_;
}
void SetProfilePropertyRequest::set_allocated_guid_list(::iterm2::SetProfilePropertyRequest_GuidList* guid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (guid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SetProfilePropertyRequest_GuidList>::GetOwningArena(guid_list);
    if (message_arena != submessage_arena) {
      guid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guid_list, submessage_arena);
    }
    set_has_guid_list();
    target_.guid_list_ = guid_list;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SetProfilePropertyRequest.guid_list)
}
SetProfilePropertyRequest::SetProfilePropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assignments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetProfilePropertyRequest)
}
SetProfilePropertyRequest::SetProfilePropertyRequest(const SetProfilePropertyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assignments_(from.assignments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_value()) {
    json_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_value(), 
      GetArenaForAllocation());
  }
  clear_has_target();
  switch (from.target_case()) {
    case kSession: {
      _internal_set_session(from._internal_session());
      break;
    }
    case kGuidList: {
      _internal_mutable_guid_list()->::iterm2::SetProfilePropertyRequest_GuidList::MergeFrom(from._internal_guid_list());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SetProfilePropertyRequest)
}

inline void SetProfilePropertyRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_target();
}

SetProfilePropertyRequest::~SetProfilePropertyRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SetProfilePropertyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetProfilePropertyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
}

void SetProfilePropertyRequest::ArenaDtor(void* object) {
  SetProfilePropertyRequest* _this = reinterpret_cast< SetProfilePropertyRequest* >(object);
  (void)_this;
}
void SetProfilePropertyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProfilePropertyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetProfilePropertyRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.SetProfilePropertyRequest)
  switch (target_case()) {
    case kSession: {
      target_.session_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kGuidList: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.guid_list_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void SetProfilePropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetProfilePropertyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_value_.ClearNonDefaultToEmpty();
    }
  }
  clear_target();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProfilePropertyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetProfilePropertyRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SetProfilePropertyRequest.GuidList guid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_guid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetProfilePropertyRequest.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_json_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SetProfilePropertyRequest.json_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.SetProfilePropertyRequest.Assignment assignments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetProfilePropertyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetProfilePropertyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (target_case()) {
    case kSession: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "iterm2.SetProfilePropertyRequest.session");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_session(), target);
      break;
    }
    case kGuidList: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::guid_list(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetProfilePropertyRequest.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // optional string json_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_value().data(), static_cast<int>(this->_internal_json_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SetProfilePropertyRequest.json_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_value(), target);
  }

  // repeated .iterm2.SetProfilePropertyRequest.Assignment assignments = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_assignments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetProfilePropertyRequest)
  return target;
}

size_t SetProfilePropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetProfilePropertyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.SetProfilePropertyRequest.Assignment assignments = 5;
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto& msg : this->assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string json_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_value());
    }

  }
  switch (target_case()) {
    // string session = 1;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
      break;
    }
    // .iterm2.SetProfilePropertyRequest.GuidList guid_list = 2;
    case kGuidList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.guid_list_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProfilePropertyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetProfilePropertyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProfilePropertyRequest::GetClassData() const { return &_class_data_; }

void SetProfilePropertyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetProfilePropertyRequest *>(to)->MergeFrom(
      static_cast<const SetProfilePropertyRequest &>(from));
}


void SetProfilePropertyRequest::MergeFrom(const SetProfilePropertyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetProfilePropertyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  assignments_.MergeFrom(from.assignments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_value(from._internal_json_value());
    }
  }
  switch (from.target_case()) {
    case kSession: {
      _internal_set_session(from._internal_session());
      break;
    }
    case kGuidList: {
      _internal_mutable_guid_list()->::iterm2::SetProfilePropertyRequest_GuidList::MergeFrom(from._internal_guid_list());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProfilePropertyRequest::CopyFrom(const SetProfilePropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetProfilePropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfilePropertyRequest::IsInitialized() const {
  return true;
}

void SetProfilePropertyRequest::InternalSwap(SetProfilePropertyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assignments_.InternalSwap(&other->assignments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_value_, lhs_arena,
      &other->json_value_, rhs_arena
  );
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProfilePropertyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[143]);
}

// ===================================================================

class SetProfilePropertyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetProfilePropertyResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetProfilePropertyResponse::SetProfilePropertyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SetProfilePropertyResponse)
}
SetProfilePropertyResponse::SetProfilePropertyResponse(const SetProfilePropertyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SetProfilePropertyResponse)
}

inline void SetProfilePropertyResponse::SharedCtor() {
status_ = 0;
}

SetProfilePropertyResponse::~SetProfilePropertyResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SetProfilePropertyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetProfilePropertyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetProfilePropertyResponse::ArenaDtor(void* object) {
  SetProfilePropertyResponse* _this = reinterpret_cast< SetProfilePropertyResponse* >(object);
  (void)_this;
}
void SetProfilePropertyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProfilePropertyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetProfilePropertyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SetProfilePropertyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProfilePropertyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SetProfilePropertyResponse.Status status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SetProfilePropertyResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SetProfilePropertyResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetProfilePropertyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SetProfilePropertyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SetProfilePropertyResponse.Status status = 1 [default = OK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SetProfilePropertyResponse)
  return target;
}

size_t SetProfilePropertyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SetProfilePropertyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.SetProfilePropertyResponse.Status status = 1 [default = OK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProfilePropertyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetProfilePropertyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProfilePropertyResponse::GetClassData() const { return &_class_data_; }

void SetProfilePropertyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetProfilePropertyResponse *>(to)->MergeFrom(
      static_cast<const SetProfilePropertyResponse &>(from));
}


void SetProfilePropertyResponse::MergeFrom(const SetProfilePropertyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SetProfilePropertyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProfilePropertyResponse::CopyFrom(const SetProfilePropertyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SetProfilePropertyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProfilePropertyResponse::IsInitialized() const {
  return true;
}

void SetProfilePropertyResponse::InternalSwap(SetProfilePropertyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProfilePropertyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[144]);
}

// ===================================================================

class TransactionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionRequest>()._has_bits_);
  static void set_has_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransactionRequest::TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TransactionRequest)
}
TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  begin_ = from.begin_;
  // @@protoc_insertion_point(copy_constructor:iterm2.TransactionRequest)
}

inline void TransactionRequest::SharedCtor() {
begin_ = false;
}

TransactionRequest::~TransactionRequest() {
  // @@protoc_insertion_point(destructor:iterm2.TransactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionRequest::ArenaDtor(void* object) {
  TransactionRequest* _this = reinterpret_cast< TransactionRequest* >(object);
  (void)_this;
}
void TransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TransactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin(&has_bits);
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TransactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_begin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TransactionRequest)
  return target;
}

size_t TransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TransactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool begin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionRequest::GetClassData() const { return &_class_data_; }

void TransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionRequest *>(to)->MergeFrom(
      static_cast<const TransactionRequest &>(from));
}


void TransactionRequest::MergeFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_begin()) {
    _internal_set_begin(from._internal_begin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {
  return true;
}

void TransactionRequest::InternalSwap(TransactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(begin_, other->begin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[145]);
}

// ===================================================================

class TransactionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransactionResponse::TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.TransactionResponse)
}
TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.TransactionResponse)
}

inline void TransactionResponse::SharedCtor() {
status_ = 0;
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:iterm2.TransactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionResponse::ArenaDtor(void* object) {
  TransactionResponse* _this = reinterpret_cast< TransactionResponse* >(object);
  (void)_this;
}
void TransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.TransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.TransactionResponse.Status status = 1 [default = OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::TransactionResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::TransactionResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.TransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.TransactionResponse.Status status = 1 [default = OK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.TransactionResponse)
  return target;
}

size_t TransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.TransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.TransactionResponse.Status status = 1 [default = OK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionResponse::GetClassData() const { return &_class_data_; }

void TransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionResponse *>(to)->MergeFrom(
      static_cast<const TransactionResponse &>(from));
}


void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {
  return true;
}

void TransactionResponse::InternalSwap(TransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[146]);
}

// ===================================================================

class LineRange::_Internal {
 public:
  using HasBits = decltype(std::declval<LineRange>()._has_bits_);
  static void set_has_screen_contents_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trailing_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::iterm2::WindowedCoordRange& windowed_coord_range(const LineRange* msg);
  static void set_has_windowed_coord_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::iterm2::WindowedCoordRange&
LineRange::_Internal::windowed_coord_range(const LineRange* msg) {
  return *msg->windowed_coord_range_;
}
LineRange::LineRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.LineRange)
}
LineRange::LineRange(const LineRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_windowed_coord_range()) {
    windowed_coord_range_ = new ::iterm2::WindowedCoordRange(*from.windowed_coord_range_);
  } else {
    windowed_coord_range_ = nullptr;
  }
  ::memcpy(&screen_contents_only_, &from.screen_contents_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&trailing_lines_) -
    reinterpret_cast<char*>(&screen_contents_only_)) + sizeof(trailing_lines_));
  // @@protoc_insertion_point(copy_constructor:iterm2.LineRange)
}

inline void LineRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&windowed_coord_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trailing_lines_) -
    reinterpret_cast<char*>(&windowed_coord_range_)) + sizeof(trailing_lines_));
}

LineRange::~LineRange() {
  // @@protoc_insertion_point(destructor:iterm2.LineRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LineRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete windowed_coord_range_;
}

void LineRange::ArenaDtor(void* object) {
  LineRange* _this = reinterpret_cast< LineRange* >(object);
  (void)_this;
}
void LineRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineRange::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.LineRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(windowed_coord_range_ != nullptr);
    windowed_coord_range_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&screen_contents_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trailing_lines_) -
        reinterpret_cast<char*>(&screen_contents_only_)) + sizeof(trailing_lines_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool screen_contents_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_screen_contents_only(&has_bits);
          screen_contents_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 trailing_lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trailing_lines(&has_bits);
          trailing_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.WindowedCoordRange windowed_coord_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_windowed_coord_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.LineRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool screen_contents_only = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_screen_contents_only(), target);
  }

  // optional int32 trailing_lines = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_trailing_lines(), target);
  }

  // optional .iterm2.WindowedCoordRange windowed_coord_range = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::windowed_coord_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.LineRange)
  return target;
}

size_t LineRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.LineRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .iterm2.WindowedCoordRange windowed_coord_range = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *windowed_coord_range_);
    }

    // optional bool screen_contents_only = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 trailing_lines = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_trailing_lines());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LineRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineRange::GetClassData() const { return &_class_data_; }

void LineRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LineRange *>(to)->MergeFrom(
      static_cast<const LineRange &>(from));
}


void LineRange::MergeFrom(const LineRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.LineRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_windowed_coord_range()->::iterm2::WindowedCoordRange::MergeFrom(from._internal_windowed_coord_range());
    }
    if (cached_has_bits & 0x00000002u) {
      screen_contents_only_ = from.screen_contents_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      trailing_lines_ = from.trailing_lines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineRange::CopyFrom(const LineRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.LineRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRange::IsInitialized() const {
  return true;
}

void LineRange::InternalSwap(LineRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineRange, trailing_lines_)
      + sizeof(LineRange::trailing_lines_)
      - PROTOBUF_FIELD_OFFSET(LineRange, windowed_coord_range_)>(
          reinterpret_cast<char*>(&windowed_coord_range_),
          reinterpret_cast<char*>(&other->windowed_coord_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[147]);
}

// ===================================================================

class Range::_Internal {
 public:
  using HasBits = decltype(std::declval<Range>()._has_bits_);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&location_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:iterm2.Range)
}

inline void Range::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&location_)) + sizeof(length_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:iterm2.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Range)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&location_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_location(&has_bits);
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Range::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Range)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_location(), target);
  }

  // optional int64 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Range)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_location());
    }

    // optional int64 length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Range::GetClassData() const { return &_class_data_; }

void Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Range *>(to)->MergeFrom(
      static_cast<const Range &>(from));
}


void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Range)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, length_)
      + sizeof(Range::length_)
      - PROTOBUF_FIELD_OFFSET(Range, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[148]);
}

// ===================================================================

class CoordRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CoordRange>()._has_bits_);
  static const ::iterm2::Coord& start(const CoordRange* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Coord& end(const CoordRange* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::Coord&
CoordRange::_Internal::start(const CoordRange* msg) {
  return *msg->start_;
}
const ::iterm2::Coord&
CoordRange::_Internal::end(const CoordRange* msg) {
  return *msg->end_;
}
CoordRange::CoordRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CoordRange)
}
CoordRange::CoordRange(const CoordRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::iterm2::Coord(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::iterm2::Coord(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.CoordRange)
}

inline void CoordRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

CoordRange::~CoordRange() {
  // @@protoc_insertion_point(destructor:iterm2.CoordRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CoordRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void CoordRange::ArenaDtor(void* object) {
  CoordRange* _this = reinterpret_cast< CoordRange* >(object);
  (void)_this;
}
void CoordRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoordRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoordRange::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CoordRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.Coord start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Coord end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CoordRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.Coord start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // optional .iterm2.Coord end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CoordRange)
  return target;
}

size_t CoordRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CoordRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .iterm2.Coord start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .iterm2.Coord end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoordRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordRange::GetClassData() const { return &_class_data_; }

void CoordRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CoordRange *>(to)->MergeFrom(
      static_cast<const CoordRange &>(from));
}


void CoordRange::MergeFrom(const CoordRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CoordRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::iterm2::Coord::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::iterm2::Coord::MergeFrom(from._internal_end());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordRange::CopyFrom(const CoordRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CoordRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordRange::IsInitialized() const {
  return true;
}

void CoordRange::InternalSwap(CoordRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordRange, end_)
      + sizeof(CoordRange::end_)
      - PROTOBUF_FIELD_OFFSET(CoordRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[149]);
}

// ===================================================================

class Coord::_Internal {
 public:
  using HasBits = decltype(std::declval<Coord>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Coord::Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Coord)
}
Coord::Coord(const Coord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&y_, &from.y_,
    static_cast<size_t>(reinterpret_cast<char*>(&x_) -
    reinterpret_cast<char*>(&y_)) + sizeof(x_));
  // @@protoc_insertion_point(copy_constructor:iterm2.Coord)
}

inline void Coord::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&y_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&x_) -
    reinterpret_cast<char*>(&y_)) + sizeof(x_));
}

Coord::~Coord() {
  // @@protoc_insertion_point(destructor:iterm2.Coord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Coord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coord::ArenaDtor(void* object) {
  Coord* _this = reinterpret_cast< Coord* >(object);
  (void)_this;
}
void Coord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Coord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x_) -
        reinterpret_cast<char*>(&y_)) + sizeof(x_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Coord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int64 y = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Coord)
  return target;
}

size_t Coord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Coord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 y = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y());
    }

    // optional int32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Coord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coord::GetClassData() const { return &_class_data_; }

void Coord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Coord *>(to)->MergeFrom(
      static_cast<const Coord &>(from));
}


void Coord::MergeFrom(const Coord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Coord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coord::CopyFrom(const Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coord::IsInitialized() const {
  return true;
}

void Coord::InternalSwap(Coord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coord, x_)
      + sizeof(Coord::x_)
      - PROTOBUF_FIELD_OFFSET(Coord, y_)>(
          reinterpret_cast<char*>(&y_),
          reinterpret_cast<char*>(&other->y_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[150]);
}

// ===================================================================

class LineContents::_Internal {
 public:
  using HasBits = decltype(std::declval<LineContents>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continuation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LineContents::LineContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  code_points_per_cell_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.LineContents)
}
LineContents::LineContents(const LineContents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      code_points_per_cell_(from.code_points_per_cell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  continuation_ = from.continuation_;
  // @@protoc_insertion_point(copy_constructor:iterm2.LineContents)
}

inline void LineContents::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
continuation_ = 1;
}

LineContents::~LineContents() {
  // @@protoc_insertion_point(destructor:iterm2.LineContents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LineContents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LineContents::ArenaDtor(void* object) {
  LineContents* _this = reinterpret_cast< LineContents* >(object);
  (void)_this;
}
void LineContents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineContents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineContents::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.LineContents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_points_per_cell_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    continuation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineContents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.LineContents.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.CodePointsPerCell code_points_per_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_code_points_per_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.LineContents.Continuation continuation = 3 [default = CONTINUATION_HARD_EOL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::LineContents_Continuation_IsValid(val))) {
            _internal_set_continuation(static_cast<::iterm2::LineContents_Continuation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineContents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.LineContents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.LineContents.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // repeated .iterm2.CodePointsPerCell code_points_per_cell = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_code_points_per_cell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_code_points_per_cell(i), target, stream);
  }

  // optional .iterm2.LineContents.Continuation continuation = 3 [default = CONTINUATION_HARD_EOL];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_continuation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.LineContents)
  return target;
}

size_t LineContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.LineContents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.CodePointsPerCell code_points_per_cell = 2;
  total_size += 1UL * this->_internal_code_points_per_cell_size();
  for (const auto& msg : this->code_points_per_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .iterm2.LineContents.Continuation continuation = 3 [default = CONTINUATION_HARD_EOL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_continuation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineContents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LineContents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineContents::GetClassData() const { return &_class_data_; }

void LineContents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LineContents *>(to)->MergeFrom(
      static_cast<const LineContents &>(from));
}


void LineContents::MergeFrom(const LineContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.LineContents)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  code_points_per_cell_.MergeFrom(from.code_points_per_cell_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      continuation_ = from.continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineContents::CopyFrom(const LineContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.LineContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineContents::IsInitialized() const {
  return true;
}

void LineContents::InternalSwap(LineContents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_points_per_cell_.InternalSwap(&other->code_points_per_cell_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  swap(continuation_, other->continuation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineContents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[151]);
}

// ===================================================================

class CodePointsPerCell::_Internal {
 public:
  using HasBits = decltype(std::declval<CodePointsPerCell>()._has_bits_);
  static void set_has_num_code_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_repeats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CodePointsPerCell::CodePointsPerCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CodePointsPerCell)
}
CodePointsPerCell::CodePointsPerCell(const CodePointsPerCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&repeats_, &from.repeats_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_code_points_) -
    reinterpret_cast<char*>(&repeats_)) + sizeof(num_code_points_));
  // @@protoc_insertion_point(copy_constructor:iterm2.CodePointsPerCell)
}

inline void CodePointsPerCell::SharedCtor() {
repeats_ = 0;
num_code_points_ = 1;
}

CodePointsPerCell::~CodePointsPerCell() {
  // @@protoc_insertion_point(destructor:iterm2.CodePointsPerCell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CodePointsPerCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CodePointsPerCell::ArenaDtor(void* object) {
  CodePointsPerCell* _this = reinterpret_cast< CodePointsPerCell* >(object);
  (void)_this;
}
void CodePointsPerCell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CodePointsPerCell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CodePointsPerCell::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CodePointsPerCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    repeats_ = 0;
    num_code_points_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodePointsPerCell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_code_points = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_code_points(&has_bits);
          num_code_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 repeats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_repeats(&has_bits);
          repeats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CodePointsPerCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CodePointsPerCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_code_points = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_code_points(), target);
  }

  // optional int32 repeats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_repeats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CodePointsPerCell)
  return target;
}

size_t CodePointsPerCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CodePointsPerCell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 repeats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_repeats());
    }

    // optional int32 num_code_points = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_code_points());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CodePointsPerCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CodePointsPerCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CodePointsPerCell::GetClassData() const { return &_class_data_; }

void CodePointsPerCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CodePointsPerCell *>(to)->MergeFrom(
      static_cast<const CodePointsPerCell &>(from));
}


void CodePointsPerCell::MergeFrom(const CodePointsPerCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CodePointsPerCell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      repeats_ = from.repeats_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_code_points_ = from.num_code_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CodePointsPerCell::CopyFrom(const CodePointsPerCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CodePointsPerCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodePointsPerCell::IsInitialized() const {
  return true;
}

void CodePointsPerCell::InternalSwap(CodePointsPerCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(repeats_, other->repeats_);
  swap(num_code_points_, other->num_code_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodePointsPerCell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[152]);
}

// ===================================================================

class ListSessionsRequest::_Internal {
 public:
};

ListSessionsRequest::ListSessionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:iterm2.ListSessionsRequest)
}
ListSessionsRequest::ListSessionsRequest(const ListSessionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ListSessionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSessionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSessionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListSessionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[153]);
}

// ===================================================================

class SendTextRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendTextRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suppress_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SendTextRequest::SendTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SendTextRequest)
}
SendTextRequest::SendTextRequest(const SendTextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  suppress_broadcast_ = from.suppress_broadcast_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SendTextRequest)
}

inline void SendTextRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
suppress_broadcast_ = false;
}

SendTextRequest::~SendTextRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SendTextRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendTextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendTextRequest::ArenaDtor(void* object) {
  SendTextRequest* _this = reinterpret_cast< SendTextRequest* >(object);
  (void)_this;
}
void SendTextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SendTextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
  }
  suppress_broadcast_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SendTextRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SendTextRequest.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_broadcast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_suppress_broadcast(&has_bits);
          suppress_broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendTextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SendTextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SendTextRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SendTextRequest.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional bool suppress_broadcast = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_suppress_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SendTextRequest)
  return target;
}

size_t SendTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SendTextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional bool suppress_broadcast = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendTextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTextRequest::GetClassData() const { return &_class_data_; }

void SendTextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendTextRequest *>(to)->MergeFrom(
      static_cast<const SendTextRequest &>(from));
}


void SendTextRequest::MergeFrom(const SendTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SendTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      suppress_broadcast_ = from.suppress_broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTextRequest::CopyFrom(const SendTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SendTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTextRequest::IsInitialized() const {
  return true;
}

void SendTextRequest::InternalSwap(SendTextRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  swap(suppress_broadcast_, other->suppress_broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTextRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[154]);
}

// ===================================================================

class SendTextResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SendTextResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SendTextResponse::SendTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SendTextResponse)
}
SendTextResponse::SendTextResponse(const SendTextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SendTextResponse)
}

inline void SendTextResponse::SharedCtor() {
status_ = 0;
}

SendTextResponse::~SendTextResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SendTextResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendTextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendTextResponse::ArenaDtor(void* object) {
  SendTextResponse* _this = reinterpret_cast< SendTextResponse* >(object);
  (void)_this;
}
void SendTextResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SendTextResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SendTextResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SendTextResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SendTextResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendTextResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SendTextResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SendTextResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SendTextResponse)
  return target;
}

size_t SendTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SendTextResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .iterm2.SendTextResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTextResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendTextResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTextResponse::GetClassData() const { return &_class_data_; }

void SendTextResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendTextResponse *>(to)->MergeFrom(
      static_cast<const SendTextResponse &>(from));
}


void SendTextResponse::MergeFrom(const SendTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SendTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTextResponse::CopyFrom(const SendTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SendTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTextResponse::IsInitialized() const {
  return true;
}

void SendTextResponse::InternalSwap(SendTextResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTextResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[155]);
}

// ===================================================================

class Size::_Internal {
 public:
  using HasBits = decltype(std::declval<Size>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:iterm2.Size)
}

inline void Size::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:iterm2.Size)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Size::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Size::ArenaDtor(void* object) {
  Size* _this = reinterpret_cast< Size* >(object);
  (void)_this;
}
void Size::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Size)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Size::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Size)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Size)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Size::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Size::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Size::GetClassData() const { return &_class_data_; }

void Size::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Size *>(to)->MergeFrom(
      static_cast<const Size &>(from));
}


void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Size)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, height_)
      + sizeof(Size::height_)
      - PROTOBUF_FIELD_OFFSET(Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[156]);
}

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:iterm2.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:iterm2.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[157]);
}

// ===================================================================

class Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<Frame>()._has_bits_);
  static const ::iterm2::Point& origin(const Frame* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Size& size(const Frame* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::Point&
Frame::_Internal::origin(const Frame* msg) {
  return *msg->origin_;
}
const ::iterm2::Size&
Frame::_Internal::size(const Frame* msg) {
  return *msg->size_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::iterm2::Point(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::iterm2::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.Frame)
}

inline void Frame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(size_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:iterm2.Frame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete size_;
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.Point origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.Point origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // optional .iterm2.Size size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .iterm2.Point origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .iterm2.Size size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }

void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frame *>(to)->MergeFrom(
      static_cast<const Frame &>(from));
}


void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::iterm2::Point::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::iterm2::Size::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, size_)
      + sizeof(Frame::size_)
      - PROTOBUF_FIELD_OFFSET(Frame, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[158]);
}

// ===================================================================

class SessionSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionSummary>()._has_bits_);
  static void set_has_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Frame& frame(const SessionSummary* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::iterm2::Size& grid_size(const SessionSummary* msg);
  static void set_has_grid_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iterm2::Frame&
SessionSummary::_Internal::frame(const SessionSummary* msg) {
  return *msg->frame_;
}
const ::iterm2::Size&
SessionSummary::_Internal::grid_size(const SessionSummary* msg) {
  return *msg->grid_size_;
}
SessionSummary::SessionSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SessionSummary)
}
SessionSummary::SessionSummary(const SessionSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_identifier()) {
    unique_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_identifier(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_frame()) {
    frame_ = new ::iterm2::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_grid_size()) {
    grid_size_ = new ::iterm2::Size(*from.grid_size_);
  } else {
    grid_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SessionSummary)
}

inline void SessionSummary::SharedCtor() {
unique_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grid_size_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(grid_size_));
}

SessionSummary::~SessionSummary() {
  // @@protoc_insertion_point(destructor:iterm2.SessionSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SessionSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unique_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete grid_size_;
}

void SessionSummary::ArenaDtor(void* object) {
  SessionSummary* _this = reinterpret_cast< SessionSummary* >(object);
  (void)_this;
}
void SessionSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SessionSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      unique_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(grid_size_ != nullptr);
      grid_size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unique_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SessionSummary.unique_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Frame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Size grid_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SessionSummary.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SessionSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_identifier().data(), static_cast<int>(this->_internal_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SessionSummary.unique_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_identifier(), target);
  }

  // optional .iterm2.Frame frame = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame(this), target, stream);
  }

  // optional .iterm2.Size grid_size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::grid_size(this), target, stream);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SessionSummary.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SessionSummary)
  return target;
}

size_t SessionSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SessionSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unique_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_identifier());
    }

    // optional string title = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional .iterm2.Frame frame = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_);
    }

    // optional .iterm2.Size grid_size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grid_size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SessionSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionSummary::GetClassData() const { return &_class_data_; }

void SessionSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SessionSummary *>(to)->MergeFrom(
      static_cast<const SessionSummary &>(from));
}


void SessionSummary::MergeFrom(const SessionSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SessionSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_identifier(from._internal_unique_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_frame()->::iterm2::Frame::MergeFrom(from._internal_frame());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_grid_size()->::iterm2::Size::MergeFrom(from._internal_grid_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionSummary::CopyFrom(const SessionSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SessionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSummary::IsInitialized() const {
  return true;
}

void SessionSummary::InternalSwap(SessionSummary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_identifier_, lhs_arena,
      &other->unique_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionSummary, grid_size_)
      + sizeof(SessionSummary::grid_size_)
      - PROTOBUF_FIELD_OFFSET(SessionSummary, frame_)>(
          reinterpret_cast<char*>(&frame_),
          reinterpret_cast<char*>(&other->frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[159]);
}

// ===================================================================

class SplitTreeNode_SplitTreeLink::_Internal {
 public:
  static const ::iterm2::SessionSummary& session(const SplitTreeNode_SplitTreeLink* msg);
  static const ::iterm2::SplitTreeNode& node(const SplitTreeNode_SplitTreeLink* msg);
};

const ::iterm2::SessionSummary&
SplitTreeNode_SplitTreeLink::_Internal::session(const SplitTreeNode_SplitTreeLink* msg) {
  return *msg->child_.session_;
}
const ::iterm2::SplitTreeNode&
SplitTreeNode_SplitTreeLink::_Internal::node(const SplitTreeNode_SplitTreeLink* msg) {
  return *msg->child_.node_;
}
void SplitTreeNode_SplitTreeLink::set_allocated_session(::iterm2::SessionSummary* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_child();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SessionSummary>::GetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    child_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SplitTreeNode.SplitTreeLink.session)
}
void SplitTreeNode_SplitTreeLink::set_allocated_node(::iterm2::SplitTreeNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_child();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::iterm2::SplitTreeNode>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    child_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:iterm2.SplitTreeNode.SplitTreeLink.node)
}
SplitTreeNode_SplitTreeLink::SplitTreeNode_SplitTreeLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SplitTreeNode.SplitTreeLink)
}
SplitTreeNode_SplitTreeLink::SplitTreeNode_SplitTreeLink(const SplitTreeNode_SplitTreeLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_child();
  switch (from.child_case()) {
    case kSession: {
      _internal_mutable_session()->::iterm2::SessionSummary::MergeFrom(from._internal_session());
      break;
    }
    case kNode: {
      _internal_mutable_node()->::iterm2::SplitTreeNode::MergeFrom(from._internal_node());
      break;
    }
    case CHILD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.SplitTreeNode.SplitTreeLink)
}

inline void SplitTreeNode_SplitTreeLink::SharedCtor() {
clear_has_child();
}

SplitTreeNode_SplitTreeLink::~SplitTreeNode_SplitTreeLink() {
  // @@protoc_insertion_point(destructor:iterm2.SplitTreeNode.SplitTreeLink)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SplitTreeNode_SplitTreeLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_child()) {
    clear_child();
  }
}

void SplitTreeNode_SplitTreeLink::ArenaDtor(void* object) {
  SplitTreeNode_SplitTreeLink* _this = reinterpret_cast< SplitTreeNode_SplitTreeLink* >(object);
  (void)_this;
}
void SplitTreeNode_SplitTreeLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitTreeNode_SplitTreeLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SplitTreeNode_SplitTreeLink::clear_child() {
// @@protoc_insertion_point(one_of_clear_start:iterm2.SplitTreeNode.SplitTreeLink)
  switch (child_case()) {
    case kSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete child_.session_;
      }
      break;
    }
    case kNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete child_.node_;
      }
      break;
    }
    case CHILD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHILD_NOT_SET;
}


void SplitTreeNode_SplitTreeLink::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SplitTreeNode.SplitTreeLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_child();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitTreeNode_SplitTreeLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .iterm2.SessionSummary session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .iterm2.SplitTreeNode node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitTreeNode_SplitTreeLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SplitTreeNode.SplitTreeLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (child_case()) {
    case kSession: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::session(this), target, stream);
      break;
    }
    case kNode: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::node(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SplitTreeNode.SplitTreeLink)
  return target;
}

size_t SplitTreeNode_SplitTreeLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SplitTreeNode.SplitTreeLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (child_case()) {
    // .iterm2.SessionSummary session = 1;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_.session_);
      break;
    }
    // .iterm2.SplitTreeNode node = 2;
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_.node_);
      break;
    }
    case CHILD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitTreeNode_SplitTreeLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SplitTreeNode_SplitTreeLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitTreeNode_SplitTreeLink::GetClassData() const { return &_class_data_; }

void SplitTreeNode_SplitTreeLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SplitTreeNode_SplitTreeLink *>(to)->MergeFrom(
      static_cast<const SplitTreeNode_SplitTreeLink &>(from));
}


void SplitTreeNode_SplitTreeLink::MergeFrom(const SplitTreeNode_SplitTreeLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SplitTreeNode.SplitTreeLink)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.child_case()) {
    case kSession: {
      _internal_mutable_session()->::iterm2::SessionSummary::MergeFrom(from._internal_session());
      break;
    }
    case kNode: {
      _internal_mutable_node()->::iterm2::SplitTreeNode::MergeFrom(from._internal_node());
      break;
    }
    case CHILD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitTreeNode_SplitTreeLink::CopyFrom(const SplitTreeNode_SplitTreeLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SplitTreeNode.SplitTreeLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTreeNode_SplitTreeLink::IsInitialized() const {
  return true;
}

void SplitTreeNode_SplitTreeLink::InternalSwap(SplitTreeNode_SplitTreeLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(child_, other->child_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitTreeNode_SplitTreeLink::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[160]);
}

// ===================================================================

class SplitTreeNode::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitTreeNode>()._has_bits_);
  static void set_has_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SplitTreeNode::SplitTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  links_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SplitTreeNode)
}
SplitTreeNode::SplitTreeNode(const SplitTreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vertical_ = from.vertical_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SplitTreeNode)
}

inline void SplitTreeNode::SharedCtor() {
vertical_ = false;
}

SplitTreeNode::~SplitTreeNode() {
  // @@protoc_insertion_point(destructor:iterm2.SplitTreeNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SplitTreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SplitTreeNode::ArenaDtor(void* object) {
  SplitTreeNode* _this = reinterpret_cast< SplitTreeNode* >(object);
  (void)_this;
}
void SplitTreeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitTreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SplitTreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SplitTreeNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  vertical_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitTreeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool vertical = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_vertical(&has_bits);
          vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.SplitTreeNode.SplitTreeLink links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitTreeNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SplitTreeNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vertical = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vertical(), target);
  }

  // repeated .iterm2.SplitTreeNode.SplitTreeLink links = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SplitTreeNode)
  return target;
}

size_t SplitTreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SplitTreeNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.SplitTreeNode.SplitTreeLink links = 2;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool vertical = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitTreeNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SplitTreeNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitTreeNode::GetClassData() const { return &_class_data_; }

void SplitTreeNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SplitTreeNode *>(to)->MergeFrom(
      static_cast<const SplitTreeNode &>(from));
}


void SplitTreeNode::MergeFrom(const SplitTreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SplitTreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from._internal_has_vertical()) {
    _internal_set_vertical(from._internal_vertical());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitTreeNode::CopyFrom(const SplitTreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SplitTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTreeNode::IsInitialized() const {
  return true;
}

void SplitTreeNode::InternalSwap(SplitTreeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  links_.InternalSwap(&other->links_);
  swap(vertical_, other->vertical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitTreeNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[161]);
}

// ===================================================================

class ListSessionsResponse_Window::_Internal {
 public:
  using HasBits = decltype(std::declval<ListSessionsResponse_Window>()._has_bits_);
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iterm2::Frame& frame(const ListSessionsResponse_Window* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::iterm2::Frame&
ListSessionsResponse_Window::_Internal::frame(const ListSessionsResponse_Window* msg) {
  return *msg->frame_;
}
ListSessionsResponse_Window::ListSessionsResponse_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tabs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListSessionsResponse.Window)
}
ListSessionsResponse_Window::ListSessionsResponse_Window(const ListSessionsResponse_Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tabs_(from.tabs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_frame()) {
    frame_ = new ::iterm2::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:iterm2.ListSessionsResponse.Window)
}

inline void ListSessionsResponse_Window::SharedCtor() {
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(number_));
}

ListSessionsResponse_Window::~ListSessionsResponse_Window() {
  // @@protoc_insertion_point(destructor:iterm2.ListSessionsResponse.Window)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSessionsResponse_Window::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_;
}

void ListSessionsResponse_Window::ArenaDtor(void* object) {
  ListSessionsResponse_Window* _this = reinterpret_cast< ListSessionsResponse_Window* >(object);
  (void)_this;
}
void ListSessionsResponse_Window::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSessionsResponse_Window::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSessionsResponse_Window::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListSessionsResponse.Window)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tabs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      window_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
  }
  number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSessionsResponse_Window::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.ListSessionsResponse.Tab tabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListSessionsResponse.Window.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.Frame frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSessionsResponse_Window::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListSessionsResponse.Window)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.ListSessionsResponse.Tab tabs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tabs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tabs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string window_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListSessionsResponse.Window.window_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_window_id(), target);
  }

  // optional .iterm2.Frame frame = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frame(this), target, stream);
  }

  // optional int32 number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListSessionsResponse.Window)
  return target;
}

size_t ListSessionsResponse_Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListSessionsResponse.Window)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ListSessionsResponse.Tab tabs = 1;
  total_size += 1UL * this->_internal_tabs_size();
  for (const auto& msg : this->tabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string window_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
    }

    // optional .iterm2.Frame frame = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_);
    }

    // optional int32 number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSessionsResponse_Window::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSessionsResponse_Window::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSessionsResponse_Window::GetClassData() const { return &_class_data_; }

void ListSessionsResponse_Window::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSessionsResponse_Window *>(to)->MergeFrom(
      static_cast<const ListSessionsResponse_Window &>(from));
}


void ListSessionsResponse_Window::MergeFrom(const ListSessionsResponse_Window& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListSessionsResponse.Window)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tabs_.MergeFrom(from.tabs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_window_id(from._internal_window_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_frame()->::iterm2::Frame::MergeFrom(from._internal_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSessionsResponse_Window::CopyFrom(const ListSessionsResponse_Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListSessionsResponse.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSessionsResponse_Window::IsInitialized() const {
  return true;
}

void ListSessionsResponse_Window::InternalSwap(ListSessionsResponse_Window* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tabs_.InternalSwap(&other->tabs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSessionsResponse_Window, number_)
      + sizeof(ListSessionsResponse_Window::number_)
      - PROTOBUF_FIELD_OFFSET(ListSessionsResponse_Window, frame_)>(
          reinterpret_cast<char*>(&frame_),
          reinterpret_cast<char*>(&other->frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSessionsResponse_Window::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[162]);
}

// ===================================================================

class ListSessionsResponse_Tab::_Internal {
 public:
  using HasBits = decltype(std::declval<ListSessionsResponse_Tab>()._has_bits_);
  static const ::iterm2::SplitTreeNode& root(const ListSessionsResponse_Tab* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tmux_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tmux_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::iterm2::SplitTreeNode&
ListSessionsResponse_Tab::_Internal::root(const ListSessionsResponse_Tab* msg) {
  return *msg->root_;
}
ListSessionsResponse_Tab::ListSessionsResponse_Tab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  minimized_sessions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListSessionsResponse.Tab)
}
ListSessionsResponse_Tab::ListSessionsResponse_Tab(const ListSessionsResponse_Tab& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      minimized_sessions_(from.minimized_sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tab_id()) {
    tab_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tab_id(), 
      GetArenaForAllocation());
  }
  tmux_window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tmux_window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tmux_window_id()) {
    tmux_window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tmux_window_id(), 
      GetArenaForAllocation());
  }
  tmux_connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tmux_connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tmux_connection_id()) {
    tmux_connection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tmux_connection_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_root()) {
    root_ = new ::iterm2::SplitTreeNode(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iterm2.ListSessionsResponse.Tab)
}

inline void ListSessionsResponse_Tab::SharedCtor() {
tab_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tab_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tmux_window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tmux_window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tmux_connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tmux_connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
root_ = nullptr;
}

ListSessionsResponse_Tab::~ListSessionsResponse_Tab() {
  // @@protoc_insertion_point(destructor:iterm2.ListSessionsResponse.Tab)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSessionsResponse_Tab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tab_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tmux_window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tmux_connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete root_;
}

void ListSessionsResponse_Tab::ArenaDtor(void* object) {
  ListSessionsResponse_Tab* _this = reinterpret_cast< ListSessionsResponse_Tab* >(object);
  (void)_this;
}
void ListSessionsResponse_Tab::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSessionsResponse_Tab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSessionsResponse_Tab::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListSessionsResponse.Tab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minimized_sessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tab_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tmux_window_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      tmux_connection_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(root_ != nullptr);
      root_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSessionsResponse_Tab::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tab_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListSessionsResponse.Tab.tab_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.SplitTreeNode root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tmux_window_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tmux_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListSessionsResponse.Tab.tmux_window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tmux_connection_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tmux_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.ListSessionsResponse.Tab.tmux_connection_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.SessionSummary minimized_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minimized_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSessionsResponse_Tab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListSessionsResponse.Tab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tab_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tab_id().data(), static_cast<int>(this->_internal_tab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListSessionsResponse.Tab.tab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tab_id(), target);
  }

  // optional .iterm2.SplitTreeNode root = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::root(this), target, stream);
  }

  // optional string tmux_window_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tmux_window_id().data(), static_cast<int>(this->_internal_tmux_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListSessionsResponse.Tab.tmux_window_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tmux_window_id(), target);
  }

  // optional string tmux_connection_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tmux_connection_id().data(), static_cast<int>(this->_internal_tmux_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.ListSessionsResponse.Tab.tmux_connection_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tmux_connection_id(), target);
  }

  // repeated .iterm2.SessionSummary minimized_sessions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_minimized_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_minimized_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListSessionsResponse.Tab)
  return target;
}

size_t ListSessionsResponse_Tab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListSessionsResponse.Tab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.SessionSummary minimized_sessions = 6;
  total_size += 1UL * this->_internal_minimized_sessions_size();
  for (const auto& msg : this->minimized_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tab_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tab_id());
    }

    // optional string tmux_window_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tmux_window_id());
    }

    // optional string tmux_connection_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tmux_connection_id());
    }

    // optional .iterm2.SplitTreeNode root = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSessionsResponse_Tab::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSessionsResponse_Tab::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSessionsResponse_Tab::GetClassData() const { return &_class_data_; }

void ListSessionsResponse_Tab::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSessionsResponse_Tab *>(to)->MergeFrom(
      static_cast<const ListSessionsResponse_Tab &>(from));
}


void ListSessionsResponse_Tab::MergeFrom(const ListSessionsResponse_Tab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListSessionsResponse.Tab)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  minimized_sessions_.MergeFrom(from.minimized_sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tab_id(from._internal_tab_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tmux_window_id(from._internal_tmux_window_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_tmux_connection_id(from._internal_tmux_connection_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_root()->::iterm2::SplitTreeNode::MergeFrom(from._internal_root());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSessionsResponse_Tab::CopyFrom(const ListSessionsResponse_Tab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListSessionsResponse.Tab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSessionsResponse_Tab::IsInitialized() const {
  return true;
}

void ListSessionsResponse_Tab::InternalSwap(ListSessionsResponse_Tab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  minimized_sessions_.InternalSwap(&other->minimized_sessions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tab_id_, lhs_arena,
      &other->tab_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tmux_window_id_, lhs_arena,
      &other->tmux_window_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tmux_connection_id_, lhs_arena,
      &other->tmux_connection_id_, rhs_arena
  );
  swap(root_, other->root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSessionsResponse_Tab::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[163]);
}

// ===================================================================

class ListSessionsResponse::_Internal {
 public:
};

ListSessionsResponse::ListSessionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  windows_(arena),
  buried_sessions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.ListSessionsResponse)
}
ListSessionsResponse::ListSessionsResponse(const ListSessionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      windows_(from.windows_),
      buried_sessions_(from.buried_sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iterm2.ListSessionsResponse)
}

inline void ListSessionsResponse::SharedCtor() {
}

ListSessionsResponse::~ListSessionsResponse() {
  // @@protoc_insertion_point(destructor:iterm2.ListSessionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSessionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListSessionsResponse::ArenaDtor(void* object) {
  ListSessionsResponse* _this = reinterpret_cast< ListSessionsResponse* >(object);
  (void)_this;
}
void ListSessionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSessionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.ListSessionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  windows_.Clear();
  buried_sessions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSessionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .iterm2.ListSessionsResponse.Window windows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_windows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.SessionSummary buried_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buried_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSessionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.ListSessionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iterm2.ListSessionsResponse.Window windows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_windows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_windows(i), target, stream);
  }

  // repeated .iterm2.SessionSummary buried_sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buried_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buried_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.ListSessionsResponse)
  return target;
}

size_t ListSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.ListSessionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ListSessionsResponse.Window windows = 1;
  total_size += 1UL * this->_internal_windows_size();
  for (const auto& msg : this->windows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .iterm2.SessionSummary buried_sessions = 2;
  total_size += 1UL * this->_internal_buried_sessions_size();
  for (const auto& msg : this->buried_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSessionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSessionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSessionsResponse::GetClassData() const { return &_class_data_; }

void ListSessionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSessionsResponse *>(to)->MergeFrom(
      static_cast<const ListSessionsResponse &>(from));
}


void ListSessionsResponse::MergeFrom(const ListSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.ListSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  windows_.MergeFrom(from.windows_);
  buried_sessions_.MergeFrom(from.buried_sessions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSessionsResponse::CopyFrom(const ListSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.ListSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSessionsResponse::IsInitialized() const {
  return true;
}

void ListSessionsResponse::InternalSwap(ListSessionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  windows_.InternalSwap(&other->windows_);
  buried_sessions_.InternalSwap(&other->buried_sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSessionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[164]);
}

// ===================================================================

class CreateTabRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateTabRequest>()._has_bits_);
  static void set_has_profile_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tab_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CreateTabRequest::CreateTabRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_profile_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CreateTabRequest)
}
CreateTabRequest::CreateTabRequest(const CreateTabRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_profile_properties_(from.custom_profile_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_name()) {
    profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile_name(), 
      GetArenaForAllocation());
  }
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  tab_index_ = from.tab_index_;
  // @@protoc_insertion_point(copy_constructor:iterm2.CreateTabRequest)
}

inline void CreateTabRequest::SharedCtor() {
profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tab_index_ = 0u;
}

CreateTabRequest::~CreateTabRequest() {
  // @@protoc_insertion_point(destructor:iterm2.CreateTabRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTabRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  profile_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTabRequest::ArenaDtor(void* object) {
  CreateTabRequest* _this = reinterpret_cast< CreateTabRequest* >(object);
  (void)_this;
}
void CreateTabRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTabRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTabRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CreateTabRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_profile_properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      profile_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      window_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      command_.ClearNonDefaultToEmpty();
    }
  }
  tab_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTabRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string profile_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_profile_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CreateTabRequest.profile_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CreateTabRequest.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tab_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tab_index(&has_bits);
          tab_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CreateTabRequest.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_profile_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTabRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CreateTabRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string profile_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_name().data(), static_cast<int>(this->_internal_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CreateTabRequest.profile_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_profile_name(), target);
  }

  // optional string window_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CreateTabRequest.window_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_window_id(), target);
  }

  // optional uint32 tab_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tab_index(), target);
  }

  // optional string command = 4 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CreateTabRequest.command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command(), target);
  }

  // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_profile_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_profile_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CreateTabRequest)
  return target;
}

size_t CreateTabRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CreateTabRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
  total_size += 1UL * this->_internal_custom_profile_properties_size();
  for (const auto& msg : this->custom_profile_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string profile_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_name());
    }

    // optional string window_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
    }

    // optional string command = 4 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

    // optional uint32 tab_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tab_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTabRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTabRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTabRequest::GetClassData() const { return &_class_data_; }

void CreateTabRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateTabRequest *>(to)->MergeFrom(
      static_cast<const CreateTabRequest &>(from));
}


void CreateTabRequest::MergeFrom(const CreateTabRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CreateTabRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  custom_profile_properties_.MergeFrom(from.custom_profile_properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_profile_name(from._internal_profile_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_window_id(from._internal_window_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000008u) {
      tab_index_ = from.tab_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTabRequest::CopyFrom(const CreateTabRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CreateTabRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTabRequest::IsInitialized() const {
  return true;
}

void CreateTabRequest::InternalSwap(CreateTabRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_profile_properties_.InternalSwap(&other->custom_profile_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_name_, lhs_arena,
      &other->profile_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  swap(tab_index_, other->tab_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTabRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[165]);
}

// ===================================================================

class CreateTabResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateTabResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CreateTabResponse::CreateTabResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.CreateTabResponse)
}
CreateTabResponse::CreateTabResponse(const CreateTabResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_id()) {
    window_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_id(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&tab_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(tab_id_));
  // @@protoc_insertion_point(copy_constructor:iterm2.CreateTabResponse)
}

inline void CreateTabResponse::SharedCtor() {
window_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tab_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(tab_id_));
}

CreateTabResponse::~CreateTabResponse() {
  // @@protoc_insertion_point(destructor:iterm2.CreateTabResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTabResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  window_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTabResponse::ArenaDtor(void* object) {
  CreateTabResponse* _this = reinterpret_cast< CreateTabResponse* >(object);
  (void)_this;
}
void CreateTabResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTabResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTabResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.CreateTabResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      window_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tab_id_) -
        reinterpret_cast<char*>(&status_)) + sizeof(tab_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTabResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.CreateTabResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::CreateTabResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::CreateTabResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_window_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CreateTabResponse.window_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tab_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tab_id(&has_bits);
          tab_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.CreateTabResponse.session_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTabResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.CreateTabResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.CreateTabResponse.Status status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string window_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_window_id().data(), static_cast<int>(this->_internal_window_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CreateTabResponse.window_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_window_id(), target);
  }

  // optional int32 tab_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tab_id(), target);
  }

  // optional string session_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.CreateTabResponse.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.CreateTabResponse)
  return target;
}

size_t CreateTabResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.CreateTabResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string window_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_id());
    }

    // optional string session_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional .iterm2.CreateTabResponse.Status status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional int32 tab_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tab_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTabResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTabResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTabResponse::GetClassData() const { return &_class_data_; }

void CreateTabResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateTabResponse *>(to)->MergeFrom(
      static_cast<const CreateTabResponse &>(from));
}


void CreateTabResponse::MergeFrom(const CreateTabResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.CreateTabResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_window_id(from._internal_window_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      tab_id_ = from.tab_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTabResponse::CopyFrom(const CreateTabResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.CreateTabResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTabResponse::IsInitialized() const {
  return true;
}

void CreateTabResponse::InternalSwap(CreateTabResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_id_, lhs_arena,
      &other->window_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTabResponse, tab_id_)
      + sizeof(CreateTabResponse::tab_id_)
      - PROTOBUF_FIELD_OFFSET(CreateTabResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTabResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[166]);
}

// ===================================================================

class SplitPaneRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitPaneRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_split_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_before(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_profile_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SplitPaneRequest::SplitPaneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_profile_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SplitPaneRequest)
}
SplitPaneRequest::SplitPaneRequest(const SplitPaneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_profile_properties_(from.custom_profile_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_name()) {
    profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&split_direction_, &from.split_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&before_) -
    reinterpret_cast<char*>(&split_direction_)) + sizeof(before_));
  // @@protoc_insertion_point(copy_constructor:iterm2.SplitPaneRequest)
}

inline void SplitPaneRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&split_direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&before_) -
    reinterpret_cast<char*>(&split_direction_)) + sizeof(before_));
}

SplitPaneRequest::~SplitPaneRequest() {
  // @@protoc_insertion_point(destructor:iterm2.SplitPaneRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SplitPaneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SplitPaneRequest::ArenaDtor(void* object) {
  SplitPaneRequest* _this = reinterpret_cast< SplitPaneRequest* >(object);
  (void)_this;
}
void SplitPaneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitPaneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SplitPaneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SplitPaneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_profile_properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      profile_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&split_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&before_) -
        reinterpret_cast<char*>(&split_direction_)) + sizeof(before_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitPaneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SplitPaneRequest.session");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .iterm2.SplitPaneRequest.SplitDirection split_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SplitPaneRequest_SplitDirection_IsValid(val))) {
            _internal_set_split_direction(static_cast<::iterm2::SplitPaneRequest_SplitDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool before = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_before(&has_bits);
          before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string profile_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_profile_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SplitPaneRequest.profile_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_profile_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitPaneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SplitPaneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SplitPaneRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // optional .iterm2.SplitPaneRequest.SplitDirection split_direction = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_split_direction(), target);
  }

  // optional bool before = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_before(), target);
  }

  // optional string profile_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_name().data(), static_cast<int>(this->_internal_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SplitPaneRequest.profile_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_profile_name(), target);
  }

  // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_profile_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_profile_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SplitPaneRequest)
  return target;
}

size_t SplitPaneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SplitPaneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iterm2.ProfileProperty custom_profile_properties = 5;
  total_size += 1UL * this->_internal_custom_profile_properties_size();
  for (const auto& msg : this->custom_profile_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string session = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session());
    }

    // optional string profile_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_name());
    }

    // optional .iterm2.SplitPaneRequest.SplitDirection split_direction = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_split_direction());
    }

    // optional bool before = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitPaneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SplitPaneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitPaneRequest::GetClassData() const { return &_class_data_; }

void SplitPaneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SplitPaneRequest *>(to)->MergeFrom(
      static_cast<const SplitPaneRequest &>(from));
}


void SplitPaneRequest::MergeFrom(const SplitPaneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SplitPaneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  custom_profile_properties_.MergeFrom(from.custom_profile_properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session(from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_profile_name(from._internal_profile_name());
    }
    if (cached_has_bits & 0x00000004u) {
      split_direction_ = from.split_direction_;
    }
    if (cached_has_bits & 0x00000008u) {
      before_ = from.before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitPaneRequest::CopyFrom(const SplitPaneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SplitPaneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitPaneRequest::IsInitialized() const {
  return true;
}

void SplitPaneRequest::InternalSwap(SplitPaneRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_profile_properties_.InternalSwap(&other->custom_profile_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_name_, lhs_arena,
      &other->profile_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitPaneRequest, before_)
      + sizeof(SplitPaneRequest::before_)
      - PROTOBUF_FIELD_OFFSET(SplitPaneRequest, split_direction_)>(
          reinterpret_cast<char*>(&split_direction_),
          reinterpret_cast<char*>(&other->split_direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitPaneRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[167]);
}

// ===================================================================

class SplitPaneResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitPaneResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SplitPaneResponse::SplitPaneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  session_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:iterm2.SplitPaneResponse)
}
SplitPaneResponse::SplitPaneResponse(const SplitPaneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      session_id_(from.session_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:iterm2.SplitPaneResponse)
}

inline void SplitPaneResponse::SharedCtor() {
status_ = 0;
}

SplitPaneResponse::~SplitPaneResponse() {
  // @@protoc_insertion_point(destructor:iterm2.SplitPaneResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SplitPaneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SplitPaneResponse::ArenaDtor(void* object) {
  SplitPaneResponse* _this = reinterpret_cast< SplitPaneResponse* >(object);
  (void)_this;
}
void SplitPaneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitPaneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SplitPaneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iterm2.SplitPaneResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitPaneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .iterm2.SplitPaneResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::iterm2::SplitPaneResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::iterm2::SplitPaneResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_session_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iterm2.SplitPaneResponse.session_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitPaneResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iterm2.SplitPaneResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .iterm2.SplitPaneResponse.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated string session_id = 2;
  for (int i = 0, n = this->_internal_session_id_size(); i < n; i++) {
    const auto& s = this->_internal_session_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "iterm2.SplitPaneResponse.session_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iterm2.SplitPaneResponse)
  return target;
}

size_t SplitPaneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iterm2.SplitPaneResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string session_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(session_id_.size());
  for (int i = 0, n = session_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      session_id_.Get(i));
  }

  // optional .iterm2.SplitPaneResponse.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitPaneResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SplitPaneResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitPaneResponse::GetClassData() const { return &_class_data_; }

void SplitPaneResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SplitPaneResponse *>(to)->MergeFrom(
      static_cast<const SplitPaneResponse &>(from));
}


void SplitPaneResponse::MergeFrom(const SplitPaneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iterm2.SplitPaneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  session_id_.MergeFrom(from.session_id_);
  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitPaneResponse::CopyFrom(const SplitPaneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iterm2.SplitPaneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitPaneResponse::IsInitialized() const {
  return true;
}

void SplitPaneResponse::InternalSwap(SplitPaneResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.InternalSwap(&other->session_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitPaneResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_iterm_2dapi_2epb_getter, &descriptor_table_iterm_2dapi_2epb_once,
      file_level_metadata_iterm_2dapi_2epb[168]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace iterm2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iterm2::ClientOriginatedMessage* Arena::CreateMaybeMessage< ::iterm2::ClientOriginatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ClientOriginatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ServerOriginatedMessage* Arena::CreateMaybeMessage< ::iterm2::ServerOriginatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ServerOriginatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionRequest_Tab* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Tab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionRequest_Tab >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionRequest_Session* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionRequest_Session >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionRequest_Window* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Window >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionRequest_Window >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionRequest_App* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionRequest_App >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionRequest_Method* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionRequest_Method >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionRequest_Method >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionRequest* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionResponse_Error* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionResponse_Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionResponse_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionResponse_Success* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionResponse_Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionResponse_Success >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InvokeFunctionResponse* Arena::CreateMaybeMessage< ::iterm2::InvokeFunctionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InvokeFunctionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CloseRequest_CloseTabs* Arena::CreateMaybeMessage< ::iterm2::CloseRequest_CloseTabs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CloseRequest_CloseTabs >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CloseRequest_CloseSessions* Arena::CreateMaybeMessage< ::iterm2::CloseRequest_CloseSessions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CloseRequest_CloseSessions >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CloseRequest_CloseWindows* Arena::CreateMaybeMessage< ::iterm2::CloseRequest_CloseWindows >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CloseRequest_CloseWindows >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CloseRequest* Arena::CreateMaybeMessage< ::iterm2::CloseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CloseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CloseResponse* Arena::CreateMaybeMessage< ::iterm2::CloseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CloseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetBroadcastDomainsRequest* Arena::CreateMaybeMessage< ::iterm2::SetBroadcastDomainsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetBroadcastDomainsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetBroadcastDomainsResponse* Arena::CreateMaybeMessage< ::iterm2::SetBroadcastDomainsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetBroadcastDomainsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::StatusBarComponentRequest_OpenPopover* Arena::CreateMaybeMessage< ::iterm2::StatusBarComponentRequest_OpenPopover >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::StatusBarComponentRequest_OpenPopover >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::StatusBarComponentRequest* Arena::CreateMaybeMessage< ::iterm2::StatusBarComponentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::StatusBarComponentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::StatusBarComponentResponse* Arena::CreateMaybeMessage< ::iterm2::StatusBarComponentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::StatusBarComponentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::WindowedCoordRange* Arena::CreateMaybeMessage< ::iterm2::WindowedCoordRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::WindowedCoordRange >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SubSelection* Arena::CreateMaybeMessage< ::iterm2::SubSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SubSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Selection* Arena::CreateMaybeMessage< ::iterm2::Selection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Selection >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SelectionRequest_GetSelectionRequest* Arena::CreateMaybeMessage< ::iterm2::SelectionRequest_GetSelectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SelectionRequest_GetSelectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SelectionRequest_SetSelectionRequest* Arena::CreateMaybeMessage< ::iterm2::SelectionRequest_SetSelectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SelectionRequest_SetSelectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SelectionRequest* Arena::CreateMaybeMessage< ::iterm2::SelectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SelectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SelectionResponse_GetSelectionResponse* Arena::CreateMaybeMessage< ::iterm2::SelectionResponse_GetSelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SelectionResponse_GetSelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SelectionResponse_SetSelectionResponse* Arena::CreateMaybeMessage< ::iterm2::SelectionResponse_SetSelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SelectionResponse_SetSelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SelectionResponse* Arena::CreateMaybeMessage< ::iterm2::SelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetRequest_ListPresets* Arena::CreateMaybeMessage< ::iterm2::ColorPresetRequest_ListPresets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetRequest_ListPresets >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetRequest_GetPreset* Arena::CreateMaybeMessage< ::iterm2::ColorPresetRequest_GetPreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetRequest_GetPreset >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetRequest* Arena::CreateMaybeMessage< ::iterm2::ColorPresetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetResponse_ListPresets* Arena::CreateMaybeMessage< ::iterm2::ColorPresetResponse_ListPresets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetResponse_ListPresets >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetResponse_GetPreset_ColorSetting* Arena::CreateMaybeMessage< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetResponse_GetPreset_ColorSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetResponse_GetPreset* Arena::CreateMaybeMessage< ::iterm2::ColorPresetResponse_GetPreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetResponse_GetPreset >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ColorPresetResponse* Arena::CreateMaybeMessage< ::iterm2::ColorPresetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ColorPresetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesRequest_Request_SetPreference* Arena::CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_SetPreference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesRequest_Request_SetPreference >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesRequest_Request_GetPreference* Arena::CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_GetPreference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesRequest_Request_GetPreference >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesRequest_Request_SetDefaultProfile* Arena::CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_SetDefaultProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesRequest_Request_SetDefaultProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesRequest_Request_GetDefaultProfile* Arena::CreateMaybeMessage< ::iterm2::PreferencesRequest_Request_GetDefaultProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesRequest_Request_GetDefaultProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesRequest_Request* Arena::CreateMaybeMessage< ::iterm2::PreferencesRequest_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesRequest_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesRequest* Arena::CreateMaybeMessage< ::iterm2::PreferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse_Result_SetPreferenceResult* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_SetPreferenceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse_Result_SetPreferenceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse_Result_GetPreferenceResult* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_GetPreferenceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse_Result_GetPreferenceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse_Result_SetDefaultProfileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse_Result_UnrecognizedResult* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_UnrecognizedResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse_Result_UnrecognizedResult >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse_Result_GetDefaultProfileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse_Result* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PreferencesResponse* Arena::CreateMaybeMessage< ::iterm2::PreferencesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PreferencesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ReorderTabsRequest_Assignment* Arena::CreateMaybeMessage< ::iterm2::ReorderTabsRequest_Assignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ReorderTabsRequest_Assignment >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ReorderTabsRequest* Arena::CreateMaybeMessage< ::iterm2::ReorderTabsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ReorderTabsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ReorderTabsResponse* Arena::CreateMaybeMessage< ::iterm2::ReorderTabsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ReorderTabsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxRequest_ListConnections* Arena::CreateMaybeMessage< ::iterm2::TmuxRequest_ListConnections >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxRequest_ListConnections >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxRequest_SendCommand* Arena::CreateMaybeMessage< ::iterm2::TmuxRequest_SendCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxRequest_SendCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxRequest_SetWindowVisible* Arena::CreateMaybeMessage< ::iterm2::TmuxRequest_SetWindowVisible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxRequest_SetWindowVisible >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxRequest_CreateWindow* Arena::CreateMaybeMessage< ::iterm2::TmuxRequest_CreateWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxRequest_CreateWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxRequest* Arena::CreateMaybeMessage< ::iterm2::TmuxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxResponse_ListConnections_Connection* Arena::CreateMaybeMessage< ::iterm2::TmuxResponse_ListConnections_Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxResponse_ListConnections_Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxResponse_ListConnections* Arena::CreateMaybeMessage< ::iterm2::TmuxResponse_ListConnections >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxResponse_ListConnections >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxResponse_SendCommand* Arena::CreateMaybeMessage< ::iterm2::TmuxResponse_SendCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxResponse_SendCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxResponse_SetWindowVisible* Arena::CreateMaybeMessage< ::iterm2::TmuxResponse_SetWindowVisible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxResponse_SetWindowVisible >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxResponse_CreateWindow* Arena::CreateMaybeMessage< ::iterm2::TmuxResponse_CreateWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxResponse_CreateWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TmuxResponse* Arena::CreateMaybeMessage< ::iterm2::TmuxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TmuxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetBroadcastDomainsRequest* Arena::CreateMaybeMessage< ::iterm2::GetBroadcastDomainsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetBroadcastDomainsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::BroadcastDomain* Arena::CreateMaybeMessage< ::iterm2::BroadcastDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::BroadcastDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetBroadcastDomainsResponse* Arena::CreateMaybeMessage< ::iterm2::GetBroadcastDomainsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetBroadcastDomainsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetTabLayoutRequest* Arena::CreateMaybeMessage< ::iterm2::SetTabLayoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetTabLayoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetTabLayoutResponse* Arena::CreateMaybeMessage< ::iterm2::SetTabLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetTabLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::MenuItemRequest* Arena::CreateMaybeMessage< ::iterm2::MenuItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::MenuItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::MenuItemResponse* Arena::CreateMaybeMessage< ::iterm2::MenuItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::MenuItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RestartSessionRequest* Arena::CreateMaybeMessage< ::iterm2::RestartSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RestartSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RestartSessionResponse* Arena::CreateMaybeMessage< ::iterm2::RestartSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RestartSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ServerOriginatedRPCResultRequest* Arena::CreateMaybeMessage< ::iterm2::ServerOriginatedRPCResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ServerOriginatedRPCResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ServerOriginatedRPCResultResponse* Arena::CreateMaybeMessage< ::iterm2::ServerOriginatedRPCResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ServerOriginatedRPCResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListProfilesRequest* Arena::CreateMaybeMessage< ::iterm2::ListProfilesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListProfilesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListProfilesResponse_Profile* Arena::CreateMaybeMessage< ::iterm2::ListProfilesResponse_Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListProfilesResponse_Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListProfilesResponse* Arena::CreateMaybeMessage< ::iterm2::ListProfilesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListProfilesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::FocusRequest* Arena::CreateMaybeMessage< ::iterm2::FocusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::FocusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::FocusResponse* Arena::CreateMaybeMessage< ::iterm2::FocusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::FocusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SavedArrangementRequest* Arena::CreateMaybeMessage< ::iterm2::SavedArrangementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SavedArrangementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SavedArrangementResponse* Arena::CreateMaybeMessage< ::iterm2::SavedArrangementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SavedArrangementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::VariableRequest_Set* Arena::CreateMaybeMessage< ::iterm2::VariableRequest_Set >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::VariableRequest_Set >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::VariableRequest* Arena::CreateMaybeMessage< ::iterm2::VariableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::VariableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::VariableResponse* Arena::CreateMaybeMessage< ::iterm2::VariableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::VariableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ActivateRequest_App* Arena::CreateMaybeMessage< ::iterm2::ActivateRequest_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ActivateRequest_App >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ActivateRequest* Arena::CreateMaybeMessage< ::iterm2::ActivateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ActivateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ActivateResponse* Arena::CreateMaybeMessage< ::iterm2::ActivateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ActivateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InjectRequest* Arena::CreateMaybeMessage< ::iterm2::InjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::InjectResponse* Arena::CreateMaybeMessage< ::iterm2::InjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::InjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetPropertyRequest* Arena::CreateMaybeMessage< ::iterm2::GetPropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetPropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetPropertyResponse* Arena::CreateMaybeMessage< ::iterm2::GetPropertyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetPropertyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetPropertyRequest* Arena::CreateMaybeMessage< ::iterm2::SetPropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetPropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetPropertyResponse* Arena::CreateMaybeMessage< ::iterm2::SetPropertyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetPropertyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RegisterToolRequest* Arena::CreateMaybeMessage< ::iterm2::RegisterToolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RegisterToolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_RPCArgumentSignature* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_RPCArgumentSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_RPCArgument* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_RPCArgument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_RPCArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_SessionTitleAttributes* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_SessionTitleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_SessionTitleAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Knob >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes_Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_StatusBarComponentAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest_ContextMenuAttributes* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest_ContextMenuAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest_ContextMenuAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RPCRegistrationRequest* Arena::CreateMaybeMessage< ::iterm2::RPCRegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RPCRegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::RegisterToolResponse* Arena::CreateMaybeMessage< ::iterm2::RegisterToolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::RegisterToolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::KeystrokePattern* Arena::CreateMaybeMessage< ::iterm2::KeystrokePattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::KeystrokePattern >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::KeystrokeMonitorRequest* Arena::CreateMaybeMessage< ::iterm2::KeystrokeMonitorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::KeystrokeMonitorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::KeystrokeFilterRequest* Arena::CreateMaybeMessage< ::iterm2::KeystrokeFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::KeystrokeFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::VariableMonitorRequest* Arena::CreateMaybeMessage< ::iterm2::VariableMonitorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::VariableMonitorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ProfileChangeRequest* Arena::CreateMaybeMessage< ::iterm2::ProfileChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ProfileChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PromptMonitorRequest* Arena::CreateMaybeMessage< ::iterm2::PromptMonitorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PromptMonitorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::NotificationRequest* Arena::CreateMaybeMessage< ::iterm2::NotificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::NotificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::NotificationResponse* Arena::CreateMaybeMessage< ::iterm2::NotificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::NotificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Notification* Arena::CreateMaybeMessage< ::iterm2::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ProfileChangedNotification* Arena::CreateMaybeMessage< ::iterm2::ProfileChangedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ProfileChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::VariableChangedNotification* Arena::CreateMaybeMessage< ::iterm2::VariableChangedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::VariableChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::BroadcastDomainsChangedNotification* Arena::CreateMaybeMessage< ::iterm2::BroadcastDomainsChangedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::BroadcastDomainsChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ServerOriginatedRPC_RPCArgument* Arena::CreateMaybeMessage< ::iterm2::ServerOriginatedRPC_RPCArgument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ServerOriginatedRPC_RPCArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ServerOriginatedRPC* Arena::CreateMaybeMessage< ::iterm2::ServerOriginatedRPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ServerOriginatedRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ServerOriginatedRPCNotification* Arena::CreateMaybeMessage< ::iterm2::ServerOriginatedRPCNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ServerOriginatedRPCNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::KeystrokeNotification* Arena::CreateMaybeMessage< ::iterm2::KeystrokeNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::KeystrokeNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ScreenUpdateNotification* Arena::CreateMaybeMessage< ::iterm2::ScreenUpdateNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ScreenUpdateNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PromptNotificationPrompt* Arena::CreateMaybeMessage< ::iterm2::PromptNotificationPrompt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PromptNotificationPrompt >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PromptNotificationCommandStart* Arena::CreateMaybeMessage< ::iterm2::PromptNotificationCommandStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PromptNotificationCommandStart >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PromptNotificationCommandEnd* Arena::CreateMaybeMessage< ::iterm2::PromptNotificationCommandEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PromptNotificationCommandEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::PromptNotification* Arena::CreateMaybeMessage< ::iterm2::PromptNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::PromptNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::LocationChangeNotification* Arena::CreateMaybeMessage< ::iterm2::LocationChangeNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::LocationChangeNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CustomEscapeSequenceNotification* Arena::CreateMaybeMessage< ::iterm2::CustomEscapeSequenceNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CustomEscapeSequenceNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::NewSessionNotification* Arena::CreateMaybeMessage< ::iterm2::NewSessionNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::NewSessionNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::FocusChangedNotification_Window* Arena::CreateMaybeMessage< ::iterm2::FocusChangedNotification_Window >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::FocusChangedNotification_Window >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::FocusChangedNotification* Arena::CreateMaybeMessage< ::iterm2::FocusChangedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::FocusChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TerminateSessionNotification* Arena::CreateMaybeMessage< ::iterm2::TerminateSessionNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TerminateSessionNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::LayoutChangedNotification* Arena::CreateMaybeMessage< ::iterm2::LayoutChangedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::LayoutChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetBufferRequest* Arena::CreateMaybeMessage< ::iterm2::GetBufferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetBufferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetBufferResponse* Arena::CreateMaybeMessage< ::iterm2::GetBufferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetBufferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetPromptRequest* Arena::CreateMaybeMessage< ::iterm2::GetPromptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetPromptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetPromptResponse* Arena::CreateMaybeMessage< ::iterm2::GetPromptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetPromptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListPromptsRequest* Arena::CreateMaybeMessage< ::iterm2::ListPromptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListPromptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListPromptsResponse* Arena::CreateMaybeMessage< ::iterm2::ListPromptsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListPromptsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetProfilePropertyRequest* Arena::CreateMaybeMessage< ::iterm2::GetProfilePropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetProfilePropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ProfileProperty* Arena::CreateMaybeMessage< ::iterm2::ProfileProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ProfileProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::GetProfilePropertyResponse* Arena::CreateMaybeMessage< ::iterm2::GetProfilePropertyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::GetProfilePropertyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetProfilePropertyRequest_GuidList* Arena::CreateMaybeMessage< ::iterm2::SetProfilePropertyRequest_GuidList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetProfilePropertyRequest_GuidList >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetProfilePropertyRequest_Assignment* Arena::CreateMaybeMessage< ::iterm2::SetProfilePropertyRequest_Assignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetProfilePropertyRequest_Assignment >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetProfilePropertyRequest* Arena::CreateMaybeMessage< ::iterm2::SetProfilePropertyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetProfilePropertyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SetProfilePropertyResponse* Arena::CreateMaybeMessage< ::iterm2::SetProfilePropertyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SetProfilePropertyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TransactionRequest* Arena::CreateMaybeMessage< ::iterm2::TransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::TransactionResponse* Arena::CreateMaybeMessage< ::iterm2::TransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::TransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::LineRange* Arena::CreateMaybeMessage< ::iterm2::LineRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::LineRange >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Range* Arena::CreateMaybeMessage< ::iterm2::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CoordRange* Arena::CreateMaybeMessage< ::iterm2::CoordRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CoordRange >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Coord* Arena::CreateMaybeMessage< ::iterm2::Coord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Coord >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::LineContents* Arena::CreateMaybeMessage< ::iterm2::LineContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::LineContents >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CodePointsPerCell* Arena::CreateMaybeMessage< ::iterm2::CodePointsPerCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CodePointsPerCell >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListSessionsRequest* Arena::CreateMaybeMessage< ::iterm2::ListSessionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListSessionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SendTextRequest* Arena::CreateMaybeMessage< ::iterm2::SendTextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SendTextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SendTextResponse* Arena::CreateMaybeMessage< ::iterm2::SendTextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SendTextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Size* Arena::CreateMaybeMessage< ::iterm2::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Point* Arena::CreateMaybeMessage< ::iterm2::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::Frame* Arena::CreateMaybeMessage< ::iterm2::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SessionSummary* Arena::CreateMaybeMessage< ::iterm2::SessionSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SessionSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SplitTreeNode_SplitTreeLink* Arena::CreateMaybeMessage< ::iterm2::SplitTreeNode_SplitTreeLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SplitTreeNode_SplitTreeLink >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SplitTreeNode* Arena::CreateMaybeMessage< ::iterm2::SplitTreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SplitTreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListSessionsResponse_Window* Arena::CreateMaybeMessage< ::iterm2::ListSessionsResponse_Window >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListSessionsResponse_Window >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListSessionsResponse_Tab* Arena::CreateMaybeMessage< ::iterm2::ListSessionsResponse_Tab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListSessionsResponse_Tab >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::ListSessionsResponse* Arena::CreateMaybeMessage< ::iterm2::ListSessionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::ListSessionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CreateTabRequest* Arena::CreateMaybeMessage< ::iterm2::CreateTabRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CreateTabRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::CreateTabResponse* Arena::CreateMaybeMessage< ::iterm2::CreateTabResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::CreateTabResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SplitPaneRequest* Arena::CreateMaybeMessage< ::iterm2::SplitPaneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SplitPaneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iterm2::SplitPaneResponse* Arena::CreateMaybeMessage< ::iterm2::SplitPaneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iterm2::SplitPaneResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
